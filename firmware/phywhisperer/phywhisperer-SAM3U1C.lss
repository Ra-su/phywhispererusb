
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d3dc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d3dc  0008d3dc  0001d3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000e20  20000000  0008d3e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000690  20000e20  0008e204  00020e20  2**2
                  ALLOC
  4 .stack        00000400  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020e20  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020e49  2**0
                  CONTENTS, READONLY
  7 .debug_info   00027f72  00000000  00000000  00020e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000052df  00000000  00000000  00048e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    00008e1e  00000000  00000000  0004e0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001150  00000000  00000000  00056f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000f50  00000000  00000000  00058054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001b314  00000000  00000000  00058fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00019629  00000000  00000000  000742b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005a3aa  00000000  00000000  0008d8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00005948  00000000  00000000  000e7c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 04 08 20 61 3a 08 00 51 28 08 00 51 28 08 00     ... a:..Q(..Q(..
   80010:	51 28 08 00 51 28 08 00 51 28 08 00 00 00 00 00     Q(..Q(..Q(......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 51 28 08 00     ............Q(..
   80030:	51 28 08 00 00 00 00 00 51 28 08 00 51 28 08 00     Q(......Q(..Q(..
   80040:	51 28 08 00 51 28 08 00 51 28 08 00 51 28 08 00     Q(..Q(..Q(..Q(..
   80050:	51 28 08 00 51 28 08 00 51 28 08 00 51 28 08 00     Q(..Q(..Q(..Q(..
   80060:	51 28 08 00 51 28 08 00 49 30 08 00 61 30 08 00     Q(..Q(..I0..a0..
   80070:	51 28 08 00 51 28 08 00 51 28 08 00 51 28 08 00     Q(..Q(..Q(..Q(..
   80080:	51 28 08 00 51 28 08 00 51 28 08 00 51 28 08 00     Q(..Q(..Q(..Q(..
   80090:	51 28 08 00 51 28 08 00 51 28 08 00 51 28 08 00     Q(..Q(..Q(..Q(..
   800a0:	51 28 08 00 51 28 08 00 51 28 08 00 51 28 08 00     Q(..Q(..Q(..Q(..
   800b0:	51 28 08 00 51 44 08 00 51 28 08 00                 Q(..QD..Q(..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000e20 	.word	0x20000e20
   800d8:	00000000 	.word	0x00000000
   800dc:	0008d3e4 	.word	0x0008d3e4

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000e24 	.word	0x20000e24
   800f8:	0008d3e4 	.word	0x0008d3e4

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00083179 	.word	0x00083179
   80174:	000831e5 	.word	0x000831e5
   80178:	00083259 	.word	0x00083259
   8017c:	000832a9 	.word	0x000832a9

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	000831b1 	.word	0x000831b1
   801fc:	00083241 	.word	0x00083241
   80200:	000832f5 	.word	0x000832f5

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b06      	ldr	r3, [pc, #24]	; (802a0 <osc_wait_ready+0x2c>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	bf00      	nop
   80298:	3708      	adds	r7, #8
   8029a:	46bd      	mov	sp, r7
   8029c:	bd80      	pop	{r7, pc}
   8029e:	bf00      	nop
   802a0:	00080181 	.word	0x00080181

000802a4 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a4:	b580      	push	{r7, lr}
   802a6:	b086      	sub	sp, #24
   802a8:	af00      	add	r7, sp, #0
   802aa:	60f8      	str	r0, [r7, #12]
   802ac:	607a      	str	r2, [r7, #4]
   802ae:	603b      	str	r3, [r7, #0]
   802b0:	460b      	mov	r3, r1
   802b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b4:	687b      	ldr	r3, [r7, #4]
   802b6:	2b00      	cmp	r3, #0
   802b8:	d107      	bne.n	802ca <pll_config_init+0x26>
   802ba:	683b      	ldr	r3, [r7, #0]
   802bc:	2b00      	cmp	r3, #0
   802be:	d104      	bne.n	802ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802c0:	68fb      	ldr	r3, [r7, #12]
   802c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c6:	601a      	str	r2, [r3, #0]
   802c8:	e01a      	b.n	80300 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802ca:	7afb      	ldrb	r3, [r7, #11]
   802cc:	4618      	mov	r0, r3
   802ce:	4b0e      	ldr	r3, [pc, #56]	; (80308 <pll_config_init+0x64>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	687b      	ldr	r3, [r7, #4]
   802d6:	fbb2 f3f3 	udiv	r3, r2, r3
   802da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802dc:	697b      	ldr	r3, [r7, #20]
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	fb02 f303 	mul.w	r3, r2, r3
   802e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	3b01      	subs	r3, #1
   802ea:	041a      	lsls	r2, r3, #16
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <pll_config_init+0x68>)
   802ee:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f0:	687a      	ldr	r2, [r7, #4]
   802f2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802fa:	68fb      	ldr	r3, [r7, #12]
   802fc:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fe:	bf00      	nop
   80300:	bf00      	nop
   80302:	3718      	adds	r7, #24
   80304:	46bd      	mov	sp, r7
   80306:	bd80      	pop	{r7, pc}
   80308:	00080205 	.word	0x00080205
   8030c:	07ff0000 	.word	0x07ff0000

00080310 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80310:	b580      	push	{r7, lr}
   80312:	b082      	sub	sp, #8
   80314:	af00      	add	r7, sp, #0
   80316:	6078      	str	r0, [r7, #4]
   80318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	2b00      	cmp	r3, #0
   8031e:	d108      	bne.n	80332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <pll_enable+0x38>)
   80322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	681b      	ldr	r3, [r3, #0]
   80328:	4a08      	ldr	r2, [pc, #32]	; (8034c <pll_enable+0x3c>)
   8032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80330:	e005      	b.n	8033e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80332:	687b      	ldr	r3, [r7, #4]
   80334:	681b      	ldr	r3, [r3, #0]
   80336:	4a05      	ldr	r2, [pc, #20]	; (8034c <pll_enable+0x3c>)
   80338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8033c:	61d3      	str	r3, [r2, #28]
}
   8033e:	bf00      	nop
   80340:	3708      	adds	r7, #8
   80342:	46bd      	mov	sp, r7
   80344:	bd80      	pop	{r7, pc}
   80346:	bf00      	nop
   80348:	00083365 	.word	0x00083365
   8034c:	400e0400 	.word	0x400e0400

00080350 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80358:	687b      	ldr	r3, [r7, #4]
   8035a:	2b00      	cmp	r3, #0
   8035c:	d103      	bne.n	80366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <pll_is_locked+0x24>)
   80360:	4798      	blx	r3
   80362:	4603      	mov	r3, r0
   80364:	e002      	b.n	8036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <pll_is_locked+0x28>)
   80368:	4798      	blx	r3
   8036a:	4603      	mov	r3, r0
	}
}
   8036c:	4618      	mov	r0, r3
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	0008337d 	.word	0x0008337d
   80378:	000833b1 	.word	0x000833b1

0008037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80386:	79fb      	ldrb	r3, [r7, #7]
   80388:	3b03      	subs	r3, #3
   8038a:	2b04      	cmp	r3, #4
   8038c:	d808      	bhi.n	803a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038e:	79fb      	ldrb	r3, [r7, #7]
   80390:	4618      	mov	r0, r3
   80392:	4b06      	ldr	r3, [pc, #24]	; (803ac <pll_enable_source+0x30>)
   80394:	4798      	blx	r3
		osc_wait_ready(e_src);
   80396:	79fb      	ldrb	r3, [r7, #7]
   80398:	4618      	mov	r0, r3
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <pll_enable_source+0x34>)
   8039c:	4798      	blx	r3
		break;
   8039e:	e000      	b.n	803a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803a0:	bf00      	nop
	}
}
   803a2:	bf00      	nop
   803a4:	3708      	adds	r7, #8
   803a6:	46bd      	mov	sp, r7
   803a8:	bd80      	pop	{r7, pc}
   803aa:	bf00      	nop
   803ac:	000800fd 	.word	0x000800fd
   803b0:	00080275 	.word	0x00080275

000803b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b4:	b590      	push	{r4, r7, lr}
   803b6:	b085      	sub	sp, #20
   803b8:	af00      	add	r7, sp, #0
   803ba:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4b21      	ldr	r3, [pc, #132]	; (80444 <pll_enable_config_defaults+0x90>)
   803c0:	4798      	blx	r3
   803c2:	4603      	mov	r3, r0
   803c4:	2b00      	cmp	r3, #0
   803c6:	d139      	bne.n	8043c <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c8:	687b      	ldr	r3, [r7, #4]
   803ca:	2b00      	cmp	r3, #0
   803cc:	d003      	beq.n	803d6 <pll_enable_config_defaults+0x22>
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	2b01      	cmp	r3, #1
   803d2:	d015      	beq.n	80400 <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d4:	e024      	b.n	80420 <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d6:	2006      	movs	r0, #6
   803d8:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x94>)
   803da:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x98>)
   803e2:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e4:	bf00      	nop
   803e6:	4b1a      	ldr	r3, [pc, #104]	; (80450 <pll_enable_config_defaults+0x9c>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d0fa      	beq.n	803e6 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803f0:	f107 000c 	add.w	r0, r7, #12
   803f4:	2310      	movs	r3, #16
   803f6:	2201      	movs	r2, #1
   803f8:	2106      	movs	r1, #6
   803fa:	4c16      	ldr	r4, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa0>)
   803fc:	47a0      	blx	r4
		break;
   803fe:	e00f      	b.n	80420 <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80400:	4b15      	ldr	r3, [pc, #84]	; (80458 <pll_enable_config_defaults+0xa4>)
   80402:	4798      	blx	r3
   80404:	4603      	mov	r3, r0
   80406:	2b00      	cmp	r3, #0
   80408:	d102      	bne.n	80410 <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   8040a:	2006      	movs	r0, #6
   8040c:	4b0e      	ldr	r3, [pc, #56]	; (80448 <pll_enable_config_defaults+0x94>)
   8040e:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80410:	f107 000c 	add.w	r0, r7, #12
   80414:	2300      	movs	r3, #0
   80416:	2200      	movs	r2, #0
   80418:	2106      	movs	r1, #6
   8041a:	4c0e      	ldr	r4, [pc, #56]	; (80454 <pll_enable_config_defaults+0xa0>)
   8041c:	47a0      	blx	r4
		break;
   8041e:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80420:	f107 030c 	add.w	r3, r7, #12
   80424:	6879      	ldr	r1, [r7, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b0c      	ldr	r3, [pc, #48]	; (8045c <pll_enable_config_defaults+0xa8>)
   8042a:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   8042c:	bf00      	nop
   8042e:	6878      	ldr	r0, [r7, #4]
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <pll_enable_config_defaults+0x90>)
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	2b00      	cmp	r3, #0
   80438:	d0f9      	beq.n	8042e <pll_enable_config_defaults+0x7a>
   8043a:	e000      	b.n	8043e <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   8043c:	bf00      	nop
}
   8043e:	3714      	adds	r7, #20
   80440:	46bd      	mov	sp, r7
   80442:	bd90      	pop	{r4, r7, pc}
   80444:	00080351 	.word	0x00080351
   80448:	0008037d 	.word	0x0008037d
   8044c:	00083325 	.word	0x00083325
   80450:	0008330d 	.word	0x0008330d
   80454:	000802a5 	.word	0x000802a5
   80458:	000832dd 	.word	0x000832dd
   8045c:	00080311 	.word	0x00080311

00080460 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   80460:	b480      	push	{r7}
   80462:	b08d      	sub	sp, #52	; 0x34
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
   80468:	6039      	str	r1, [r7, #0]
   8046a:	687b      	ldr	r3, [r7, #4]
   8046c:	62fb      	str	r3, [r7, #44]	; 0x2c
   8046e:	683b      	ldr	r3, [r7, #0]
   80470:	62bb      	str	r3, [r7, #40]	; 0x28
   80472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80474:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80478:	095a      	lsrs	r2, r3, #5
   8047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8047c:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8047e:	6a3b      	ldr	r3, [r7, #32]
   80480:	f003 031f 	and.w	r3, r3, #31
   80484:	2101      	movs	r1, #1
   80486:	fa01 f303 	lsl.w	r3, r1, r3
   8048a:	61fa      	str	r2, [r7, #28]
   8048c:	61bb      	str	r3, [r7, #24]
   8048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80490:	617b      	str	r3, [r7, #20]
   80492:	69fb      	ldr	r3, [r7, #28]
   80494:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80496:	693b      	ldr	r3, [r7, #16]
   80498:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8049c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   804a0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   804a2:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   804a4:	697b      	ldr	r3, [r7, #20]
   804a6:	f003 0308 	and.w	r3, r3, #8
   804aa:	2b00      	cmp	r3, #0
   804ac:	d003      	beq.n	804b6 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   804ae:	68fb      	ldr	r3, [r7, #12]
   804b0:	69ba      	ldr	r2, [r7, #24]
   804b2:	665a      	str	r2, [r3, #100]	; 0x64
   804b4:	e002      	b.n	804bc <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   804b6:	68fb      	ldr	r3, [r7, #12]
   804b8:	69ba      	ldr	r2, [r7, #24]
   804ba:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804bc:	697b      	ldr	r3, [r7, #20]
   804be:	f003 0320 	and.w	r3, r3, #32
   804c2:	2b00      	cmp	r3, #0
   804c4:	d003      	beq.n	804ce <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   804c6:	68fb      	ldr	r3, [r7, #12]
   804c8:	69ba      	ldr	r2, [r7, #24]
   804ca:	651a      	str	r2, [r3, #80]	; 0x50
   804cc:	e002      	b.n	804d4 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   804ce:	68fb      	ldr	r3, [r7, #12]
   804d0:	69ba      	ldr	r2, [r7, #24]
   804d2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804d4:	697b      	ldr	r3, [r7, #20]
   804d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   804da:	2b00      	cmp	r3, #0
   804dc:	d003      	beq.n	804e6 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   804de:	68fb      	ldr	r3, [r7, #12]
   804e0:	69ba      	ldr	r2, [r7, #24]
   804e2:	621a      	str	r2, [r3, #32]
   804e4:	e002      	b.n	804ec <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   804e6:	68fb      	ldr	r3, [r7, #12]
   804e8:	69ba      	ldr	r2, [r7, #24]
   804ea:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   804ec:	697b      	ldr	r3, [r7, #20]
   804ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
   804f2:	2b00      	cmp	r3, #0
   804f4:	d004      	beq.n	80500 <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   804f6:	68fb      	ldr	r3, [r7, #12]
   804f8:	69ba      	ldr	r2, [r7, #24]
   804fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   804fe:	e003      	b.n	80508 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80500:	68fb      	ldr	r3, [r7, #12]
   80502:	69ba      	ldr	r2, [r7, #24]
   80504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80508:	697b      	ldr	r3, [r7, #20]
   8050a:	f003 0301 	and.w	r3, r3, #1
   8050e:	2b00      	cmp	r3, #0
   80510:	d006      	beq.n	80520 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   80512:	68fb      	ldr	r3, [r7, #12]
   80514:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80516:	69bb      	ldr	r3, [r7, #24]
   80518:	431a      	orrs	r2, r3
   8051a:	68fb      	ldr	r3, [r7, #12]
   8051c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
	}
#endif
}
   8051e:	e006      	b.n	8052e <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   80520:	68fb      	ldr	r3, [r7, #12]
   80522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80524:	69bb      	ldr	r3, [r7, #24]
   80526:	43db      	mvns	r3, r3
   80528:	401a      	ands	r2, r3
   8052a:	68fb      	ldr	r3, [r7, #12]
   8052c:	671a      	str	r2, [r3, #112]	; 0x70
}
   8052e:	bf00      	nop
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
			arch_ioport_pin_to_mask(pin), mode);
}
   80530:	bf00      	nop
	arch_ioport_set_pin_mode(pin, mode);
}
   80532:	bf00      	nop
   80534:	3734      	adds	r7, #52	; 0x34
   80536:	46bd      	mov	sp, r7
   80538:	bc80      	pop	{r7}
   8053a:	4770      	bx	lr

0008053c <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   8053c:	b580      	push	{r7, lr}
   8053e:	b082      	sub	sp, #8
   80540:	af00      	add	r7, sp, #0
   80542:	4603      	mov	r3, r0
   80544:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80546:	b672      	cpsid	i
}
   80548:	bf00      	nop
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8054a:	f3bf 8f5f 	dmb	sy
}
   8054e:	bf00      	nop
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80550:	4b05      	ldr	r3, [pc, #20]	; (80568 <sleepmgr_sleep+0x2c>)
   80552:	2200      	movs	r2, #0
   80554:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   80556:	79fb      	ldrb	r3, [r7, #7]
   80558:	4618      	mov	r0, r3
   8055a:	4b04      	ldr	r3, [pc, #16]	; (8056c <sleepmgr_sleep+0x30>)
   8055c:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   8055e:	bf00      	nop
   80560:	3708      	adds	r7, #8
   80562:	46bd      	mov	sp, r7
   80564:	bd80      	pop	{r7, pc}
   80566:	bf00      	nop
   80568:	200003ca 	.word	0x200003ca
   8056c:	00083561 	.word	0x00083561

00080570 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80570:	b480      	push	{r7}
   80572:	b083      	sub	sp, #12
   80574:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80576:	2300      	movs	r3, #0
   80578:	71fb      	strb	r3, [r7, #7]
   8057a:	e006      	b.n	8058a <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   8057c:	79fb      	ldrb	r3, [r7, #7]
   8057e:	4a08      	ldr	r2, [pc, #32]	; (805a0 <sleepmgr_init+0x30>)
   80580:	2100      	movs	r1, #0
   80582:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80584:	79fb      	ldrb	r3, [r7, #7]
   80586:	3301      	adds	r3, #1
   80588:	71fb      	strb	r3, [r7, #7]
   8058a:	79fb      	ldrb	r3, [r7, #7]
   8058c:	2b04      	cmp	r3, #4
   8058e:	d9f5      	bls.n	8057c <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80590:	4b03      	ldr	r3, [pc, #12]	; (805a0 <sleepmgr_init+0x30>)
   80592:	2201      	movs	r2, #1
   80594:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80596:	bf00      	nop
   80598:	370c      	adds	r7, #12
   8059a:	46bd      	mov	sp, r7
   8059c:	bc80      	pop	{r7}
   8059e:	4770      	bx	lr
   805a0:	20001460 	.word	0x20001460

000805a4 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   805a4:	b480      	push	{r7}
   805a6:	b083      	sub	sp, #12
   805a8:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   805aa:	2300      	movs	r3, #0
   805ac:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   805ae:	4b09      	ldr	r3, [pc, #36]	; (805d4 <sleepmgr_get_sleep_mode+0x30>)
   805b0:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   805b2:	e005      	b.n	805c0 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   805b4:	683b      	ldr	r3, [r7, #0]
   805b6:	3301      	adds	r3, #1
   805b8:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   805ba:	79fb      	ldrb	r3, [r7, #7]
   805bc:	3301      	adds	r3, #1
   805be:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   805c0:	683b      	ldr	r3, [r7, #0]
   805c2:	781b      	ldrb	r3, [r3, #0]
   805c4:	2b00      	cmp	r3, #0
   805c6:	d0f5      	beq.n	805b4 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   805c8:	79fb      	ldrb	r3, [r7, #7]
}
   805ca:	4618      	mov	r0, r3
   805cc:	370c      	adds	r7, #12
   805ce:	46bd      	mov	sp, r7
   805d0:	bc80      	pop	{r7}
   805d2:	4770      	bx	lr
   805d4:	20001460 	.word	0x20001460

000805d8 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   805d8:	b580      	push	{r7, lr}
   805da:	b082      	sub	sp, #8
   805dc:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   805de:	4b0b      	ldr	r3, [pc, #44]	; (8060c <sleepmgr_enter_sleep+0x34>)
   805e0:	4798      	blx	r3
   805e2:	4603      	mov	r3, r0
   805e4:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   805e6:	79fb      	ldrb	r3, [r7, #7]
   805e8:	2b00      	cmp	r3, #0
   805ea:	d108      	bne.n	805fe <sleepmgr_enter_sleep+0x26>
		cpu_irq_enable();
   805ec:	4b08      	ldr	r3, [pc, #32]	; (80610 <sleepmgr_enter_sleep+0x38>)
   805ee:	2201      	movs	r2, #1
   805f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   805f2:	f3bf 8f5f 	dmb	sy
}
   805f6:	bf00      	nop
  __ASM volatile ("cpsie i");
   805f8:	b662      	cpsie	i
}
   805fa:	bf00      	nop
		return;
   805fc:	e003      	b.n	80606 <sleepmgr_enter_sleep+0x2e>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   805fe:	79fb      	ldrb	r3, [r7, #7]
   80600:	4618      	mov	r0, r3
   80602:	4b04      	ldr	r3, [pc, #16]	; (80614 <sleepmgr_enter_sleep+0x3c>)
   80604:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80606:	3708      	adds	r7, #8
   80608:	46bd      	mov	sp, r7
   8060a:	bd80      	pop	{r7, pc}
   8060c:	000805a5 	.word	0x000805a5
   80610:	200003ca 	.word	0x200003ca
   80614:	0008053d 	.word	0x0008053d

00080618 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80618:	b480      	push	{r7}
   8061a:	b083      	sub	sp, #12
   8061c:	af00      	add	r7, sp, #0
   8061e:	6078      	str	r0, [r7, #4]
   80620:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   80622:	687b      	ldr	r3, [r7, #4]
   80624:	2200      	movs	r2, #0
   80626:	601a      	str	r2, [r3, #0]
}
   80628:	bf00      	nop
   8062a:	370c      	adds	r7, #12
   8062c:	46bd      	mov	sp, r7
   8062e:	bc80      	pop	{r7}
   80630:	4770      	bx	lr
   80632:	0000      	movs	r0, r0

00080634 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80634:	b480      	push	{r7}
   80636:	b083      	sub	sp, #12
   80638:	af00      	add	r7, sp, #0
   8063a:	6078      	str	r0, [r7, #4]
   8063c:	460b      	mov	r3, r1
   8063e:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80640:	687b      	ldr	r3, [r7, #4]
   80642:	681b      	ldr	r3, [r3, #0]
   80644:	f023 0207 	bic.w	r2, r3, #7
   80648:	687b      	ldr	r3, [r7, #4]
   8064a:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   8064c:	78fb      	ldrb	r3, [r7, #3]
   8064e:	2b0a      	cmp	r3, #10
   80650:	d839      	bhi.n	806c6 <genclk_config_set_source+0x92>
   80652:	a201      	add	r2, pc, #4	; (adr r2, 80658 <genclk_config_set_source+0x24>)
   80654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80658:	00080685 	.word	0x00080685
   8065c:	00080685 	.word	0x00080685
   80660:	00080685 	.word	0x00080685
   80664:	0008068f 	.word	0x0008068f
   80668:	0008068f 	.word	0x0008068f
   8066c:	0008068f 	.word	0x0008068f
   80670:	0008068f 	.word	0x0008068f
   80674:	0008068f 	.word	0x0008068f
   80678:	0008069d 	.word	0x0008069d
   8067c:	000806ab 	.word	0x000806ab
   80680:	000806b9 	.word	0x000806b9
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   80684:	687b      	ldr	r3, [r7, #4]
   80686:	681a      	ldr	r2, [r3, #0]
   80688:	687b      	ldr	r3, [r7, #4]
   8068a:	601a      	str	r2, [r3, #0]
		break;
   8068c:	e01b      	b.n	806c6 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   8068e:	687b      	ldr	r3, [r7, #4]
   80690:	681b      	ldr	r3, [r3, #0]
   80692:	f043 0201 	orr.w	r2, r3, #1
   80696:	687b      	ldr	r3, [r7, #4]
   80698:	601a      	str	r2, [r3, #0]
		break;
   8069a:	e014      	b.n	806c6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   8069c:	687b      	ldr	r3, [r7, #4]
   8069e:	681b      	ldr	r3, [r3, #0]
   806a0:	f043 0202 	orr.w	r2, r3, #2
   806a4:	687b      	ldr	r3, [r7, #4]
   806a6:	601a      	str	r2, [r3, #0]
		break;
   806a8:	e00d      	b.n	806c6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   806aa:	687b      	ldr	r3, [r7, #4]
   806ac:	681b      	ldr	r3, [r3, #0]
   806ae:	f043 0203 	orr.w	r2, r3, #3
   806b2:	687b      	ldr	r3, [r7, #4]
   806b4:	601a      	str	r2, [r3, #0]
		break;
   806b6:	e006      	b.n	806c6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   806b8:	687b      	ldr	r3, [r7, #4]
   806ba:	681b      	ldr	r3, [r3, #0]
   806bc:	f043 0204 	orr.w	r2, r3, #4
   806c0:	687b      	ldr	r3, [r7, #4]
   806c2:	601a      	str	r2, [r3, #0]
		break;
   806c4:	bf00      	nop
	}
}
   806c6:	bf00      	nop
   806c8:	370c      	adds	r7, #12
   806ca:	46bd      	mov	sp, r7
   806cc:	bc80      	pop	{r7}
   806ce:	4770      	bx	lr

000806d0 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   806d0:	b480      	push	{r7}
   806d2:	b083      	sub	sp, #12
   806d4:	af00      	add	r7, sp, #0
   806d6:	6078      	str	r0, [r7, #4]
   806d8:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   806da:	687b      	ldr	r3, [r7, #4]
   806dc:	681b      	ldr	r3, [r3, #0]
   806de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   806e2:	687b      	ldr	r3, [r7, #4]
   806e4:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   806e6:	687b      	ldr	r3, [r7, #4]
   806e8:	681a      	ldr	r2, [r3, #0]
   806ea:	683b      	ldr	r3, [r7, #0]
   806ec:	431a      	orrs	r2, r3
   806ee:	687b      	ldr	r3, [r7, #4]
   806f0:	601a      	str	r2, [r3, #0]
}
   806f2:	bf00      	nop
   806f4:	370c      	adds	r7, #12
   806f6:	46bd      	mov	sp, r7
   806f8:	bc80      	pop	{r7}
   806fa:	4770      	bx	lr

000806fc <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   806fc:	b580      	push	{r7, lr}
   806fe:	b082      	sub	sp, #8
   80700:	af00      	add	r7, sp, #0
   80702:	6078      	str	r0, [r7, #4]
   80704:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80706:	4907      	ldr	r1, [pc, #28]	; (80724 <genclk_enable+0x28>)
   80708:	687b      	ldr	r3, [r7, #4]
   8070a:	681a      	ldr	r2, [r3, #0]
   8070c:	683b      	ldr	r3, [r7, #0]
   8070e:	3310      	adds	r3, #16
   80710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80714:	6838      	ldr	r0, [r7, #0]
   80716:	4b04      	ldr	r3, [pc, #16]	; (80728 <genclk_enable+0x2c>)
   80718:	4798      	blx	r3
}
   8071a:	bf00      	nop
   8071c:	3708      	adds	r7, #8
   8071e:	46bd      	mov	sp, r7
   80720:	bd80      	pop	{r7, pc}
   80722:	bf00      	nop
   80724:	400e0400 	.word	0x400e0400
   80728:	00083461 	.word	0x00083461

0008072c <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   8072c:	b580      	push	{r7, lr}
   8072e:	b082      	sub	sp, #8
   80730:	af00      	add	r7, sp, #0
   80732:	4603      	mov	r3, r0
   80734:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80736:	79fb      	ldrb	r3, [r7, #7]
   80738:	2b0a      	cmp	r3, #10
   8073a:	f200 80a2 	bhi.w	80882 <genclk_enable_source+0x156>
   8073e:	a201      	add	r2, pc, #4	; (adr r2, 80744 <genclk_enable_source+0x18>)
   80740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80744:	00080771 	.word	0x00080771
   80748:	00080793 	.word	0x00080793
   8074c:	000807b3 	.word	0x000807b3
   80750:	000807d3 	.word	0x000807d3
   80754:	000807f3 	.word	0x000807f3
   80758:	00080813 	.word	0x00080813
   8075c:	00080833 	.word	0x00080833
   80760:	00080853 	.word	0x00080853
   80764:	00080873 	.word	0x00080873
   80768:	0008087b 	.word	0x0008087b
   8076c:	00080883 	.word	0x00080883
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80770:	2000      	movs	r0, #0
   80772:	4b4e      	ldr	r3, [pc, #312]	; (808ac <genclk_enable_source+0x180>)
   80774:	4798      	blx	r3
   80776:	4603      	mov	r3, r0
   80778:	f083 0301 	eor.w	r3, r3, #1
   8077c:	b2db      	uxtb	r3, r3
   8077e:	2b00      	cmp	r3, #0
   80780:	f000 8081 	beq.w	80886 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   80784:	2000      	movs	r0, #0
   80786:	4b4a      	ldr	r3, [pc, #296]	; (808b0 <genclk_enable_source+0x184>)
   80788:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   8078a:	2000      	movs	r0, #0
   8078c:	4b49      	ldr	r3, [pc, #292]	; (808b4 <genclk_enable_source+0x188>)
   8078e:	4798      	blx	r3
		}
		break;
   80790:	e079      	b.n	80886 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   80792:	2001      	movs	r0, #1
   80794:	4b45      	ldr	r3, [pc, #276]	; (808ac <genclk_enable_source+0x180>)
   80796:	4798      	blx	r3
   80798:	4603      	mov	r3, r0
   8079a:	f083 0301 	eor.w	r3, r3, #1
   8079e:	b2db      	uxtb	r3, r3
   807a0:	2b00      	cmp	r3, #0
   807a2:	d072      	beq.n	8088a <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   807a4:	2001      	movs	r0, #1
   807a6:	4b42      	ldr	r3, [pc, #264]	; (808b0 <genclk_enable_source+0x184>)
   807a8:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   807aa:	2001      	movs	r0, #1
   807ac:	4b41      	ldr	r3, [pc, #260]	; (808b4 <genclk_enable_source+0x188>)
   807ae:	4798      	blx	r3
		}
		break;
   807b0:	e06b      	b.n	8088a <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   807b2:	2002      	movs	r0, #2
   807b4:	4b3d      	ldr	r3, [pc, #244]	; (808ac <genclk_enable_source+0x180>)
   807b6:	4798      	blx	r3
   807b8:	4603      	mov	r3, r0
   807ba:	f083 0301 	eor.w	r3, r3, #1
   807be:	b2db      	uxtb	r3, r3
   807c0:	2b00      	cmp	r3, #0
   807c2:	d064      	beq.n	8088e <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   807c4:	2002      	movs	r0, #2
   807c6:	4b3a      	ldr	r3, [pc, #232]	; (808b0 <genclk_enable_source+0x184>)
   807c8:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   807ca:	2002      	movs	r0, #2
   807cc:	4b39      	ldr	r3, [pc, #228]	; (808b4 <genclk_enable_source+0x188>)
   807ce:	4798      	blx	r3
		}
		break;
   807d0:	e05d      	b.n	8088e <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   807d2:	2003      	movs	r0, #3
   807d4:	4b35      	ldr	r3, [pc, #212]	; (808ac <genclk_enable_source+0x180>)
   807d6:	4798      	blx	r3
   807d8:	4603      	mov	r3, r0
   807da:	f083 0301 	eor.w	r3, r3, #1
   807de:	b2db      	uxtb	r3, r3
   807e0:	2b00      	cmp	r3, #0
   807e2:	d056      	beq.n	80892 <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   807e4:	2003      	movs	r0, #3
   807e6:	4b32      	ldr	r3, [pc, #200]	; (808b0 <genclk_enable_source+0x184>)
   807e8:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   807ea:	2003      	movs	r0, #3
   807ec:	4b31      	ldr	r3, [pc, #196]	; (808b4 <genclk_enable_source+0x188>)
   807ee:	4798      	blx	r3
		}
		break;
   807f0:	e04f      	b.n	80892 <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   807f2:	2004      	movs	r0, #4
   807f4:	4b2d      	ldr	r3, [pc, #180]	; (808ac <genclk_enable_source+0x180>)
   807f6:	4798      	blx	r3
   807f8:	4603      	mov	r3, r0
   807fa:	f083 0301 	eor.w	r3, r3, #1
   807fe:	b2db      	uxtb	r3, r3
   80800:	2b00      	cmp	r3, #0
   80802:	d048      	beq.n	80896 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80804:	2004      	movs	r0, #4
   80806:	4b2a      	ldr	r3, [pc, #168]	; (808b0 <genclk_enable_source+0x184>)
   80808:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   8080a:	2004      	movs	r0, #4
   8080c:	4b29      	ldr	r3, [pc, #164]	; (808b4 <genclk_enable_source+0x188>)
   8080e:	4798      	blx	r3
		}
		break;
   80810:	e041      	b.n	80896 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   80812:	2005      	movs	r0, #5
   80814:	4b25      	ldr	r3, [pc, #148]	; (808ac <genclk_enable_source+0x180>)
   80816:	4798      	blx	r3
   80818:	4603      	mov	r3, r0
   8081a:	f083 0301 	eor.w	r3, r3, #1
   8081e:	b2db      	uxtb	r3, r3
   80820:	2b00      	cmp	r3, #0
   80822:	d03a      	beq.n	8089a <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80824:	2005      	movs	r0, #5
   80826:	4b22      	ldr	r3, [pc, #136]	; (808b0 <genclk_enable_source+0x184>)
   80828:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   8082a:	2005      	movs	r0, #5
   8082c:	4b21      	ldr	r3, [pc, #132]	; (808b4 <genclk_enable_source+0x188>)
   8082e:	4798      	blx	r3
		}
		break;
   80830:	e033      	b.n	8089a <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   80832:	2006      	movs	r0, #6
   80834:	4b1d      	ldr	r3, [pc, #116]	; (808ac <genclk_enable_source+0x180>)
   80836:	4798      	blx	r3
   80838:	4603      	mov	r3, r0
   8083a:	f083 0301 	eor.w	r3, r3, #1
   8083e:	b2db      	uxtb	r3, r3
   80840:	2b00      	cmp	r3, #0
   80842:	d02c      	beq.n	8089e <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80844:	2006      	movs	r0, #6
   80846:	4b1a      	ldr	r3, [pc, #104]	; (808b0 <genclk_enable_source+0x184>)
   80848:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   8084a:	2006      	movs	r0, #6
   8084c:	4b19      	ldr	r3, [pc, #100]	; (808b4 <genclk_enable_source+0x188>)
   8084e:	4798      	blx	r3
		}
		break;
   80850:	e025      	b.n	8089e <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   80852:	2007      	movs	r0, #7
   80854:	4b15      	ldr	r3, [pc, #84]	; (808ac <genclk_enable_source+0x180>)
   80856:	4798      	blx	r3
   80858:	4603      	mov	r3, r0
   8085a:	f083 0301 	eor.w	r3, r3, #1
   8085e:	b2db      	uxtb	r3, r3
   80860:	2b00      	cmp	r3, #0
   80862:	d01e      	beq.n	808a2 <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80864:	2007      	movs	r0, #7
   80866:	4b12      	ldr	r3, [pc, #72]	; (808b0 <genclk_enable_source+0x184>)
   80868:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   8086a:	2007      	movs	r0, #7
   8086c:	4b11      	ldr	r3, [pc, #68]	; (808b4 <genclk_enable_source+0x188>)
   8086e:	4798      	blx	r3
		}
		break;
   80870:	e017      	b.n	808a2 <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   80872:	2000      	movs	r0, #0
   80874:	4b10      	ldr	r3, [pc, #64]	; (808b8 <genclk_enable_source+0x18c>)
   80876:	4798      	blx	r3
		break;
   80878:	e014      	b.n	808a4 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   8087a:	2001      	movs	r0, #1
   8087c:	4b0e      	ldr	r3, [pc, #56]	; (808b8 <genclk_enable_source+0x18c>)
   8087e:	4798      	blx	r3
		break;
   80880:	e010      	b.n	808a4 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   80882:	bf00      	nop
   80884:	e00e      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   80886:	bf00      	nop
   80888:	e00c      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8088a:	bf00      	nop
   8088c:	e00a      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8088e:	bf00      	nop
   80890:	e008      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   80892:	bf00      	nop
   80894:	e006      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   80896:	bf00      	nop
   80898:	e004      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8089a:	bf00      	nop
   8089c:	e002      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8089e:	bf00      	nop
   808a0:	e000      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   808a2:	bf00      	nop
	}
}
   808a4:	bf00      	nop
   808a6:	3708      	adds	r7, #8
   808a8:	46bd      	mov	sp, r7
   808aa:	bd80      	pop	{r7, pc}
   808ac:	00080181 	.word	0x00080181
   808b0:	000800fd 	.word	0x000800fd
   808b4:	00080275 	.word	0x00080275
   808b8:	000803b5 	.word	0x000803b5

000808bc <phywhisperer_no_pwr>:

//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";

void phywhisperer_no_pwr(void)
{
   808bc:	b480      	push	{r7}
   808be:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808c0:	4b05      	ldr	r3, [pc, #20]	; (808d8 <phywhisperer_no_pwr+0x1c>)
   808c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808c6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808c8:	4b03      	ldr	r3, [pc, #12]	; (808d8 <phywhisperer_no_pwr+0x1c>)
   808ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808ce:	635a      	str	r2, [r3, #52]	; 0x34
}
   808d0:	bf00      	nop
   808d2:	46bd      	mov	sp, r7
   808d4:	bc80      	pop	{r7}
   808d6:	4770      	bx	lr
   808d8:	400e0c00 	.word	0x400e0c00

000808dc <phywhisperer_5V_pwr>:

void phywhisperer_5V_pwr(void)
{
   808dc:	b480      	push	{r7}
   808de:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808e0:	4b05      	ldr	r3, [pc, #20]	; (808f8 <phywhisperer_5V_pwr+0x1c>)
   808e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808e6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   808e8:	4b03      	ldr	r3, [pc, #12]	; (808f8 <phywhisperer_5V_pwr+0x1c>)
   808ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808ee:	631a      	str	r2, [r3, #48]	; 0x30
}
   808f0:	bf00      	nop
   808f2:	46bd      	mov	sp, r7
   808f4:	bc80      	pop	{r7}
   808f6:	4770      	bx	lr
   808f8:	400e0c00 	.word	0x400e0c00

000808fc <phywhisperer_host_pwr>:

void phywhisperer_host_pwr(void)
{
   808fc:	b480      	push	{r7}
   808fe:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   80900:	4b05      	ldr	r3, [pc, #20]	; (80918 <phywhisperer_host_pwr+0x1c>)
   80902:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80906:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   80908:	4b03      	ldr	r3, [pc, #12]	; (80918 <phywhisperer_host_pwr+0x1c>)
   8090a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8090e:	631a      	str	r2, [r3, #48]	; 0x30
}
   80910:	bf00      	nop
   80912:	46bd      	mov	sp, r7
   80914:	bc80      	pop	{r7}
   80916:	4770      	bx	lr
   80918:	400e0c00 	.word	0x400e0c00

0008091c <pwr_st_from_io>:
        phywhisperer_host_pwr();
    }
}

uint8_t pwr_st_from_io(void)
{
   8091c:	b480      	push	{r7}
   8091e:	af00      	add	r7, sp, #0
    if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80920:	4b17      	ldr	r3, [pc, #92]	; (80980 <pwr_st_from_io+0x64>)
   80922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80928:	2b00      	cmp	r3, #0
   8092a:	d107      	bne.n	8093c <pwr_st_from_io+0x20>
   8092c:	4b14      	ldr	r3, [pc, #80]	; (80980 <pwr_st_from_io+0x64>)
   8092e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80934:	2b00      	cmp	r3, #0
   80936:	d101      	bne.n	8093c <pwr_st_from_io+0x20>
        //USB off
        return 0;
   80938:	2300      	movs	r3, #0
   8093a:	e01c      	b.n	80976 <pwr_st_from_io+0x5a>
    } else if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && (PIOA->PIO_ODSR & (1 << F_VB5V))) {
   8093c:	4b10      	ldr	r3, [pc, #64]	; (80980 <pwr_st_from_io+0x64>)
   8093e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80944:	2b00      	cmp	r3, #0
   80946:	d107      	bne.n	80958 <pwr_st_from_io+0x3c>
   80948:	4b0d      	ldr	r3, [pc, #52]	; (80980 <pwr_st_from_io+0x64>)
   8094a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8094c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80950:	2b00      	cmp	r3, #0
   80952:	d001      	beq.n	80958 <pwr_st_from_io+0x3c>
        //Host power
        return 1;
   80954:	2301      	movs	r3, #1
   80956:	e00e      	b.n	80976 <pwr_st_from_io+0x5a>
    } else if ((PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80958:	4b09      	ldr	r3, [pc, #36]	; (80980 <pwr_st_from_io+0x64>)
   8095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8095c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80960:	2b00      	cmp	r3, #0
   80962:	d007      	beq.n	80974 <pwr_st_from_io+0x58>
   80964:	4b06      	ldr	r3, [pc, #24]	; (80980 <pwr_st_from_io+0x64>)
   80966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   8096c:	2b00      	cmp	r3, #0
   8096e:	d101      	bne.n	80974 <pwr_st_from_io+0x58>
        //Sniffer power
        return 2;
   80970:	2302      	movs	r3, #2
   80972:	e000      	b.n	80976 <pwr_st_from_io+0x5a>
    } else {
        //Everything's on...
        return 0xFF;
   80974:	23ff      	movs	r3, #255	; 0xff
    }

}
   80976:	4618      	mov	r0, r3
   80978:	46bd      	mov	sp, r7
   8097a:	bc80      	pop	{r7}
   8097c:	4770      	bx	lr
   8097e:	bf00      	nop
   80980:	400e0c00 	.word	0x400e0c00

00080984 <phywhisperer_setup_pins>:

void phywhisperer_setup_pins(void)
{
   80984:	b580      	push	{r7, lr}
   80986:	af00      	add	r7, sp, #0
    board_init();
   80988:	4b3a      	ldr	r3, [pc, #232]	; (80a74 <phywhisperer_setup_pins+0xf0>)
   8098a:	4798      	blx	r3
    ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   8098c:	2108      	movs	r1, #8
   8098e:	2018      	movs	r0, #24
   80990:	4b39      	ldr	r3, [pc, #228]	; (80a78 <phywhisperer_setup_pins+0xf4>)
   80992:	4798      	blx	r3
    PIOA->PIO_ODR = (1 << BUTTON_IN);
   80994:	4b39      	ldr	r3, [pc, #228]	; (80a7c <phywhisperer_setup_pins+0xf8>)
   80996:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8099a:	615a      	str	r2, [r3, #20]
    PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   8099c:	4b37      	ldr	r3, [pc, #220]	; (80a7c <phywhisperer_setup_pins+0xf8>)
   8099e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   809a2:	665a      	str	r2, [r3, #100]	; 0x64
    PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   809a4:	4b35      	ldr	r3, [pc, #212]	; (80a7c <phywhisperer_setup_pins+0xf8>)
   809a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   809aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
   809ae:	4b33      	ldr	r3, [pc, #204]	; (80a7c <phywhisperer_setup_pins+0xf8>)
   809b0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   809b4:	611a      	str	r2, [r3, #16]

    phywhisperer_host_pwr();
   809b6:	4b32      	ldr	r3, [pc, #200]	; (80a80 <phywhisperer_setup_pins+0xfc>)
   809b8:	4798      	blx	r3
    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   809ba:	4b32      	ldr	r3, [pc, #200]	; (80a84 <phywhisperer_setup_pins+0x100>)
   809bc:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   809be:	2009      	movs	r0, #9
   809c0:	4b31      	ldr	r3, [pc, #196]	; (80a88 <phywhisperer_setup_pins+0x104>)
   809c2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   809c4:	4931      	ldr	r1, [pc, #196]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809c6:	2029      	movs	r0, #41	; 0x29
   809c8:	4b31      	ldr	r3, [pc, #196]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809ca:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   809cc:	492f      	ldr	r1, [pc, #188]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809ce:	202a      	movs	r0, #42	; 0x2a
   809d0:	4b2f      	ldr	r3, [pc, #188]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809d2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   809d4:	492d      	ldr	r1, [pc, #180]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809d6:	202b      	movs	r0, #43	; 0x2b
   809d8:	4b2d      	ldr	r3, [pc, #180]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809da:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   809dc:	492b      	ldr	r1, [pc, #172]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809de:	202c      	movs	r0, #44	; 0x2c
   809e0:	4b2b      	ldr	r3, [pc, #172]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809e2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   809e4:	4929      	ldr	r1, [pc, #164]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809e6:	202d      	movs	r0, #45	; 0x2d
   809e8:	4b29      	ldr	r3, [pc, #164]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809ea:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   809ec:	4927      	ldr	r1, [pc, #156]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809ee:	202e      	movs	r0, #46	; 0x2e
   809f0:	4b27      	ldr	r3, [pc, #156]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809f2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   809f4:	4925      	ldr	r1, [pc, #148]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809f6:	202f      	movs	r0, #47	; 0x2f
   809f8:	4b25      	ldr	r3, [pc, #148]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809fa:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   809fc:	4923      	ldr	r1, [pc, #140]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809fe:	2030      	movs	r0, #48	; 0x30
   80a00:	4b23      	ldr	r3, [pc, #140]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a02:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80a04:	4921      	ldr	r1, [pc, #132]	; (80a8c <phywhisperer_setup_pins+0x108>)
   80a06:	2033      	movs	r0, #51	; 0x33
   80a08:	4b21      	ldr	r3, [pc, #132]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a0a:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80a0c:	491f      	ldr	r1, [pc, #124]	; (80a8c <phywhisperer_setup_pins+0x108>)
   80a0e:	2037      	movs	r0, #55	; 0x37
   80a10:	4b1f      	ldr	r3, [pc, #124]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a12:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80a14:	491d      	ldr	r1, [pc, #116]	; (80a8c <phywhisperer_setup_pins+0x108>)
   80a16:	2034      	movs	r0, #52	; 0x34
   80a18:	4b1d      	ldr	r3, [pc, #116]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a1a:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80a1c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80a20:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a24:	481b      	ldr	r0, [pc, #108]	; (80a94 <phywhisperer_setup_pins+0x110>)
   80a26:	4b1c      	ldr	r3, [pc, #112]	; (80a98 <phywhisperer_setup_pins+0x114>)
   80a28:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80a2a:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a2e:	4819      	ldr	r0, [pc, #100]	; (80a94 <phywhisperer_setup_pins+0x110>)
   80a30:	4b1a      	ldr	r3, [pc, #104]	; (80a9c <phywhisperer_setup_pins+0x118>)
   80a32:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
    */

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   80a34:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80a38:	2026      	movs	r0, #38	; 0x26
   80a3a:	4b15      	ldr	r3, [pc, #84]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a3c:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   80a3e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a42:	2031      	movs	r0, #49	; 0x31
   80a44:	4b12      	ldr	r3, [pc, #72]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a46:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80a48:	4a15      	ldr	r2, [pc, #84]	; (80aa0 <phywhisperer_setup_pins+0x11c>)
   80a4a:	2100      	movs	r1, #0
   80a4c:	4815      	ldr	r0, [pc, #84]	; (80aa4 <phywhisperer_setup_pins+0x120>)
   80a4e:	4b16      	ldr	r3, [pc, #88]	; (80aa8 <phywhisperer_setup_pins+0x124>)
   80a50:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   80a52:	4a16      	ldr	r2, [pc, #88]	; (80aac <phywhisperer_setup_pins+0x128>)
   80a54:	2100      	movs	r1, #0
   80a56:	4813      	ldr	r0, [pc, #76]	; (80aa4 <phywhisperer_setup_pins+0x120>)
   80a58:	4b15      	ldr	r3, [pc, #84]	; (80ab0 <phywhisperer_setup_pins+0x12c>)
   80a5a:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   80a5c:	4a15      	ldr	r2, [pc, #84]	; (80ab4 <phywhisperer_setup_pins+0x130>)
   80a5e:	2100      	movs	r1, #0
   80a60:	4810      	ldr	r0, [pc, #64]	; (80aa4 <phywhisperer_setup_pins+0x120>)
   80a62:	4b15      	ldr	r3, [pc, #84]	; (80ab8 <phywhisperer_setup_pins+0x134>)
   80a64:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80a66:	2203      	movs	r2, #3
   80a68:	2100      	movs	r1, #0
   80a6a:	480e      	ldr	r0, [pc, #56]	; (80aa4 <phywhisperer_setup_pins+0x120>)
   80a6c:	4b13      	ldr	r3, [pc, #76]	; (80abc <phywhisperer_setup_pins+0x138>)
   80a6e:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   80a70:	bf00      	nop
   80a72:	bd80      	pop	{r7, pc}
   80a74:	0008294d 	.word	0x0008294d
   80a78:	00080461 	.word	0x00080461
   80a7c:	400e0c00 	.word	0x400e0c00
   80a80:	000808fd 	.word	0x000808fd
   80a84:	00080e15 	.word	0x00080e15
   80a88:	000833c9 	.word	0x000833c9
   80a8c:	08000001 	.word	0x08000001
   80a90:	00082d65 	.word	0x00082d65
   80a94:	400e0e00 	.word	0x400e0e00
   80a98:	00082e95 	.word	0x00082e95
   80a9c:	00082c71 	.word	0x00082c71
   80aa0:	01010100 	.word	0x01010100
   80aa4:	400e0000 	.word	0x400e0000
   80aa8:	000839b9 	.word	0x000839b9
   80aac:	01030101 	.word	0x01030101
   80ab0:	000839e3 	.word	0x000839e3
   80ab4:	00040002 	.word	0x00040002
   80ab8:	00083a0d 	.word	0x00083a0d
   80abc:	00083a37 	.word	0x00083a37

00080ac0 <hacky_delay>:

void hacky_delay(void)
{
   80ac0:	b480      	push	{r7}
   80ac2:	b083      	sub	sp, #12
   80ac4:	af00      	add	r7, sp, #0
    for (volatile uint32_t i = 0; i < 250000; i++);
   80ac6:	2300      	movs	r3, #0
   80ac8:	607b      	str	r3, [r7, #4]
   80aca:	e002      	b.n	80ad2 <hacky_delay+0x12>
   80acc:	687b      	ldr	r3, [r7, #4]
   80ace:	3301      	adds	r3, #1
   80ad0:	607b      	str	r3, [r7, #4]
   80ad2:	687b      	ldr	r3, [r7, #4]
   80ad4:	4a04      	ldr	r2, [pc, #16]	; (80ae8 <hacky_delay+0x28>)
   80ad6:	4293      	cmp	r3, r2
   80ad8:	d9f8      	bls.n	80acc <hacky_delay+0xc>
}
   80ada:	bf00      	nop
   80adc:	bf00      	nop
   80ade:	370c      	adds	r7, #12
   80ae0:	46bd      	mov	sp, r7
   80ae2:	bc80      	pop	{r7}
   80ae4:	4770      	bx	lr
   80ae6:	bf00      	nop
   80ae8:	0003d08f 	.word	0x0003d08f

00080aec <genclk_enable_config>:

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80aec:	b580      	push	{r7, lr}
   80aee:	b086      	sub	sp, #24
   80af0:	af00      	add	r7, sp, #0
   80af2:	60f8      	str	r0, [r7, #12]
   80af4:	460b      	mov	r3, r1
   80af6:	607a      	str	r2, [r7, #4]
   80af8:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   80afa:	f107 0314 	add.w	r3, r7, #20
   80afe:	68f9      	ldr	r1, [r7, #12]
   80b00:	4618      	mov	r0, r3
   80b02:	4b0e      	ldr	r3, [pc, #56]	; (80b3c <genclk_enable_config+0x50>)
   80b04:	4798      	blx	r3
    genclk_enable_source(src);
   80b06:	7afb      	ldrb	r3, [r7, #11]
   80b08:	4618      	mov	r0, r3
   80b0a:	4b0d      	ldr	r3, [pc, #52]	; (80b40 <genclk_enable_config+0x54>)
   80b0c:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80b0e:	7afa      	ldrb	r2, [r7, #11]
   80b10:	f107 0314 	add.w	r3, r7, #20
   80b14:	4611      	mov	r1, r2
   80b16:	4618      	mov	r0, r3
   80b18:	4b0a      	ldr	r3, [pc, #40]	; (80b44 <genclk_enable_config+0x58>)
   80b1a:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80b1c:	f107 0314 	add.w	r3, r7, #20
   80b20:	6879      	ldr	r1, [r7, #4]
   80b22:	4618      	mov	r0, r3
   80b24:	4b08      	ldr	r3, [pc, #32]	; (80b48 <genclk_enable_config+0x5c>)
   80b26:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80b28:	f107 0314 	add.w	r3, r7, #20
   80b2c:	68f9      	ldr	r1, [r7, #12]
   80b2e:	4618      	mov	r0, r3
   80b30:	4b06      	ldr	r3, [pc, #24]	; (80b4c <genclk_enable_config+0x60>)
   80b32:	4798      	blx	r3
}
   80b34:	bf00      	nop
   80b36:	3718      	adds	r7, #24
   80b38:	46bd      	mov	sp, r7
   80b3a:	bd80      	pop	{r7, pc}
   80b3c:	00080619 	.word	0x00080619
   80b40:	0008072d 	.word	0x0008072d
   80b44:	00080635 	.word	0x00080635
   80b48:	000806d1 	.word	0x000806d1
   80b4c:	000806fd 	.word	0x000806fd

00080b50 <main>:

void (*pwr_list[])(void) = {phywhisperer_no_pwr, phywhisperer_5V_pwr, phywhisperer_host_pwr};

int main(void)
{
   80b50:	b580      	push	{r7, lr}
   80b52:	b086      	sub	sp, #24
   80b54:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80b56:	463b      	mov	r3, r7
   80b58:	2110      	movs	r1, #16
   80b5a:	4618      	mov	r0, r3
   80b5c:	4b3b      	ldr	r3, [pc, #236]	; (80c4c <main+0xfc>)
   80b5e:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80b60:	4b3b      	ldr	r3, [pc, #236]	; (80c50 <main+0x100>)
   80b62:	2201      	movs	r2, #1
   80b64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80b66:	f3bf 8f5f 	dmb	sy
}
   80b6a:	bf00      	nop
  __ASM volatile ("cpsie i");
   80b6c:	b662      	cpsie	i
}
   80b6e:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   80b70:	4b38      	ldr	r3, [pc, #224]	; (80c54 <main+0x104>)
   80b72:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80b74:	4b38      	ldr	r3, [pc, #224]	; (80c58 <main+0x108>)
   80b76:	4798      	blx	r3
    phywhisperer_setup_pins();
   80b78:	4b38      	ldr	r3, [pc, #224]	; (80c5c <main+0x10c>)
   80b7a:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   80b7c:	2300      	movs	r3, #0
   80b7e:	617b      	str	r3, [r7, #20]
   80b80:	e011      	b.n	80ba6 <main+0x56>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80b82:	697b      	ldr	r3, [r7, #20]
   80b84:	00db      	lsls	r3, r3, #3
   80b86:	4a36      	ldr	r2, [pc, #216]	; (80c60 <main+0x110>)
   80b88:	1898      	adds	r0, r3, r2
   80b8a:	697b      	ldr	r3, [r7, #20]
   80b8c:	009b      	lsls	r3, r3, #2
   80b8e:	f107 0218 	add.w	r2, r7, #24
   80b92:	4413      	add	r3, r2
   80b94:	f853 3c18 	ldr.w	r3, [r3, #-24]
   80b98:	461a      	mov	r2, r3
   80b9a:	4932      	ldr	r1, [pc, #200]	; (80c64 <main+0x114>)
   80b9c:	4b32      	ldr	r3, [pc, #200]	; (80c68 <main+0x118>)
   80b9e:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80ba0:	697b      	ldr	r3, [r7, #20]
   80ba2:	3301      	adds	r3, #1
   80ba4:	617b      	str	r3, [r7, #20]
   80ba6:	697b      	ldr	r3, [r7, #20]
   80ba8:	2b03      	cmp	r3, #3
   80baa:	d9ea      	bls.n	80b82 <main+0x32>
	}
	usb_serial_number[32] = 0;
   80bac:	4b2c      	ldr	r3, [pc, #176]	; (80c60 <main+0x110>)
   80bae:	2200      	movs	r2, #0
   80bb0:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80bb4:	2200      	movs	r2, #0
   80bb6:	210a      	movs	r1, #10
   80bb8:	2001      	movs	r0, #1
   80bba:	4b2c      	ldr	r3, [pc, #176]	; (80c6c <main+0x11c>)
   80bbc:	4798      	blx	r3
    udc_start();
   80bbe:	4b2c      	ldr	r3, [pc, #176]	; (80c70 <main+0x120>)
   80bc0:	4798      	blx	r3
    gpio_set_pin_high(LED0_GPIO);
   80bc2:	201d      	movs	r0, #29
   80bc4:	4b2b      	ldr	r3, [pc, #172]	; (80c74 <main+0x124>)
   80bc6:	4798      	blx	r3
    gpio_set_pin_low(LED1_GPIO);
   80bc8:	201f      	movs	r0, #31
   80bca:	4b2b      	ldr	r3, [pc, #172]	; (80c78 <main+0x128>)
   80bcc:	4798      	blx	r3

    phywhisperer_no_pwr();
   80bce:	4b2b      	ldr	r3, [pc, #172]	; (80c7c <main+0x12c>)
   80bd0:	4798      	blx	r3
    naeusb_register_handlers();
   80bd2:	4b2b      	ldr	r3, [pc, #172]	; (80c80 <main+0x130>)
   80bd4:	4798      	blx	r3
    openadc_register_handlers();
   80bd6:	4b2b      	ldr	r3, [pc, #172]	; (80c84 <main+0x134>)
   80bd8:	4798      	blx	r3
    phywhisperer_register_handlers();
   80bda:	4b2b      	ldr	r3, [pc, #172]	; (80c88 <main+0x138>)
   80bdc:	4798      	blx	r3
    USB_PWR_STATE = 0;
   80bde:	4b2b      	ldr	r3, [pc, #172]	; (80c8c <main+0x13c>)
   80be0:	2200      	movs	r2, #0
   80be2:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   80be4:	2300      	movs	r3, #0
   80be6:	74fb      	strb	r3, [r7, #19]
    while(1) {
        sleepmgr_enter_sleep();
   80be8:	4b29      	ldr	r3, [pc, #164]	; (80c90 <main+0x140>)
   80bea:	4798      	blx	r3
        uint8_t button_status = !(PIOA->PIO_PDSR & (1 << BUTTON_IN));
   80bec:	4b29      	ldr	r3, [pc, #164]	; (80c94 <main+0x144>)
   80bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80bf4:	2b00      	cmp	r3, #0
   80bf6:	bf0c      	ite	eq
   80bf8:	2301      	moveq	r3, #1
   80bfa:	2300      	movne	r3, #0
   80bfc:	b2db      	uxtb	r3, r3
   80bfe:	74bb      	strb	r3, [r7, #18]
        if (button_status){
   80c00:	7cbb      	ldrb	r3, [r7, #18]
   80c02:	2b00      	cmp	r3, #0
   80c04:	d0f0      	beq.n	80be8 <main+0x98>
            hacky_delay(); //delay to try to debounce
   80c06:	4b24      	ldr	r3, [pc, #144]	; (80c98 <main+0x148>)
   80c08:	4798      	blx	r3
            while (!(PIOA->PIO_PDSR & (1 << BUTTON_IN))); //wait for trigger to be unpressed
   80c0a:	bf00      	nop
   80c0c:	4b21      	ldr	r3, [pc, #132]	; (80c94 <main+0x144>)
   80c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80c14:	2b00      	cmp	r3, #0
   80c16:	d0f9      	beq.n	80c0c <main+0xbc>

            if (USB_PWR_STATE && USB_PWR_STATE <= 2) {
   80c18:	4b1c      	ldr	r3, [pc, #112]	; (80c8c <main+0x13c>)
   80c1a:	781b      	ldrb	r3, [r3, #0]
   80c1c:	2b00      	cmp	r3, #0
   80c1e:	d012      	beq.n	80c46 <main+0xf6>
   80c20:	4b1a      	ldr	r3, [pc, #104]	; (80c8c <main+0x13c>)
   80c22:	781b      	ldrb	r3, [r3, #0]
   80c24:	2b02      	cmp	r3, #2
   80c26:	d80e      	bhi.n	80c46 <main+0xf6>
                if (pwr_st_from_io()) { //currently on
   80c28:	4b1c      	ldr	r3, [pc, #112]	; (80c9c <main+0x14c>)
   80c2a:	4798      	blx	r3
   80c2c:	4603      	mov	r3, r0
   80c2e:	2b00      	cmp	r3, #0
   80c30:	d002      	beq.n	80c38 <main+0xe8>
                    phywhisperer_no_pwr();
   80c32:	4b12      	ldr	r3, [pc, #72]	; (80c7c <main+0x12c>)
   80c34:	4798      	blx	r3
   80c36:	e006      	b.n	80c46 <main+0xf6>
                } else {
                    pwr_list[USB_PWR_STATE]();
   80c38:	4b14      	ldr	r3, [pc, #80]	; (80c8c <main+0x13c>)
   80c3a:	781b      	ldrb	r3, [r3, #0]
   80c3c:	461a      	mov	r2, r3
   80c3e:	4b18      	ldr	r3, [pc, #96]	; (80ca0 <main+0x150>)
   80c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80c44:	4798      	blx	r3
                }
            }
            hacky_delay();
   80c46:	4b14      	ldr	r3, [pc, #80]	; (80c98 <main+0x148>)
   80c48:	4798      	blx	r3
    while(1) {
   80c4a:	e7cd      	b.n	80be8 <main+0x98>
   80c4c:	00082859 	.word	0x00082859
   80c50:	200003ca 	.word	0x200003ca
   80c54:	00080571 	.word	0x00080571
   80c58:	00083f49 	.word	0x00083f49
   80c5c:	00080985 	.word	0x00080985
   80c60:	2000025c 	.word	0x2000025c
   80c64:	0008cf3c 	.word	0x0008cf3c
   80c68:	00086491 	.word	0x00086491
   80c6c:	00080aed 	.word	0x00080aed
   80c70:	00081be5 	.word	0x00081be5
   80c74:	00082d05 	.word	0x00082d05
   80c78:	00082d35 	.word	0x00082d35
   80c7c:	000808bd 	.word	0x000808bd
   80c80:	00081401 	.word	0x00081401
   80c84:	00081839 	.word	0x00081839
   80c88:	00081945 	.word	0x00081945
   80c8c:	20000fd8 	.word	0x20000fd8
   80c90:	000805d9 	.word	0x000805d9
   80c94:	400e0c00 	.word	0x400e0c00
   80c98:	00080ac1 	.word	0x00080ac1
   80c9c:	0008091d 	.word	0x0008091d
   80ca0:	20000280 	.word	0x20000280

00080ca4 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   80ca4:	b580      	push	{r7, lr}
   80ca6:	b084      	sub	sp, #16
   80ca8:	af00      	add	r7, sp, #0
   80caa:	4603      	mov	r3, r0
   80cac:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   80cae:	2300      	movs	r3, #0
   80cb0:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   80cb2:	4b09      	ldr	r3, [pc, #36]	; (80cd8 <FPGA_setlock+0x34>)
   80cb4:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   80cb6:	4b09      	ldr	r3, [pc, #36]	; (80cdc <FPGA_setlock+0x38>)
   80cb8:	781b      	ldrb	r3, [r3, #0]
   80cba:	b2db      	uxtb	r3, r3
   80cbc:	2b00      	cmp	r3, #0
   80cbe:	d104      	bne.n	80cca <FPGA_setlock+0x26>
  {
    ret = 1;
   80cc0:	2301      	movs	r3, #1
   80cc2:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   80cc4:	4a05      	ldr	r2, [pc, #20]	; (80cdc <FPGA_setlock+0x38>)
   80cc6:	79fb      	ldrb	r3, [r7, #7]
   80cc8:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   80cca:	4b05      	ldr	r3, [pc, #20]	; (80ce0 <FPGA_setlock+0x3c>)
   80ccc:	4798      	blx	r3
  return ret;
   80cce:	68fb      	ldr	r3, [r7, #12]
}
   80cd0:	4618      	mov	r0, r3
   80cd2:	3710      	adds	r7, #16
   80cd4:	46bd      	mov	sp, r7
   80cd6:	bd80      	pop	{r7, pc}
   80cd8:	00082971 	.word	0x00082971
   80cdc:	20000e3c 	.word	0x20000e3c
   80ce0:	000829c9 	.word	0x000829c9

00080ce4 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   80ce4:	b480      	push	{r7}
   80ce6:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   80ce8:	4b03      	ldr	r3, [pc, #12]	; (80cf8 <FPGA_releaselock+0x14>)
   80cea:	2200      	movs	r2, #0
   80cec:	701a      	strb	r2, [r3, #0]
}
   80cee:	bf00      	nop
   80cf0:	46bd      	mov	sp, r7
   80cf2:	bc80      	pop	{r7}
   80cf4:	4770      	bx	lr
   80cf6:	bf00      	nop
   80cf8:	20000e3c 	.word	0x20000e3c

00080cfc <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   80cfc:	b480      	push	{r7}
   80cfe:	af00      	add	r7, sp, #0
  return _fpga_locked;
   80d00:	4b03      	ldr	r3, [pc, #12]	; (80d10 <FPGA_lockstatus+0x14>)
   80d02:	781b      	ldrb	r3, [r3, #0]
   80d04:	b2db      	uxtb	r3, r3
}
   80d06:	4618      	mov	r0, r3
   80d08:	46bd      	mov	sp, r7
   80d0a:	bc80      	pop	{r7}
   80d0c:	4770      	bx	lr
   80d0e:	bf00      	nop
   80d10:	20000e3c 	.word	0x20000e3c

00080d14 <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   80d14:	b580      	push	{r7, lr}
   80d16:	b082      	sub	sp, #8
   80d18:	af00      	add	r7, sp, #0
   80d1a:	6078      	str	r0, [r7, #4]
	#if (USB_DEVICE_PRODUCT_ID == 0xACE5) || (USB_DEVICE_PRODUCT_ID == 0xC610)
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   80d1c:	4b0c      	ldr	r3, [pc, #48]	; (80d50 <FPGA_setaddr+0x3c>)
   80d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80d20:	f003 0240 	and.w	r2, r3, #64	; 0x40
   80d24:	687b      	ldr	r3, [r7, #4]
   80d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d2a:	431a      	orrs	r2, r3
   80d2c:	687b      	ldr	r3, [r7, #4]
   80d2e:	005b      	lsls	r3, r3, #1
   80d30:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   80d34:	4906      	ldr	r1, [pc, #24]	; (80d50 <FPGA_setaddr+0x3c>)
   80d36:	4313      	orrs	r3, r2
   80d38:	638b      	str	r3, [r1, #56]	; 0x38
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   80d3a:	2031      	movs	r0, #49	; 0x31
   80d3c:	4b05      	ldr	r3, [pc, #20]	; (80d54 <FPGA_setaddr+0x40>)
   80d3e:	4798      	blx	r3
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   80d40:	2031      	movs	r0, #49	; 0x31
   80d42:	4b05      	ldr	r3, [pc, #20]	; (80d58 <FPGA_setaddr+0x44>)
   80d44:	4798      	blx	r3
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
			gpio_set_pin_low(FPGA_ALE_GPIO);
			gpio_set_pin_high(FPGA_ALE_GPIO);
	#endif
}
   80d46:	bf00      	nop
   80d48:	3708      	adds	r7, #8
   80d4a:	46bd      	mov	sp, r7
   80d4c:	bd80      	pop	{r7, pc}
   80d4e:	bf00      	nop
   80d50:	400e0e00 	.word	0x400e0e00
   80d54:	00082d35 	.word	0x00082d35
   80d58:	00082d05 	.word	0x00082d05

00080d5c <osc_get_rate>:
{
   80d5c:	b480      	push	{r7}
   80d5e:	b083      	sub	sp, #12
   80d60:	af00      	add	r7, sp, #0
   80d62:	6078      	str	r0, [r7, #4]
   80d64:	687b      	ldr	r3, [r7, #4]
   80d66:	2b07      	cmp	r3, #7
   80d68:	d823      	bhi.n	80db2 <osc_get_rate+0x56>
   80d6a:	a201      	add	r2, pc, #4	; (adr r2, 80d70 <osc_get_rate+0x14>)
   80d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d70:	00080d91 	.word	0x00080d91
   80d74:	00080d97 	.word	0x00080d97
   80d78:	00080d9b 	.word	0x00080d9b
   80d7c:	00080d9f 	.word	0x00080d9f
   80d80:	00080da3 	.word	0x00080da3
   80d84:	00080da7 	.word	0x00080da7
   80d88:	00080dab 	.word	0x00080dab
   80d8c:	00080daf 	.word	0x00080daf
		return OSC_SLCK_32K_RC_HZ;
   80d90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80d94:	e00e      	b.n	80db4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   80d96:	2300      	movs	r3, #0
   80d98:	e00c      	b.n	80db4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   80d9a:	2300      	movs	r3, #0
   80d9c:	e00a      	b.n	80db4 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   80d9e:	4b08      	ldr	r3, [pc, #32]	; (80dc0 <osc_get_rate+0x64>)
   80da0:	e008      	b.n	80db4 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   80da2:	4b08      	ldr	r3, [pc, #32]	; (80dc4 <osc_get_rate+0x68>)
   80da4:	e006      	b.n	80db4 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   80da6:	4b08      	ldr	r3, [pc, #32]	; (80dc8 <osc_get_rate+0x6c>)
   80da8:	e004      	b.n	80db4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   80daa:	4b07      	ldr	r3, [pc, #28]	; (80dc8 <osc_get_rate+0x6c>)
   80dac:	e002      	b.n	80db4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   80dae:	4b06      	ldr	r3, [pc, #24]	; (80dc8 <osc_get_rate+0x6c>)
   80db0:	e000      	b.n	80db4 <osc_get_rate+0x58>
	return 0;
   80db2:	2300      	movs	r3, #0
}
   80db4:	4618      	mov	r0, r3
   80db6:	370c      	adds	r7, #12
   80db8:	46bd      	mov	sp, r7
   80dba:	bc80      	pop	{r7}
   80dbc:	4770      	bx	lr
   80dbe:	bf00      	nop
   80dc0:	003d0900 	.word	0x003d0900
   80dc4:	007a1200 	.word	0x007a1200
   80dc8:	00b71b00 	.word	0x00b71b00

00080dcc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80dcc:	b580      	push	{r7, lr}
   80dce:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80dd0:	2006      	movs	r0, #6
   80dd2:	4b03      	ldr	r3, [pc, #12]	; (80de0 <sysclk_get_main_hz+0x14>)
   80dd4:	4798      	blx	r3
   80dd6:	4603      	mov	r3, r0
   80dd8:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80dda:	4618      	mov	r0, r3
   80ddc:	bd80      	pop	{r7, pc}
   80dde:	bf00      	nop
   80de0:	00080d5d 	.word	0x00080d5d

00080de4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80de4:	b580      	push	{r7, lr}
   80de6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80de8:	4b02      	ldr	r3, [pc, #8]	; (80df4 <sysclk_get_cpu_hz+0x10>)
   80dea:	4798      	blx	r3
   80dec:	4603      	mov	r3, r0
   80dee:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80df0:	4618      	mov	r0, r3
   80df2:	bd80      	pop	{r7, pc}
   80df4:	00080dcd 	.word	0x00080dcd

00080df8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80df8:	b580      	push	{r7, lr}
   80dfa:	b082      	sub	sp, #8
   80dfc:	af00      	add	r7, sp, #0
   80dfe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80e00:	6878      	ldr	r0, [r7, #4]
   80e02:	4b03      	ldr	r3, [pc, #12]	; (80e10 <sysclk_enable_peripheral_clock+0x18>)
   80e04:	4798      	blx	r3
}
   80e06:	bf00      	nop
   80e08:	3708      	adds	r7, #8
   80e0a:	46bd      	mov	sp, r7
   80e0c:	bd80      	pop	{r7, pc}
   80e0e:	bf00      	nop
   80e10:	000833c9 	.word	0x000833c9

00080e14 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   80e14:	b580      	push	{r7, lr}
   80e16:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   80e18:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e1c:	2014      	movs	r0, #20
   80e1e:	4b03      	ldr	r3, [pc, #12]	; (80e2c <fpga_program_init+0x18>)
   80e20:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   80e22:	2014      	movs	r0, #20
   80e24:	4b02      	ldr	r3, [pc, #8]	; (80e30 <fpga_program_init+0x1c>)
   80e26:	4798      	blx	r3
}
   80e28:	bf00      	nop
   80e2a:	bd80      	pop	{r7, pc}
   80e2c:	00082d65 	.word	0x00082d65
   80e30:	00082d05 	.word	0x00082d05

00080e34 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   80e34:	b580      	push	{r7, lr}
   80e36:	b084      	sub	sp, #16
   80e38:	af00      	add	r7, sp, #0
	
#if (USB_DEVICE_PRODUCT_ID == 0xACE5) || (USB_DEVICE_PRODUCT_ID == 0xC610)
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   80e3a:	2014      	movs	r0, #20
   80e3c:	4b14      	ldr	r3, [pc, #80]	; (80e90 <fpga_program_setup1+0x5c>)
   80e3e:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   80e40:	4b14      	ldr	r3, [pc, #80]	; (80e94 <fpga_program_setup1+0x60>)
   80e42:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   80e44:	23c0      	movs	r3, #192	; 0xc0
   80e46:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   80e48:	2300      	movs	r3, #0
   80e4a:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   80e4c:	2300      	movs	r3, #0
   80e4e:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   80e50:	200d      	movs	r0, #13
   80e52:	4b11      	ldr	r3, [pc, #68]	; (80e98 <fpga_program_setup1+0x64>)
   80e54:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   80e56:	4b11      	ldr	r3, [pc, #68]	; (80e9c <fpga_program_setup1+0x68>)
   80e58:	4798      	blx	r3
   80e5a:	4602      	mov	r2, r0
   80e5c:	463b      	mov	r3, r7
   80e5e:	4619      	mov	r1, r3
   80e60:	480f      	ldr	r0, [pc, #60]	; (80ea0 <fpga_program_setup1+0x6c>)
   80e62:	4b10      	ldr	r3, [pc, #64]	; (80ea4 <fpga_program_setup1+0x70>)
   80e64:	4798      	blx	r3
    FPGA_DO_SETUP();
   80e66:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e6a:	2012      	movs	r0, #18
   80e6c:	4b0e      	ldr	r3, [pc, #56]	; (80ea8 <fpga_program_setup1+0x74>)
   80e6e:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   80e70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e74:	2011      	movs	r0, #17
   80e76:	4b0c      	ldr	r3, [pc, #48]	; (80ea8 <fpga_program_setup1+0x74>)
   80e78:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   80e7a:	4b0c      	ldr	r3, [pc, #48]	; (80eac <fpga_program_setup1+0x78>)
   80e7c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   80e80:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   80e82:	4807      	ldr	r0, [pc, #28]	; (80ea0 <fpga_program_setup1+0x6c>)
   80e84:	4b0a      	ldr	r3, [pc, #40]	; (80eb0 <fpga_program_setup1+0x7c>)
   80e86:	4798      	blx	r3

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
	#endif
#endif
}
   80e88:	bf00      	nop
   80e8a:	3710      	adds	r7, #16
   80e8c:	46bd      	mov	sp, r7
   80e8e:	bd80      	pop	{r7, pc}
   80e90:	00082d35 	.word	0x00082d35
   80e94:	00989680 	.word	0x00989680
   80e98:	00080df9 	.word	0x00080df9
   80e9c:	00080de5 	.word	0x00080de5
   80ea0:	40090000 	.word	0x40090000
   80ea4:	00086035 	.word	0x00086035
   80ea8:	00082d65 	.word	0x00082d65
   80eac:	400e0c00 	.word	0x400e0c00
   80eb0:	00086145 	.word	0x00086145

00080eb4 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   80eb4:	b580      	push	{r7, lr}
   80eb6:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   80eb8:	2014      	movs	r0, #20
   80eba:	4b02      	ldr	r3, [pc, #8]	; (80ec4 <fpga_program_setup2+0x10>)
   80ebc:	4798      	blx	r3
}
   80ebe:	bf00      	nop
   80ec0:	bd80      	pop	{r7, pc}
   80ec2:	bf00      	nop
   80ec4:	00082d05 	.word	0x00082d05

00080ec8 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   80ec8:	b580      	push	{r7, lr}
   80eca:	b082      	sub	sp, #8
   80ecc:	af00      	add	r7, sp, #0
   80ece:	4603      	mov	r3, r0
   80ed0:	71fb      	strb	r3, [r7, #7]
    #if (USB_DEVICE_PRODUCT_ID == 0xACE5) || (USB_DEVICE_PRODUCT_ID == 0xC610)
	//For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   80ed2:	79fb      	ldrb	r3, [r7, #7]
   80ed4:	4619      	mov	r1, r3
   80ed6:	4803      	ldr	r0, [pc, #12]	; (80ee4 <fpga_program_sendbyte+0x1c>)
   80ed8:	4b03      	ldr	r3, [pc, #12]	; (80ee8 <fpga_program_sendbyte+0x20>)
   80eda:	4798      	blx	r3
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
		#endif
	#endif
}
   80edc:	bf00      	nop
   80ede:	3708      	adds	r7, #8
   80ee0:	46bd      	mov	sp, r7
   80ee2:	bd80      	pop	{r7, pc}
   80ee4:	40090000 	.word	0x40090000
   80ee8:	000861db 	.word	0x000861db

00080eec <naeusb_add_in_handler>:
{
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
   80eec:	b480      	push	{r7}
   80eee:	b083      	sub	sp, #12
   80ef0:	af00      	add	r7, sp, #0
   80ef2:	6078      	str	r0, [r7, #4]
    if (naeusb_num_in_handlers >= 16)
   80ef4:	4b0b      	ldr	r3, [pc, #44]	; (80f24 <naeusb_add_in_handler+0x38>)
   80ef6:	781b      	ldrb	r3, [r3, #0]
   80ef8:	2b0f      	cmp	r3, #15
   80efa:	d901      	bls.n	80f00 <naeusb_add_in_handler+0x14>
        return false;
   80efc:	2300      	movs	r3, #0
   80efe:	e00b      	b.n	80f18 <naeusb_add_in_handler+0x2c>
    
    naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   80f00:	4b08      	ldr	r3, [pc, #32]	; (80f24 <naeusb_add_in_handler+0x38>)
   80f02:	781b      	ldrb	r3, [r3, #0]
   80f04:	1c5a      	adds	r2, r3, #1
   80f06:	b2d1      	uxtb	r1, r2
   80f08:	4a06      	ldr	r2, [pc, #24]	; (80f24 <naeusb_add_in_handler+0x38>)
   80f0a:	7011      	strb	r1, [r2, #0]
   80f0c:	4619      	mov	r1, r3
   80f0e:	4a06      	ldr	r2, [pc, #24]	; (80f28 <naeusb_add_in_handler+0x3c>)
   80f10:	687b      	ldr	r3, [r7, #4]
   80f12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    return true;
   80f16:	2301      	movs	r3, #1
}
   80f18:	4618      	mov	r0, r3
   80f1a:	370c      	adds	r7, #12
   80f1c:	46bd      	mov	sp, r7
   80f1e:	bc80      	pop	{r7}
   80f20:	4770      	bx	lr
   80f22:	bf00      	nop
   80f24:	20000e80 	.word	0x20000e80
   80f28:	20000e40 	.word	0x20000e40

00080f2c <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
   80f2c:	b480      	push	{r7}
   80f2e:	b083      	sub	sp, #12
   80f30:	af00      	add	r7, sp, #0
   80f32:	6078      	str	r0, [r7, #4]
    if (naeusb_num_out_handlers >= 16)
   80f34:	4b0b      	ldr	r3, [pc, #44]	; (80f64 <naeusb_add_out_handler+0x38>)
   80f36:	781b      	ldrb	r3, [r3, #0]
   80f38:	2b0f      	cmp	r3, #15
   80f3a:	d901      	bls.n	80f40 <naeusb_add_out_handler+0x14>
        return false;
   80f3c:	2300      	movs	r3, #0
   80f3e:	e00b      	b.n	80f58 <naeusb_add_out_handler+0x2c>
    
    naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   80f40:	4b08      	ldr	r3, [pc, #32]	; (80f64 <naeusb_add_out_handler+0x38>)
   80f42:	781b      	ldrb	r3, [r3, #0]
   80f44:	1c5a      	adds	r2, r3, #1
   80f46:	b2d1      	uxtb	r1, r2
   80f48:	4a06      	ldr	r2, [pc, #24]	; (80f64 <naeusb_add_out_handler+0x38>)
   80f4a:	7011      	strb	r1, [r2, #0]
   80f4c:	4619      	mov	r1, r3
   80f4e:	4a06      	ldr	r2, [pc, #24]	; (80f68 <naeusb_add_out_handler+0x3c>)
   80f50:	687b      	ldr	r3, [r7, #4]
   80f52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    return true;
   80f56:	2301      	movs	r3, #1
}
   80f58:	4618      	mov	r0, r3
   80f5a:	370c      	adds	r7, #12
   80f5c:	46bd      	mov	sp, r7
   80f5e:	bc80      	pop	{r7}
   80f60:	4770      	bx	lr
   80f62:	bf00      	nop
   80f64:	20000ec4 	.word	0x20000ec4
   80f68:	20000e84 	.word	0x20000e84

00080f6c <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80f6c:	b580      	push	{r7, lr}
   80f6e:	af00      	add	r7, sp, #0
	active = false;
   80f70:	4b03      	ldr	r3, [pc, #12]	; (80f80 <main_suspend_action+0x14>)
   80f72:	2200      	movs	r2, #0
   80f74:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   80f76:	4b03      	ldr	r3, [pc, #12]	; (80f84 <main_suspend_action+0x18>)
   80f78:	4798      	blx	r3
}
   80f7a:	bf00      	nop
   80f7c:	bd80      	pop	{r7, pc}
   80f7e:	bf00      	nop
   80f80:	20000ec5 	.word	0x20000ec5
   80f84:	00085ef5 	.word	0x00085ef5

00080f88 <main_resume_action>:

void main_resume_action(void)
{
   80f88:	b580      	push	{r7, lr}
   80f8a:	af00      	add	r7, sp, #0
    ui_wakeup();
   80f8c:	4b01      	ldr	r3, [pc, #4]	; (80f94 <main_resume_action+0xc>)
   80f8e:	4798      	blx	r3
}
   80f90:	bf00      	nop
   80f92:	bd80      	pop	{r7, pc}
   80f94:	00085f0d 	.word	0x00085f0d

00080f98 <main_sof_action>:

void main_sof_action(void)
{
   80f98:	b580      	push	{r7, lr}
   80f9a:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80f9c:	4b08      	ldr	r3, [pc, #32]	; (80fc0 <main_sof_action+0x28>)
   80f9e:	781b      	ldrb	r3, [r3, #0]
   80fa0:	b2db      	uxtb	r3, r3
   80fa2:	f083 0301 	eor.w	r3, r3, #1
   80fa6:	b2db      	uxtb	r3, r3
   80fa8:	2b00      	cmp	r3, #0
   80faa:	d106      	bne.n	80fba <main_sof_action+0x22>
        return;
    ui_process(udd_get_frame_number());
   80fac:	4b05      	ldr	r3, [pc, #20]	; (80fc4 <main_sof_action+0x2c>)
   80fae:	4798      	blx	r3
   80fb0:	4603      	mov	r3, r0
   80fb2:	4618      	mov	r0, r3
   80fb4:	4b04      	ldr	r3, [pc, #16]	; (80fc8 <main_sof_action+0x30>)
   80fb6:	4798      	blx	r3
   80fb8:	e000      	b.n	80fbc <main_sof_action+0x24>
        return;
   80fba:	bf00      	nop
}
   80fbc:	bd80      	pop	{r7, pc}
   80fbe:	bf00      	nop
   80fc0:	20000290 	.word	0x20000290
   80fc4:	00084831 	.word	0x00084831
   80fc8:	00085f21 	.word	0x00085f21

00080fcc <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   80fcc:	b580      	push	{r7, lr}
   80fce:	af00      	add	r7, sp, #0
    active = true;
   80fd0:	4b07      	ldr	r3, [pc, #28]	; (80ff0 <main_vendor_enable+0x24>)
   80fd2:	2201      	movs	r2, #1
   80fd4:	701a      	strb	r2, [r3, #0]
    main_b_vendor_enable = true;
   80fd6:	4b07      	ldr	r3, [pc, #28]	; (80ff4 <main_vendor_enable+0x28>)
   80fd8:	2201      	movs	r2, #1
   80fda:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80fdc:	4a06      	ldr	r2, [pc, #24]	; (80ff8 <main_vendor_enable+0x2c>)
   80fde:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80fe2:	4806      	ldr	r0, [pc, #24]	; (80ffc <main_vendor_enable+0x30>)
   80fe4:	4b06      	ldr	r3, [pc, #24]	; (81000 <main_vendor_enable+0x34>)
   80fe6:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
   80fe8:	2301      	movs	r3, #1
}
   80fea:	4618      	mov	r0, r3
   80fec:	bd80      	pop	{r7, pc}
   80fee:	bf00      	nop
   80ff0:	20000ec5 	.word	0x20000ec5
   80ff4:	20000290 	.word	0x20000290
   80ff8:	00081615 	.word	0x00081615
   80ffc:	2000105c 	.word	0x2000105c
   81000:	00084249 	.word	0x00084249

00081004 <main_vendor_disable>:

void main_vendor_disable(void)
{
   81004:	b480      	push	{r7}
   81006:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   81008:	4b03      	ldr	r3, [pc, #12]	; (81018 <main_vendor_disable+0x14>)
   8100a:	2200      	movs	r2, #0
   8100c:	701a      	strb	r2, [r3, #0]
}
   8100e:	bf00      	nop
   81010:	46bd      	mov	sp, r7
   81012:	bc80      	pop	{r7}
   81014:	4770      	bx	lr
   81016:	bf00      	nop
   81018:	20000290 	.word	0x20000290

0008101c <main_setup_out_received>:

bool main_setup_out_received(void)
{
   8101c:	b580      	push	{r7, lr}
   8101e:	b082      	sub	sp, #8
   81020:	af00      	add	r7, sp, #0
    bool handler_status = false;
   81022:	2300      	movs	r3, #0
   81024:	71bb      	strb	r3, [r7, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   81026:	4b13      	ldr	r3, [pc, #76]	; (81074 <main_setup_out_received+0x58>)
   81028:	4a13      	ldr	r2, [pc, #76]	; (81078 <main_setup_out_received+0x5c>)
   8102a:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   8102c:	4b11      	ldr	r3, [pc, #68]	; (81074 <main_setup_out_received+0x58>)
   8102e:	88db      	ldrh	r3, [r3, #6]
   81030:	2b40      	cmp	r3, #64	; 0x40
   81032:	bf28      	it	cs
   81034:	2340      	movcs	r3, #64	; 0x40
   81036:	b29a      	uxth	r2, r3
   81038:	4b0e      	ldr	r3, [pc, #56]	; (81074 <main_setup_out_received+0x58>)
   8103a:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   8103c:	4b0f      	ldr	r3, [pc, #60]	; (8107c <main_setup_out_received+0x60>)
   8103e:	781b      	ldrb	r3, [r3, #0]
   81040:	71fb      	strb	r3, [r7, #7]
   81042:	e00f      	b.n	81064 <main_setup_out_received+0x48>
        handler_status = naeusb_out_request_handlers[i-1]();
   81044:	79fb      	ldrb	r3, [r7, #7]
   81046:	3b01      	subs	r3, #1
   81048:	4a0d      	ldr	r2, [pc, #52]	; (81080 <main_setup_out_received+0x64>)
   8104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   8104e:	4798      	blx	r3
   81050:	4603      	mov	r3, r0
   81052:	71bb      	strb	r3, [r7, #6]
        if (handler_status == true) {
   81054:	79bb      	ldrb	r3, [r7, #6]
   81056:	2b00      	cmp	r3, #0
   81058:	d001      	beq.n	8105e <main_setup_out_received+0x42>
            return true;
   8105a:	2301      	movs	r3, #1
   8105c:	e006      	b.n	8106c <main_setup_out_received+0x50>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   8105e:	79fb      	ldrb	r3, [r7, #7]
   81060:	3b01      	subs	r3, #1
   81062:	71fb      	strb	r3, [r7, #7]
   81064:	79fb      	ldrb	r3, [r7, #7]
   81066:	2b00      	cmp	r3, #0
   81068:	d1ec      	bne.n	81044 <main_setup_out_received+0x28>
        }
    }

    return false;
   8106a:	2300      	movs	r3, #0

}
   8106c:	4618      	mov	r0, r3
   8106e:	3708      	adds	r7, #8
   81070:	46bd      	mov	sp, r7
   81072:	bd80      	pop	{r7, pc}
   81074:	20001468 	.word	0x20001468
   81078:	2000101c 	.word	0x2000101c
   8107c:	20000ec4 	.word	0x20000ec4
   81080:	20000e84 	.word	0x20000e84

00081084 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81084:	b580      	push	{r7, lr}
   81086:	b082      	sub	sp, #8
   81088:	af00      	add	r7, sp, #0
    bool handler_status = false;
   8108a:	2300      	movs	r3, #0
   8108c:	71bb      	strb	r3, [r7, #6]

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8108e:	4b0e      	ldr	r3, [pc, #56]	; (810c8 <main_setup_in_received+0x44>)
   81090:	781b      	ldrb	r3, [r3, #0]
   81092:	71fb      	strb	r3, [r7, #7]
   81094:	e00f      	b.n	810b6 <main_setup_in_received+0x32>
        handler_status = naeusb_in_request_handlers[i-1]();
   81096:	79fb      	ldrb	r3, [r7, #7]
   81098:	3b01      	subs	r3, #1
   8109a:	4a0c      	ldr	r2, [pc, #48]	; (810cc <main_setup_in_received+0x48>)
   8109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   810a0:	4798      	blx	r3
   810a2:	4603      	mov	r3, r0
   810a4:	71bb      	strb	r3, [r7, #6]
        if (handler_status == true) {
   810a6:	79bb      	ldrb	r3, [r7, #6]
   810a8:	2b00      	cmp	r3, #0
   810aa:	d001      	beq.n	810b0 <main_setup_in_received+0x2c>
            return true;
   810ac:	2301      	movs	r3, #1
   810ae:	e006      	b.n	810be <main_setup_in_received+0x3a>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   810b0:	79fb      	ldrb	r3, [r7, #7]
   810b2:	3b01      	subs	r3, #1
   810b4:	71fb      	strb	r3, [r7, #7]
   810b6:	79fb      	ldrb	r3, [r7, #7]
   810b8:	2b00      	cmp	r3, #0
   810ba:	d1ec      	bne.n	81096 <main_setup_in_received+0x12>
        }
    }

    return false;
   810bc:	2300      	movs	r3, #0

   810be:	4618      	mov	r0, r3
   810c0:	3708      	adds	r7, #8
   810c2:	46bd      	mov	sp, r7
   810c4:	bd80      	pop	{r7, pc}
   810c6:	bf00      	nop
   810c8:	20000e80 	.word	0x20000e80
   810cc:	20000e40 	.word	0x20000e40

000810d0 <osc_enable>:
{
   810d0:	b580      	push	{r7, lr}
   810d2:	b082      	sub	sp, #8
   810d4:	af00      	add	r7, sp, #0
   810d6:	6078      	str	r0, [r7, #4]
   810d8:	687b      	ldr	r3, [r7, #4]
   810da:	2b07      	cmp	r3, #7
   810dc:	d82e      	bhi.n	8113c <osc_enable+0x6c>
   810de:	a201      	add	r2, pc, #4	; (adr r2, 810e4 <osc_enable+0x14>)
   810e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   810e4:	0008113b 	.word	0x0008113b
   810e8:	00081105 	.word	0x00081105
   810ec:	0008110d 	.word	0x0008110d
   810f0:	00081115 	.word	0x00081115
   810f4:	0008111d 	.word	0x0008111d
   810f8:	00081125 	.word	0x00081125
   810fc:	0008112d 	.word	0x0008112d
   81100:	00081135 	.word	0x00081135
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   81104:	2000      	movs	r0, #0
   81106:	4b0f      	ldr	r3, [pc, #60]	; (81144 <osc_enable+0x74>)
   81108:	4798      	blx	r3
		break;
   8110a:	e017      	b.n	8113c <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8110c:	2001      	movs	r0, #1
   8110e:	4b0d      	ldr	r3, [pc, #52]	; (81144 <osc_enable+0x74>)
   81110:	4798      	blx	r3
		break;
   81112:	e013      	b.n	8113c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   81114:	2000      	movs	r0, #0
   81116:	4b0c      	ldr	r3, [pc, #48]	; (81148 <osc_enable+0x78>)
   81118:	4798      	blx	r3
		break;
   8111a:	e00f      	b.n	8113c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8111c:	2010      	movs	r0, #16
   8111e:	4b0a      	ldr	r3, [pc, #40]	; (81148 <osc_enable+0x78>)
   81120:	4798      	blx	r3
		break;
   81122:	e00b      	b.n	8113c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   81124:	2020      	movs	r0, #32
   81126:	4b08      	ldr	r3, [pc, #32]	; (81148 <osc_enable+0x78>)
   81128:	4798      	blx	r3
		break;
   8112a:	e007      	b.n	8113c <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8112c:	203e      	movs	r0, #62	; 0x3e
   8112e:	4b07      	ldr	r3, [pc, #28]	; (8114c <osc_enable+0x7c>)
   81130:	4798      	blx	r3
		break;
   81132:	e003      	b.n	8113c <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   81134:	4b06      	ldr	r3, [pc, #24]	; (81150 <osc_enable+0x80>)
   81136:	4798      	blx	r3
		break;
   81138:	e000      	b.n	8113c <osc_enable+0x6c>
		break;
   8113a:	bf00      	nop
}
   8113c:	bf00      	nop
   8113e:	3708      	adds	r7, #8
   81140:	46bd      	mov	sp, r7
   81142:	bd80      	pop	{r7, pc}
   81144:	00083179 	.word	0x00083179
   81148:	000831e5 	.word	0x000831e5
   8114c:	00083259 	.word	0x00083259
   81150:	000832a9 	.word	0x000832a9

00081154 <osc_is_ready>:
{
   81154:	b580      	push	{r7, lr}
   81156:	b082      	sub	sp, #8
   81158:	af00      	add	r7, sp, #0
   8115a:	6078      	str	r0, [r7, #4]
   8115c:	687b      	ldr	r3, [r7, #4]
   8115e:	2b07      	cmp	r3, #7
   81160:	d82f      	bhi.n	811c2 <osc_is_ready+0x6e>
   81162:	a201      	add	r2, pc, #4	; (adr r2, 81168 <osc_is_ready+0x14>)
   81164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81168:	00081189 	.word	0x00081189
   8116c:	0008118d 	.word	0x0008118d
   81170:	0008118d 	.word	0x0008118d
   81174:	0008119f 	.word	0x0008119f
   81178:	0008119f 	.word	0x0008119f
   8117c:	0008119f 	.word	0x0008119f
   81180:	000811b1 	.word	0x000811b1
   81184:	000811b1 	.word	0x000811b1
		return 1;
   81188:	2301      	movs	r3, #1
   8118a:	e01b      	b.n	811c4 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   8118c:	4b0f      	ldr	r3, [pc, #60]	; (811cc <osc_is_ready+0x78>)
   8118e:	4798      	blx	r3
   81190:	4603      	mov	r3, r0
   81192:	2b00      	cmp	r3, #0
   81194:	bf14      	ite	ne
   81196:	2301      	movne	r3, #1
   81198:	2300      	moveq	r3, #0
   8119a:	b2db      	uxtb	r3, r3
   8119c:	e012      	b.n	811c4 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   8119e:	4b0c      	ldr	r3, [pc, #48]	; (811d0 <osc_is_ready+0x7c>)
   811a0:	4798      	blx	r3
   811a2:	4603      	mov	r3, r0
   811a4:	2b00      	cmp	r3, #0
   811a6:	bf14      	ite	ne
   811a8:	2301      	movne	r3, #1
   811aa:	2300      	moveq	r3, #0
   811ac:	b2db      	uxtb	r3, r3
   811ae:	e009      	b.n	811c4 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   811b0:	4b08      	ldr	r3, [pc, #32]	; (811d4 <osc_is_ready+0x80>)
   811b2:	4798      	blx	r3
   811b4:	4603      	mov	r3, r0
   811b6:	2b00      	cmp	r3, #0
   811b8:	bf14      	ite	ne
   811ba:	2301      	movne	r3, #1
   811bc:	2300      	moveq	r3, #0
   811be:	b2db      	uxtb	r3, r3
   811c0:	e000      	b.n	811c4 <osc_is_ready+0x70>
	return 0;
   811c2:	2300      	movs	r3, #0
}
   811c4:	4618      	mov	r0, r3
   811c6:	3708      	adds	r7, #8
   811c8:	46bd      	mov	sp, r7
   811ca:	bd80      	pop	{r7, pc}
   811cc:	000831b1 	.word	0x000831b1
   811d0:	00083241 	.word	0x00083241
   811d4:	000832f5 	.word	0x000832f5

000811d8 <osc_wait_ready>:
{
   811d8:	b580      	push	{r7, lr}
   811da:	b082      	sub	sp, #8
   811dc:	af00      	add	r7, sp, #0
   811de:	4603      	mov	r3, r0
   811e0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   811e2:	bf00      	nop
   811e4:	79fb      	ldrb	r3, [r7, #7]
   811e6:	4618      	mov	r0, r3
   811e8:	4b06      	ldr	r3, [pc, #24]	; (81204 <osc_wait_ready+0x2c>)
   811ea:	4798      	blx	r3
   811ec:	4603      	mov	r3, r0
   811ee:	f083 0301 	eor.w	r3, r3, #1
   811f2:	b2db      	uxtb	r3, r3
   811f4:	2b00      	cmp	r3, #0
   811f6:	d1f5      	bne.n	811e4 <osc_wait_ready+0xc>
}
   811f8:	bf00      	nop
   811fa:	bf00      	nop
   811fc:	3708      	adds	r7, #8
   811fe:	46bd      	mov	sp, r7
   81200:	bd80      	pop	{r7, pc}
   81202:	bf00      	nop
   81204:	00081155 	.word	0x00081155

00081208 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   81208:	b580      	push	{r7, lr}
   8120a:	af00      	add	r7, sp, #0
	udd_detach();
   8120c:	4b01      	ldr	r3, [pc, #4]	; (81214 <udc_detach+0xc>)
   8120e:	4798      	blx	r3
}
   81210:	bf00      	nop
   81212:	bd80      	pop	{r7, pc}
   81214:	00084769 	.word	0x00084769

00081218 <naeusb_sam_cfg_out>:
#ifndef RSTC_CR_KEY_PASSWD
#define RSTC_CR_KEY_PASSWD RSTC_CR_KEY(0xA5)
#endif

void naeusb_sam_cfg_out(void)
{
   81218:	b580      	push	{r7, lr}
   8121a:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   8121c:	4b34      	ldr	r3, [pc, #208]	; (812f0 <naeusb_sam_cfg_out+0xd8>)
   8121e:	885b      	ldrh	r3, [r3, #2]
   81220:	b2db      	uxtb	r3, r3
   81222:	3b01      	subs	r3, #1
   81224:	2b10      	cmp	r3, #16
   81226:	d85f      	bhi.n	812e8 <naeusb_sam_cfg_out+0xd0>
   81228:	a201      	add	r2, pc, #4	; (adr r2, 81230 <naeusb_sam_cfg_out+0x18>)
   8122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8122e:	bf00      	nop
   81230:	00081275 	.word	0x00081275
   81234:	00081289 	.word	0x00081289
   81238:	00081291 	.word	0x00081291
   8123c:	000812e9 	.word	0x000812e9
   81240:	000812e9 	.word	0x000812e9
   81244:	000812e9 	.word	0x000812e9
   81248:	000812e9 	.word	0x000812e9
   8124c:	000812e9 	.word	0x000812e9
   81250:	000812e9 	.word	0x000812e9
   81254:	000812e9 	.word	0x000812e9
   81258:	000812e9 	.word	0x000812e9
   8125c:	000812e9 	.word	0x000812e9
   81260:	000812e9 	.word	0x000812e9
   81264:	000812e9 	.word	0x000812e9
   81268:	000812e9 	.word	0x000812e9
   8126c:	000812bf 	.word	0x000812bf
   81270:	000812e3 	.word	0x000812e3
    {
        /* Turn on slow clock */
    case SAM_SLOW_CLOCK_ON:
        osc_enable(OSC_MAINCK_XTAL);
   81274:	2006      	movs	r0, #6
   81276:	4b1f      	ldr	r3, [pc, #124]	; (812f4 <naeusb_sam_cfg_out+0xdc>)
   81278:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   8127a:	2006      	movs	r0, #6
   8127c:	4b1e      	ldr	r3, [pc, #120]	; (812f8 <naeusb_sam_cfg_out+0xe0>)
   8127e:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   81280:	2010      	movs	r0, #16
   81282:	4b1e      	ldr	r3, [pc, #120]	; (812fc <naeusb_sam_cfg_out+0xe4>)
   81284:	4798      	blx	r3
        break;
   81286:	e030      	b.n	812ea <naeusb_sam_cfg_out+0xd2>

        /* Turn off slow clock */
    case SAM_SLOW_CLOCK_OFF:
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81288:	2010      	movs	r0, #16
   8128a:	4b1d      	ldr	r3, [pc, #116]	; (81300 <naeusb_sam_cfg_out+0xe8>)
   8128c:	4798      	blx	r3
        break;
   8128e:	e02c      	b.n	812ea <naeusb_sam_cfg_out+0xd2>
    case SAM_ENTER_BOOTLOADER:
        /* Turn off connected stuff */
        //board_power(0);

        /* Clear ROM-mapping bit. */
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   81290:	2201      	movs	r2, #1
   81292:	210c      	movs	r1, #12
   81294:	481b      	ldr	r0, [pc, #108]	; (81304 <naeusb_sam_cfg_out+0xec>)
   81296:	4b1c      	ldr	r3, [pc, #112]	; (81308 <naeusb_sam_cfg_out+0xf0>)
   81298:	4798      	blx	r3

        /* Disconnect USB (will kill connection) */
        udc_detach();
   8129a:	4b1c      	ldr	r3, [pc, #112]	; (8130c <naeusb_sam_cfg_out+0xf4>)
   8129c:	4798      	blx	r3

        /* With knowledge that I will rise again, I lay down my life. */
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   8129e:	bf00      	nop
   812a0:	4b1b      	ldr	r3, [pc, #108]	; (81310 <naeusb_sam_cfg_out+0xf8>)
   812a2:	685b      	ldr	r3, [r3, #4]
   812a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   812a8:	2b00      	cmp	r3, #0
   812aa:	d1f9      	bne.n	812a0 <naeusb_sam_cfg_out+0x88>
        //RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   812ac:	4b18      	ldr	r3, [pc, #96]	; (81310 <naeusb_sam_cfg_out+0xf8>)
   812ae:	681b      	ldr	r3, [r3, #0]
   812b0:	4a17      	ldr	r2, [pc, #92]	; (81310 <naeusb_sam_cfg_out+0xf8>)
   812b2:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   812b6:	f043 0305 	orr.w	r3, r3, #5
   812ba:	6013      	str	r3, [r2, #0]
        while(1);
   812bc:	e7fe      	b.n	812bc <naeusb_sam_cfg_out+0xa4>
        /* Disconnect USB (will kill stuff) */

        /* Make the jump */
        break;
    case SAM_RESET:
        udc_detach();
   812be:	4b13      	ldr	r3, [pc, #76]	; (8130c <naeusb_sam_cfg_out+0xf4>)
   812c0:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   812c2:	bf00      	nop
   812c4:	4b12      	ldr	r3, [pc, #72]	; (81310 <naeusb_sam_cfg_out+0xf8>)
   812c6:	685b      	ldr	r3, [r3, #4]
   812c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   812cc:	2b00      	cmp	r3, #0
   812ce:	d1f9      	bne.n	812c4 <naeusb_sam_cfg_out+0xac>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   812d0:	4b0f      	ldr	r3, [pc, #60]	; (81310 <naeusb_sam_cfg_out+0xf8>)
   812d2:	681b      	ldr	r3, [r3, #0]
   812d4:	4a0e      	ldr	r2, [pc, #56]	; (81310 <naeusb_sam_cfg_out+0xf8>)
   812d6:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   812da:	f043 0305 	orr.w	r3, r3, #5
   812de:	6013      	str	r3, [r2, #0]
        while(1);
   812e0:	e7fe      	b.n	812e0 <naeusb_sam_cfg_out+0xc8>
        break;
        
    case SAM_RELEASE_LOCK: // use in case of pipe error emergency
	#if USB_DEVICE_PRODUCT_ID != 0xACE0
        FPGA_releaselock();
   812e2:	4b0c      	ldr	r3, [pc, #48]	; (81314 <naeusb_sam_cfg_out+0xfc>)
   812e4:	4798      	blx	r3
	#endif
        break;
   812e6:	e000      	b.n	812ea <naeusb_sam_cfg_out+0xd2>

        /* Oh well, sucks to be you */
    default:
        break;
   812e8:	bf00      	nop
    }
}
   812ea:	bf00      	nop
   812ec:	bd80      	pop	{r7, pc}
   812ee:	bf00      	nop
   812f0:	20001468 	.word	0x20001468
   812f4:	000810d1 	.word	0x000810d1
   812f8:	000811d9 	.word	0x000811d9
   812fc:	00083079 	.word	0x00083079
   81300:	000830f9 	.word	0x000830f9
   81304:	400e0800 	.word	0x400e0800
   81308:	000827f1 	.word	0x000827f1
   8130c:	00081209 	.word	0x00081209
   81310:	400e1200 	.word	0x400e1200
   81314:	00080ce5 	.word	0x00080ce5

00081318 <naeusb_fw_version_in>:

bool naeusb_fw_version_in(void)
{
   81318:	b480      	push	{r7}
   8131a:	af00      	add	r7, sp, #0
    respbuf[0] = FW_VER_MAJOR;
   8131c:	4b09      	ldr	r3, [pc, #36]	; (81344 <naeusb_fw_version_in+0x2c>)
   8131e:	2201      	movs	r2, #1
   81320:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   81322:	4b08      	ldr	r3, [pc, #32]	; (81344 <naeusb_fw_version_in+0x2c>)
   81324:	2232      	movs	r2, #50	; 0x32
   81326:	705a      	strb	r2, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   81328:	4b06      	ldr	r3, [pc, #24]	; (81344 <naeusb_fw_version_in+0x2c>)
   8132a:	2200      	movs	r2, #0
   8132c:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   8132e:	4b06      	ldr	r3, [pc, #24]	; (81348 <naeusb_fw_version_in+0x30>)
   81330:	4a04      	ldr	r2, [pc, #16]	; (81344 <naeusb_fw_version_in+0x2c>)
   81332:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = 3;
   81334:	4b04      	ldr	r3, [pc, #16]	; (81348 <naeusb_fw_version_in+0x30>)
   81336:	2203      	movs	r2, #3
   81338:	819a      	strh	r2, [r3, #12]
    return true;
   8133a:	2301      	movs	r3, #1

}
   8133c:	4618      	mov	r0, r3
   8133e:	46bd      	mov	sp, r7
   81340:	bc80      	pop	{r7}
   81342:	4770      	bx	lr
   81344:	20000fdc 	.word	0x20000fdc
   81348:	20001468 	.word	0x20001468

0008134c <naeusb_build_date_in>:

static const char BUILD_DATE[] = __DATE__;
static const char BUILD_TIME[] = __TIME__;
bool naeusb_build_date_in(void)
{
   8134c:	b580      	push	{r7, lr}
   8134e:	af00      	add	r7, sp, #0
    strncpy(respbuf, BUILD_TIME, 64);
   81350:	2240      	movs	r2, #64	; 0x40
   81352:	490d      	ldr	r1, [pc, #52]	; (81388 <naeusb_build_date_in+0x3c>)
   81354:	480d      	ldr	r0, [pc, #52]	; (8138c <naeusb_build_date_in+0x40>)
   81356:	4b0e      	ldr	r3, [pc, #56]	; (81390 <naeusb_build_date_in+0x44>)
   81358:	4798      	blx	r3
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   8135a:	4b0c      	ldr	r3, [pc, #48]	; (8138c <naeusb_build_date_in+0x40>)
   8135c:	2220      	movs	r2, #32
   8135e:	721a      	strb	r2, [r3, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81360:	4b0c      	ldr	r3, [pc, #48]	; (81394 <naeusb_build_date_in+0x48>)
   81362:	2237      	movs	r2, #55	; 0x37
   81364:	490c      	ldr	r1, [pc, #48]	; (81398 <naeusb_build_date_in+0x4c>)
   81366:	4618      	mov	r0, r3
   81368:	4b09      	ldr	r3, [pc, #36]	; (81390 <naeusb_build_date_in+0x44>)
   8136a:	4798      	blx	r3
    udd_g_ctrlreq.payload = respbuf;
   8136c:	4b0b      	ldr	r3, [pc, #44]	; (8139c <naeusb_build_date_in+0x50>)
   8136e:	4a07      	ldr	r2, [pc, #28]	; (8138c <naeusb_build_date_in+0x40>)
   81370:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81372:	4806      	ldr	r0, [pc, #24]	; (8138c <naeusb_build_date_in+0x40>)
   81374:	4b0a      	ldr	r3, [pc, #40]	; (813a0 <naeusb_build_date_in+0x54>)
   81376:	4798      	blx	r3
   81378:	4603      	mov	r3, r0
   8137a:	b29a      	uxth	r2, r3
   8137c:	4b07      	ldr	r3, [pc, #28]	; (8139c <naeusb_build_date_in+0x50>)
   8137e:	819a      	strh	r2, [r3, #12]
    return true;
   81380:	2301      	movs	r3, #1
}
   81382:	4618      	mov	r0, r3
   81384:	bd80      	pop	{r7, pc}
   81386:	bf00      	nop
   81388:	0008cf50 	.word	0x0008cf50
   8138c:	20000fdc 	.word	0x20000fdc
   81390:	00086531 	.word	0x00086531
   81394:	20000fe5 	.word	0x20000fe5
   81398:	0008cf44 	.word	0x0008cf44
   8139c:	20001468 	.word	0x20001468
   813a0:	000864d5 	.word	0x000864d5

000813a4 <naeusb_setup_out_received>:


bool naeusb_setup_out_received(void)
{
   813a4:	b480      	push	{r7}
   813a6:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {
   813a8:	4b06      	ldr	r3, [pc, #24]	; (813c4 <naeusb_setup_out_received+0x20>)
   813aa:	785b      	ldrb	r3, [r3, #1]
   813ac:	2b22      	cmp	r3, #34	; 0x22
   813ae:	d104      	bne.n	813ba <naeusb_setup_out_received+0x16>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   813b0:	4b04      	ldr	r3, [pc, #16]	; (813c4 <naeusb_setup_out_received+0x20>)
   813b2:	4a05      	ldr	r2, [pc, #20]	; (813c8 <naeusb_setup_out_received+0x24>)
   813b4:	611a      	str	r2, [r3, #16]
            return true;
   813b6:	2301      	movs	r3, #1
   813b8:	e000      	b.n	813bc <naeusb_setup_out_received+0x18>
            break;
    }
    return false;
   813ba:	2300      	movs	r3, #0
}
   813bc:	4618      	mov	r0, r3
   813be:	46bd      	mov	sp, r7
   813c0:	bc80      	pop	{r7}
   813c2:	4770      	bx	lr
   813c4:	20001468 	.word	0x20001468
   813c8:	00081219 	.word	0x00081219

000813cc <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   813cc:	b580      	push	{r7, lr}
   813ce:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {
   813d0:	4b08      	ldr	r3, [pc, #32]	; (813f4 <naeusb_setup_in_received+0x28>)
   813d2:	785b      	ldrb	r3, [r3, #1]
   813d4:	2b17      	cmp	r3, #23
   813d6:	d002      	beq.n	813de <naeusb_setup_in_received+0x12>
   813d8:	2b40      	cmp	r3, #64	; 0x40
   813da:	d004      	beq.n	813e6 <naeusb_setup_in_received+0x1a>
   813dc:	e007      	b.n	813ee <naeusb_setup_in_received+0x22>
        case REQ_FW_VERSION:
            return naeusb_fw_version_in();
   813de:	4b06      	ldr	r3, [pc, #24]	; (813f8 <naeusb_setup_in_received+0x2c>)
   813e0:	4798      	blx	r3
   813e2:	4603      	mov	r3, r0
   813e4:	e004      	b.n	813f0 <naeusb_setup_in_received+0x24>
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
   813e6:	4b05      	ldr	r3, [pc, #20]	; (813fc <naeusb_setup_in_received+0x30>)
   813e8:	4798      	blx	r3
   813ea:	4603      	mov	r3, r0
   813ec:	e000      	b.n	813f0 <naeusb_setup_in_received+0x24>
            break;
    }
    return false;
   813ee:	2300      	movs	r3, #0
}
   813f0:	4618      	mov	r0, r3
   813f2:	bd80      	pop	{r7, pc}
   813f4:	20001468 	.word	0x20001468
   813f8:	00081319 	.word	0x00081319
   813fc:	0008134d 	.word	0x0008134d

00081400 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81400:	b580      	push	{r7, lr}
   81402:	af00      	add	r7, sp, #0
    naeusb_add_in_handler(naeusb_setup_in_received);
   81404:	4803      	ldr	r0, [pc, #12]	; (81414 <naeusb_register_handlers+0x14>)
   81406:	4b04      	ldr	r3, [pc, #16]	; (81418 <naeusb_register_handlers+0x18>)
   81408:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   8140a:	4804      	ldr	r0, [pc, #16]	; (8141c <naeusb_register_handlers+0x1c>)
   8140c:	4b04      	ldr	r3, [pc, #16]	; (81420 <naeusb_register_handlers+0x20>)
   8140e:	4798      	blx	r3
   81410:	bf00      	nop
   81412:	bd80      	pop	{r7, pc}
   81414:	000813cd 	.word	0x000813cd
   81418:	00080eed 	.word	0x00080eed
   8141c:	000813a5 	.word	0x000813a5
   81420:	00080f2d 	.word	0x00080f2d

00081424 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   81424:	b580      	push	{r7, lr}
   81426:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   81428:	4b0d      	ldr	r3, [pc, #52]	; (81460 <openadc_progfpga_bulk+0x3c>)
   8142a:	885b      	ldrh	r3, [r3, #2]
   8142c:	2ba2      	cmp	r3, #162	; 0xa2
   8142e:	d00f      	beq.n	81450 <openadc_progfpga_bulk+0x2c>
   81430:	2ba2      	cmp	r3, #162	; 0xa2
   81432:	dc11      	bgt.n	81458 <openadc_progfpga_bulk+0x34>
   81434:	2ba0      	cmp	r3, #160	; 0xa0
   81436:	d002      	beq.n	8143e <openadc_progfpga_bulk+0x1a>
   81438:	2ba1      	cmp	r3, #161	; 0xa1
   8143a:	d003      	beq.n	81444 <openadc_progfpga_bulk+0x20>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   8143c:	e00c      	b.n	81458 <openadc_progfpga_bulk+0x34>
        fpga_program_setup1();
   8143e:	4b09      	ldr	r3, [pc, #36]	; (81464 <openadc_progfpga_bulk+0x40>)
   81440:	4798      	blx	r3
        break;
   81442:	e00a      	b.n	8145a <openadc_progfpga_bulk+0x36>
        fpga_program_setup2();
   81444:	4b08      	ldr	r3, [pc, #32]	; (81468 <openadc_progfpga_bulk+0x44>)
   81446:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   81448:	4b08      	ldr	r3, [pc, #32]	; (8146c <openadc_progfpga_bulk+0x48>)
   8144a:	220a      	movs	r2, #10
   8144c:	701a      	strb	r2, [r3, #0]
        break;
   8144e:	e004      	b.n	8145a <openadc_progfpga_bulk+0x36>
        blockendpoint_usage = bep_emem;
   81450:	4b06      	ldr	r3, [pc, #24]	; (8146c <openadc_progfpga_bulk+0x48>)
   81452:	2200      	movs	r2, #0
   81454:	701a      	strb	r2, [r3, #0]
        break;
   81456:	e000      	b.n	8145a <openadc_progfpga_bulk+0x36>
        break;
   81458:	bf00      	nop
    }
}
   8145a:	bf00      	nop
   8145c:	bd80      	pop	{r7, pc}
   8145e:	bf00      	nop
   81460:	20001468 	.word	0x20001468
   81464:	00080e35 	.word	0x00080e35
   81468:	00080eb5 	.word	0x00080eb5
   8146c:	20000ec6 	.word	0x20000ec6

00081470 <openadc_readmem_bulk>:

void openadc_readmem_bulk(void)
{
   81470:	b580      	push	{r7, lr}
   81472:	b082      	sub	sp, #8
   81474:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81476:	4b0e      	ldr	r3, [pc, #56]	; (814b0 <openadc_readmem_bulk+0x40>)
   81478:	681b      	ldr	r3, [r3, #0]
   8147a:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8147c:	4b0c      	ldr	r3, [pc, #48]	; (814b0 <openadc_readmem_bulk+0x40>)
   8147e:	685b      	ldr	r3, [r3, #4]
   81480:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   81482:	4b0c      	ldr	r3, [pc, #48]	; (814b4 <openadc_readmem_bulk+0x44>)
   81484:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   81486:	bf00      	nop
   81488:	2002      	movs	r0, #2
   8148a:	4b0b      	ldr	r3, [pc, #44]	; (814b8 <openadc_readmem_bulk+0x48>)
   8148c:	4798      	blx	r3
   8148e:	4603      	mov	r3, r0
   81490:	2b00      	cmp	r3, #0
   81492:	d0f9      	beq.n	81488 <openadc_readmem_bulk+0x18>

    FPGA_setaddr(address);
   81494:	6838      	ldr	r0, [r7, #0]
   81496:	4b09      	ldr	r3, [pc, #36]	; (814bc <openadc_readmem_bulk+0x4c>)
   81498:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   8149a:	4a09      	ldr	r2, [pc, #36]	; (814c0 <openadc_readmem_bulk+0x50>)
   8149c:	6879      	ldr	r1, [r7, #4]
   8149e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   814a2:	4b08      	ldr	r3, [pc, #32]	; (814c4 <openadc_readmem_bulk+0x54>)
   814a4:	4798      	blx	r3
        buflen,
        main_vendor_bulk_in_received
        )) {
            //abort
        }
}
   814a6:	bf00      	nop
   814a8:	3708      	adds	r7, #8
   814aa:	46bd      	mov	sp, r7
   814ac:	bd80      	pop	{r7, pc}
   814ae:	bf00      	nop
   814b0:	2000101c 	.word	0x2000101c
   814b4:	00080ce5 	.word	0x00080ce5
   814b8:	00080ca5 	.word	0x00080ca5
   814bc:	00080d15 	.word	0x00080d15
   814c0:	000815d5 	.word	0x000815d5
   814c4:	0008421d 	.word	0x0008421d

000814c8 <openadc_writemem_bulk>:

void openadc_writemem_bulk(void)
{
   814c8:	b580      	push	{r7, lr}
   814ca:	b082      	sub	sp, #8
   814cc:	af00      	add	r7, sp, #0
    //uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   814ce:	4b09      	ldr	r3, [pc, #36]	; (814f4 <openadc_writemem_bulk+0x2c>)
   814d0:	685b      	ldr	r3, [r3, #4]
   814d2:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   814d4:	4b08      	ldr	r3, [pc, #32]	; (814f8 <openadc_writemem_bulk+0x30>)
   814d6:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   814d8:	bf00      	nop
   814da:	2004      	movs	r0, #4
   814dc:	4b07      	ldr	r3, [pc, #28]	; (814fc <openadc_writemem_bulk+0x34>)
   814de:	4798      	blx	r3
   814e0:	4603      	mov	r3, r0
   814e2:	2b00      	cmp	r3, #0
   814e4:	d0f9      	beq.n	814da <openadc_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   814e6:	6878      	ldr	r0, [r7, #4]
   814e8:	4b05      	ldr	r3, [pc, #20]	; (81500 <openadc_writemem_bulk+0x38>)
   814ea:	4798      	blx	r3

    /* Transaction done in generic callback */

}
   814ec:	bf00      	nop
   814ee:	3708      	adds	r7, #8
   814f0:	46bd      	mov	sp, r7
   814f2:	bd80      	pop	{r7, pc}
   814f4:	2000101c 	.word	0x2000101c
   814f8:	00080ce5 	.word	0x00080ce5
   814fc:	00080ca5 	.word	0x00080ca5
   81500:	00080d15 	.word	0x00080d15

00081504 <openadc_readmem_ctrl>:

void openadc_readmem_ctrl(void)
{
   81504:	b580      	push	{r7, lr}
   81506:	b082      	sub	sp, #8
   81508:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8150a:	4b0e      	ldr	r3, [pc, #56]	; (81544 <openadc_readmem_ctrl+0x40>)
   8150c:	681b      	ldr	r3, [r3, #0]
   8150e:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81510:	4b0c      	ldr	r3, [pc, #48]	; (81544 <openadc_readmem_ctrl+0x40>)
   81512:	685b      	ldr	r3, [r3, #4]
   81514:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   81516:	4b0c      	ldr	r3, [pc, #48]	; (81548 <openadc_readmem_ctrl+0x44>)
   81518:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   8151a:	bf00      	nop
   8151c:	2005      	movs	r0, #5
   8151e:	4b0b      	ldr	r3, [pc, #44]	; (8154c <openadc_readmem_ctrl+0x48>)
   81520:	4798      	blx	r3
   81522:	4603      	mov	r3, r0
   81524:	2b00      	cmp	r3, #0
   81526:	d0f9      	beq.n	8151c <openadc_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   81528:	6838      	ldr	r0, [r7, #0]
   8152a:	4b09      	ldr	r3, [pc, #36]	; (81550 <openadc_readmem_ctrl+0x4c>)
   8152c:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   8152e:	4b09      	ldr	r3, [pc, #36]	; (81554 <openadc_readmem_ctrl+0x50>)
   81530:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   81534:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   81536:	4a08      	ldr	r2, [pc, #32]	; (81558 <openadc_readmem_ctrl+0x54>)
   81538:	687b      	ldr	r3, [r7, #4]
   8153a:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    
}
   8153c:	bf00      	nop
   8153e:	3708      	adds	r7, #8
   81540:	46bd      	mov	sp, r7
   81542:	bd80      	pop	{r7, pc}
   81544:	2000101c 	.word	0x2000101c
   81548:	00080ce5 	.word	0x00080ce5
   8154c:	00080ca5 	.word	0x00080ca5
   81550:	00080d15 	.word	0x00080d15
   81554:	20000ec8 	.word	0x20000ec8
   81558:	20000ecc 	.word	0x20000ecc

0008155c <openadc_writemem_ctrl>:

void openadc_writemem_ctrl(void)
{
   8155c:	b580      	push	{r7, lr}
   8155e:	b084      	sub	sp, #16
   81560:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81562:	4b16      	ldr	r3, [pc, #88]	; (815bc <openadc_writemem_ctrl+0x60>)
   81564:	681b      	ldr	r3, [r3, #0]
   81566:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81568:	4b14      	ldr	r3, [pc, #80]	; (815bc <openadc_writemem_ctrl+0x60>)
   8156a:	685b      	ldr	r3, [r3, #4]
   8156c:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   8156e:	4b14      	ldr	r3, [pc, #80]	; (815c0 <openadc_writemem_ctrl+0x64>)
   81570:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   81572:	4b14      	ldr	r3, [pc, #80]	; (815c4 <openadc_writemem_ctrl+0x68>)
   81574:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   81576:	bf00      	nop
   81578:	2001      	movs	r0, #1
   8157a:	4b13      	ldr	r3, [pc, #76]	; (815c8 <openadc_writemem_ctrl+0x6c>)
   8157c:	4798      	blx	r3
   8157e:	4603      	mov	r3, r0
   81580:	2b00      	cmp	r3, #0
   81582:	d0f9      	beq.n	81578 <openadc_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   81584:	6878      	ldr	r0, [r7, #4]
   81586:	4b11      	ldr	r3, [pc, #68]	; (815cc <openadc_writemem_ctrl+0x70>)
   81588:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   8158a:	2300      	movs	r3, #0
   8158c:	60fb      	str	r3, [r7, #12]
   8158e:	e00b      	b.n	815a8 <openadc_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   81590:	683a      	ldr	r2, [r7, #0]
   81592:	68fb      	ldr	r3, [r7, #12]
   81594:	441a      	add	r2, r3
   81596:	4b0e      	ldr	r3, [pc, #56]	; (815d0 <openadc_writemem_ctrl+0x74>)
   81598:	6819      	ldr	r1, [r3, #0]
   8159a:	68fb      	ldr	r3, [r7, #12]
   8159c:	440b      	add	r3, r1
   8159e:	7812      	ldrb	r2, [r2, #0]
   815a0:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   815a2:	68fb      	ldr	r3, [r7, #12]
   815a4:	3301      	adds	r3, #1
   815a6:	60fb      	str	r3, [r7, #12]
   815a8:	68fa      	ldr	r2, [r7, #12]
   815aa:	68bb      	ldr	r3, [r7, #8]
   815ac:	429a      	cmp	r2, r3
   815ae:	d3ef      	bcc.n	81590 <openadc_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   815b0:	4b04      	ldr	r3, [pc, #16]	; (815c4 <openadc_writemem_ctrl+0x68>)
   815b2:	4798      	blx	r3

}
   815b4:	bf00      	nop
   815b6:	3710      	adds	r7, #16
   815b8:	46bd      	mov	sp, r7
   815ba:	bd80      	pop	{r7, pc}
   815bc:	2000101c 	.word	0x2000101c
   815c0:	20001024 	.word	0x20001024
   815c4:	00080ce5 	.word	0x00080ce5
   815c8:	00080ca5 	.word	0x00080ca5
   815cc:	00080d15 	.word	0x00080d15
   815d0:	2000028c 	.word	0x2000028c

000815d4 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   815d4:	b580      	push	{r7, lr}
   815d6:	b082      	sub	sp, #8
   815d8:	af00      	add	r7, sp, #0
   815da:	4603      	mov	r3, r0
   815dc:	6039      	str	r1, [r7, #0]
   815de:	71fb      	strb	r3, [r7, #7]
   815e0:	4613      	mov	r3, r2
   815e2:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    FPGA_releaselock();
   815e4:	4b08      	ldr	r3, [pc, #32]	; (81608 <main_vendor_bulk_in_received+0x34>)
   815e6:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   815e8:	79fb      	ldrb	r3, [r7, #7]
   815ea:	2b00      	cmp	r3, #0
   815ec:	d108      	bne.n	81600 <main_vendor_bulk_in_received+0x2c>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   815ee:	4b07      	ldr	r3, [pc, #28]	; (8160c <main_vendor_bulk_in_received+0x38>)
   815f0:	4798      	blx	r3
   815f2:	4603      	mov	r3, r0
   815f4:	2b02      	cmp	r3, #2
   815f6:	d104      	bne.n	81602 <main_vendor_bulk_in_received+0x2e>
        FPGA_setlock(fpga_unlocked);
   815f8:	2000      	movs	r0, #0
   815fa:	4b05      	ldr	r3, [pc, #20]	; (81610 <main_vendor_bulk_in_received+0x3c>)
   815fc:	4798      	blx	r3
   815fe:	e000      	b.n	81602 <main_vendor_bulk_in_received+0x2e>
        return; // Transfer aborted/error
   81600:	bf00      	nop
    }
}
   81602:	3708      	adds	r7, #8
   81604:	46bd      	mov	sp, r7
   81606:	bd80      	pop	{r7, pc}
   81608:	00080ce5 	.word	0x00080ce5
   8160c:	00080cfd 	.word	0x00080cfd
   81610:	00080ca5 	.word	0x00080ca5

00081614 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81614:	b580      	push	{r7, lr}
   81616:	b084      	sub	sp, #16
   81618:	af00      	add	r7, sp, #0
   8161a:	4603      	mov	r3, r0
   8161c:	6039      	str	r1, [r7, #0]
   8161e:	71fb      	strb	r3, [r7, #7]
   81620:	4613      	mov	r3, r2
   81622:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    FPGA_releaselock();
   81624:	4b24      	ldr	r3, [pc, #144]	; (816b8 <main_vendor_bulk_out_received+0xa4>)
   81626:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   81628:	79fb      	ldrb	r3, [r7, #7]
   8162a:	2b00      	cmp	r3, #0
   8162c:	d006      	beq.n	8163c <main_vendor_bulk_out_received+0x28>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   8162e:	4a23      	ldr	r2, [pc, #140]	; (816bc <main_vendor_bulk_out_received+0xa8>)
   81630:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81634:	4822      	ldr	r0, [pc, #136]	; (816c0 <main_vendor_bulk_out_received+0xac>)
   81636:	4b23      	ldr	r3, [pc, #140]	; (816c4 <main_vendor_bulk_out_received+0xb0>)
   81638:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   8163a:	e039      	b.n	816b0 <main_vendor_bulk_out_received+0x9c>
    }

    if (blockendpoint_usage == bep_emem){
   8163c:	4b22      	ldr	r3, [pc, #136]	; (816c8 <main_vendor_bulk_out_received+0xb4>)
   8163e:	781b      	ldrb	r3, [r3, #0]
   81640:	2b00      	cmp	r3, #0
   81642:	d11a      	bne.n	8167a <main_vendor_bulk_out_received+0x66>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81644:	2300      	movs	r3, #0
   81646:	60fb      	str	r3, [r7, #12]
   81648:	e00b      	b.n	81662 <main_vendor_bulk_out_received+0x4e>
            xram[i] = main_buf_loopback[i];
   8164a:	4b20      	ldr	r3, [pc, #128]	; (816cc <main_vendor_bulk_out_received+0xb8>)
   8164c:	681a      	ldr	r2, [r3, #0]
   8164e:	68fb      	ldr	r3, [r7, #12]
   81650:	4413      	add	r3, r2
   81652:	491b      	ldr	r1, [pc, #108]	; (816c0 <main_vendor_bulk_out_received+0xac>)
   81654:	68fa      	ldr	r2, [r7, #12]
   81656:	440a      	add	r2, r1
   81658:	7812      	ldrb	r2, [r2, #0]
   8165a:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   8165c:	68fb      	ldr	r3, [r7, #12]
   8165e:	3301      	adds	r3, #1
   81660:	60fb      	str	r3, [r7, #12]
   81662:	68fa      	ldr	r2, [r7, #12]
   81664:	683b      	ldr	r3, [r7, #0]
   81666:	429a      	cmp	r2, r3
   81668:	d3ef      	bcc.n	8164a <main_vendor_bulk_out_received+0x36>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   8166a:	4b19      	ldr	r3, [pc, #100]	; (816d0 <main_vendor_bulk_out_received+0xbc>)
   8166c:	4798      	blx	r3
   8166e:	4603      	mov	r3, r0
   81670:	2b04      	cmp	r3, #4
   81672:	d117      	bne.n	816a4 <main_vendor_bulk_out_received+0x90>
            FPGA_releaselock();
   81674:	4b10      	ldr	r3, [pc, #64]	; (816b8 <main_vendor_bulk_out_received+0xa4>)
   81676:	4798      	blx	r3
   81678:	e014      	b.n	816a4 <main_vendor_bulk_out_received+0x90>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   8167a:	4b13      	ldr	r3, [pc, #76]	; (816c8 <main_vendor_bulk_out_received+0xb4>)
   8167c:	781b      	ldrb	r3, [r3, #0]
   8167e:	2b0a      	cmp	r3, #10
   81680:	d110      	bne.n	816a4 <main_vendor_bulk_out_received+0x90>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   81682:	2300      	movs	r3, #0
   81684:	60bb      	str	r3, [r7, #8]
   81686:	e009      	b.n	8169c <main_vendor_bulk_out_received+0x88>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81688:	4a0d      	ldr	r2, [pc, #52]	; (816c0 <main_vendor_bulk_out_received+0xac>)
   8168a:	68bb      	ldr	r3, [r7, #8]
   8168c:	4413      	add	r3, r2
   8168e:	781b      	ldrb	r3, [r3, #0]
   81690:	4618      	mov	r0, r3
   81692:	4b10      	ldr	r3, [pc, #64]	; (816d4 <main_vendor_bulk_out_received+0xc0>)
   81694:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   81696:	68bb      	ldr	r3, [r7, #8]
   81698:	3301      	adds	r3, #1
   8169a:	60bb      	str	r3, [r7, #8]
   8169c:	68ba      	ldr	r2, [r7, #8]
   8169e:	683b      	ldr	r3, [r7, #0]
   816a0:	429a      	cmp	r2, r3
   816a2:	d3f1      	bcc.n	81688 <main_vendor_bulk_out_received+0x74>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   816a4:	4a05      	ldr	r2, [pc, #20]	; (816bc <main_vendor_bulk_out_received+0xa8>)
   816a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   816aa:	4805      	ldr	r0, [pc, #20]	; (816c0 <main_vendor_bulk_out_received+0xac>)
   816ac:	4b05      	ldr	r3, [pc, #20]	; (816c4 <main_vendor_bulk_out_received+0xb0>)
   816ae:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   816b0:	3710      	adds	r7, #16
   816b2:	46bd      	mov	sp, r7
   816b4:	bd80      	pop	{r7, pc}
   816b6:	bf00      	nop
   816b8:	00080ce5 	.word	0x00080ce5
   816bc:	00081615 	.word	0x00081615
   816c0:	2000105c 	.word	0x2000105c
   816c4:	00084249 	.word	0x00084249
   816c8:	20000ec6 	.word	0x20000ec6
   816cc:	2000028c 	.word	0x2000028c
   816d0:	00080cfd 	.word	0x00080cfd
   816d4:	00080ec9 	.word	0x00080ec9

000816d8 <openadc_setup_in_received>:

bool openadc_setup_in_received(void)
{
   816d8:	b580      	push	{r7, lr}
   816da:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.bRequest){
   816dc:	4b1b      	ldr	r3, [pc, #108]	; (8174c <openadc_setup_in_received+0x74>)
   816de:	785b      	ldrb	r3, [r3, #1]
   816e0:	2b12      	cmp	r3, #18
   816e2:	d002      	beq.n	816ea <openadc_setup_in_received+0x12>
   816e4:	2b15      	cmp	r3, #21
   816e6:	d010      	beq.n	8170a <openadc_setup_in_received+0x32>
   816e8:	e02c      	b.n	81744 <openadc_setup_in_received+0x6c>
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   816ea:	4b19      	ldr	r3, [pc, #100]	; (81750 <openadc_setup_in_received+0x78>)
   816ec:	681b      	ldr	r3, [r3, #0]
   816ee:	4a17      	ldr	r2, [pc, #92]	; (8174c <openadc_setup_in_received+0x74>)
   816f0:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   816f2:	4b18      	ldr	r3, [pc, #96]	; (81754 <openadc_setup_in_received+0x7c>)
   816f4:	681b      	ldr	r3, [r3, #0]
   816f6:	b29a      	uxth	r2, r3
   816f8:	4b14      	ldr	r3, [pc, #80]	; (8174c <openadc_setup_in_received+0x74>)
   816fa:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   816fc:	4b15      	ldr	r3, [pc, #84]	; (81754 <openadc_setup_in_received+0x7c>)
   816fe:	2200      	movs	r2, #0
   81700:	601a      	str	r2, [r3, #0]

        FPGA_releaselock();
   81702:	4b15      	ldr	r3, [pc, #84]	; (81758 <openadc_setup_in_received+0x80>)
   81704:	4798      	blx	r3
        return true;
   81706:	2301      	movs	r3, #1
   81708:	e01d      	b.n	81746 <openadc_setup_in_received+0x6e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   8170a:	2013      	movs	r0, #19
   8170c:	4b13      	ldr	r3, [pc, #76]	; (8175c <openadc_setup_in_received+0x84>)
   8170e:	4798      	blx	r3
   81710:	4603      	mov	r3, r0
   81712:	2b00      	cmp	r3, #0
   81714:	bf14      	ite	ne
   81716:	2301      	movne	r3, #1
   81718:	2300      	moveq	r3, #0
   8171a:	b2db      	uxtb	r3, r3
   8171c:	461a      	mov	r2, r3
   8171e:	4b10      	ldr	r3, [pc, #64]	; (81760 <openadc_setup_in_received+0x88>)
   81720:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   81722:	4b0f      	ldr	r3, [pc, #60]	; (81760 <openadc_setup_in_received+0x88>)
   81724:	2200      	movs	r2, #0
   81726:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81728:	4b0d      	ldr	r3, [pc, #52]	; (81760 <openadc_setup_in_received+0x88>)
   8172a:	2200      	movs	r2, #0
   8172c:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   8172e:	4b0c      	ldr	r3, [pc, #48]	; (81760 <openadc_setup_in_received+0x88>)
   81730:	2200      	movs	r2, #0
   81732:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81734:	4b05      	ldr	r3, [pc, #20]	; (8174c <openadc_setup_in_received+0x74>)
   81736:	4a0a      	ldr	r2, [pc, #40]	; (81760 <openadc_setup_in_received+0x88>)
   81738:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   8173a:	4b04      	ldr	r3, [pc, #16]	; (8174c <openadc_setup_in_received+0x74>)
   8173c:	2204      	movs	r2, #4
   8173e:	819a      	strh	r2, [r3, #12]
        return true;
   81740:	2301      	movs	r3, #1
   81742:	e000      	b.n	81746 <openadc_setup_in_received+0x6e>
        break;
    }
    return false;
   81744:	2300      	movs	r3, #0
}
   81746:	4618      	mov	r0, r3
   81748:	bd80      	pop	{r7, pc}
   8174a:	bf00      	nop
   8174c:	20001468 	.word	0x20001468
   81750:	20000ec8 	.word	0x20000ec8
   81754:	20000ecc 	.word	0x20000ecc
   81758:	00080ce5 	.word	0x00080ce5
   8175c:	00082cd5 	.word	0x00082cd5
   81760:	20000fdc 	.word	0x20000fdc

00081764 <openadc_setup_out_received>:
bool openadc_setup_out_received(void)
{
   81764:	b580      	push	{r7, lr}
   81766:	af00      	add	r7, sp, #0
    blockendpoint_usage = bep_emem;
   81768:	4b2b      	ldr	r3, [pc, #172]	; (81818 <openadc_setup_out_received+0xb4>)
   8176a:	2200      	movs	r2, #0
   8176c:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   8176e:	4b2b      	ldr	r3, [pc, #172]	; (8181c <openadc_setup_out_received+0xb8>)
   81770:	785b      	ldrb	r3, [r3, #1]
   81772:	3b10      	subs	r3, #16
   81774:	2b06      	cmp	r3, #6
   81776:	d842      	bhi.n	817fe <openadc_setup_out_received+0x9a>
   81778:	a201      	add	r2, pc, #4	; (adr r2, 81780 <openadc_setup_out_received+0x1c>)
   8177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8177e:	bf00      	nop
   81780:	0008179d 	.word	0x0008179d
   81784:	000817c9 	.word	0x000817c9
   81788:	000817b3 	.word	0x000817b3
   8178c:	000817df 	.word	0x000817df
   81790:	000817ff 	.word	0x000817ff
   81794:	000817ff 	.word	0x000817ff
   81798:	000817f5 	.word	0x000817f5
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   8179c:	2006      	movs	r0, #6
   8179e:	4b20      	ldr	r3, [pc, #128]	; (81820 <openadc_setup_out_received+0xbc>)
   817a0:	4798      	blx	r3
   817a2:	4603      	mov	r3, r0
   817a4:	2b00      	cmp	r3, #0
   817a6:	d02c      	beq.n	81802 <openadc_setup_out_received+0x9e>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   817a8:	4b1c      	ldr	r3, [pc, #112]	; (8181c <openadc_setup_out_received+0xb8>)
   817aa:	4a1e      	ldr	r2, [pc, #120]	; (81824 <openadc_setup_out_received+0xc0>)
   817ac:	611a      	str	r2, [r3, #16]
            return true;
   817ae:	2301      	movs	r3, #1
   817b0:	e02f      	b.n	81812 <openadc_setup_out_received+0xae>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   817b2:	2006      	movs	r0, #6
   817b4:	4b1a      	ldr	r3, [pc, #104]	; (81820 <openadc_setup_out_received+0xbc>)
   817b6:	4798      	blx	r3
   817b8:	4603      	mov	r3, r0
   817ba:	2b00      	cmp	r3, #0
   817bc:	d023      	beq.n	81806 <openadc_setup_out_received+0xa2>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   817be:	4b17      	ldr	r3, [pc, #92]	; (8181c <openadc_setup_out_received+0xb8>)
   817c0:	4a19      	ldr	r2, [pc, #100]	; (81828 <openadc_setup_out_received+0xc4>)
   817c2:	611a      	str	r2, [r3, #16]
            return true;
   817c4:	2301      	movs	r3, #1
   817c6:	e024      	b.n	81812 <openadc_setup_out_received+0xae>
        }
        break;

        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   817c8:	2006      	movs	r0, #6
   817ca:	4b15      	ldr	r3, [pc, #84]	; (81820 <openadc_setup_out_received+0xbc>)
   817cc:	4798      	blx	r3
   817ce:	4603      	mov	r3, r0
   817d0:	2b00      	cmp	r3, #0
   817d2:	d01a      	beq.n	8180a <openadc_setup_out_received+0xa6>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   817d4:	4b11      	ldr	r3, [pc, #68]	; (8181c <openadc_setup_out_received+0xb8>)
   817d6:	4a15      	ldr	r2, [pc, #84]	; (8182c <openadc_setup_out_received+0xc8>)
   817d8:	611a      	str	r2, [r3, #16]
            return true;
   817da:	2301      	movs	r3, #1
   817dc:	e019      	b.n	81812 <openadc_setup_out_received+0xae>
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   817de:	2006      	movs	r0, #6
   817e0:	4b0f      	ldr	r3, [pc, #60]	; (81820 <openadc_setup_out_received+0xbc>)
   817e2:	4798      	blx	r3
   817e4:	4603      	mov	r3, r0
   817e6:	2b00      	cmp	r3, #0
   817e8:	d011      	beq.n	8180e <openadc_setup_out_received+0xaa>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   817ea:	4b0c      	ldr	r3, [pc, #48]	; (8181c <openadc_setup_out_received+0xb8>)
   817ec:	4a10      	ldr	r2, [pc, #64]	; (81830 <openadc_setup_out_received+0xcc>)
   817ee:	611a      	str	r2, [r3, #16]
            return true;
   817f0:	2301      	movs	r3, #1
   817f2:	e00e      	b.n	81812 <openadc_setup_out_received+0xae>
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   817f4:	4b09      	ldr	r3, [pc, #36]	; (8181c <openadc_setup_out_received+0xb8>)
   817f6:	4a0f      	ldr	r2, [pc, #60]	; (81834 <openadc_setup_out_received+0xd0>)
   817f8:	611a      	str	r2, [r3, #16]
        return true;
   817fa:	2301      	movs	r3, #1
   817fc:	e009      	b.n	81812 <openadc_setup_out_received+0xae>

    default:
        return false;
   817fe:	2300      	movs	r3, #0
   81800:	e007      	b.n	81812 <openadc_setup_out_received+0xae>
        break;
   81802:	bf00      	nop
   81804:	e004      	b.n	81810 <openadc_setup_out_received+0xac>
        break;
   81806:	bf00      	nop
   81808:	e002      	b.n	81810 <openadc_setup_out_received+0xac>
        break;
   8180a:	bf00      	nop
   8180c:	e000      	b.n	81810 <openadc_setup_out_received+0xac>
        break;
   8180e:	bf00      	nop
    }

    return false;
   81810:	2300      	movs	r3, #0
}
   81812:	4618      	mov	r0, r3
   81814:	bd80      	pop	{r7, pc}
   81816:	bf00      	nop
   81818:	20000ec6 	.word	0x20000ec6
   8181c:	20001468 	.word	0x20001468
   81820:	00080ca5 	.word	0x00080ca5
   81824:	00081471 	.word	0x00081471
   81828:	00081505 	.word	0x00081505
   8182c:	000814c9 	.word	0x000814c9
   81830:	0008155d 	.word	0x0008155d
   81834:	00081425 	.word	0x00081425

00081838 <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   81838:	b580      	push	{r7, lr}
   8183a:	af00      	add	r7, sp, #0
    FPGA_releaselock();
   8183c:	4b04      	ldr	r3, [pc, #16]	; (81850 <openadc_register_handlers+0x18>)
   8183e:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   81840:	4804      	ldr	r0, [pc, #16]	; (81854 <openadc_register_handlers+0x1c>)
   81842:	4b05      	ldr	r3, [pc, #20]	; (81858 <openadc_register_handlers+0x20>)
   81844:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   81846:	4805      	ldr	r0, [pc, #20]	; (8185c <openadc_register_handlers+0x24>)
   81848:	4b05      	ldr	r3, [pc, #20]	; (81860 <openadc_register_handlers+0x28>)
   8184a:	4798      	blx	r3
}
   8184c:	bf00      	nop
   8184e:	bd80      	pop	{r7, pc}
   81850:	00080ce5 	.word	0x00080ce5
   81854:	000816d9 	.word	0x000816d9
   81858:	00080eed 	.word	0x00080eed
   8185c:	00081765 	.word	0x00081765
   81860:	00080f2d 	.word	0x00080f2d

00081864 <ctrl_change_pwr>:
#include "naeusb_phywhisperer.h"
extern uint8_t USB_PWR_STATE;

void ctrl_change_pwr(void) {
   81864:	b480      	push	{r7}
   81866:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.wValue) {
   81868:	4b19      	ldr	r3, [pc, #100]	; (818d0 <ctrl_change_pwr+0x6c>)
   8186a:	885b      	ldrh	r3, [r3, #2]
   8186c:	2b02      	cmp	r3, #2
   8186e:	d01e      	beq.n	818ae <ctrl_change_pwr+0x4a>
   81870:	2b02      	cmp	r3, #2
   81872:	dc28      	bgt.n	818c6 <ctrl_change_pwr+0x62>
   81874:	2b00      	cmp	r3, #0
   81876:	d002      	beq.n	8187e <ctrl_change_pwr+0x1a>
   81878:	2b01      	cmp	r3, #1
   8187a:	d00c      	beq.n	81896 <ctrl_change_pwr+0x32>
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
        USB_PWR_STATE = 2;
        break;
    }

}
   8187c:	e023      	b.n	818c6 <ctrl_change_pwr+0x62>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   8187e:	4b15      	ldr	r3, [pc, #84]	; (818d4 <ctrl_change_pwr+0x70>)
   81880:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81884:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   81886:	4b13      	ldr	r3, [pc, #76]	; (818d4 <ctrl_change_pwr+0x70>)
   81888:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8188c:	635a      	str	r2, [r3, #52]	; 0x34
        USB_PWR_STATE = 0;
   8188e:	4b12      	ldr	r3, [pc, #72]	; (818d8 <ctrl_change_pwr+0x74>)
   81890:	2200      	movs	r2, #0
   81892:	701a      	strb	r2, [r3, #0]
        break;
   81894:	e017      	b.n	818c6 <ctrl_change_pwr+0x62>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   81896:	4b0f      	ldr	r3, [pc, #60]	; (818d4 <ctrl_change_pwr+0x70>)
   81898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8189c:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   8189e:	4b0d      	ldr	r3, [pc, #52]	; (818d4 <ctrl_change_pwr+0x70>)
   818a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   818a4:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 1;
   818a6:	4b0c      	ldr	r3, [pc, #48]	; (818d8 <ctrl_change_pwr+0x74>)
   818a8:	2201      	movs	r2, #1
   818aa:	701a      	strb	r2, [r3, #0]
        break;
   818ac:	e00b      	b.n	818c6 <ctrl_change_pwr+0x62>
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   818ae:	4b09      	ldr	r3, [pc, #36]	; (818d4 <ctrl_change_pwr+0x70>)
   818b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   818b4:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   818b6:	4b07      	ldr	r3, [pc, #28]	; (818d4 <ctrl_change_pwr+0x70>)
   818b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   818bc:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 2;
   818be:	4b06      	ldr	r3, [pc, #24]	; (818d8 <ctrl_change_pwr+0x74>)
   818c0:	2202      	movs	r2, #2
   818c2:	701a      	strb	r2, [r3, #0]
        break;
   818c4:	bf00      	nop
}
   818c6:	bf00      	nop
   818c8:	46bd      	mov	sp, r7
   818ca:	bc80      	pop	{r7}
   818cc:	4770      	bx	lr
   818ce:	bf00      	nop
   818d0:	20001468 	.word	0x20001468
   818d4:	400e0c00 	.word	0x400e0c00
   818d8:	20000fd8 	.word	0x20000fd8

000818dc <ctrl_fpga_reset>:

void ctrl_fpga_reset (void) {
   818dc:	b580      	push	{r7, lr}
   818de:	af00      	add	r7, sp, #0
    gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   818e0:	2026      	movs	r0, #38	; 0x26
   818e2:	4b03      	ldr	r3, [pc, #12]	; (818f0 <ctrl_fpga_reset+0x14>)
   818e4:	4798      	blx	r3
    gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   818e6:	2026      	movs	r0, #38	; 0x26
   818e8:	4b02      	ldr	r3, [pc, #8]	; (818f4 <ctrl_fpga_reset+0x18>)
   818ea:	4798      	blx	r3
}
   818ec:	bf00      	nop
   818ee:	bd80      	pop	{r7, pc}
   818f0:	00082d05 	.word	0x00082d05
   818f4:	00082d35 	.word	0x00082d35

000818f8 <phywhisperer_setup_out_received>:

bool phywhisperer_setup_out_received(void) {
   818f8:	b480      	push	{r7}
   818fa:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {
   818fc:	4b0a      	ldr	r3, [pc, #40]	; (81928 <phywhisperer_setup_out_received+0x30>)
   818fe:	785b      	ldrb	r3, [r3, #1]
   81900:	2b24      	cmp	r3, #36	; 0x24
   81902:	d002      	beq.n	8190a <phywhisperer_setup_out_received+0x12>
   81904:	2b25      	cmp	r3, #37	; 0x25
   81906:	d005      	beq.n	81914 <phywhisperer_setup_out_received+0x1c>
   81908:	e009      	b.n	8191e <phywhisperer_setup_out_received+0x26>
    case REQ_CHANGE_PWR:
        //TODO
        udd_g_ctrlreq.callback = ctrl_change_pwr;
   8190a:	4b07      	ldr	r3, [pc, #28]	; (81928 <phywhisperer_setup_out_received+0x30>)
   8190c:	4a07      	ldr	r2, [pc, #28]	; (8192c <phywhisperer_setup_out_received+0x34>)
   8190e:	611a      	str	r2, [r3, #16]
        return true;
   81910:	2301      	movs	r3, #1
   81912:	e005      	b.n	81920 <phywhisperer_setup_out_received+0x28>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   81914:	4b04      	ldr	r3, [pc, #16]	; (81928 <phywhisperer_setup_out_received+0x30>)
   81916:	4a06      	ldr	r2, [pc, #24]	; (81930 <phywhisperer_setup_out_received+0x38>)
   81918:	611a      	str	r2, [r3, #16]
        return true;
   8191a:	2301      	movs	r3, #1
   8191c:	e000      	b.n	81920 <phywhisperer_setup_out_received+0x28>

    default:
        return false;
   8191e:	2300      	movs	r3, #0
    }
    return false;
}
   81920:	4618      	mov	r0, r3
   81922:	46bd      	mov	sp, r7
   81924:	bc80      	pop	{r7}
   81926:	4770      	bx	lr
   81928:	20001468 	.word	0x20001468
   8192c:	00081865 	.word	0x00081865
   81930:	000818dd 	.word	0x000818dd

00081934 <phywhisperer_setup_in_received>:

bool phywhisperer_setup_in_received(void)
{
   81934:	b480      	push	{r7}
   81936:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {

    default:
        return false;
   81938:	2300      	movs	r3, #0
    }
    return false;
}
   8193a:	4618      	mov	r0, r3
   8193c:	46bd      	mov	sp, r7
   8193e:	bc80      	pop	{r7}
   81940:	4770      	bx	lr
   81942:	0000      	movs	r0, r0

00081944 <phywhisperer_register_handlers>:

void phywhisperer_register_handlers(void)
{
   81944:	b580      	push	{r7, lr}
   81946:	af00      	add	r7, sp, #0
    naeusb_add_in_handler(phywhisperer_setup_in_received);
   81948:	4803      	ldr	r0, [pc, #12]	; (81958 <phywhisperer_register_handlers+0x14>)
   8194a:	4b04      	ldr	r3, [pc, #16]	; (8195c <phywhisperer_register_handlers+0x18>)
   8194c:	4798      	blx	r3
    naeusb_add_out_handler(phywhisperer_setup_out_received);
   8194e:	4804      	ldr	r0, [pc, #16]	; (81960 <phywhisperer_register_handlers+0x1c>)
   81950:	4b04      	ldr	r3, [pc, #16]	; (81964 <phywhisperer_register_handlers+0x20>)
   81952:	4798      	blx	r3
   81954:	bf00      	nop
   81956:	bd80      	pop	{r7, pc}
   81958:	00081935 	.word	0x00081935
   8195c:	00080eed 	.word	0x00080eed
   81960:	000818f9 	.word	0x000818f9
   81964:	00080f2d 	.word	0x00080f2d

00081968 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   81968:	b480      	push	{r7}
   8196a:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   8196c:	4b02      	ldr	r3, [pc, #8]	; (81978 <udc_get_string_serial_name+0x10>)
	}
   8196e:	4618      	mov	r0, r3
   81970:	46bd      	mov	sp, r7
   81972:	bc80      	pop	{r7}
   81974:	4770      	bx	lr
   81976:	bf00      	nop
   81978:	2000025c 	.word	0x2000025c

0008197c <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   8197c:	b480      	push	{r7}
   8197e:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   81980:	4b02      	ldr	r3, [pc, #8]	; (8198c <udc_get_interface_desc+0x10>)
   81982:	681b      	ldr	r3, [r3, #0]
}
   81984:	4618      	mov	r0, r3
   81986:	46bd      	mov	sp, r7
   81988:	bc80      	pop	{r7}
   8198a:	4770      	bx	lr
   8198c:	20000ed8 	.word	0x20000ed8

00081990 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   81990:	b480      	push	{r7}
   81992:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   81994:	4b06      	ldr	r3, [pc, #24]	; (819b0 <udc_get_eof_conf+0x20>)
   81996:	681b      	ldr	r3, [r3, #0]
   81998:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8199a:	4a05      	ldr	r2, [pc, #20]	; (819b0 <udc_get_eof_conf+0x20>)
   8199c:	6812      	ldr	r2, [r2, #0]
   8199e:	6812      	ldr	r2, [r2, #0]
   819a0:	8852      	ldrh	r2, [r2, #2]
   819a2:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   819a4:	4413      	add	r3, r2
}
   819a6:	4618      	mov	r0, r3
   819a8:	46bd      	mov	sp, r7
   819aa:	bc80      	pop	{r7}
   819ac:	4770      	bx	lr
   819ae:	bf00      	nop
   819b0:	20000ed4 	.word	0x20000ed4

000819b4 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   819b4:	b580      	push	{r7, lr}
   819b6:	b084      	sub	sp, #16
   819b8:	af00      	add	r7, sp, #0
   819ba:	6078      	str	r0, [r7, #4]
   819bc:	460b      	mov	r3, r1
   819be:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   819c0:	4b12      	ldr	r3, [pc, #72]	; (81a0c <udc_next_desc_in_iface+0x58>)
   819c2:	4798      	blx	r3
   819c4:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   819c6:	687b      	ldr	r3, [r7, #4]
   819c8:	781b      	ldrb	r3, [r3, #0]
   819ca:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   819cc:	687b      	ldr	r3, [r7, #4]
   819ce:	4413      	add	r3, r2
   819d0:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   819d2:	e010      	b.n	819f6 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   819d4:	687b      	ldr	r3, [r7, #4]
   819d6:	785b      	ldrb	r3, [r3, #1]
   819d8:	2b04      	cmp	r3, #4
   819da:	d011      	beq.n	81a00 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   819dc:	687b      	ldr	r3, [r7, #4]
   819de:	785b      	ldrb	r3, [r3, #1]
   819e0:	78fa      	ldrb	r2, [r7, #3]
   819e2:	429a      	cmp	r2, r3
   819e4:	d101      	bne.n	819ea <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   819e6:	687b      	ldr	r3, [r7, #4]
   819e8:	e00c      	b.n	81a04 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   819ea:	687b      	ldr	r3, [r7, #4]
   819ec:	781b      	ldrb	r3, [r3, #0]
   819ee:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   819f0:	687b      	ldr	r3, [r7, #4]
   819f2:	4413      	add	r3, r2
   819f4:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   819f6:	68fa      	ldr	r2, [r7, #12]
   819f8:	687b      	ldr	r3, [r7, #4]
   819fa:	429a      	cmp	r2, r3
   819fc:	d8ea      	bhi.n	819d4 <udc_next_desc_in_iface+0x20>
   819fe:	e000      	b.n	81a02 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   81a00:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   81a02:	2300      	movs	r3, #0
}
   81a04:	4618      	mov	r0, r3
   81a06:	3710      	adds	r7, #16
   81a08:	46bd      	mov	sp, r7
   81a0a:	bd80      	pop	{r7, pc}
   81a0c:	00081991 	.word	0x00081991

00081a10 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   81a10:	b580      	push	{r7, lr}
   81a12:	b084      	sub	sp, #16
   81a14:	af00      	add	r7, sp, #0
   81a16:	4603      	mov	r3, r0
   81a18:	460a      	mov	r2, r1
   81a1a:	71fb      	strb	r3, [r7, #7]
   81a1c:	4613      	mov	r3, r2
   81a1e:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   81a20:	4b1e      	ldr	r3, [pc, #120]	; (81a9c <udc_update_iface_desc+0x8c>)
   81a22:	781b      	ldrb	r3, [r3, #0]
   81a24:	2b00      	cmp	r3, #0
   81a26:	d101      	bne.n	81a2c <udc_update_iface_desc+0x1c>
		return false;
   81a28:	2300      	movs	r3, #0
   81a2a:	e032      	b.n	81a92 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81a2c:	4b1c      	ldr	r3, [pc, #112]	; (81aa0 <udc_update_iface_desc+0x90>)
   81a2e:	681b      	ldr	r3, [r3, #0]
   81a30:	681b      	ldr	r3, [r3, #0]
   81a32:	791b      	ldrb	r3, [r3, #4]
   81a34:	79fa      	ldrb	r2, [r7, #7]
   81a36:	429a      	cmp	r2, r3
   81a38:	d301      	bcc.n	81a3e <udc_update_iface_desc+0x2e>
		return false;
   81a3a:	2300      	movs	r3, #0
   81a3c:	e029      	b.n	81a92 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   81a3e:	4b18      	ldr	r3, [pc, #96]	; (81aa0 <udc_update_iface_desc+0x90>)
   81a40:	681b      	ldr	r3, [r3, #0]
   81a42:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   81a44:	4a17      	ldr	r2, [pc, #92]	; (81aa4 <udc_update_iface_desc+0x94>)
   81a46:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   81a48:	4b17      	ldr	r3, [pc, #92]	; (81aa8 <udc_update_iface_desc+0x98>)
   81a4a:	4798      	blx	r3
   81a4c:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   81a4e:	e01a      	b.n	81a86 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   81a50:	4b14      	ldr	r3, [pc, #80]	; (81aa4 <udc_update_iface_desc+0x94>)
   81a52:	681b      	ldr	r3, [r3, #0]
   81a54:	785b      	ldrb	r3, [r3, #1]
   81a56:	2b04      	cmp	r3, #4
   81a58:	d10d      	bne.n	81a76 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81a5a:	4b12      	ldr	r3, [pc, #72]	; (81aa4 <udc_update_iface_desc+0x94>)
   81a5c:	681b      	ldr	r3, [r3, #0]
   81a5e:	789b      	ldrb	r3, [r3, #2]
   81a60:	79fa      	ldrb	r2, [r7, #7]
   81a62:	429a      	cmp	r2, r3
   81a64:	d107      	bne.n	81a76 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   81a66:	4b0f      	ldr	r3, [pc, #60]	; (81aa4 <udc_update_iface_desc+0x94>)
   81a68:	681b      	ldr	r3, [r3, #0]
   81a6a:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81a6c:	79ba      	ldrb	r2, [r7, #6]
   81a6e:	429a      	cmp	r2, r3
   81a70:	d101      	bne.n	81a76 <udc_update_iface_desc+0x66>
				return true; // Interface found
   81a72:	2301      	movs	r3, #1
   81a74:	e00d      	b.n	81a92 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81a76:	4b0b      	ldr	r3, [pc, #44]	; (81aa4 <udc_update_iface_desc+0x94>)
   81a78:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   81a7a:	4a0a      	ldr	r2, [pc, #40]	; (81aa4 <udc_update_iface_desc+0x94>)
   81a7c:	6812      	ldr	r2, [r2, #0]
   81a7e:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81a80:	4413      	add	r3, r2
   81a82:	4a08      	ldr	r2, [pc, #32]	; (81aa4 <udc_update_iface_desc+0x94>)
   81a84:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   81a86:	4b07      	ldr	r3, [pc, #28]	; (81aa4 <udc_update_iface_desc+0x94>)
   81a88:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   81a8a:	68fa      	ldr	r2, [r7, #12]
   81a8c:	429a      	cmp	r2, r3
   81a8e:	d8df      	bhi.n	81a50 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   81a90:	2300      	movs	r3, #0
}
   81a92:	4618      	mov	r0, r3
   81a94:	3710      	adds	r7, #16
   81a96:	46bd      	mov	sp, r7
   81a98:	bd80      	pop	{r7, pc}
   81a9a:	bf00      	nop
   81a9c:	20000ed2 	.word	0x20000ed2
   81aa0:	20000ed4 	.word	0x20000ed4
   81aa4:	20000ed8 	.word	0x20000ed8
   81aa8:	00081991 	.word	0x00081991

00081aac <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   81aac:	b580      	push	{r7, lr}
   81aae:	b084      	sub	sp, #16
   81ab0:	af00      	add	r7, sp, #0
   81ab2:	4603      	mov	r3, r0
   81ab4:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   81ab6:	79fb      	ldrb	r3, [r7, #7]
   81ab8:	2100      	movs	r1, #0
   81aba:	4618      	mov	r0, r3
   81abc:	4b1e      	ldr	r3, [pc, #120]	; (81b38 <udc_iface_disable+0x8c>)
   81abe:	4798      	blx	r3
   81ac0:	4603      	mov	r3, r0
   81ac2:	f083 0301 	eor.w	r3, r3, #1
   81ac6:	b2db      	uxtb	r3, r3
   81ac8:	2b00      	cmp	r3, #0
   81aca:	d001      	beq.n	81ad0 <udc_iface_disable+0x24>
		return false;
   81acc:	2300      	movs	r3, #0
   81ace:	e02f      	b.n	81b30 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81ad0:	4b1a      	ldr	r3, [pc, #104]	; (81b3c <udc_iface_disable+0x90>)
   81ad2:	681b      	ldr	r3, [r3, #0]
   81ad4:	685a      	ldr	r2, [r3, #4]
   81ad6:	79fb      	ldrb	r3, [r7, #7]
   81ad8:	009b      	lsls	r3, r3, #2
   81ada:	4413      	add	r3, r2
   81adc:	681b      	ldr	r3, [r3, #0]
   81ade:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81ae0:	68bb      	ldr	r3, [r7, #8]
   81ae2:	68db      	ldr	r3, [r3, #12]
   81ae4:	4798      	blx	r3
   81ae6:	4603      	mov	r3, r0
   81ae8:	461a      	mov	r2, r3
   81aea:	79fb      	ldrb	r3, [r7, #7]
   81aec:	4611      	mov	r1, r2
   81aee:	4618      	mov	r0, r3
   81af0:	4b11      	ldr	r3, [pc, #68]	; (81b38 <udc_iface_disable+0x8c>)
   81af2:	4798      	blx	r3
   81af4:	4603      	mov	r3, r0
   81af6:	f083 0301 	eor.w	r3, r3, #1
   81afa:	b2db      	uxtb	r3, r3
   81afc:	2b00      	cmp	r3, #0
   81afe:	d001      	beq.n	81b04 <udc_iface_disable+0x58>
		return false;
   81b00:	2300      	movs	r3, #0
   81b02:	e015      	b.n	81b30 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81b04:	4b0e      	ldr	r3, [pc, #56]	; (81b40 <udc_iface_disable+0x94>)
   81b06:	681b      	ldr	r3, [r3, #0]
   81b08:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   81b0a:	2105      	movs	r1, #5
   81b0c:	68f8      	ldr	r0, [r7, #12]
   81b0e:	4b0d      	ldr	r3, [pc, #52]	; (81b44 <udc_iface_disable+0x98>)
   81b10:	4798      	blx	r3
   81b12:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   81b14:	68fb      	ldr	r3, [r7, #12]
   81b16:	2b00      	cmp	r3, #0
   81b18:	d005      	beq.n	81b26 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   81b1a:	68fb      	ldr	r3, [r7, #12]
   81b1c:	789b      	ldrb	r3, [r3, #2]
   81b1e:	4618      	mov	r0, r3
   81b20:	4b09      	ldr	r3, [pc, #36]	; (81b48 <udc_iface_disable+0x9c>)
   81b22:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   81b24:	e7f1      	b.n	81b0a <udc_iface_disable+0x5e>
				break;
   81b26:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   81b28:	68bb      	ldr	r3, [r7, #8]
   81b2a:	685b      	ldr	r3, [r3, #4]
   81b2c:	4798      	blx	r3
	return true;
   81b2e:	2301      	movs	r3, #1
}
   81b30:	4618      	mov	r0, r3
   81b32:	3710      	adds	r7, #16
   81b34:	46bd      	mov	sp, r7
   81b36:	bd80      	pop	{r7, pc}
   81b38:	00081a11 	.word	0x00081a11
   81b3c:	20000ed4 	.word	0x20000ed4
   81b40:	20000ed8 	.word	0x20000ed8
   81b44:	000819b5 	.word	0x000819b5
   81b48:	00084c31 	.word	0x00084c31

00081b4c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   81b4c:	b580      	push	{r7, lr}
   81b4e:	b084      	sub	sp, #16
   81b50:	af00      	add	r7, sp, #0
   81b52:	4603      	mov	r3, r0
   81b54:	460a      	mov	r2, r1
   81b56:	71fb      	strb	r3, [r7, #7]
   81b58:	4613      	mov	r3, r2
   81b5a:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   81b5c:	79ba      	ldrb	r2, [r7, #6]
   81b5e:	79fb      	ldrb	r3, [r7, #7]
   81b60:	4611      	mov	r1, r2
   81b62:	4618      	mov	r0, r3
   81b64:	4b1a      	ldr	r3, [pc, #104]	; (81bd0 <udc_iface_enable+0x84>)
   81b66:	4798      	blx	r3
   81b68:	4603      	mov	r3, r0
   81b6a:	f083 0301 	eor.w	r3, r3, #1
   81b6e:	b2db      	uxtb	r3, r3
   81b70:	2b00      	cmp	r3, #0
   81b72:	d001      	beq.n	81b78 <udc_iface_enable+0x2c>
		return false;
   81b74:	2300      	movs	r3, #0
   81b76:	e027      	b.n	81bc8 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81b78:	4b16      	ldr	r3, [pc, #88]	; (81bd4 <udc_iface_enable+0x88>)
   81b7a:	681b      	ldr	r3, [r3, #0]
   81b7c:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   81b7e:	2105      	movs	r1, #5
   81b80:	68f8      	ldr	r0, [r7, #12]
   81b82:	4b15      	ldr	r3, [pc, #84]	; (81bd8 <udc_iface_enable+0x8c>)
   81b84:	4798      	blx	r3
   81b86:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   81b88:	68fb      	ldr	r3, [r7, #12]
   81b8a:	2b00      	cmp	r3, #0
   81b8c:	d011      	beq.n	81bb2 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81b8e:	68fb      	ldr	r3, [r7, #12]
   81b90:	7898      	ldrb	r0, [r3, #2]
   81b92:	68fb      	ldr	r3, [r7, #12]
   81b94:	78d9      	ldrb	r1, [r3, #3]
   81b96:	68fb      	ldr	r3, [r7, #12]
   81b98:	889b      	ldrh	r3, [r3, #4]
   81b9a:	b29b      	uxth	r3, r3
   81b9c:	461a      	mov	r2, r3
   81b9e:	4b0f      	ldr	r3, [pc, #60]	; (81bdc <udc_iface_enable+0x90>)
   81ba0:	4798      	blx	r3
   81ba2:	4603      	mov	r3, r0
   81ba4:	f083 0301 	eor.w	r3, r3, #1
   81ba8:	b2db      	uxtb	r3, r3
   81baa:	2b00      	cmp	r3, #0
   81bac:	d0e7      	beq.n	81b7e <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   81bae:	2300      	movs	r3, #0
   81bb0:	e00a      	b.n	81bc8 <udc_iface_enable+0x7c>
			break;
   81bb2:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81bb4:	4b0a      	ldr	r3, [pc, #40]	; (81be0 <udc_iface_enable+0x94>)
   81bb6:	681b      	ldr	r3, [r3, #0]
   81bb8:	685a      	ldr	r2, [r3, #4]
   81bba:	79fb      	ldrb	r3, [r7, #7]
   81bbc:	009b      	lsls	r3, r3, #2
   81bbe:	4413      	add	r3, r2
   81bc0:	681b      	ldr	r3, [r3, #0]
   81bc2:	681b      	ldr	r3, [r3, #0]
   81bc4:	4798      	blx	r3
   81bc6:	4603      	mov	r3, r0
}
   81bc8:	4618      	mov	r0, r3
   81bca:	3710      	adds	r7, #16
   81bcc:	46bd      	mov	sp, r7
   81bce:	bd80      	pop	{r7, pc}
   81bd0:	00081a11 	.word	0x00081a11
   81bd4:	20000ed8 	.word	0x20000ed8
   81bd8:	000819b5 	.word	0x000819b5
   81bdc:	00084879 	.word	0x00084879
   81be0:	20000ed4 	.word	0x20000ed4

00081be4 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   81be4:	b580      	push	{r7, lr}
   81be6:	af00      	add	r7, sp, #0
	udd_enable();
   81be8:	4b01      	ldr	r3, [pc, #4]	; (81bf0 <udc_start+0xc>)
   81bea:	4798      	blx	r3
}
   81bec:	bf00      	nop
   81bee:	bd80      	pop	{r7, pc}
   81bf0:	00084615 	.word	0x00084615

00081bf4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   81bf4:	b580      	push	{r7, lr}
   81bf6:	b082      	sub	sp, #8
   81bf8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   81bfa:	4b0f      	ldr	r3, [pc, #60]	; (81c38 <udc_reset+0x44>)
   81bfc:	781b      	ldrb	r3, [r3, #0]
   81bfe:	2b00      	cmp	r3, #0
   81c00:	d010      	beq.n	81c24 <udc_reset+0x30>
		for (iface_num = 0;
   81c02:	2300      	movs	r3, #0
   81c04:	71fb      	strb	r3, [r7, #7]
   81c06:	e006      	b.n	81c16 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   81c08:	79fb      	ldrb	r3, [r7, #7]
   81c0a:	4618      	mov	r0, r3
   81c0c:	4b0b      	ldr	r3, [pc, #44]	; (81c3c <udc_reset+0x48>)
   81c0e:	4798      	blx	r3
				iface_num++) {
   81c10:	79fb      	ldrb	r3, [r7, #7]
   81c12:	3301      	adds	r3, #1
   81c14:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81c16:	4b0a      	ldr	r3, [pc, #40]	; (81c40 <udc_reset+0x4c>)
   81c18:	681b      	ldr	r3, [r3, #0]
   81c1a:	681b      	ldr	r3, [r3, #0]
   81c1c:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   81c1e:	79fa      	ldrb	r2, [r7, #7]
   81c20:	429a      	cmp	r2, r3
   81c22:	d3f1      	bcc.n	81c08 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   81c24:	4b04      	ldr	r3, [pc, #16]	; (81c38 <udc_reset+0x44>)
   81c26:	2200      	movs	r2, #0
   81c28:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   81c2a:	4b06      	ldr	r3, [pc, #24]	; (81c44 <udc_reset+0x50>)
   81c2c:	2200      	movs	r2, #0
   81c2e:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   81c30:	bf00      	nop
   81c32:	3708      	adds	r7, #8
   81c34:	46bd      	mov	sp, r7
   81c36:	bd80      	pop	{r7, pc}
   81c38:	20000ed2 	.word	0x20000ed2
   81c3c:	00081aad 	.word	0x00081aad
   81c40:	20000ed4 	.word	0x20000ed4
   81c44:	20000ed0 	.word	0x20000ed0

00081c48 <udc_sof_notify>:

void udc_sof_notify(void)
{
   81c48:	b580      	push	{r7, lr}
   81c4a:	b082      	sub	sp, #8
   81c4c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   81c4e:	4b14      	ldr	r3, [pc, #80]	; (81ca0 <udc_sof_notify+0x58>)
   81c50:	781b      	ldrb	r3, [r3, #0]
   81c52:	2b00      	cmp	r3, #0
   81c54:	d01f      	beq.n	81c96 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   81c56:	2300      	movs	r3, #0
   81c58:	71fb      	strb	r3, [r7, #7]
   81c5a:	e015      	b.n	81c88 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   81c5c:	4b11      	ldr	r3, [pc, #68]	; (81ca4 <udc_sof_notify+0x5c>)
   81c5e:	681b      	ldr	r3, [r3, #0]
   81c60:	685a      	ldr	r2, [r3, #4]
   81c62:	79fb      	ldrb	r3, [r7, #7]
   81c64:	009b      	lsls	r3, r3, #2
   81c66:	4413      	add	r3, r2
   81c68:	681b      	ldr	r3, [r3, #0]
   81c6a:	691b      	ldr	r3, [r3, #16]
   81c6c:	2b00      	cmp	r3, #0
   81c6e:	d008      	beq.n	81c82 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   81c70:	4b0c      	ldr	r3, [pc, #48]	; (81ca4 <udc_sof_notify+0x5c>)
   81c72:	681b      	ldr	r3, [r3, #0]
   81c74:	685a      	ldr	r2, [r3, #4]
   81c76:	79fb      	ldrb	r3, [r7, #7]
   81c78:	009b      	lsls	r3, r3, #2
   81c7a:	4413      	add	r3, r2
   81c7c:	681b      	ldr	r3, [r3, #0]
   81c7e:	691b      	ldr	r3, [r3, #16]
   81c80:	4798      	blx	r3
				iface_num++) {
   81c82:	79fb      	ldrb	r3, [r7, #7]
   81c84:	3301      	adds	r3, #1
   81c86:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81c88:	4b06      	ldr	r3, [pc, #24]	; (81ca4 <udc_sof_notify+0x5c>)
   81c8a:	681b      	ldr	r3, [r3, #0]
   81c8c:	681b      	ldr	r3, [r3, #0]
   81c8e:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   81c90:	79fa      	ldrb	r2, [r7, #7]
   81c92:	429a      	cmp	r2, r3
   81c94:	d3e2      	bcc.n	81c5c <udc_sof_notify+0x14>
			}
		}
	}
}
   81c96:	bf00      	nop
   81c98:	3708      	adds	r7, #8
   81c9a:	46bd      	mov	sp, r7
   81c9c:	bd80      	pop	{r7, pc}
   81c9e:	bf00      	nop
   81ca0:	20000ed2 	.word	0x20000ed2
   81ca4:	20000ed4 	.word	0x20000ed4

00081ca8 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   81ca8:	b580      	push	{r7, lr}
   81caa:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   81cac:	4b06      	ldr	r3, [pc, #24]	; (81cc8 <udc_req_std_dev_get_status+0x20>)
   81cae:	88db      	ldrh	r3, [r3, #6]
   81cb0:	2b02      	cmp	r3, #2
   81cb2:	d001      	beq.n	81cb8 <udc_req_std_dev_get_status+0x10>
		return false;
   81cb4:	2300      	movs	r3, #0
   81cb6:	e004      	b.n	81cc2 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   81cb8:	2102      	movs	r1, #2
   81cba:	4804      	ldr	r0, [pc, #16]	; (81ccc <udc_req_std_dev_get_status+0x24>)
   81cbc:	4b04      	ldr	r3, [pc, #16]	; (81cd0 <udc_req_std_dev_get_status+0x28>)
   81cbe:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   81cc0:	2301      	movs	r3, #1
}
   81cc2:	4618      	mov	r0, r3
   81cc4:	bd80      	pop	{r7, pc}
   81cc6:	bf00      	nop
   81cc8:	20001468 	.word	0x20001468
   81ccc:	20000ed0 	.word	0x20000ed0
   81cd0:	00084851 	.word	0x00084851

00081cd4 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   81cd4:	b580      	push	{r7, lr}
   81cd6:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   81cd8:	4b0b      	ldr	r3, [pc, #44]	; (81d08 <udc_req_std_ep_get_status+0x34>)
   81cda:	88db      	ldrh	r3, [r3, #6]
   81cdc:	2b02      	cmp	r3, #2
   81cde:	d001      	beq.n	81ce4 <udc_req_std_ep_get_status+0x10>
		return false;
   81ce0:	2300      	movs	r3, #0
   81ce2:	e00e      	b.n	81d02 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   81ce4:	4b08      	ldr	r3, [pc, #32]	; (81d08 <udc_req_std_ep_get_status+0x34>)
   81ce6:	889b      	ldrh	r3, [r3, #4]
   81ce8:	b2db      	uxtb	r3, r3
   81cea:	4618      	mov	r0, r3
   81cec:	4b07      	ldr	r3, [pc, #28]	; (81d0c <udc_req_std_ep_get_status+0x38>)
   81cee:	4798      	blx	r3
   81cf0:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   81cf2:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   81cf4:	4b06      	ldr	r3, [pc, #24]	; (81d10 <udc_req_std_ep_get_status+0x3c>)
   81cf6:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   81cf8:	2102      	movs	r1, #2
   81cfa:	4805      	ldr	r0, [pc, #20]	; (81d10 <udc_req_std_ep_get_status+0x3c>)
   81cfc:	4b05      	ldr	r3, [pc, #20]	; (81d14 <udc_req_std_ep_get_status+0x40>)
   81cfe:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   81d00:	2301      	movs	r3, #1
}
   81d02:	4618      	mov	r0, r3
   81d04:	bd80      	pop	{r7, pc}
   81d06:	bf00      	nop
   81d08:	20001468 	.word	0x20001468
   81d0c:	00084cb1 	.word	0x00084cb1
   81d10:	20000edc 	.word	0x20000edc
   81d14:	00084851 	.word	0x00084851

00081d18 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   81d18:	b480      	push	{r7}
   81d1a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81d1c:	4b0b      	ldr	r3, [pc, #44]	; (81d4c <udc_req_std_dev_clear_feature+0x34>)
   81d1e:	88db      	ldrh	r3, [r3, #6]
   81d20:	2b00      	cmp	r3, #0
   81d22:	d001      	beq.n	81d28 <udc_req_std_dev_clear_feature+0x10>
		return false;
   81d24:	2300      	movs	r3, #0
   81d26:	e00d      	b.n	81d44 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   81d28:	4b08      	ldr	r3, [pc, #32]	; (81d4c <udc_req_std_dev_clear_feature+0x34>)
   81d2a:	885b      	ldrh	r3, [r3, #2]
   81d2c:	2b01      	cmp	r3, #1
   81d2e:	d108      	bne.n	81d42 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   81d30:	4b07      	ldr	r3, [pc, #28]	; (81d50 <udc_req_std_dev_clear_feature+0x38>)
   81d32:	881b      	ldrh	r3, [r3, #0]
   81d34:	f023 0302 	bic.w	r3, r3, #2
   81d38:	b29a      	uxth	r2, r3
   81d3a:	4b05      	ldr	r3, [pc, #20]	; (81d50 <udc_req_std_dev_clear_feature+0x38>)
   81d3c:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   81d3e:	2301      	movs	r3, #1
   81d40:	e000      	b.n	81d44 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   81d42:	2300      	movs	r3, #0
}
   81d44:	4618      	mov	r0, r3
   81d46:	46bd      	mov	sp, r7
   81d48:	bc80      	pop	{r7}
   81d4a:	4770      	bx	lr
   81d4c:	20001468 	.word	0x20001468
   81d50:	20000ed0 	.word	0x20000ed0

00081d54 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   81d54:	b580      	push	{r7, lr}
   81d56:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81d58:	4b0a      	ldr	r3, [pc, #40]	; (81d84 <udc_req_std_ep_clear_feature+0x30>)
   81d5a:	88db      	ldrh	r3, [r3, #6]
   81d5c:	2b00      	cmp	r3, #0
   81d5e:	d001      	beq.n	81d64 <udc_req_std_ep_clear_feature+0x10>
		return false;
   81d60:	2300      	movs	r3, #0
   81d62:	e00c      	b.n	81d7e <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81d64:	4b07      	ldr	r3, [pc, #28]	; (81d84 <udc_req_std_ep_clear_feature+0x30>)
   81d66:	885b      	ldrh	r3, [r3, #2]
   81d68:	2b00      	cmp	r3, #0
   81d6a:	d107      	bne.n	81d7c <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81d6c:	4b05      	ldr	r3, [pc, #20]	; (81d84 <udc_req_std_ep_clear_feature+0x30>)
   81d6e:	889b      	ldrh	r3, [r3, #4]
   81d70:	b2db      	uxtb	r3, r3
   81d72:	4618      	mov	r0, r3
   81d74:	4b04      	ldr	r3, [pc, #16]	; (81d88 <udc_req_std_ep_clear_feature+0x34>)
   81d76:	4798      	blx	r3
   81d78:	4603      	mov	r3, r0
   81d7a:	e000      	b.n	81d7e <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   81d7c:	2300      	movs	r3, #0
}
   81d7e:	4618      	mov	r0, r3
   81d80:	bd80      	pop	{r7, pc}
   81d82:	bf00      	nop
   81d84:	20001468 	.word	0x20001468
   81d88:	00084e2d 	.word	0x00084e2d

00081d8c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   81d8c:	b580      	push	{r7, lr}
   81d8e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81d90:	4b26      	ldr	r3, [pc, #152]	; (81e2c <udc_req_std_dev_set_feature+0xa0>)
   81d92:	88db      	ldrh	r3, [r3, #6]
   81d94:	2b00      	cmp	r3, #0
   81d96:	d001      	beq.n	81d9c <udc_req_std_dev_set_feature+0x10>
		return false;
   81d98:	2300      	movs	r3, #0
   81d9a:	e045      	b.n	81e28 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   81d9c:	4b23      	ldr	r3, [pc, #140]	; (81e2c <udc_req_std_dev_set_feature+0xa0>)
   81d9e:	885b      	ldrh	r3, [r3, #2]
   81da0:	2b01      	cmp	r3, #1
   81da2:	d002      	beq.n	81daa <udc_req_std_dev_set_feature+0x1e>
   81da4:	2b02      	cmp	r3, #2
   81da6:	d002      	beq.n	81dae <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   81da8:	e03d      	b.n	81e26 <udc_req_std_dev_set_feature+0x9a>
		return false;
   81daa:	2300      	movs	r3, #0
   81dac:	e03c      	b.n	81e28 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   81dae:	4b20      	ldr	r3, [pc, #128]	; (81e30 <udc_req_std_dev_set_feature+0xa4>)
   81db0:	4798      	blx	r3
   81db2:	4603      	mov	r3, r0
   81db4:	f083 0301 	eor.w	r3, r3, #1
   81db8:	b2db      	uxtb	r3, r3
   81dba:	2b00      	cmp	r3, #0
   81dbc:	d130      	bne.n	81e20 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   81dbe:	4b1b      	ldr	r3, [pc, #108]	; (81e2c <udc_req_std_dev_set_feature+0xa0>)
   81dc0:	889b      	ldrh	r3, [r3, #4]
   81dc2:	b2db      	uxtb	r3, r3
   81dc4:	2b00      	cmp	r3, #0
   81dc6:	d12d      	bne.n	81e24 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   81dc8:	4b1a      	ldr	r3, [pc, #104]	; (81e34 <udc_req_std_dev_set_feature+0xa8>)
   81dca:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   81dcc:	4b17      	ldr	r3, [pc, #92]	; (81e2c <udc_req_std_dev_set_feature+0xa0>)
   81dce:	889b      	ldrh	r3, [r3, #4]
   81dd0:	0a1b      	lsrs	r3, r3, #8
   81dd2:	b29b      	uxth	r3, r3
   81dd4:	b2db      	uxtb	r3, r3
   81dd6:	3b01      	subs	r3, #1
   81dd8:	2b03      	cmp	r3, #3
   81dda:	d81f      	bhi.n	81e1c <udc_req_std_dev_set_feature+0x90>
   81ddc:	a201      	add	r2, pc, #4	; (adr r2, 81de4 <udc_req_std_dev_set_feature+0x58>)
   81dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81de2:	bf00      	nop
   81de4:	00081df5 	.word	0x00081df5
   81de8:	00081dff 	.word	0x00081dff
   81dec:	00081e09 	.word	0x00081e09
   81df0:	00081e13 	.word	0x00081e13
			udd_g_ctrlreq.callback = udd_test_mode_j;
   81df4:	4b0d      	ldr	r3, [pc, #52]	; (81e2c <udc_req_std_dev_set_feature+0xa0>)
   81df6:	4a10      	ldr	r2, [pc, #64]	; (81e38 <udc_req_std_dev_set_feature+0xac>)
   81df8:	611a      	str	r2, [r3, #16]
			return true;
   81dfa:	2301      	movs	r3, #1
   81dfc:	e014      	b.n	81e28 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   81dfe:	4b0b      	ldr	r3, [pc, #44]	; (81e2c <udc_req_std_dev_set_feature+0xa0>)
   81e00:	4a0e      	ldr	r2, [pc, #56]	; (81e3c <udc_req_std_dev_set_feature+0xb0>)
   81e02:	611a      	str	r2, [r3, #16]
			return true;
   81e04:	2301      	movs	r3, #1
   81e06:	e00f      	b.n	81e28 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   81e08:	4b08      	ldr	r3, [pc, #32]	; (81e2c <udc_req_std_dev_set_feature+0xa0>)
   81e0a:	4a0d      	ldr	r2, [pc, #52]	; (81e40 <udc_req_std_dev_set_feature+0xb4>)
   81e0c:	611a      	str	r2, [r3, #16]
			return true;
   81e0e:	2301      	movs	r3, #1
   81e10:	e00a      	b.n	81e28 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   81e12:	4b06      	ldr	r3, [pc, #24]	; (81e2c <udc_req_std_dev_set_feature+0xa0>)
   81e14:	4a0b      	ldr	r2, [pc, #44]	; (81e44 <udc_req_std_dev_set_feature+0xb8>)
   81e16:	611a      	str	r2, [r3, #16]
			return true;
   81e18:	2301      	movs	r3, #1
   81e1a:	e005      	b.n	81e28 <udc_req_std_dev_set_feature+0x9c>
			break;
   81e1c:	bf00      	nop
		break;
   81e1e:	e002      	b.n	81e26 <udc_req_std_dev_set_feature+0x9a>
			break;
   81e20:	bf00      	nop
   81e22:	e000      	b.n	81e26 <udc_req_std_dev_set_feature+0x9a>
			break;
   81e24:	bf00      	nop
	}
	return false;
   81e26:	2300      	movs	r3, #0
}
   81e28:	4618      	mov	r0, r3
   81e2a:	bd80      	pop	{r7, pc}
   81e2c:	20001468 	.word	0x20001468
   81e30:	000847ad 	.word	0x000847ad
   81e34:	00081bf5 	.word	0x00081bf5
   81e38:	000850ed 	.word	0x000850ed
   81e3c:	00085121 	.word	0x00085121
   81e40:	00085155 	.word	0x00085155
   81e44:	00085179 	.word	0x00085179

00081e48 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   81e48:	b580      	push	{r7, lr}
   81e4a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81e4c:	4b0d      	ldr	r3, [pc, #52]	; (81e84 <udc_req_std_ep_set_feature+0x3c>)
   81e4e:	88db      	ldrh	r3, [r3, #6]
   81e50:	2b00      	cmp	r3, #0
   81e52:	d001      	beq.n	81e58 <udc_req_std_ep_set_feature+0x10>
		return false;
   81e54:	2300      	movs	r3, #0
   81e56:	e012      	b.n	81e7e <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81e58:	4b0a      	ldr	r3, [pc, #40]	; (81e84 <udc_req_std_ep_set_feature+0x3c>)
   81e5a:	885b      	ldrh	r3, [r3, #2]
   81e5c:	2b00      	cmp	r3, #0
   81e5e:	d10d      	bne.n	81e7c <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   81e60:	4b08      	ldr	r3, [pc, #32]	; (81e84 <udc_req_std_ep_set_feature+0x3c>)
   81e62:	889b      	ldrh	r3, [r3, #4]
   81e64:	b2db      	uxtb	r3, r3
   81e66:	4618      	mov	r0, r3
   81e68:	4b07      	ldr	r3, [pc, #28]	; (81e88 <udc_req_std_ep_set_feature+0x40>)
   81e6a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81e6c:	4b05      	ldr	r3, [pc, #20]	; (81e84 <udc_req_std_ep_set_feature+0x3c>)
   81e6e:	889b      	ldrh	r3, [r3, #4]
   81e70:	b2db      	uxtb	r3, r3
   81e72:	4618      	mov	r0, r3
   81e74:	4b05      	ldr	r3, [pc, #20]	; (81e8c <udc_req_std_ep_set_feature+0x44>)
   81e76:	4798      	blx	r3
   81e78:	4603      	mov	r3, r0
   81e7a:	e000      	b.n	81e7e <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   81e7c:	2300      	movs	r3, #0
}
   81e7e:	4618      	mov	r0, r3
   81e80:	bd80      	pop	{r7, pc}
   81e82:	bf00      	nop
   81e84:	20001468 	.word	0x20001468
   81e88:	00085065 	.word	0x00085065
   81e8c:	00084d19 	.word	0x00084d19

00081e90 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   81e90:	b580      	push	{r7, lr}
   81e92:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   81e94:	4b05      	ldr	r3, [pc, #20]	; (81eac <udc_valid_address+0x1c>)
   81e96:	885b      	ldrh	r3, [r3, #2]
   81e98:	b2db      	uxtb	r3, r3
   81e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   81e9e:	b2db      	uxtb	r3, r3
   81ea0:	4618      	mov	r0, r3
   81ea2:	4b03      	ldr	r3, [pc, #12]	; (81eb0 <udc_valid_address+0x20>)
   81ea4:	4798      	blx	r3
}
   81ea6:	bf00      	nop
   81ea8:	bd80      	pop	{r7, pc}
   81eaa:	bf00      	nop
   81eac:	20001468 	.word	0x20001468
   81eb0:	000847d1 	.word	0x000847d1

00081eb4 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   81eb4:	b480      	push	{r7}
   81eb6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81eb8:	4b06      	ldr	r3, [pc, #24]	; (81ed4 <udc_req_std_dev_set_address+0x20>)
   81eba:	88db      	ldrh	r3, [r3, #6]
   81ebc:	2b00      	cmp	r3, #0
   81ebe:	d001      	beq.n	81ec4 <udc_req_std_dev_set_address+0x10>
		return false;
   81ec0:	2300      	movs	r3, #0
   81ec2:	e003      	b.n	81ecc <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   81ec4:	4b03      	ldr	r3, [pc, #12]	; (81ed4 <udc_req_std_dev_set_address+0x20>)
   81ec6:	4a04      	ldr	r2, [pc, #16]	; (81ed8 <udc_req_std_dev_set_address+0x24>)
   81ec8:	611a      	str	r2, [r3, #16]
	return true;
   81eca:	2301      	movs	r3, #1
}
   81ecc:	4618      	mov	r0, r3
   81ece:	46bd      	mov	sp, r7
   81ed0:	bc80      	pop	{r7}
   81ed2:	4770      	bx	lr
   81ed4:	20001468 	.word	0x20001468
   81ed8:	00081e91 	.word	0x00081e91

00081edc <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   81edc:	b580      	push	{r7, lr}
   81ede:	b084      	sub	sp, #16
   81ee0:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   81ee2:	2300      	movs	r3, #0
   81ee4:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   81ee6:	4b29      	ldr	r3, [pc, #164]	; (81f8c <udc_req_std_dev_get_str_desc+0xb0>)
   81ee8:	885b      	ldrh	r3, [r3, #2]
   81eea:	b2db      	uxtb	r3, r3
   81eec:	2b03      	cmp	r3, #3
   81eee:	d820      	bhi.n	81f32 <udc_req_std_dev_get_str_desc+0x56>
   81ef0:	a201      	add	r2, pc, #4	; (adr r2, 81ef8 <udc_req_std_dev_get_str_desc+0x1c>)
   81ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81ef6:	bf00      	nop
   81ef8:	00081f09 	.word	0x00081f09
   81efc:	00081f13 	.word	0x00081f13
   81f00:	00081f1d 	.word	0x00081f1d
   81f04:	00081f27 	.word	0x00081f27
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   81f08:	2104      	movs	r1, #4
   81f0a:	4821      	ldr	r0, [pc, #132]	; (81f90 <udc_req_std_dev_get_str_desc+0xb4>)
   81f0c:	4b21      	ldr	r3, [pc, #132]	; (81f94 <udc_req_std_dev_get_str_desc+0xb8>)
   81f0e:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   81f10:	e011      	b.n	81f36 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   81f12:	2315      	movs	r3, #21
   81f14:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   81f16:	4b20      	ldr	r3, [pc, #128]	; (81f98 <udc_req_std_dev_get_str_desc+0xbc>)
   81f18:	60bb      	str	r3, [r7, #8]
		break;
   81f1a:	e00c      	b.n	81f36 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   81f1c:	2310      	movs	r3, #16
   81f1e:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   81f20:	4b1e      	ldr	r3, [pc, #120]	; (81f9c <udc_req_std_dev_get_str_desc+0xc0>)
   81f22:	60bb      	str	r3, [r7, #8]
		break;
   81f24:	e007      	b.n	81f36 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   81f26:	2320      	movs	r3, #32
   81f28:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   81f2a:	4b1d      	ldr	r3, [pc, #116]	; (81fa0 <udc_req_std_dev_get_str_desc+0xc4>)
   81f2c:	4798      	blx	r3
   81f2e:	60b8      	str	r0, [r7, #8]
		break;
   81f30:	e001      	b.n	81f36 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   81f32:	2300      	movs	r3, #0
   81f34:	e026      	b.n	81f84 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   81f36:	79fb      	ldrb	r3, [r7, #7]
   81f38:	2b00      	cmp	r3, #0
   81f3a:	d022      	beq.n	81f82 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   81f3c:	2300      	movs	r3, #0
   81f3e:	73fb      	strb	r3, [r7, #15]
   81f40:	e00d      	b.n	81f5e <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81f42:	7bfb      	ldrb	r3, [r7, #15]
   81f44:	68ba      	ldr	r2, [r7, #8]
   81f46:	4413      	add	r3, r2
   81f48:	781a      	ldrb	r2, [r3, #0]
   81f4a:	7bfb      	ldrb	r3, [r7, #15]
   81f4c:	b291      	uxth	r1, r2
   81f4e:	4a15      	ldr	r2, [pc, #84]	; (81fa4 <udc_req_std_dev_get_str_desc+0xc8>)
   81f50:	005b      	lsls	r3, r3, #1
   81f52:	4413      	add	r3, r2
   81f54:	460a      	mov	r2, r1
   81f56:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   81f58:	7bfb      	ldrb	r3, [r7, #15]
   81f5a:	3301      	adds	r3, #1
   81f5c:	73fb      	strb	r3, [r7, #15]
   81f5e:	7bfa      	ldrb	r2, [r7, #15]
   81f60:	79fb      	ldrb	r3, [r7, #7]
   81f62:	429a      	cmp	r2, r3
   81f64:	d3ed      	bcc.n	81f42 <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   81f66:	79fb      	ldrb	r3, [r7, #7]
   81f68:	3301      	adds	r3, #1
   81f6a:	b2db      	uxtb	r3, r3
   81f6c:	005b      	lsls	r3, r3, #1
   81f6e:	b2da      	uxtb	r2, r3
   81f70:	4b0c      	ldr	r3, [pc, #48]	; (81fa4 <udc_req_std_dev_get_str_desc+0xc8>)
   81f72:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   81f74:	4b0b      	ldr	r3, [pc, #44]	; (81fa4 <udc_req_std_dev_get_str_desc+0xc8>)
   81f76:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   81f78:	b29b      	uxth	r3, r3
   81f7a:	4619      	mov	r1, r3
   81f7c:	4809      	ldr	r0, [pc, #36]	; (81fa4 <udc_req_std_dev_get_str_desc+0xc8>)
   81f7e:	4b05      	ldr	r3, [pc, #20]	; (81f94 <udc_req_std_dev_get_str_desc+0xb8>)
   81f80:	4798      	blx	r3
	}

	return true;
   81f82:	2301      	movs	r3, #1
}
   81f84:	4618      	mov	r0, r3
   81f86:	3710      	adds	r7, #16
   81f88:	46bd      	mov	sp, r7
   81f8a:	bd80      	pop	{r7, pc}
   81f8c:	20001468 	.word	0x20001468
   81f90:	20000358 	.word	0x20000358
   81f94:	00084851 	.word	0x00084851
   81f98:	2000035c 	.word	0x2000035c
   81f9c:	20000374 	.word	0x20000374
   81fa0:	00081969 	.word	0x00081969
   81fa4:	20000388 	.word	0x20000388

00081fa8 <udc_req_std_dev_get_descriptor>:

static bool udc_req_std_dev_get_descriptor(void)
{
   81fa8:	b580      	push	{r7, lr}
   81faa:	b082      	sub	sp, #8
   81fac:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   81fae:	4b7f      	ldr	r3, [pc, #508]	; (821ac <udc_req_std_dev_get_descriptor+0x204>)
   81fb0:	885b      	ldrh	r3, [r3, #2]
   81fb2:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81fb4:	4b7d      	ldr	r3, [pc, #500]	; (821ac <udc_req_std_dev_get_descriptor+0x204>)
   81fb6:	885b      	ldrh	r3, [r3, #2]
   81fb8:	0a1b      	lsrs	r3, r3, #8
   81fba:	b29b      	uxth	r3, r3
   81fbc:	b2db      	uxtb	r3, r3
   81fbe:	3b01      	subs	r3, #1
   81fc0:	2b0e      	cmp	r3, #14
   81fc2:	f200 80e0 	bhi.w	82186 <udc_req_std_dev_get_descriptor+0x1de>
   81fc6:	a201      	add	r2, pc, #4	; (adr r2, 81fcc <udc_req_std_dev_get_descriptor+0x24>)
   81fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81fcc:	00082009 	.word	0x00082009
   81fd0:	00082059 	.word	0x00082059
   81fd4:	00082173 	.word	0x00082173
   81fd8:	00082187 	.word	0x00082187
   81fdc:	00082187 	.word	0x00082187
   81fe0:	000820d3 	.word	0x000820d3
   81fe4:	000820e9 	.word	0x000820e9
   81fe8:	00082187 	.word	0x00082187
   81fec:	00082187 	.word	0x00082187
   81ff0:	00082187 	.word	0x00082187
   81ff4:	00082187 	.word	0x00082187
   81ff8:	00082187 	.word	0x00082187
   81ffc:	00082187 	.word	0x00082187
   82000:	00082187 	.word	0x00082187
   82004:	00082169 	.word	0x00082169
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   82008:	4b69      	ldr	r3, [pc, #420]	; (821b0 <udc_req_std_dev_get_descriptor+0x208>)
   8200a:	4798      	blx	r3
   8200c:	4603      	mov	r3, r0
   8200e:	f083 0301 	eor.w	r3, r3, #1
   82012:	b2db      	uxtb	r3, r3
   82014:	2b00      	cmp	r3, #0
   82016:	d00a      	beq.n	8202e <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   82018:	4b66      	ldr	r3, [pc, #408]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   8201a:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   8201c:	4b65      	ldr	r3, [pc, #404]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   8201e:	689b      	ldr	r3, [r3, #8]
   82020:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   82022:	b29b      	uxth	r3, r3
   82024:	4619      	mov	r1, r3
   82026:	4610      	mov	r0, r2
   82028:	4b63      	ldr	r3, [pc, #396]	; (821b8 <udc_req_std_dev_get_descriptor+0x210>)
   8202a:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   8202c:	e0ae      	b.n	8218c <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   8202e:	4b61      	ldr	r3, [pc, #388]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   82030:	681b      	ldr	r3, [r3, #0]
   82032:	2200      	movs	r2, #0
   82034:	f042 0210 	orr.w	r2, r2, #16
   82038:	709a      	strb	r2, [r3, #2]
   8203a:	2200      	movs	r2, #0
   8203c:	f042 0202 	orr.w	r2, r2, #2
   82040:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   82042:	4b5c      	ldr	r3, [pc, #368]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   82044:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   82046:	4b5b      	ldr	r3, [pc, #364]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   82048:	681b      	ldr	r3, [r3, #0]
   8204a:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   8204c:	b29b      	uxth	r3, r3
   8204e:	4619      	mov	r1, r3
   82050:	4610      	mov	r0, r2
   82052:	4b59      	ldr	r3, [pc, #356]	; (821b8 <udc_req_std_dev_get_descriptor+0x210>)
   82054:	4798      	blx	r3
		break;
   82056:	e099      	b.n	8218c <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   82058:	4b55      	ldr	r3, [pc, #340]	; (821b0 <udc_req_std_dev_get_descriptor+0x208>)
   8205a:	4798      	blx	r3
   8205c:	4603      	mov	r3, r0
   8205e:	2b00      	cmp	r3, #0
   82060:	d019      	beq.n	82096 <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   82062:	4b54      	ldr	r3, [pc, #336]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   82064:	689b      	ldr	r3, [r3, #8]
   82066:	7c5b      	ldrb	r3, [r3, #17]
   82068:	79fa      	ldrb	r2, [r7, #7]
   8206a:	429a      	cmp	r2, r3
   8206c:	d301      	bcc.n	82072 <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   8206e:	2300      	movs	r3, #0
   82070:	e097      	b.n	821a2 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82072:	4b50      	ldr	r3, [pc, #320]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   82074:	691a      	ldr	r2, [r3, #16]
   82076:	79fb      	ldrb	r3, [r7, #7]
   82078:	00db      	lsls	r3, r3, #3
   8207a:	4413      	add	r3, r2
   8207c:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   8207e:	4b4d      	ldr	r3, [pc, #308]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   82080:	691a      	ldr	r2, [r3, #16]
   82082:	79fb      	ldrb	r3, [r7, #7]
   82084:	00db      	lsls	r3, r3, #3
   82086:	4413      	add	r3, r2
   82088:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   8208a:	885b      	ldrh	r3, [r3, #2]
   8208c:	b29b      	uxth	r3, r3
   8208e:	4619      	mov	r1, r3
   82090:	4b49      	ldr	r3, [pc, #292]	; (821b8 <udc_req_std_dev_get_descriptor+0x210>)
   82092:	4798      	blx	r3
   82094:	e018      	b.n	820c8 <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   82096:	4b47      	ldr	r3, [pc, #284]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   82098:	681b      	ldr	r3, [r3, #0]
   8209a:	7c5b      	ldrb	r3, [r3, #17]
   8209c:	79fa      	ldrb	r2, [r7, #7]
   8209e:	429a      	cmp	r2, r3
   820a0:	d301      	bcc.n	820a6 <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   820a2:	2300      	movs	r3, #0
   820a4:	e07d      	b.n	821a2 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   820a6:	4b43      	ldr	r3, [pc, #268]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   820a8:	685a      	ldr	r2, [r3, #4]
   820aa:	79fb      	ldrb	r3, [r7, #7]
   820ac:	00db      	lsls	r3, r3, #3
   820ae:	4413      	add	r3, r2
   820b0:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   820b2:	4b40      	ldr	r3, [pc, #256]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   820b4:	685a      	ldr	r2, [r3, #4]
   820b6:	79fb      	ldrb	r3, [r7, #7]
   820b8:	00db      	lsls	r3, r3, #3
   820ba:	4413      	add	r3, r2
   820bc:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   820be:	885b      	ldrh	r3, [r3, #2]
   820c0:	b29b      	uxth	r3, r3
   820c2:	4619      	mov	r1, r3
   820c4:	4b3c      	ldr	r3, [pc, #240]	; (821b8 <udc_req_std_dev_get_descriptor+0x210>)
   820c6:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   820c8:	4b38      	ldr	r3, [pc, #224]	; (821ac <udc_req_std_dev_get_descriptor+0x204>)
   820ca:	689b      	ldr	r3, [r3, #8]
   820cc:	2202      	movs	r2, #2
   820ce:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   820d0:	e05c      	b.n	8218c <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   820d2:	4b38      	ldr	r3, [pc, #224]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   820d4:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   820d6:	4b37      	ldr	r3, [pc, #220]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   820d8:	68db      	ldr	r3, [r3, #12]
   820da:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   820dc:	b29b      	uxth	r3, r3
   820de:	4619      	mov	r1, r3
   820e0:	4610      	mov	r0, r2
   820e2:	4b35      	ldr	r3, [pc, #212]	; (821b8 <udc_req_std_dev_get_descriptor+0x210>)
   820e4:	4798      	blx	r3
		break;
   820e6:	e051      	b.n	8218c <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   820e8:	4b31      	ldr	r3, [pc, #196]	; (821b0 <udc_req_std_dev_get_descriptor+0x208>)
   820ea:	4798      	blx	r3
   820ec:	4603      	mov	r3, r0
   820ee:	f083 0301 	eor.w	r3, r3, #1
   820f2:	b2db      	uxtb	r3, r3
   820f4:	2b00      	cmp	r3, #0
   820f6:	d019      	beq.n	8212c <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   820f8:	4b2e      	ldr	r3, [pc, #184]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   820fa:	689b      	ldr	r3, [r3, #8]
   820fc:	7c5b      	ldrb	r3, [r3, #17]
   820fe:	79fa      	ldrb	r2, [r7, #7]
   82100:	429a      	cmp	r2, r3
   82102:	d301      	bcc.n	82108 <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   82104:	2300      	movs	r3, #0
   82106:	e04c      	b.n	821a2 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82108:	4b2a      	ldr	r3, [pc, #168]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   8210a:	691a      	ldr	r2, [r3, #16]
   8210c:	79fb      	ldrb	r3, [r7, #7]
   8210e:	00db      	lsls	r3, r3, #3
   82110:	4413      	add	r3, r2
   82112:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   82114:	4b27      	ldr	r3, [pc, #156]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   82116:	691a      	ldr	r2, [r3, #16]
   82118:	79fb      	ldrb	r3, [r7, #7]
   8211a:	00db      	lsls	r3, r3, #3
   8211c:	4413      	add	r3, r2
   8211e:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   82120:	885b      	ldrh	r3, [r3, #2]
   82122:	b29b      	uxth	r3, r3
   82124:	4619      	mov	r1, r3
   82126:	4b24      	ldr	r3, [pc, #144]	; (821b8 <udc_req_std_dev_get_descriptor+0x210>)
   82128:	4798      	blx	r3
   8212a:	e018      	b.n	8215e <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8212c:	4b21      	ldr	r3, [pc, #132]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   8212e:	681b      	ldr	r3, [r3, #0]
   82130:	7c5b      	ldrb	r3, [r3, #17]
   82132:	79fa      	ldrb	r2, [r7, #7]
   82134:	429a      	cmp	r2, r3
   82136:	d301      	bcc.n	8213c <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   82138:	2300      	movs	r3, #0
   8213a:	e032      	b.n	821a2 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8213c:	4b1d      	ldr	r3, [pc, #116]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   8213e:	685a      	ldr	r2, [r3, #4]
   82140:	79fb      	ldrb	r3, [r7, #7]
   82142:	00db      	lsls	r3, r3, #3
   82144:	4413      	add	r3, r2
   82146:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   82148:	4b1a      	ldr	r3, [pc, #104]	; (821b4 <udc_req_std_dev_get_descriptor+0x20c>)
   8214a:	685a      	ldr	r2, [r3, #4]
   8214c:	79fb      	ldrb	r3, [r7, #7]
   8214e:	00db      	lsls	r3, r3, #3
   82150:	4413      	add	r3, r2
   82152:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   82154:	885b      	ldrh	r3, [r3, #2]
   82156:	b29b      	uxth	r3, r3
   82158:	4619      	mov	r1, r3
   8215a:	4b17      	ldr	r3, [pc, #92]	; (821b8 <udc_req_std_dev_get_descriptor+0x210>)
   8215c:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8215e:	4b13      	ldr	r3, [pc, #76]	; (821ac <udc_req_std_dev_get_descriptor+0x204>)
   82160:	689b      	ldr	r3, [r3, #8]
   82162:	2207      	movs	r2, #7
   82164:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   82166:	e011      	b.n	8218c <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   82168:	2121      	movs	r1, #33	; 0x21
   8216a:	4814      	ldr	r0, [pc, #80]	; (821bc <udc_req_std_dev_get_descriptor+0x214>)
   8216c:	4b12      	ldr	r3, [pc, #72]	; (821b8 <udc_req_std_dev_get_descriptor+0x210>)
   8216e:	4798      	blx	r3
			sizeof(struct MS_BOS_DESCRIPTOR));
		break;
   82170:	e00c      	b.n	8218c <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   82172:	4b13      	ldr	r3, [pc, #76]	; (821c0 <udc_req_std_dev_get_descriptor+0x218>)
   82174:	4798      	blx	r3
   82176:	4603      	mov	r3, r0
   82178:	f083 0301 	eor.w	r3, r3, #1
   8217c:	b2db      	uxtb	r3, r3
   8217e:	2b00      	cmp	r3, #0
   82180:	d003      	beq.n	8218a <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   82182:	2300      	movs	r3, #0
   82184:	e00d      	b.n	821a2 <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   82186:	2300      	movs	r3, #0
   82188:	e00b      	b.n	821a2 <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   8218a:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   8218c:	4b07      	ldr	r3, [pc, #28]	; (821ac <udc_req_std_dev_get_descriptor+0x204>)
   8218e:	88da      	ldrh	r2, [r3, #6]
   82190:	4b06      	ldr	r3, [pc, #24]	; (821ac <udc_req_std_dev_get_descriptor+0x204>)
   82192:	899b      	ldrh	r3, [r3, #12]
   82194:	429a      	cmp	r2, r3
   82196:	d203      	bcs.n	821a0 <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82198:	4b04      	ldr	r3, [pc, #16]	; (821ac <udc_req_std_dev_get_descriptor+0x204>)
   8219a:	88da      	ldrh	r2, [r3, #6]
   8219c:	4b03      	ldr	r3, [pc, #12]	; (821ac <udc_req_std_dev_get_descriptor+0x204>)
   8219e:	819a      	strh	r2, [r3, #12]
	}
	return true;
   821a0:	2301      	movs	r3, #1
}
   821a2:	4618      	mov	r0, r3
   821a4:	3708      	adds	r7, #8
   821a6:	46bd      	mov	sp, r7
   821a8:	bd80      	pop	{r7, pc}
   821aa:	bf00      	nop
   821ac:	20001468 	.word	0x20001468
   821b0:	000847ad 	.word	0x000847ad
   821b4:	20000458 	.word	0x20000458
   821b8:	00084851 	.word	0x00084851
   821bc:	20000334 	.word	0x20000334
   821c0:	00081edd 	.word	0x00081edd

000821c4 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   821c4:	b580      	push	{r7, lr}
   821c6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   821c8:	4b06      	ldr	r3, [pc, #24]	; (821e4 <udc_req_std_dev_get_configuration+0x20>)
   821ca:	88db      	ldrh	r3, [r3, #6]
   821cc:	2b01      	cmp	r3, #1
   821ce:	d001      	beq.n	821d4 <udc_req_std_dev_get_configuration+0x10>
		return false;
   821d0:	2300      	movs	r3, #0
   821d2:	e004      	b.n	821de <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   821d4:	2101      	movs	r1, #1
   821d6:	4804      	ldr	r0, [pc, #16]	; (821e8 <udc_req_std_dev_get_configuration+0x24>)
   821d8:	4b04      	ldr	r3, [pc, #16]	; (821ec <udc_req_std_dev_get_configuration+0x28>)
   821da:	4798      	blx	r3
	return true;
   821dc:	2301      	movs	r3, #1
}
   821de:	4618      	mov	r0, r3
   821e0:	bd80      	pop	{r7, pc}
   821e2:	bf00      	nop
   821e4:	20001468 	.word	0x20001468
   821e8:	20000ed2 	.word	0x20000ed2
   821ec:	00084851 	.word	0x00084851

000821f0 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   821f0:	b580      	push	{r7, lr}
   821f2:	b082      	sub	sp, #8
   821f4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   821f6:	4b37      	ldr	r3, [pc, #220]	; (822d4 <udc_req_std_dev_set_configuration+0xe4>)
   821f8:	88db      	ldrh	r3, [r3, #6]
   821fa:	2b00      	cmp	r3, #0
   821fc:	d001      	beq.n	82202 <udc_req_std_dev_set_configuration+0x12>
		return false;
   821fe:	2300      	movs	r3, #0
   82200:	e063      	b.n	822ca <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   82202:	4b35      	ldr	r3, [pc, #212]	; (822d8 <udc_req_std_dev_set_configuration+0xe8>)
   82204:	4798      	blx	r3
   82206:	4603      	mov	r3, r0
   82208:	2b00      	cmp	r3, #0
   8220a:	d101      	bne.n	82210 <udc_req_std_dev_set_configuration+0x20>
		return false;
   8220c:	2300      	movs	r3, #0
   8220e:	e05c      	b.n	822ca <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   82210:	4b32      	ldr	r3, [pc, #200]	; (822dc <udc_req_std_dev_set_configuration+0xec>)
   82212:	4798      	blx	r3
   82214:	4603      	mov	r3, r0
   82216:	2b00      	cmp	r3, #0
   82218:	d009      	beq.n	8222e <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8221a:	4b2e      	ldr	r3, [pc, #184]	; (822d4 <udc_req_std_dev_set_configuration+0xe4>)
   8221c:	885b      	ldrh	r3, [r3, #2]
   8221e:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   82220:	4a2f      	ldr	r2, [pc, #188]	; (822e0 <udc_req_std_dev_set_configuration+0xf0>)
   82222:	6892      	ldr	r2, [r2, #8]
   82224:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82226:	4293      	cmp	r3, r2
   82228:	dd0b      	ble.n	82242 <udc_req_std_dev_set_configuration+0x52>
			return false;
   8222a:	2300      	movs	r3, #0
   8222c:	e04d      	b.n	822ca <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8222e:	4b29      	ldr	r3, [pc, #164]	; (822d4 <udc_req_std_dev_set_configuration+0xe4>)
   82230:	885b      	ldrh	r3, [r3, #2]
   82232:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   82234:	4a2a      	ldr	r2, [pc, #168]	; (822e0 <udc_req_std_dev_set_configuration+0xf0>)
   82236:	6812      	ldr	r2, [r2, #0]
   82238:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8223a:	4293      	cmp	r3, r2
   8223c:	dd01      	ble.n	82242 <udc_req_std_dev_set_configuration+0x52>
			return false;
   8223e:	2300      	movs	r3, #0
   82240:	e043      	b.n	822ca <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   82242:	4b28      	ldr	r3, [pc, #160]	; (822e4 <udc_req_std_dev_set_configuration+0xf4>)
   82244:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   82246:	4b23      	ldr	r3, [pc, #140]	; (822d4 <udc_req_std_dev_set_configuration+0xe4>)
   82248:	885b      	ldrh	r3, [r3, #2]
   8224a:	b2da      	uxtb	r2, r3
   8224c:	4b26      	ldr	r3, [pc, #152]	; (822e8 <udc_req_std_dev_set_configuration+0xf8>)
   8224e:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   82250:	4b25      	ldr	r3, [pc, #148]	; (822e8 <udc_req_std_dev_set_configuration+0xf8>)
   82252:	781b      	ldrb	r3, [r3, #0]
   82254:	2b00      	cmp	r3, #0
   82256:	d101      	bne.n	8225c <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   82258:	2301      	movs	r3, #1
   8225a:	e036      	b.n	822ca <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   8225c:	4b1f      	ldr	r3, [pc, #124]	; (822dc <udc_req_std_dev_set_configuration+0xec>)
   8225e:	4798      	blx	r3
   82260:	4603      	mov	r3, r0
   82262:	2b00      	cmp	r3, #0
   82264:	d00b      	beq.n	8227e <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   82266:	4b1e      	ldr	r3, [pc, #120]	; (822e0 <udc_req_std_dev_set_configuration+0xf0>)
   82268:	691a      	ldr	r2, [r3, #16]
   8226a:	4b1f      	ldr	r3, [pc, #124]	; (822e8 <udc_req_std_dev_set_configuration+0xf8>)
   8226c:	781b      	ldrb	r3, [r3, #0]
   8226e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   82272:	3b01      	subs	r3, #1
   82274:	00db      	lsls	r3, r3, #3
   82276:	4413      	add	r3, r2
   82278:	4a1c      	ldr	r2, [pc, #112]	; (822ec <udc_req_std_dev_set_configuration+0xfc>)
   8227a:	6013      	str	r3, [r2, #0]
   8227c:	e00a      	b.n	82294 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   8227e:	4b18      	ldr	r3, [pc, #96]	; (822e0 <udc_req_std_dev_set_configuration+0xf0>)
   82280:	685a      	ldr	r2, [r3, #4]
   82282:	4b19      	ldr	r3, [pc, #100]	; (822e8 <udc_req_std_dev_set_configuration+0xf8>)
   82284:	781b      	ldrb	r3, [r3, #0]
   82286:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8228a:	3b01      	subs	r3, #1
   8228c:	00db      	lsls	r3, r3, #3
   8228e:	4413      	add	r3, r2
   82290:	4a16      	ldr	r2, [pc, #88]	; (822ec <udc_req_std_dev_set_configuration+0xfc>)
   82292:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82294:	2300      	movs	r3, #0
   82296:	71fb      	strb	r3, [r7, #7]
   82298:	e00f      	b.n	822ba <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   8229a:	79fb      	ldrb	r3, [r7, #7]
   8229c:	2100      	movs	r1, #0
   8229e:	4618      	mov	r0, r3
   822a0:	4b13      	ldr	r3, [pc, #76]	; (822f0 <udc_req_std_dev_set_configuration+0x100>)
   822a2:	4798      	blx	r3
   822a4:	4603      	mov	r3, r0
   822a6:	f083 0301 	eor.w	r3, r3, #1
   822aa:	b2db      	uxtb	r3, r3
   822ac:	2b00      	cmp	r3, #0
   822ae:	d001      	beq.n	822b4 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   822b0:	2300      	movs	r3, #0
   822b2:	e00a      	b.n	822ca <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   822b4:	79fb      	ldrb	r3, [r7, #7]
   822b6:	3301      	adds	r3, #1
   822b8:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   822ba:	4b0c      	ldr	r3, [pc, #48]	; (822ec <udc_req_std_dev_set_configuration+0xfc>)
   822bc:	681b      	ldr	r3, [r3, #0]
   822be:	681b      	ldr	r3, [r3, #0]
   822c0:	791b      	ldrb	r3, [r3, #4]
   822c2:	79fa      	ldrb	r2, [r7, #7]
   822c4:	429a      	cmp	r2, r3
   822c6:	d3e8      	bcc.n	8229a <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   822c8:	2301      	movs	r3, #1
}
   822ca:	4618      	mov	r0, r3
   822cc:	3708      	adds	r7, #8
   822ce:	46bd      	mov	sp, r7
   822d0:	bd80      	pop	{r7, pc}
   822d2:	bf00      	nop
   822d4:	20001468 	.word	0x20001468
   822d8:	00084815 	.word	0x00084815
   822dc:	000847ad 	.word	0x000847ad
   822e0:	20000458 	.word	0x20000458
   822e4:	00081bf5 	.word	0x00081bf5
   822e8:	20000ed2 	.word	0x20000ed2
   822ec:	20000ed4 	.word	0x20000ed4
   822f0:	00081b4d 	.word	0x00081b4d

000822f4 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   822f4:	b580      	push	{r7, lr}
   822f6:	b082      	sub	sp, #8
   822f8:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   822fa:	4b1e      	ldr	r3, [pc, #120]	; (82374 <udc_req_std_iface_get_setting+0x80>)
   822fc:	88db      	ldrh	r3, [r3, #6]
   822fe:	2b01      	cmp	r3, #1
   82300:	d001      	beq.n	82306 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   82302:	2300      	movs	r3, #0
   82304:	e032      	b.n	8236c <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   82306:	4b1c      	ldr	r3, [pc, #112]	; (82378 <udc_req_std_iface_get_setting+0x84>)
   82308:	781b      	ldrb	r3, [r3, #0]
   8230a:	2b00      	cmp	r3, #0
   8230c:	d101      	bne.n	82312 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   8230e:	2300      	movs	r3, #0
   82310:	e02c      	b.n	8236c <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82312:	4b18      	ldr	r3, [pc, #96]	; (82374 <udc_req_std_iface_get_setting+0x80>)
   82314:	889b      	ldrh	r3, [r3, #4]
   82316:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82318:	4b18      	ldr	r3, [pc, #96]	; (8237c <udc_req_std_iface_get_setting+0x88>)
   8231a:	681b      	ldr	r3, [r3, #0]
   8231c:	681b      	ldr	r3, [r3, #0]
   8231e:	791b      	ldrb	r3, [r3, #4]
   82320:	79fa      	ldrb	r2, [r7, #7]
   82322:	429a      	cmp	r2, r3
   82324:	d301      	bcc.n	8232a <udc_req_std_iface_get_setting+0x36>
		return false;
   82326:	2300      	movs	r3, #0
   82328:	e020      	b.n	8236c <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8232a:	79fb      	ldrb	r3, [r7, #7]
   8232c:	2100      	movs	r1, #0
   8232e:	4618      	mov	r0, r3
   82330:	4b13      	ldr	r3, [pc, #76]	; (82380 <udc_req_std_iface_get_setting+0x8c>)
   82332:	4798      	blx	r3
   82334:	4603      	mov	r3, r0
   82336:	f083 0301 	eor.w	r3, r3, #1
   8233a:	b2db      	uxtb	r3, r3
   8233c:	2b00      	cmp	r3, #0
   8233e:	d001      	beq.n	82344 <udc_req_std_iface_get_setting+0x50>
		return false;
   82340:	2300      	movs	r3, #0
   82342:	e013      	b.n	8236c <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82344:	4b0d      	ldr	r3, [pc, #52]	; (8237c <udc_req_std_iface_get_setting+0x88>)
   82346:	681b      	ldr	r3, [r3, #0]
   82348:	685a      	ldr	r2, [r3, #4]
   8234a:	79fb      	ldrb	r3, [r7, #7]
   8234c:	009b      	lsls	r3, r3, #2
   8234e:	4413      	add	r3, r2
   82350:	681b      	ldr	r3, [r3, #0]
   82352:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   82354:	683b      	ldr	r3, [r7, #0]
   82356:	68db      	ldr	r3, [r3, #12]
   82358:	4798      	blx	r3
   8235a:	4603      	mov	r3, r0
   8235c:	461a      	mov	r2, r3
   8235e:	4b09      	ldr	r3, [pc, #36]	; (82384 <udc_req_std_iface_get_setting+0x90>)
   82360:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   82362:	2101      	movs	r1, #1
   82364:	4807      	ldr	r0, [pc, #28]	; (82384 <udc_req_std_iface_get_setting+0x90>)
   82366:	4b08      	ldr	r3, [pc, #32]	; (82388 <udc_req_std_iface_get_setting+0x94>)
   82368:	4798      	blx	r3
	return true;
   8236a:	2301      	movs	r3, #1
}
   8236c:	4618      	mov	r0, r3
   8236e:	3708      	adds	r7, #8
   82370:	46bd      	mov	sp, r7
   82372:	bd80      	pop	{r7, pc}
   82374:	20001468 	.word	0x20001468
   82378:	20000ed2 	.word	0x20000ed2
   8237c:	20000ed4 	.word	0x20000ed4
   82380:	00081a11 	.word	0x00081a11
   82384:	20000ede 	.word	0x20000ede
   82388:	00084851 	.word	0x00084851

0008238c <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   8238c:	b580      	push	{r7, lr}
   8238e:	b082      	sub	sp, #8
   82390:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   82392:	4b14      	ldr	r3, [pc, #80]	; (823e4 <udc_req_std_iface_set_setting+0x58>)
   82394:	88db      	ldrh	r3, [r3, #6]
   82396:	2b00      	cmp	r3, #0
   82398:	d001      	beq.n	8239e <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   8239a:	2300      	movs	r3, #0
   8239c:	e01e      	b.n	823dc <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   8239e:	4b12      	ldr	r3, [pc, #72]	; (823e8 <udc_req_std_iface_set_setting+0x5c>)
   823a0:	781b      	ldrb	r3, [r3, #0]
   823a2:	2b00      	cmp	r3, #0
   823a4:	d101      	bne.n	823aa <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   823a6:	2300      	movs	r3, #0
   823a8:	e018      	b.n	823dc <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   823aa:	4b0e      	ldr	r3, [pc, #56]	; (823e4 <udc_req_std_iface_set_setting+0x58>)
   823ac:	889b      	ldrh	r3, [r3, #4]
   823ae:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   823b0:	4b0c      	ldr	r3, [pc, #48]	; (823e4 <udc_req_std_iface_set_setting+0x58>)
   823b2:	885b      	ldrh	r3, [r3, #2]
   823b4:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   823b6:	79fb      	ldrb	r3, [r7, #7]
   823b8:	4618      	mov	r0, r3
   823ba:	4b0c      	ldr	r3, [pc, #48]	; (823ec <udc_req_std_iface_set_setting+0x60>)
   823bc:	4798      	blx	r3
   823be:	4603      	mov	r3, r0
   823c0:	f083 0301 	eor.w	r3, r3, #1
   823c4:	b2db      	uxtb	r3, r3
   823c6:	2b00      	cmp	r3, #0
   823c8:	d001      	beq.n	823ce <udc_req_std_iface_set_setting+0x42>
		return false;
   823ca:	2300      	movs	r3, #0
   823cc:	e006      	b.n	823dc <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   823ce:	79ba      	ldrb	r2, [r7, #6]
   823d0:	79fb      	ldrb	r3, [r7, #7]
   823d2:	4611      	mov	r1, r2
   823d4:	4618      	mov	r0, r3
   823d6:	4b06      	ldr	r3, [pc, #24]	; (823f0 <udc_req_std_iface_set_setting+0x64>)
   823d8:	4798      	blx	r3
   823da:	4603      	mov	r3, r0
}
   823dc:	4618      	mov	r0, r3
   823de:	3708      	adds	r7, #8
   823e0:	46bd      	mov	sp, r7
   823e2:	bd80      	pop	{r7, pc}
   823e4:	20001468 	.word	0x20001468
   823e8:	20000ed2 	.word	0x20000ed2
   823ec:	00081aad 	.word	0x00081aad
   823f0:	00081b4d 	.word	0x00081b4d

000823f4 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   823f4:	b580      	push	{r7, lr}
   823f6:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   823f8:	4b55      	ldr	r3, [pc, #340]	; (82550 <udc_reqstd+0x15c>)
   823fa:	781b      	ldrb	r3, [r3, #0]
   823fc:	b25b      	sxtb	r3, r3
   823fe:	2b00      	cmp	r3, #0
   82400:	da44      	bge.n	8248c <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   82402:	4b53      	ldr	r3, [pc, #332]	; (82550 <udc_reqstd+0x15c>)
   82404:	88db      	ldrh	r3, [r3, #6]
   82406:	2b00      	cmp	r3, #0
   82408:	d101      	bne.n	8240e <udc_reqstd+0x1a>
			return false; // Error for USB host
   8240a:	2300      	movs	r3, #0
   8240c:	e09d      	b.n	8254a <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8240e:	4b50      	ldr	r3, [pc, #320]	; (82550 <udc_reqstd+0x15c>)
   82410:	781b      	ldrb	r3, [r3, #0]
   82412:	f003 031f 	and.w	r3, r3, #31
   82416:	2b00      	cmp	r3, #0
   82418:	d116      	bne.n	82448 <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8241a:	4b4d      	ldr	r3, [pc, #308]	; (82550 <udc_reqstd+0x15c>)
   8241c:	785b      	ldrb	r3, [r3, #1]
   8241e:	2b08      	cmp	r3, #8
   82420:	d00e      	beq.n	82440 <udc_reqstd+0x4c>
   82422:	2b08      	cmp	r3, #8
   82424:	dc12      	bgt.n	8244c <udc_reqstd+0x58>
   82426:	2b00      	cmp	r3, #0
   82428:	d002      	beq.n	82430 <udc_reqstd+0x3c>
   8242a:	2b06      	cmp	r3, #6
   8242c:	d004      	beq.n	82438 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   8242e:	e00d      	b.n	8244c <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   82430:	4b48      	ldr	r3, [pc, #288]	; (82554 <udc_reqstd+0x160>)
   82432:	4798      	blx	r3
   82434:	4603      	mov	r3, r0
   82436:	e088      	b.n	8254a <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   82438:	4b47      	ldr	r3, [pc, #284]	; (82558 <udc_reqstd+0x164>)
   8243a:	4798      	blx	r3
   8243c:	4603      	mov	r3, r0
   8243e:	e084      	b.n	8254a <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   82440:	4b46      	ldr	r3, [pc, #280]	; (8255c <udc_reqstd+0x168>)
   82442:	4798      	blx	r3
   82444:	4603      	mov	r3, r0
   82446:	e080      	b.n	8254a <udc_reqstd+0x156>
			}
		}
   82448:	bf00      	nop
   8244a:	e000      	b.n	8244e <udc_reqstd+0x5a>
				break;
   8244c:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8244e:	4b40      	ldr	r3, [pc, #256]	; (82550 <udc_reqstd+0x15c>)
   82450:	781b      	ldrb	r3, [r3, #0]
   82452:	f003 031f 	and.w	r3, r3, #31
   82456:	2b01      	cmp	r3, #1
   82458:	d107      	bne.n	8246a <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   8245a:	4b3d      	ldr	r3, [pc, #244]	; (82550 <udc_reqstd+0x15c>)
   8245c:	785b      	ldrb	r3, [r3, #1]
   8245e:	2b0a      	cmp	r3, #10
   82460:	d105      	bne.n	8246e <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   82462:	4b3f      	ldr	r3, [pc, #252]	; (82560 <udc_reqstd+0x16c>)
   82464:	4798      	blx	r3
   82466:	4603      	mov	r3, r0
   82468:	e06f      	b.n	8254a <udc_reqstd+0x156>
			default:
				break;
			}
		}
   8246a:	bf00      	nop
   8246c:	e000      	b.n	82470 <udc_reqstd+0x7c>
				break;
   8246e:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82470:	4b37      	ldr	r3, [pc, #220]	; (82550 <udc_reqstd+0x15c>)
   82472:	781b      	ldrb	r3, [r3, #0]
   82474:	f003 031f 	and.w	r3, r3, #31
   82478:	2b02      	cmp	r3, #2
   8247a:	d160      	bne.n	8253e <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   8247c:	4b34      	ldr	r3, [pc, #208]	; (82550 <udc_reqstd+0x15c>)
   8247e:	785b      	ldrb	r3, [r3, #1]
   82480:	2b00      	cmp	r3, #0
   82482:	d15e      	bne.n	82542 <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   82484:	4b37      	ldr	r3, [pc, #220]	; (82564 <udc_reqstd+0x170>)
   82486:	4798      	blx	r3
   82488:	4603      	mov	r3, r0
   8248a:	e05e      	b.n	8254a <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8248c:	4b30      	ldr	r3, [pc, #192]	; (82550 <udc_reqstd+0x15c>)
   8248e:	781b      	ldrb	r3, [r3, #0]
   82490:	f003 031f 	and.w	r3, r3, #31
   82494:	2b00      	cmp	r3, #0
   82496:	d129      	bne.n	824ec <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   82498:	4b2d      	ldr	r3, [pc, #180]	; (82550 <udc_reqstd+0x15c>)
   8249a:	785b      	ldrb	r3, [r3, #1]
   8249c:	3b01      	subs	r3, #1
   8249e:	2b08      	cmp	r3, #8
   824a0:	d826      	bhi.n	824f0 <udc_reqstd+0xfc>
   824a2:	a201      	add	r2, pc, #4	; (adr r2, 824a8 <udc_reqstd+0xb4>)
   824a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   824a8:	000824d5 	.word	0x000824d5
   824ac:	000824f1 	.word	0x000824f1
   824b0:	000824dd 	.word	0x000824dd
   824b4:	000824f1 	.word	0x000824f1
   824b8:	000824cd 	.word	0x000824cd
   824bc:	000824f1 	.word	0x000824f1
   824c0:	000824f1 	.word	0x000824f1
   824c4:	000824f1 	.word	0x000824f1
   824c8:	000824e5 	.word	0x000824e5
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   824cc:	4b26      	ldr	r3, [pc, #152]	; (82568 <udc_reqstd+0x174>)
   824ce:	4798      	blx	r3
   824d0:	4603      	mov	r3, r0
   824d2:	e03a      	b.n	8254a <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   824d4:	4b25      	ldr	r3, [pc, #148]	; (8256c <udc_reqstd+0x178>)
   824d6:	4798      	blx	r3
   824d8:	4603      	mov	r3, r0
   824da:	e036      	b.n	8254a <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   824dc:	4b24      	ldr	r3, [pc, #144]	; (82570 <udc_reqstd+0x17c>)
   824de:	4798      	blx	r3
   824e0:	4603      	mov	r3, r0
   824e2:	e032      	b.n	8254a <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   824e4:	4b23      	ldr	r3, [pc, #140]	; (82574 <udc_reqstd+0x180>)
   824e6:	4798      	blx	r3
   824e8:	4603      	mov	r3, r0
   824ea:	e02e      	b.n	8254a <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   824ec:	bf00      	nop
   824ee:	e000      	b.n	824f2 <udc_reqstd+0xfe>
				break;
   824f0:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   824f2:	4b17      	ldr	r3, [pc, #92]	; (82550 <udc_reqstd+0x15c>)
   824f4:	781b      	ldrb	r3, [r3, #0]
   824f6:	f003 031f 	and.w	r3, r3, #31
   824fa:	2b01      	cmp	r3, #1
   824fc:	d107      	bne.n	8250e <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   824fe:	4b14      	ldr	r3, [pc, #80]	; (82550 <udc_reqstd+0x15c>)
   82500:	785b      	ldrb	r3, [r3, #1]
   82502:	2b0b      	cmp	r3, #11
   82504:	d105      	bne.n	82512 <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   82506:	4b1c      	ldr	r3, [pc, #112]	; (82578 <udc_reqstd+0x184>)
   82508:	4798      	blx	r3
   8250a:	4603      	mov	r3, r0
   8250c:	e01d      	b.n	8254a <udc_reqstd+0x156>
			default:
				break;
			}
		}
   8250e:	bf00      	nop
   82510:	e000      	b.n	82514 <udc_reqstd+0x120>
				break;
   82512:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82514:	4b0e      	ldr	r3, [pc, #56]	; (82550 <udc_reqstd+0x15c>)
   82516:	781b      	ldrb	r3, [r3, #0]
   82518:	f003 031f 	and.w	r3, r3, #31
   8251c:	2b02      	cmp	r3, #2
   8251e:	d112      	bne.n	82546 <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   82520:	4b0b      	ldr	r3, [pc, #44]	; (82550 <udc_reqstd+0x15c>)
   82522:	785b      	ldrb	r3, [r3, #1]
   82524:	2b01      	cmp	r3, #1
   82526:	d002      	beq.n	8252e <udc_reqstd+0x13a>
   82528:	2b03      	cmp	r3, #3
   8252a:	d004      	beq.n	82536 <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   8252c:	e00c      	b.n	82548 <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   8252e:	4b13      	ldr	r3, [pc, #76]	; (8257c <udc_reqstd+0x188>)
   82530:	4798      	blx	r3
   82532:	4603      	mov	r3, r0
   82534:	e009      	b.n	8254a <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   82536:	4b12      	ldr	r3, [pc, #72]	; (82580 <udc_reqstd+0x18c>)
   82538:	4798      	blx	r3
   8253a:	4603      	mov	r3, r0
   8253c:	e005      	b.n	8254a <udc_reqstd+0x156>
		}
   8253e:	bf00      	nop
   82540:	e002      	b.n	82548 <udc_reqstd+0x154>
				break;
   82542:	bf00      	nop
   82544:	e000      	b.n	82548 <udc_reqstd+0x154>
			}
		}
   82546:	bf00      	nop
#endif
	}
	return false;
   82548:	2300      	movs	r3, #0
}
   8254a:	4618      	mov	r0, r3
   8254c:	bd80      	pop	{r7, pc}
   8254e:	bf00      	nop
   82550:	20001468 	.word	0x20001468
   82554:	00081ca9 	.word	0x00081ca9
   82558:	00081fa9 	.word	0x00081fa9
   8255c:	000821c5 	.word	0x000821c5
   82560:	000822f5 	.word	0x000822f5
   82564:	00081cd5 	.word	0x00081cd5
   82568:	00081eb5 	.word	0x00081eb5
   8256c:	00081d19 	.word	0x00081d19
   82570:	00081d8d 	.word	0x00081d8d
   82574:	000821f1 	.word	0x000821f1
   82578:	0008238d 	.word	0x0008238d
   8257c:	00081d55 	.word	0x00081d55
   82580:	00081e49 	.word	0x00081e49

00082584 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   82584:	b580      	push	{r7, lr}
   82586:	b082      	sub	sp, #8
   82588:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8258a:	4b20      	ldr	r3, [pc, #128]	; (8260c <udc_req_iface+0x88>)
   8258c:	781b      	ldrb	r3, [r3, #0]
   8258e:	2b00      	cmp	r3, #0
   82590:	d101      	bne.n	82596 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   82592:	2300      	movs	r3, #0
   82594:	e036      	b.n	82604 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82596:	4b1e      	ldr	r3, [pc, #120]	; (82610 <udc_req_iface+0x8c>)
   82598:	889b      	ldrh	r3, [r3, #4]
   8259a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8259c:	4b1d      	ldr	r3, [pc, #116]	; (82614 <udc_req_iface+0x90>)
   8259e:	681b      	ldr	r3, [r3, #0]
   825a0:	681b      	ldr	r3, [r3, #0]
   825a2:	791b      	ldrb	r3, [r3, #4]
   825a4:	79fa      	ldrb	r2, [r7, #7]
   825a6:	429a      	cmp	r2, r3
   825a8:	d301      	bcc.n	825ae <udc_req_iface+0x2a>
		return false;
   825aa:	2300      	movs	r3, #0
   825ac:	e02a      	b.n	82604 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   825ae:	79fb      	ldrb	r3, [r7, #7]
   825b0:	2100      	movs	r1, #0
   825b2:	4618      	mov	r0, r3
   825b4:	4b18      	ldr	r3, [pc, #96]	; (82618 <udc_req_iface+0x94>)
   825b6:	4798      	blx	r3
   825b8:	4603      	mov	r3, r0
   825ba:	f083 0301 	eor.w	r3, r3, #1
   825be:	b2db      	uxtb	r3, r3
   825c0:	2b00      	cmp	r3, #0
   825c2:	d001      	beq.n	825c8 <udc_req_iface+0x44>
		return false;
   825c4:	2300      	movs	r3, #0
   825c6:	e01d      	b.n	82604 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   825c8:	4b12      	ldr	r3, [pc, #72]	; (82614 <udc_req_iface+0x90>)
   825ca:	681b      	ldr	r3, [r3, #0]
   825cc:	685a      	ldr	r2, [r3, #4]
   825ce:	79fb      	ldrb	r3, [r7, #7]
   825d0:	009b      	lsls	r3, r3, #2
   825d2:	4413      	add	r3, r2
   825d4:	681b      	ldr	r3, [r3, #0]
   825d6:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   825d8:	683b      	ldr	r3, [r7, #0]
   825da:	68db      	ldr	r3, [r3, #12]
   825dc:	4798      	blx	r3
   825de:	4603      	mov	r3, r0
   825e0:	461a      	mov	r2, r3
   825e2:	79fb      	ldrb	r3, [r7, #7]
   825e4:	4611      	mov	r1, r2
   825e6:	4618      	mov	r0, r3
   825e8:	4b0b      	ldr	r3, [pc, #44]	; (82618 <udc_req_iface+0x94>)
   825ea:	4798      	blx	r3
   825ec:	4603      	mov	r3, r0
   825ee:	f083 0301 	eor.w	r3, r3, #1
   825f2:	b2db      	uxtb	r3, r3
   825f4:	2b00      	cmp	r3, #0
   825f6:	d001      	beq.n	825fc <udc_req_iface+0x78>
		return false;
   825f8:	2300      	movs	r3, #0
   825fa:	e003      	b.n	82604 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   825fc:	683b      	ldr	r3, [r7, #0]
   825fe:	689b      	ldr	r3, [r3, #8]
   82600:	4798      	blx	r3
   82602:	4603      	mov	r3, r0
}
   82604:	4618      	mov	r0, r3
   82606:	3708      	adds	r7, #8
   82608:	46bd      	mov	sp, r7
   8260a:	bd80      	pop	{r7, pc}
   8260c:	20000ed2 	.word	0x20000ed2
   82610:	20001468 	.word	0x20001468
   82614:	20000ed4 	.word	0x20000ed4
   82618:	00081a11 	.word	0x00081a11

0008261c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   8261c:	b580      	push	{r7, lr}
   8261e:	b082      	sub	sp, #8
   82620:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   82622:	4b1e      	ldr	r3, [pc, #120]	; (8269c <udc_req_ep+0x80>)
   82624:	781b      	ldrb	r3, [r3, #0]
   82626:	2b00      	cmp	r3, #0
   82628:	d101      	bne.n	8262e <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   8262a:	2300      	movs	r3, #0
   8262c:	e032      	b.n	82694 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8262e:	4b1c      	ldr	r3, [pc, #112]	; (826a0 <udc_req_ep+0x84>)
   82630:	889b      	ldrh	r3, [r3, #4]
   82632:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82634:	2300      	movs	r3, #0
   82636:	71fb      	strb	r3, [r7, #7]
   82638:	e024      	b.n	82684 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   8263a:	4b1a      	ldr	r3, [pc, #104]	; (826a4 <udc_req_ep+0x88>)
   8263c:	681b      	ldr	r3, [r3, #0]
   8263e:	685a      	ldr	r2, [r3, #4]
   82640:	79fb      	ldrb	r3, [r7, #7]
   82642:	009b      	lsls	r3, r3, #2
   82644:	4413      	add	r3, r2
   82646:	681b      	ldr	r3, [r3, #0]
   82648:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8264a:	683b      	ldr	r3, [r7, #0]
   8264c:	68db      	ldr	r3, [r3, #12]
   8264e:	4798      	blx	r3
   82650:	4603      	mov	r3, r0
   82652:	461a      	mov	r2, r3
   82654:	79fb      	ldrb	r3, [r7, #7]
   82656:	4611      	mov	r1, r2
   82658:	4618      	mov	r0, r3
   8265a:	4b13      	ldr	r3, [pc, #76]	; (826a8 <udc_req_ep+0x8c>)
   8265c:	4798      	blx	r3
   8265e:	4603      	mov	r3, r0
   82660:	f083 0301 	eor.w	r3, r3, #1
   82664:	b2db      	uxtb	r3, r3
   82666:	2b00      	cmp	r3, #0
   82668:	d001      	beq.n	8266e <udc_req_ep+0x52>
			return false;
   8266a:	2300      	movs	r3, #0
   8266c:	e012      	b.n	82694 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8266e:	683b      	ldr	r3, [r7, #0]
   82670:	689b      	ldr	r3, [r3, #8]
   82672:	4798      	blx	r3
   82674:	4603      	mov	r3, r0
   82676:	2b00      	cmp	r3, #0
   82678:	d001      	beq.n	8267e <udc_req_ep+0x62>
			return true;
   8267a:	2301      	movs	r3, #1
   8267c:	e00a      	b.n	82694 <udc_req_ep+0x78>
			iface_num++) {
   8267e:	79fb      	ldrb	r3, [r7, #7]
   82680:	3301      	adds	r3, #1
   82682:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82684:	4b07      	ldr	r3, [pc, #28]	; (826a4 <udc_req_ep+0x88>)
   82686:	681b      	ldr	r3, [r3, #0]
   82688:	681b      	ldr	r3, [r3, #0]
   8268a:	791b      	ldrb	r3, [r3, #4]
   8268c:	79fa      	ldrb	r2, [r7, #7]
   8268e:	429a      	cmp	r2, r3
   82690:	d3d3      	bcc.n	8263a <udc_req_ep+0x1e>
		}
	}
	return false;
   82692:	2300      	movs	r3, #0
}
   82694:	4618      	mov	r0, r3
   82696:	3708      	adds	r7, #8
   82698:	46bd      	mov	sp, r7
   8269a:	bd80      	pop	{r7, pc}
   8269c:	20000ed2 	.word	0x20000ed2
   826a0:	20001468 	.word	0x20001468
   826a4:	20000ed4 	.word	0x20000ed4
   826a8:	00081a11 	.word	0x00081a11

000826ac <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   826ac:	b580      	push	{r7, lr}
   826ae:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   826b0:	4b25      	ldr	r3, [pc, #148]	; (82748 <udc_process_setup+0x9c>)
   826b2:	2200      	movs	r2, #0
   826b4:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   826b6:	4b24      	ldr	r3, [pc, #144]	; (82748 <udc_process_setup+0x9c>)
   826b8:	2200      	movs	r2, #0
   826ba:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   826bc:	4b22      	ldr	r3, [pc, #136]	; (82748 <udc_process_setup+0x9c>)
   826be:	2200      	movs	r2, #0
   826c0:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   826c2:	4b21      	ldr	r3, [pc, #132]	; (82748 <udc_process_setup+0x9c>)
   826c4:	781b      	ldrb	r3, [r3, #0]
   826c6:	2bc0      	cmp	r3, #192	; 0xc0
   826c8:	d109      	bne.n	826de <udc_process_setup+0x32>
   826ca:	4b1f      	ldr	r3, [pc, #124]	; (82748 <udc_process_setup+0x9c>)
   826cc:	785b      	ldrb	r3, [r3, #1]
   826ce:	2b01      	cmp	r3, #1
   826d0:	d105      	bne.n	826de <udc_process_setup+0x32>
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   826d2:	219e      	movs	r1, #158	; 0x9e
   826d4:	481d      	ldr	r0, [pc, #116]	; (8274c <udc_process_setup+0xa0>)
   826d6:	4b1e      	ldr	r3, [pc, #120]	; (82750 <udc_process_setup+0xa4>)
   826d8:	4798      	blx	r3
		return true;
   826da:	2301      	movs	r3, #1
   826dc:	e032      	b.n	82744 <udc_process_setup+0x98>
	}

	if (Udd_setup_is_in()) {
   826de:	4b1a      	ldr	r3, [pc, #104]	; (82748 <udc_process_setup+0x9c>)
   826e0:	781b      	ldrb	r3, [r3, #0]
   826e2:	b25b      	sxtb	r3, r3
   826e4:	2b00      	cmp	r3, #0
   826e6:	da05      	bge.n	826f4 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   826e8:	4b17      	ldr	r3, [pc, #92]	; (82748 <udc_process_setup+0x9c>)
   826ea:	88db      	ldrh	r3, [r3, #6]
   826ec:	2b00      	cmp	r3, #0
   826ee:	d101      	bne.n	826f4 <udc_process_setup+0x48>
			return false; // Error from USB host
   826f0:	2300      	movs	r3, #0
   826f2:	e027      	b.n	82744 <udc_process_setup+0x98>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   826f4:	4b14      	ldr	r3, [pc, #80]	; (82748 <udc_process_setup+0x9c>)
   826f6:	781b      	ldrb	r3, [r3, #0]
   826f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   826fc:	2b00      	cmp	r3, #0
   826fe:	d106      	bne.n	8270e <udc_process_setup+0x62>
		if (udc_reqstd()) {
   82700:	4b14      	ldr	r3, [pc, #80]	; (82754 <udc_process_setup+0xa8>)
   82702:	4798      	blx	r3
   82704:	4603      	mov	r3, r0
   82706:	2b00      	cmp	r3, #0
   82708:	d001      	beq.n	8270e <udc_process_setup+0x62>
			return true;
   8270a:	2301      	movs	r3, #1
   8270c:	e01a      	b.n	82744 <udc_process_setup+0x98>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   8270e:	4b0e      	ldr	r3, [pc, #56]	; (82748 <udc_process_setup+0x9c>)
   82710:	781b      	ldrb	r3, [r3, #0]
   82712:	f003 031f 	and.w	r3, r3, #31
   82716:	2b01      	cmp	r3, #1
   82718:	d106      	bne.n	82728 <udc_process_setup+0x7c>
		if (udc_req_iface()) {
   8271a:	4b0f      	ldr	r3, [pc, #60]	; (82758 <udc_process_setup+0xac>)
   8271c:	4798      	blx	r3
   8271e:	4603      	mov	r3, r0
   82720:	2b00      	cmp	r3, #0
   82722:	d001      	beq.n	82728 <udc_process_setup+0x7c>
			return true;
   82724:	2301      	movs	r3, #1
   82726:	e00d      	b.n	82744 <udc_process_setup+0x98>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   82728:	4b07      	ldr	r3, [pc, #28]	; (82748 <udc_process_setup+0x9c>)
   8272a:	781b      	ldrb	r3, [r3, #0]
   8272c:	f003 031f 	and.w	r3, r3, #31
   82730:	2b02      	cmp	r3, #2
   82732:	d106      	bne.n	82742 <udc_process_setup+0x96>
		if (udc_req_ep()) {
   82734:	4b09      	ldr	r3, [pc, #36]	; (8275c <udc_process_setup+0xb0>)
   82736:	4798      	blx	r3
   82738:	4603      	mov	r3, r0
   8273a:	2b00      	cmp	r3, #0
   8273c:	d001      	beq.n	82742 <udc_process_setup+0x96>
			return true;
   8273e:	2301      	movs	r3, #1
   82740:	e000      	b.n	82744 <udc_process_setup+0x98>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   82742:	2300      	movs	r3, #0
#endif
}
   82744:	4618      	mov	r0, r3
   82746:	bd80      	pop	{r7, pc}
   82748:	20001468 	.word	0x20001468
   8274c:	20000294 	.word	0x20000294
   82750:	00084851 	.word	0x00084851
   82754:	000823f5 	.word	0x000823f5
   82758:	00082585 	.word	0x00082585
   8275c:	0008261d 	.word	0x0008261d

00082760 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   82760:	b480      	push	{r7}
   82762:	b083      	sub	sp, #12
   82764:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82766:	f3ef 8310 	mrs	r3, PRIMASK
   8276a:	603b      	str	r3, [r7, #0]
  return(result);
   8276c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8276e:	2b00      	cmp	r3, #0
   82770:	bf0c      	ite	eq
   82772:	2301      	moveq	r3, #1
   82774:	2300      	movne	r3, #0
   82776:	b2db      	uxtb	r3, r3
   82778:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   8277a:	b672      	cpsid	i
}
   8277c:	bf00      	nop
  __ASM volatile ("dmb");
   8277e:	f3bf 8f5f 	dmb	sy
}
   82782:	bf00      	nop
	cpu_irq_disable();
   82784:	4b04      	ldr	r3, [pc, #16]	; (82798 <cpu_irq_save+0x38>)
   82786:	2200      	movs	r2, #0
   82788:	701a      	strb	r2, [r3, #0]
	return flags;
   8278a:	687b      	ldr	r3, [r7, #4]
}
   8278c:	4618      	mov	r0, r3
   8278e:	370c      	adds	r7, #12
   82790:	46bd      	mov	sp, r7
   82792:	bc80      	pop	{r7}
   82794:	4770      	bx	lr
   82796:	bf00      	nop
   82798:	200003ca 	.word	0x200003ca

0008279c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   8279c:	b480      	push	{r7}
   8279e:	b083      	sub	sp, #12
   827a0:	af00      	add	r7, sp, #0
   827a2:	6078      	str	r0, [r7, #4]
	return (flags);
   827a4:	687b      	ldr	r3, [r7, #4]
   827a6:	2b00      	cmp	r3, #0
   827a8:	bf14      	ite	ne
   827aa:	2301      	movne	r3, #1
   827ac:	2300      	moveq	r3, #0
   827ae:	b2db      	uxtb	r3, r3
}
   827b0:	4618      	mov	r0, r3
   827b2:	370c      	adds	r7, #12
   827b4:	46bd      	mov	sp, r7
   827b6:	bc80      	pop	{r7}
   827b8:	4770      	bx	lr
   827ba:	0000      	movs	r0, r0

000827bc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   827bc:	b580      	push	{r7, lr}
   827be:	b082      	sub	sp, #8
   827c0:	af00      	add	r7, sp, #0
   827c2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   827c4:	6878      	ldr	r0, [r7, #4]
   827c6:	4b08      	ldr	r3, [pc, #32]	; (827e8 <cpu_irq_restore+0x2c>)
   827c8:	4798      	blx	r3
   827ca:	4603      	mov	r3, r0
   827cc:	2b00      	cmp	r3, #0
   827ce:	d007      	beq.n	827e0 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   827d0:	4b06      	ldr	r3, [pc, #24]	; (827ec <cpu_irq_restore+0x30>)
   827d2:	2201      	movs	r2, #1
   827d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   827d6:	f3bf 8f5f 	dmb	sy
}
   827da:	bf00      	nop
  __ASM volatile ("cpsie i");
   827dc:	b662      	cpsie	i
}
   827de:	bf00      	nop
}
   827e0:	bf00      	nop
   827e2:	3708      	adds	r7, #8
   827e4:	46bd      	mov	sp, r7
   827e6:	bd80      	pop	{r7, pc}
   827e8:	0008279d 	.word	0x0008279d
   827ec:	200003ca 	.word	0x200003ca

000827f0 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   827f0:	b580      	push	{r7, lr}
   827f2:	b086      	sub	sp, #24
   827f4:	af00      	add	r7, sp, #0
   827f6:	60f8      	str	r0, [r7, #12]
   827f8:	60b9      	str	r1, [r7, #8]
   827fa:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   827fc:	68bb      	ldr	r3, [r7, #8]
   827fe:	2b0e      	cmp	r3, #14
   82800:	d002      	beq.n	82808 <efc_perform_command+0x18>
   82802:	68bb      	ldr	r3, [r7, #8]
   82804:	2b0f      	cmp	r3, #15
   82806:	d102      	bne.n	8280e <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   82808:	f04f 33ff 	mov.w	r3, #4294967295
   8280c:	e016      	b.n	8283c <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   8280e:	4b0d      	ldr	r3, [pc, #52]	; (82844 <efc_perform_command+0x54>)
   82810:	4798      	blx	r3
   82812:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82814:	687b      	ldr	r3, [r7, #4]
   82816:	021b      	lsls	r3, r3, #8
   82818:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   8281c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   82820:	68ba      	ldr	r2, [r7, #8]
   82822:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82824:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   82826:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   8282a:	4619      	mov	r1, r3
   8282c:	68f8      	ldr	r0, [r7, #12]
   8282e:	4b06      	ldr	r3, [pc, #24]	; (82848 <efc_perform_command+0x58>)
   82830:	4798      	blx	r3
   82832:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   82834:	6978      	ldr	r0, [r7, #20]
   82836:	4b05      	ldr	r3, [pc, #20]	; (8284c <efc_perform_command+0x5c>)
   82838:	4798      	blx	r3
	return result;
   8283a:	693b      	ldr	r3, [r7, #16]
}
   8283c:	4618      	mov	r0, r3
   8283e:	3718      	adds	r7, #24
   82840:	46bd      	mov	sp, r7
   82842:	bd80      	pop	{r7, pc}
   82844:	00082761 	.word	0x00082761
   82848:	200000bd 	.word	0x200000bd
   8284c:	000827bd 	.word	0x000827bd

00082850 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82850:	b480      	push	{r7}
   82852:	af00      	add	r7, sp, #0
	while (1) {
   82854:	e7fe      	b.n	82854 <Dummy_Handler+0x4>
   82856:	0000      	movs	r0, r0

00082858 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82858:	b590      	push	{r4, r7, lr}
   8285a:	b08b      	sub	sp, #44	; 0x2c
   8285c:	af02      	add	r7, sp, #8
   8285e:	6078      	str	r0, [r7, #4]
   82860:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82862:	f107 030c 	add.w	r3, r7, #12
   82866:	2204      	movs	r2, #4
   82868:	9200      	str	r2, [sp, #0]
   8286a:	220f      	movs	r2, #15
   8286c:	210e      	movs	r1, #14
   8286e:	4814      	ldr	r0, [pc, #80]	; (828c0 <flash_read_unique_id+0x68>)
   82870:	4c14      	ldr	r4, [pc, #80]	; (828c4 <flash_read_unique_id+0x6c>)
   82872:	47a0      	blx	r4
   82874:	4603      	mov	r3, r0
   82876:	2b00      	cmp	r3, #0
   82878:	d001      	beq.n	8287e <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   8287a:	2310      	movs	r3, #16
   8287c:	e01b      	b.n	828b6 <flash_read_unique_id+0x5e>
	}

	if (ul_size > 4) {
   8287e:	683b      	ldr	r3, [r7, #0]
   82880:	2b04      	cmp	r3, #4
   82882:	d901      	bls.n	82888 <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   82884:	2304      	movs	r3, #4
   82886:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82888:	2300      	movs	r3, #0
   8288a:	61fb      	str	r3, [r7, #28]
   8288c:	e00e      	b.n	828ac <flash_read_unique_id+0x54>
		pul_data[ul_idx] = uid_buf[ul_idx];
   8288e:	69fb      	ldr	r3, [r7, #28]
   82890:	009b      	lsls	r3, r3, #2
   82892:	687a      	ldr	r2, [r7, #4]
   82894:	441a      	add	r2, r3
   82896:	69fb      	ldr	r3, [r7, #28]
   82898:	009b      	lsls	r3, r3, #2
   8289a:	f107 0120 	add.w	r1, r7, #32
   8289e:	440b      	add	r3, r1
   828a0:	f853 3c14 	ldr.w	r3, [r3, #-20]
   828a4:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   828a6:	69fb      	ldr	r3, [r7, #28]
   828a8:	3301      	adds	r3, #1
   828aa:	61fb      	str	r3, [r7, #28]
   828ac:	69fa      	ldr	r2, [r7, #28]
   828ae:	683b      	ldr	r3, [r7, #0]
   828b0:	429a      	cmp	r2, r3
   828b2:	d3ec      	bcc.n	8288e <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   828b4:	2300      	movs	r3, #0
}
   828b6:	4618      	mov	r0, r3
   828b8:	3724      	adds	r7, #36	; 0x24
   828ba:	46bd      	mov	sp, r7
   828bc:	bd90      	pop	{r4, r7, pc}
   828be:	bf00      	nop
   828c0:	400e0800 	.word	0x400e0800
   828c4:	20000001 	.word	0x20000001

000828c8 <sysclk_enable_peripheral_clock>:
{
   828c8:	b580      	push	{r7, lr}
   828ca:	b082      	sub	sp, #8
   828cc:	af00      	add	r7, sp, #0
   828ce:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   828d0:	6878      	ldr	r0, [r7, #4]
   828d2:	4b03      	ldr	r3, [pc, #12]	; (828e0 <sysclk_enable_peripheral_clock+0x18>)
   828d4:	4798      	blx	r3
}
   828d6:	bf00      	nop
   828d8:	3708      	adds	r7, #8
   828da:	46bd      	mov	sp, r7
   828dc:	bd80      	pop	{r7, pc}
   828de:	bf00      	nop
   828e0:	000833c9 	.word	0x000833c9

000828e4 <ioport_init>:
{
   828e4:	b580      	push	{r7, lr}
   828e6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   828e8:	200a      	movs	r0, #10
   828ea:	4b04      	ldr	r3, [pc, #16]	; (828fc <ioport_init+0x18>)
   828ec:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   828ee:	200b      	movs	r0, #11
   828f0:	4b02      	ldr	r3, [pc, #8]	; (828fc <ioport_init+0x18>)
   828f2:	4798      	blx	r3
}
   828f4:	bf00      	nop
}
   828f6:	bf00      	nop
   828f8:	bd80      	pop	{r7, pc}
   828fa:	bf00      	nop
   828fc:	000828c9 	.word	0x000828c9

00082900 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   82900:	b580      	push	{r7, lr}
   82902:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82904:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82908:	201d      	movs	r0, #29
   8290a:	4b0d      	ldr	r3, [pc, #52]	; (82940 <iopins_normal+0x40>)
   8290c:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8290e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82912:	201f      	movs	r0, #31
   82914:	4b0a      	ldr	r3, [pc, #40]	; (82940 <iopins_normal+0x40>)
   82916:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   82918:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8291c:	2018      	movs	r0, #24
   8291e:	4b08      	ldr	r3, [pc, #32]	; (82940 <iopins_normal+0x40>)
   82920:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82926:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8292a:	4806      	ldr	r0, [pc, #24]	; (82944 <iopins_normal+0x44>)
   8292c:	4b06      	ldr	r3, [pc, #24]	; (82948 <iopins_normal+0x48>)
   8292e:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   82930:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82934:	2038      	movs	r0, #56	; 0x38
   82936:	4b02      	ldr	r3, [pc, #8]	; (82940 <iopins_normal+0x40>)
   82938:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   8293a:	bf00      	nop
   8293c:	bd80      	pop	{r7, pc}
   8293e:	bf00      	nop
   82940:	00082d65 	.word	0x00082d65
   82944:	400e0c00 	.word	0x400e0c00
   82948:	00082e95 	.word	0x00082e95

0008294c <board_init>:

void board_init(void)
{
   8294c:	b580      	push	{r7, lr}
   8294e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82950:	4b04      	ldr	r3, [pc, #16]	; (82964 <board_init+0x18>)
   82952:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82956:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   82958:	4b03      	ldr	r3, [pc, #12]	; (82968 <board_init+0x1c>)
   8295a:	4798      	blx	r3

	iopins_normal();
   8295c:	4b03      	ldr	r3, [pc, #12]	; (8296c <board_init+0x20>)
   8295e:	4798      	blx	r3

}
   82960:	bf00      	nop
   82962:	bd80      	pop	{r7, pc}
   82964:	400e1250 	.word	0x400e1250
   82968:	000828e5 	.word	0x000828e5
   8296c:	00082901 	.word	0x00082901

00082970 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   82970:	b480      	push	{r7}
   82972:	b083      	sub	sp, #12
   82974:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   82976:	4b11      	ldr	r3, [pc, #68]	; (829bc <cpu_irq_enter_critical+0x4c>)
   82978:	681b      	ldr	r3, [r3, #0]
   8297a:	2b00      	cmp	r3, #0
   8297c:	d114      	bne.n	829a8 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8297e:	f3ef 8310 	mrs	r3, PRIMASK
   82982:	607b      	str	r3, [r7, #4]
  return(result);
   82984:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   82986:	2b00      	cmp	r3, #0
   82988:	d10b      	bne.n	829a2 <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   8298a:	b672      	cpsid	i
}
   8298c:	bf00      	nop
  __ASM volatile ("dmb");
   8298e:	f3bf 8f5f 	dmb	sy
}
   82992:	bf00      	nop
			cpu_irq_disable();
   82994:	4b0a      	ldr	r3, [pc, #40]	; (829c0 <cpu_irq_enter_critical+0x50>)
   82996:	2200      	movs	r2, #0
   82998:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   8299a:	4b0a      	ldr	r3, [pc, #40]	; (829c4 <cpu_irq_enter_critical+0x54>)
   8299c:	2201      	movs	r2, #1
   8299e:	701a      	strb	r2, [r3, #0]
   829a0:	e002      	b.n	829a8 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   829a2:	4b08      	ldr	r3, [pc, #32]	; (829c4 <cpu_irq_enter_critical+0x54>)
   829a4:	2200      	movs	r2, #0
   829a6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   829a8:	4b04      	ldr	r3, [pc, #16]	; (829bc <cpu_irq_enter_critical+0x4c>)
   829aa:	681b      	ldr	r3, [r3, #0]
   829ac:	3301      	adds	r3, #1
   829ae:	4a03      	ldr	r2, [pc, #12]	; (829bc <cpu_irq_enter_critical+0x4c>)
   829b0:	6013      	str	r3, [r2, #0]
}
   829b2:	bf00      	nop
   829b4:	370c      	adds	r7, #12
   829b6:	46bd      	mov	sp, r7
   829b8:	bc80      	pop	{r7}
   829ba:	4770      	bx	lr
   829bc:	20000ee0 	.word	0x20000ee0
   829c0:	200003ca 	.word	0x200003ca
   829c4:	20000ee4 	.word	0x20000ee4

000829c8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   829c8:	b480      	push	{r7}
   829ca:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   829cc:	4b0c      	ldr	r3, [pc, #48]	; (82a00 <cpu_irq_leave_critical+0x38>)
   829ce:	681b      	ldr	r3, [r3, #0]
   829d0:	3b01      	subs	r3, #1
   829d2:	4a0b      	ldr	r2, [pc, #44]	; (82a00 <cpu_irq_leave_critical+0x38>)
   829d4:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   829d6:	4b0a      	ldr	r3, [pc, #40]	; (82a00 <cpu_irq_leave_critical+0x38>)
   829d8:	681b      	ldr	r3, [r3, #0]
   829da:	2b00      	cmp	r3, #0
   829dc:	d10c      	bne.n	829f8 <cpu_irq_leave_critical+0x30>
   829de:	4b09      	ldr	r3, [pc, #36]	; (82a04 <cpu_irq_leave_critical+0x3c>)
   829e0:	781b      	ldrb	r3, [r3, #0]
   829e2:	b2db      	uxtb	r3, r3
   829e4:	2b00      	cmp	r3, #0
   829e6:	d007      	beq.n	829f8 <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   829e8:	4b07      	ldr	r3, [pc, #28]	; (82a08 <cpu_irq_leave_critical+0x40>)
   829ea:	2201      	movs	r2, #1
   829ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   829ee:	f3bf 8f5f 	dmb	sy
}
   829f2:	bf00      	nop
  __ASM volatile ("cpsie i");
   829f4:	b662      	cpsie	i
}
   829f6:	bf00      	nop
	}
}
   829f8:	bf00      	nop
   829fa:	46bd      	mov	sp, r7
   829fc:	bc80      	pop	{r7}
   829fe:	4770      	bx	lr
   82a00:	20000ee0 	.word	0x20000ee0
   82a04:	20000ee4 	.word	0x20000ee4
   82a08:	200003ca 	.word	0x200003ca

00082a0c <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   82a0c:	b580      	push	{r7, lr}
   82a0e:	b084      	sub	sp, #16
   82a10:	af00      	add	r7, sp, #0
   82a12:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82a14:	2300      	movs	r3, #0
   82a16:	60fb      	str	r3, [r7, #12]
   82a18:	e017      	b.n	82a4a <LED_Off+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82a1a:	4a10      	ldr	r2, [pc, #64]	; (82a5c <LED_Off+0x50>)
   82a1c:	68fb      	ldr	r3, [r7, #12]
   82a1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   82a22:	687a      	ldr	r2, [r7, #4]
   82a24:	429a      	cmp	r2, r3
   82a26:	d10d      	bne.n	82a44 <LED_Off+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   82a28:	4a0c      	ldr	r2, [pc, #48]	; (82a5c <LED_Off+0x50>)
   82a2a:	68fb      	ldr	r3, [r7, #12]
   82a2c:	00db      	lsls	r3, r3, #3
   82a2e:	4413      	add	r3, r2
   82a30:	685b      	ldr	r3, [r3, #4]
   82a32:	2b01      	cmp	r3, #1
   82a34:	d103      	bne.n	82a3e <LED_Off+0x32>
				gpio_set_pin_low(led_gpio);
   82a36:	6878      	ldr	r0, [r7, #4]
   82a38:	4b09      	ldr	r3, [pc, #36]	; (82a60 <LED_Off+0x54>)
   82a3a:	4798      	blx	r3
   82a3c:	e002      	b.n	82a44 <LED_Off+0x38>
			} else {
				gpio_set_pin_high(led_gpio);
   82a3e:	6878      	ldr	r0, [r7, #4]
   82a40:	4b08      	ldr	r3, [pc, #32]	; (82a64 <LED_Off+0x58>)
   82a42:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82a44:	68fb      	ldr	r3, [r7, #12]
   82a46:	3301      	adds	r3, #1
   82a48:	60fb      	str	r3, [r7, #12]
   82a4a:	68fb      	ldr	r3, [r7, #12]
   82a4c:	2b01      	cmp	r3, #1
   82a4e:	d9e4      	bls.n	82a1a <LED_Off+0xe>
			}
		}
	}
}
   82a50:	bf00      	nop
   82a52:	bf00      	nop
   82a54:	3710      	adds	r7, #16
   82a56:	46bd      	mov	sp, r7
   82a58:	bd80      	pop	{r7, pc}
   82a5a:	bf00      	nop
   82a5c:	0008cf5c 	.word	0x0008cf5c
   82a60:	00082d35 	.word	0x00082d35
   82a64:	00082d05 	.word	0x00082d05

00082a68 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   82a68:	b580      	push	{r7, lr}
   82a6a:	b084      	sub	sp, #16
   82a6c:	af00      	add	r7, sp, #0
   82a6e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82a70:	2300      	movs	r3, #0
   82a72:	60fb      	str	r3, [r7, #12]
   82a74:	e017      	b.n	82aa6 <LED_On+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82a76:	4a10      	ldr	r2, [pc, #64]	; (82ab8 <LED_On+0x50>)
   82a78:	68fb      	ldr	r3, [r7, #12]
   82a7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   82a7e:	687a      	ldr	r2, [r7, #4]
   82a80:	429a      	cmp	r2, r3
   82a82:	d10d      	bne.n	82aa0 <LED_On+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   82a84:	4a0c      	ldr	r2, [pc, #48]	; (82ab8 <LED_On+0x50>)
   82a86:	68fb      	ldr	r3, [r7, #12]
   82a88:	00db      	lsls	r3, r3, #3
   82a8a:	4413      	add	r3, r2
   82a8c:	685b      	ldr	r3, [r3, #4]
   82a8e:	2b01      	cmp	r3, #1
   82a90:	d103      	bne.n	82a9a <LED_On+0x32>
				gpio_set_pin_high(led_gpio);
   82a92:	6878      	ldr	r0, [r7, #4]
   82a94:	4b09      	ldr	r3, [pc, #36]	; (82abc <LED_On+0x54>)
   82a96:	4798      	blx	r3
   82a98:	e002      	b.n	82aa0 <LED_On+0x38>
			} else {
				gpio_set_pin_low(led_gpio);
   82a9a:	6878      	ldr	r0, [r7, #4]
   82a9c:	4b08      	ldr	r3, [pc, #32]	; (82ac0 <LED_On+0x58>)
   82a9e:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82aa0:	68fb      	ldr	r3, [r7, #12]
   82aa2:	3301      	adds	r3, #1
   82aa4:	60fb      	str	r3, [r7, #12]
   82aa6:	68fb      	ldr	r3, [r7, #12]
   82aa8:	2b01      	cmp	r3, #1
   82aaa:	d9e4      	bls.n	82a76 <LED_On+0xe>
			}
		}
	}
}
   82aac:	bf00      	nop
   82aae:	bf00      	nop
   82ab0:	3710      	adds	r7, #16
   82ab2:	46bd      	mov	sp, r7
   82ab4:	bd80      	pop	{r7, pc}
   82ab6:	bf00      	nop
   82ab8:	0008cf5c 	.word	0x0008cf5c
   82abc:	00082d05 	.word	0x00082d05
   82ac0:	00082d35 	.word	0x00082d35

00082ac4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82ac4:	b480      	push	{r7}
   82ac6:	b085      	sub	sp, #20
   82ac8:	af00      	add	r7, sp, #0
   82aca:	60f8      	str	r0, [r7, #12]
   82acc:	60b9      	str	r1, [r7, #8]
   82ace:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82ad0:	687b      	ldr	r3, [r7, #4]
   82ad2:	2b00      	cmp	r3, #0
   82ad4:	d003      	beq.n	82ade <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82ad6:	68fb      	ldr	r3, [r7, #12]
   82ad8:	68ba      	ldr	r2, [r7, #8]
   82ada:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   82adc:	e002      	b.n	82ae4 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   82ade:	68fb      	ldr	r3, [r7, #12]
   82ae0:	68ba      	ldr	r2, [r7, #8]
   82ae2:	661a      	str	r2, [r3, #96]	; 0x60
}
   82ae4:	bf00      	nop
   82ae6:	3714      	adds	r7, #20
   82ae8:	46bd      	mov	sp, r7
   82aea:	bc80      	pop	{r7}
   82aec:	4770      	bx	lr

00082aee <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82aee:	b480      	push	{r7}
   82af0:	b087      	sub	sp, #28
   82af2:	af00      	add	r7, sp, #0
   82af4:	60f8      	str	r0, [r7, #12]
   82af6:	60b9      	str	r1, [r7, #8]
   82af8:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82afa:	68fb      	ldr	r3, [r7, #12]
   82afc:	687a      	ldr	r2, [r7, #4]
   82afe:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82b00:	68bb      	ldr	r3, [r7, #8]
   82b02:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82b06:	d03c      	beq.n	82b82 <pio_set_peripheral+0x94>
   82b08:	68bb      	ldr	r3, [r7, #8]
   82b0a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82b0e:	d834      	bhi.n	82b7a <pio_set_peripheral+0x8c>
   82b10:	68bb      	ldr	r3, [r7, #8]
   82b12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82b16:	d034      	beq.n	82b82 <pio_set_peripheral+0x94>
   82b18:	68bb      	ldr	r3, [r7, #8]
   82b1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82b1e:	d82c      	bhi.n	82b7a <pio_set_peripheral+0x8c>
   82b20:	68bb      	ldr	r3, [r7, #8]
   82b22:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82b26:	d02c      	beq.n	82b82 <pio_set_peripheral+0x94>
   82b28:	68bb      	ldr	r3, [r7, #8]
   82b2a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82b2e:	d824      	bhi.n	82b7a <pio_set_peripheral+0x8c>
   82b30:	68bb      	ldr	r3, [r7, #8]
   82b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82b36:	d017      	beq.n	82b68 <pio_set_peripheral+0x7a>
   82b38:	68bb      	ldr	r3, [r7, #8]
   82b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82b3e:	d81c      	bhi.n	82b7a <pio_set_peripheral+0x8c>
   82b40:	68bb      	ldr	r3, [r7, #8]
   82b42:	2b00      	cmp	r3, #0
   82b44:	d01d      	beq.n	82b82 <pio_set_peripheral+0x94>
   82b46:	68bb      	ldr	r3, [r7, #8]
   82b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82b4c:	d115      	bne.n	82b7a <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82b4e:	68fb      	ldr	r3, [r7, #12]
   82b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82b52:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82b54:	68fb      	ldr	r3, [r7, #12]
   82b56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82b58:	687b      	ldr	r3, [r7, #4]
   82b5a:	43d9      	mvns	r1, r3
   82b5c:	697b      	ldr	r3, [r7, #20]
   82b5e:	400b      	ands	r3, r1
   82b60:	401a      	ands	r2, r3
   82b62:	68fb      	ldr	r3, [r7, #12]
   82b64:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82b66:	e008      	b.n	82b7a <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82b68:	68fb      	ldr	r3, [r7, #12]
   82b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82b6c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82b6e:	687a      	ldr	r2, [r7, #4]
   82b70:	697b      	ldr	r3, [r7, #20]
   82b72:	431a      	orrs	r2, r3
   82b74:	68fb      	ldr	r3, [r7, #12]
   82b76:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82b78:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82b7a:	68fb      	ldr	r3, [r7, #12]
   82b7c:	687a      	ldr	r2, [r7, #4]
   82b7e:	605a      	str	r2, [r3, #4]
   82b80:	e000      	b.n	82b84 <pio_set_peripheral+0x96>
		return;
   82b82:	bf00      	nop
}
   82b84:	371c      	adds	r7, #28
   82b86:	46bd      	mov	sp, r7
   82b88:	bc80      	pop	{r7}
   82b8a:	4770      	bx	lr

00082b8c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   82b8c:	b580      	push	{r7, lr}
   82b8e:	b084      	sub	sp, #16
   82b90:	af00      	add	r7, sp, #0
   82b92:	60f8      	str	r0, [r7, #12]
   82b94:	60b9      	str	r1, [r7, #8]
   82b96:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82b98:	68b9      	ldr	r1, [r7, #8]
   82b9a:	68f8      	ldr	r0, [r7, #12]
   82b9c:	4b19      	ldr	r3, [pc, #100]	; (82c04 <pio_set_input+0x78>)
   82b9e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82ba0:	687b      	ldr	r3, [r7, #4]
   82ba2:	f003 0301 	and.w	r3, r3, #1
   82ba6:	461a      	mov	r2, r3
   82ba8:	68b9      	ldr	r1, [r7, #8]
   82baa:	68f8      	ldr	r0, [r7, #12]
   82bac:	4b16      	ldr	r3, [pc, #88]	; (82c08 <pio_set_input+0x7c>)
   82bae:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82bb0:	687b      	ldr	r3, [r7, #4]
   82bb2:	f003 030a 	and.w	r3, r3, #10
   82bb6:	2b00      	cmp	r3, #0
   82bb8:	d003      	beq.n	82bc2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82bba:	68fb      	ldr	r3, [r7, #12]
   82bbc:	68ba      	ldr	r2, [r7, #8]
   82bbe:	621a      	str	r2, [r3, #32]
   82bc0:	e002      	b.n	82bc8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82bc2:	68fb      	ldr	r3, [r7, #12]
   82bc4:	68ba      	ldr	r2, [r7, #8]
   82bc6:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82bc8:	687b      	ldr	r3, [r7, #4]
   82bca:	f003 0302 	and.w	r3, r3, #2
   82bce:	2b00      	cmp	r3, #0
   82bd0:	d004      	beq.n	82bdc <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82bd2:	68fb      	ldr	r3, [r7, #12]
   82bd4:	68ba      	ldr	r2, [r7, #8]
   82bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82bda:	e008      	b.n	82bee <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82bdc:	687b      	ldr	r3, [r7, #4]
   82bde:	f003 0308 	and.w	r3, r3, #8
   82be2:	2b00      	cmp	r3, #0
   82be4:	d003      	beq.n	82bee <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   82be6:	68fb      	ldr	r3, [r7, #12]
   82be8:	68ba      	ldr	r2, [r7, #8]
   82bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82bee:	68fb      	ldr	r3, [r7, #12]
   82bf0:	68ba      	ldr	r2, [r7, #8]
   82bf2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82bf4:	68fb      	ldr	r3, [r7, #12]
   82bf6:	68ba      	ldr	r2, [r7, #8]
   82bf8:	601a      	str	r2, [r3, #0]
}
   82bfa:	bf00      	nop
   82bfc:	3710      	adds	r7, #16
   82bfe:	46bd      	mov	sp, r7
   82c00:	bd80      	pop	{r7, pc}
   82c02:	bf00      	nop
   82c04:	00082c8d 	.word	0x00082c8d
   82c08:	00082ac5 	.word	0x00082ac5

00082c0c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82c0c:	b580      	push	{r7, lr}
   82c0e:	b084      	sub	sp, #16
   82c10:	af00      	add	r7, sp, #0
   82c12:	60f8      	str	r0, [r7, #12]
   82c14:	60b9      	str	r1, [r7, #8]
   82c16:	607a      	str	r2, [r7, #4]
   82c18:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82c1a:	68b9      	ldr	r1, [r7, #8]
   82c1c:	68f8      	ldr	r0, [r7, #12]
   82c1e:	4b12      	ldr	r3, [pc, #72]	; (82c68 <pio_set_output+0x5c>)
   82c20:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82c22:	69ba      	ldr	r2, [r7, #24]
   82c24:	68b9      	ldr	r1, [r7, #8]
   82c26:	68f8      	ldr	r0, [r7, #12]
   82c28:	4b10      	ldr	r3, [pc, #64]	; (82c6c <pio_set_output+0x60>)
   82c2a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82c2c:	683b      	ldr	r3, [r7, #0]
   82c2e:	2b00      	cmp	r3, #0
   82c30:	d003      	beq.n	82c3a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82c32:	68fb      	ldr	r3, [r7, #12]
   82c34:	68ba      	ldr	r2, [r7, #8]
   82c36:	651a      	str	r2, [r3, #80]	; 0x50
   82c38:	e002      	b.n	82c40 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82c3a:	68fb      	ldr	r3, [r7, #12]
   82c3c:	68ba      	ldr	r2, [r7, #8]
   82c3e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82c40:	687b      	ldr	r3, [r7, #4]
   82c42:	2b00      	cmp	r3, #0
   82c44:	d003      	beq.n	82c4e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82c46:	68fb      	ldr	r3, [r7, #12]
   82c48:	68ba      	ldr	r2, [r7, #8]
   82c4a:	631a      	str	r2, [r3, #48]	; 0x30
   82c4c:	e002      	b.n	82c54 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82c4e:	68fb      	ldr	r3, [r7, #12]
   82c50:	68ba      	ldr	r2, [r7, #8]
   82c52:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82c54:	68fb      	ldr	r3, [r7, #12]
   82c56:	68ba      	ldr	r2, [r7, #8]
   82c58:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   82c5a:	68fb      	ldr	r3, [r7, #12]
   82c5c:	68ba      	ldr	r2, [r7, #8]
   82c5e:	601a      	str	r2, [r3, #0]
}
   82c60:	bf00      	nop
   82c62:	3710      	adds	r7, #16
   82c64:	46bd      	mov	sp, r7
   82c66:	bd80      	pop	{r7, pc}
   82c68:	00082c8d 	.word	0x00082c8d
   82c6c:	00082ac5 	.word	0x00082ac5

00082c70 <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   82c70:	b480      	push	{r7}
   82c72:	b083      	sub	sp, #12
   82c74:	af00      	add	r7, sp, #0
   82c76:	6078      	str	r0, [r7, #4]
   82c78:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   82c7a:	687b      	ldr	r3, [r7, #4]
   82c7c:	683a      	ldr	r2, [r7, #0]
   82c7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   82c82:	bf00      	nop
   82c84:	370c      	adds	r7, #12
   82c86:	46bd      	mov	sp, r7
   82c88:	bc80      	pop	{r7}
   82c8a:	4770      	bx	lr

00082c8c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   82c8c:	b480      	push	{r7}
   82c8e:	b083      	sub	sp, #12
   82c90:	af00      	add	r7, sp, #0
   82c92:	6078      	str	r0, [r7, #4]
   82c94:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   82c96:	687b      	ldr	r3, [r7, #4]
   82c98:	683a      	ldr	r2, [r7, #0]
   82c9a:	645a      	str	r2, [r3, #68]	; 0x44
}
   82c9c:	bf00      	nop
   82c9e:	370c      	adds	r7, #12
   82ca0:	46bd      	mov	sp, r7
   82ca2:	bc80      	pop	{r7}
   82ca4:	4770      	bx	lr

00082ca6 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   82ca6:	b480      	push	{r7}
   82ca8:	b083      	sub	sp, #12
   82caa:	af00      	add	r7, sp, #0
   82cac:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   82cae:	687b      	ldr	r3, [r7, #4]
   82cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   82cb2:	4618      	mov	r0, r3
   82cb4:	370c      	adds	r7, #12
   82cb6:	46bd      	mov	sp, r7
   82cb8:	bc80      	pop	{r7}
   82cba:	4770      	bx	lr

00082cbc <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82cbc:	b480      	push	{r7}
   82cbe:	b083      	sub	sp, #12
   82cc0:	af00      	add	r7, sp, #0
   82cc2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   82cc4:	687b      	ldr	r3, [r7, #4]
   82cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82cc8:	4618      	mov	r0, r3
   82cca:	370c      	adds	r7, #12
   82ccc:	46bd      	mov	sp, r7
   82cce:	bc80      	pop	{r7}
   82cd0:	4770      	bx	lr
   82cd2:	0000      	movs	r0, r0

00082cd4 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   82cd4:	b580      	push	{r7, lr}
   82cd6:	b084      	sub	sp, #16
   82cd8:	af00      	add	r7, sp, #0
   82cda:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82cdc:	6878      	ldr	r0, [r7, #4]
   82cde:	4b08      	ldr	r3, [pc, #32]	; (82d00 <pio_get_pin_value+0x2c>)
   82ce0:	4798      	blx	r3
   82ce2:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   82ce4:	68fb      	ldr	r3, [r7, #12]
   82ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82ce8:	687b      	ldr	r3, [r7, #4]
   82cea:	f003 031f 	and.w	r3, r3, #31
   82cee:	fa22 f303 	lsr.w	r3, r2, r3
   82cf2:	f003 0301 	and.w	r3, r3, #1
}
   82cf6:	4618      	mov	r0, r3
   82cf8:	3710      	adds	r7, #16
   82cfa:	46bd      	mov	sp, r7
   82cfc:	bd80      	pop	{r7, pc}
   82cfe:	bf00      	nop
   82d00:	00082f71 	.word	0x00082f71

00082d04 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   82d04:	b580      	push	{r7, lr}
   82d06:	b084      	sub	sp, #16
   82d08:	af00      	add	r7, sp, #0
   82d0a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82d0c:	6878      	ldr	r0, [r7, #4]
   82d0e:	4b08      	ldr	r3, [pc, #32]	; (82d30 <pio_set_pin_high+0x2c>)
   82d10:	4798      	blx	r3
   82d12:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82d14:	687b      	ldr	r3, [r7, #4]
   82d16:	f003 031f 	and.w	r3, r3, #31
   82d1a:	2201      	movs	r2, #1
   82d1c:	fa02 f303 	lsl.w	r3, r2, r3
   82d20:	461a      	mov	r2, r3
   82d22:	68fb      	ldr	r3, [r7, #12]
   82d24:	631a      	str	r2, [r3, #48]	; 0x30
}
   82d26:	bf00      	nop
   82d28:	3710      	adds	r7, #16
   82d2a:	46bd      	mov	sp, r7
   82d2c:	bd80      	pop	{r7, pc}
   82d2e:	bf00      	nop
   82d30:	00082f71 	.word	0x00082f71

00082d34 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   82d34:	b580      	push	{r7, lr}
   82d36:	b084      	sub	sp, #16
   82d38:	af00      	add	r7, sp, #0
   82d3a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82d3c:	6878      	ldr	r0, [r7, #4]
   82d3e:	4b08      	ldr	r3, [pc, #32]	; (82d60 <pio_set_pin_low+0x2c>)
   82d40:	4798      	blx	r3
   82d42:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82d44:	687b      	ldr	r3, [r7, #4]
   82d46:	f003 031f 	and.w	r3, r3, #31
   82d4a:	2201      	movs	r2, #1
   82d4c:	fa02 f303 	lsl.w	r3, r2, r3
   82d50:	461a      	mov	r2, r3
   82d52:	68fb      	ldr	r3, [r7, #12]
   82d54:	635a      	str	r2, [r3, #52]	; 0x34
}
   82d56:	bf00      	nop
   82d58:	3710      	adds	r7, #16
   82d5a:	46bd      	mov	sp, r7
   82d5c:	bd80      	pop	{r7, pc}
   82d5e:	bf00      	nop
   82d60:	00082f71 	.word	0x00082f71

00082d64 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82d64:	b590      	push	{r4, r7, lr}
   82d66:	b087      	sub	sp, #28
   82d68:	af02      	add	r7, sp, #8
   82d6a:	6078      	str	r0, [r7, #4]
   82d6c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82d6e:	6878      	ldr	r0, [r7, #4]
   82d70:	4b43      	ldr	r3, [pc, #268]	; (82e80 <pio_configure_pin+0x11c>)
   82d72:	4798      	blx	r3
   82d74:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82d76:	683b      	ldr	r3, [r7, #0]
   82d78:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82d7c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82d80:	d057      	beq.n	82e32 <pio_configure_pin+0xce>
   82d82:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82d86:	d873      	bhi.n	82e70 <pio_configure_pin+0x10c>
   82d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82d8c:	d051      	beq.n	82e32 <pio_configure_pin+0xce>
   82d8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82d92:	d86d      	bhi.n	82e70 <pio_configure_pin+0x10c>
   82d94:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82d98:	d03f      	beq.n	82e1a <pio_configure_pin+0xb6>
   82d9a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82d9e:	d867      	bhi.n	82e70 <pio_configure_pin+0x10c>
   82da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82da4:	d003      	beq.n	82dae <pio_configure_pin+0x4a>
   82da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82daa:	d01b      	beq.n	82de4 <pio_configure_pin+0x80>
   82dac:	e060      	b.n	82e70 <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82dae:	687b      	ldr	r3, [r7, #4]
   82db0:	f003 031f 	and.w	r3, r3, #31
   82db4:	2201      	movs	r2, #1
   82db6:	fa02 f303 	lsl.w	r3, r2, r3
   82dba:	461a      	mov	r2, r3
   82dbc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82dc0:	68f8      	ldr	r0, [r7, #12]
   82dc2:	4b30      	ldr	r3, [pc, #192]	; (82e84 <pio_configure_pin+0x120>)
   82dc4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82dc6:	687b      	ldr	r3, [r7, #4]
   82dc8:	f003 031f 	and.w	r3, r3, #31
   82dcc:	2201      	movs	r2, #1
   82dce:	fa02 f303 	lsl.w	r3, r2, r3
   82dd2:	4619      	mov	r1, r3
   82dd4:	683b      	ldr	r3, [r7, #0]
   82dd6:	f003 0301 	and.w	r3, r3, #1
   82dda:	461a      	mov	r2, r3
   82ddc:	68f8      	ldr	r0, [r7, #12]
   82dde:	4b2a      	ldr	r3, [pc, #168]	; (82e88 <pio_configure_pin+0x124>)
   82de0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82de2:	e047      	b.n	82e74 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82de4:	687b      	ldr	r3, [r7, #4]
   82de6:	f003 031f 	and.w	r3, r3, #31
   82dea:	2201      	movs	r2, #1
   82dec:	fa02 f303 	lsl.w	r3, r2, r3
   82df0:	461a      	mov	r2, r3
   82df2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82df6:	68f8      	ldr	r0, [r7, #12]
   82df8:	4b22      	ldr	r3, [pc, #136]	; (82e84 <pio_configure_pin+0x120>)
   82dfa:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82dfc:	687b      	ldr	r3, [r7, #4]
   82dfe:	f003 031f 	and.w	r3, r3, #31
   82e02:	2201      	movs	r2, #1
   82e04:	fa02 f303 	lsl.w	r3, r2, r3
   82e08:	4619      	mov	r1, r3
   82e0a:	683b      	ldr	r3, [r7, #0]
   82e0c:	f003 0301 	and.w	r3, r3, #1
   82e10:	461a      	mov	r2, r3
   82e12:	68f8      	ldr	r0, [r7, #12]
   82e14:	4b1c      	ldr	r3, [pc, #112]	; (82e88 <pio_configure_pin+0x124>)
   82e16:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82e18:	e02c      	b.n	82e74 <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82e1a:	687b      	ldr	r3, [r7, #4]
   82e1c:	f003 031f 	and.w	r3, r3, #31
   82e20:	2201      	movs	r2, #1
   82e22:	fa02 f303 	lsl.w	r3, r2, r3
   82e26:	683a      	ldr	r2, [r7, #0]
   82e28:	4619      	mov	r1, r3
   82e2a:	68f8      	ldr	r0, [r7, #12]
   82e2c:	4b17      	ldr	r3, [pc, #92]	; (82e8c <pio_configure_pin+0x128>)
   82e2e:	4798      	blx	r3
		break;
   82e30:	e020      	b.n	82e74 <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82e32:	687b      	ldr	r3, [r7, #4]
   82e34:	f003 031f 	and.w	r3, r3, #31
   82e38:	2201      	movs	r2, #1
   82e3a:	fa02 f303 	lsl.w	r3, r2, r3
   82e3e:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82e40:	683b      	ldr	r3, [r7, #0]
   82e42:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82e46:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82e4a:	bf0c      	ite	eq
   82e4c:	2301      	moveq	r3, #1
   82e4e:	2300      	movne	r3, #0
   82e50:	b2db      	uxtb	r3, r3
   82e52:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82e54:	683b      	ldr	r3, [r7, #0]
   82e56:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82e58:	f003 0201 	and.w	r2, r3, #1
   82e5c:	683b      	ldr	r3, [r7, #0]
   82e5e:	f003 0301 	and.w	r3, r3, #1
   82e62:	9300      	str	r3, [sp, #0]
   82e64:	4613      	mov	r3, r2
   82e66:	4602      	mov	r2, r0
   82e68:	68f8      	ldr	r0, [r7, #12]
   82e6a:	4c09      	ldr	r4, [pc, #36]	; (82e90 <pio_configure_pin+0x12c>)
   82e6c:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82e6e:	e001      	b.n	82e74 <pio_configure_pin+0x110>

	default:
		return 0;
   82e70:	2300      	movs	r3, #0
   82e72:	e000      	b.n	82e76 <pio_configure_pin+0x112>
	}

	return 1;
   82e74:	2301      	movs	r3, #1
}
   82e76:	4618      	mov	r0, r3
   82e78:	3714      	adds	r7, #20
   82e7a:	46bd      	mov	sp, r7
   82e7c:	bd90      	pop	{r4, r7, pc}
   82e7e:	bf00      	nop
   82e80:	00082f71 	.word	0x00082f71
   82e84:	00082aef 	.word	0x00082aef
   82e88:	00082ac5 	.word	0x00082ac5
   82e8c:	00082b8d 	.word	0x00082b8d
   82e90:	00082c0d 	.word	0x00082c0d

00082e94 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82e94:	b590      	push	{r4, r7, lr}
   82e96:	b087      	sub	sp, #28
   82e98:	af02      	add	r7, sp, #8
   82e9a:	60f8      	str	r0, [r7, #12]
   82e9c:	60b9      	str	r1, [r7, #8]
   82e9e:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82ea0:	687b      	ldr	r3, [r7, #4]
   82ea2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82ea6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82eaa:	d039      	beq.n	82f20 <pio_configure_pin_group+0x8c>
   82eac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82eb0:	d84f      	bhi.n	82f52 <pio_configure_pin_group+0xbe>
   82eb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82eb6:	d033      	beq.n	82f20 <pio_configure_pin_group+0x8c>
   82eb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82ebc:	d849      	bhi.n	82f52 <pio_configure_pin_group+0xbe>
   82ebe:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82ec2:	d027      	beq.n	82f14 <pio_configure_pin_group+0x80>
   82ec4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82ec8:	d843      	bhi.n	82f52 <pio_configure_pin_group+0xbe>
   82eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82ece:	d003      	beq.n	82ed8 <pio_configure_pin_group+0x44>
   82ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82ed4:	d00f      	beq.n	82ef6 <pio_configure_pin_group+0x62>
   82ed6:	e03c      	b.n	82f52 <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82ed8:	68ba      	ldr	r2, [r7, #8]
   82eda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ede:	68f8      	ldr	r0, [r7, #12]
   82ee0:	4b1f      	ldr	r3, [pc, #124]	; (82f60 <pio_configure_pin_group+0xcc>)
   82ee2:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82ee4:	687b      	ldr	r3, [r7, #4]
   82ee6:	f003 0301 	and.w	r3, r3, #1
   82eea:	461a      	mov	r2, r3
   82eec:	68b9      	ldr	r1, [r7, #8]
   82eee:	68f8      	ldr	r0, [r7, #12]
   82ef0:	4b1c      	ldr	r3, [pc, #112]	; (82f64 <pio_configure_pin_group+0xd0>)
   82ef2:	4798      	blx	r3
		break;
   82ef4:	e02f      	b.n	82f56 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82ef6:	68ba      	ldr	r2, [r7, #8]
   82ef8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82efc:	68f8      	ldr	r0, [r7, #12]
   82efe:	4b18      	ldr	r3, [pc, #96]	; (82f60 <pio_configure_pin_group+0xcc>)
   82f00:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82f02:	687b      	ldr	r3, [r7, #4]
   82f04:	f003 0301 	and.w	r3, r3, #1
   82f08:	461a      	mov	r2, r3
   82f0a:	68b9      	ldr	r1, [r7, #8]
   82f0c:	68f8      	ldr	r0, [r7, #12]
   82f0e:	4b15      	ldr	r3, [pc, #84]	; (82f64 <pio_configure_pin_group+0xd0>)
   82f10:	4798      	blx	r3
		break;
   82f12:	e020      	b.n	82f56 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82f14:	687a      	ldr	r2, [r7, #4]
   82f16:	68b9      	ldr	r1, [r7, #8]
   82f18:	68f8      	ldr	r0, [r7, #12]
   82f1a:	4b13      	ldr	r3, [pc, #76]	; (82f68 <pio_configure_pin_group+0xd4>)
   82f1c:	4798      	blx	r3
		break;
   82f1e:	e01a      	b.n	82f56 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82f20:	687b      	ldr	r3, [r7, #4]
   82f22:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82f26:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82f2a:	bf0c      	ite	eq
   82f2c:	2301      	moveq	r3, #1
   82f2e:	2300      	movne	r3, #0
   82f30:	b2db      	uxtb	r3, r3
   82f32:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82f34:	687b      	ldr	r3, [r7, #4]
   82f36:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   82f38:	f003 0201 	and.w	r2, r3, #1
   82f3c:	687b      	ldr	r3, [r7, #4]
   82f3e:	f003 0301 	and.w	r3, r3, #1
   82f42:	9300      	str	r3, [sp, #0]
   82f44:	4613      	mov	r3, r2
   82f46:	460a      	mov	r2, r1
   82f48:	68b9      	ldr	r1, [r7, #8]
   82f4a:	68f8      	ldr	r0, [r7, #12]
   82f4c:	4c07      	ldr	r4, [pc, #28]	; (82f6c <pio_configure_pin_group+0xd8>)
   82f4e:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82f50:	e001      	b.n	82f56 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   82f52:	2300      	movs	r3, #0
   82f54:	e000      	b.n	82f58 <pio_configure_pin_group+0xc4>
	}

	return 1;
   82f56:	2301      	movs	r3, #1
}
   82f58:	4618      	mov	r0, r3
   82f5a:	3714      	adds	r7, #20
   82f5c:	46bd      	mov	sp, r7
   82f5e:	bd90      	pop	{r4, r7, pc}
   82f60:	00082aef 	.word	0x00082aef
   82f64:	00082ac5 	.word	0x00082ac5
   82f68:	00082b8d 	.word	0x00082b8d
   82f6c:	00082c0d 	.word	0x00082c0d

00082f70 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   82f70:	b480      	push	{r7}
   82f72:	b085      	sub	sp, #20
   82f74:	af00      	add	r7, sp, #0
   82f76:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82f78:	687b      	ldr	r3, [r7, #4]
   82f7a:	095b      	lsrs	r3, r3, #5
   82f7c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82f80:	f203 7306 	addw	r3, r3, #1798	; 0x706
   82f84:	025b      	lsls	r3, r3, #9
   82f86:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   82f88:	68fb      	ldr	r3, [r7, #12]
}
   82f8a:	4618      	mov	r0, r3
   82f8c:	3714      	adds	r7, #20
   82f8e:	46bd      	mov	sp, r7
   82f90:	bc80      	pop	{r7}
   82f92:	4770      	bx	lr

00082f94 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82f94:	b580      	push	{r7, lr}
   82f96:	b084      	sub	sp, #16
   82f98:	af00      	add	r7, sp, #0
   82f9a:	6078      	str	r0, [r7, #4]
   82f9c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82f9e:	6878      	ldr	r0, [r7, #4]
   82fa0:	4b26      	ldr	r3, [pc, #152]	; (8303c <pio_handler_process+0xa8>)
   82fa2:	4798      	blx	r3
   82fa4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82fa6:	6878      	ldr	r0, [r7, #4]
   82fa8:	4b25      	ldr	r3, [pc, #148]	; (83040 <pio_handler_process+0xac>)
   82faa:	4798      	blx	r3
   82fac:	4602      	mov	r2, r0
   82fae:	68fb      	ldr	r3, [r7, #12]
   82fb0:	4013      	ands	r3, r2
   82fb2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82fb4:	68fb      	ldr	r3, [r7, #12]
   82fb6:	2b00      	cmp	r3, #0
   82fb8:	d03c      	beq.n	83034 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   82fba:	2300      	movs	r3, #0
   82fbc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82fbe:	e034      	b.n	8302a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82fc0:	4a20      	ldr	r2, [pc, #128]	; (83044 <pio_handler_process+0xb0>)
   82fc2:	68bb      	ldr	r3, [r7, #8]
   82fc4:	011b      	lsls	r3, r3, #4
   82fc6:	4413      	add	r3, r2
   82fc8:	681b      	ldr	r3, [r3, #0]
   82fca:	683a      	ldr	r2, [r7, #0]
   82fcc:	429a      	cmp	r2, r3
   82fce:	d126      	bne.n	8301e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82fd0:	4a1c      	ldr	r2, [pc, #112]	; (83044 <pio_handler_process+0xb0>)
   82fd2:	68bb      	ldr	r3, [r7, #8]
   82fd4:	011b      	lsls	r3, r3, #4
   82fd6:	4413      	add	r3, r2
   82fd8:	3304      	adds	r3, #4
   82fda:	681a      	ldr	r2, [r3, #0]
   82fdc:	68fb      	ldr	r3, [r7, #12]
   82fde:	4013      	ands	r3, r2
   82fe0:	2b00      	cmp	r3, #0
   82fe2:	d01c      	beq.n	8301e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82fe4:	4a17      	ldr	r2, [pc, #92]	; (83044 <pio_handler_process+0xb0>)
   82fe6:	68bb      	ldr	r3, [r7, #8]
   82fe8:	011b      	lsls	r3, r3, #4
   82fea:	4413      	add	r3, r2
   82fec:	330c      	adds	r3, #12
   82fee:	681b      	ldr	r3, [r3, #0]
   82ff0:	4914      	ldr	r1, [pc, #80]	; (83044 <pio_handler_process+0xb0>)
   82ff2:	68ba      	ldr	r2, [r7, #8]
   82ff4:	0112      	lsls	r2, r2, #4
   82ff6:	440a      	add	r2, r1
   82ff8:	6810      	ldr	r0, [r2, #0]
   82ffa:	4912      	ldr	r1, [pc, #72]	; (83044 <pio_handler_process+0xb0>)
   82ffc:	68ba      	ldr	r2, [r7, #8]
   82ffe:	0112      	lsls	r2, r2, #4
   83000:	440a      	add	r2, r1
   83002:	3204      	adds	r2, #4
   83004:	6812      	ldr	r2, [r2, #0]
   83006:	4611      	mov	r1, r2
   83008:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8300a:	4a0e      	ldr	r2, [pc, #56]	; (83044 <pio_handler_process+0xb0>)
   8300c:	68bb      	ldr	r3, [r7, #8]
   8300e:	011b      	lsls	r3, r3, #4
   83010:	4413      	add	r3, r2
   83012:	3304      	adds	r3, #4
   83014:	681b      	ldr	r3, [r3, #0]
   83016:	43db      	mvns	r3, r3
   83018:	68fa      	ldr	r2, [r7, #12]
   8301a:	4013      	ands	r3, r2
   8301c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   8301e:	68bb      	ldr	r3, [r7, #8]
   83020:	3301      	adds	r3, #1
   83022:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   83024:	68bb      	ldr	r3, [r7, #8]
   83026:	2b06      	cmp	r3, #6
   83028:	d803      	bhi.n	83032 <pio_handler_process+0x9e>
		while (status != 0) {
   8302a:	68fb      	ldr	r3, [r7, #12]
   8302c:	2b00      	cmp	r3, #0
   8302e:	d1c7      	bne.n	82fc0 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83030:	e000      	b.n	83034 <pio_handler_process+0xa0>
				break;
   83032:	bf00      	nop
}
   83034:	bf00      	nop
   83036:	3710      	adds	r7, #16
   83038:	46bd      	mov	sp, r7
   8303a:	bd80      	pop	{r7, pc}
   8303c:	00082ca7 	.word	0x00082ca7
   83040:	00082cbd 	.word	0x00082cbd
   83044:	20000ee8 	.word	0x20000ee8

00083048 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83048:	b580      	push	{r7, lr}
   8304a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   8304c:	210a      	movs	r1, #10
   8304e:	4802      	ldr	r0, [pc, #8]	; (83058 <PIOA_Handler+0x10>)
   83050:	4b02      	ldr	r3, [pc, #8]	; (8305c <PIOA_Handler+0x14>)
   83052:	4798      	blx	r3
}
   83054:	bf00      	nop
   83056:	bd80      	pop	{r7, pc}
   83058:	400e0c00 	.word	0x400e0c00
   8305c:	00082f95 	.word	0x00082f95

00083060 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83060:	b580      	push	{r7, lr}
   83062:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   83064:	210b      	movs	r1, #11
   83066:	4802      	ldr	r0, [pc, #8]	; (83070 <PIOB_Handler+0x10>)
   83068:	4b02      	ldr	r3, [pc, #8]	; (83074 <PIOB_Handler+0x14>)
   8306a:	4798      	blx	r3
}
   8306c:	bf00      	nop
   8306e:	bd80      	pop	{r7, pc}
   83070:	400e0e00 	.word	0x400e0e00
   83074:	00082f95 	.word	0x00082f95

00083078 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   83078:	b480      	push	{r7}
   8307a:	b085      	sub	sp, #20
   8307c:	af00      	add	r7, sp, #0
   8307e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83080:	4b1c      	ldr	r3, [pc, #112]	; (830f4 <pmc_switch_mck_to_mainck+0x7c>)
   83082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83084:	f023 0303 	bic.w	r3, r3, #3
   83088:	4a1a      	ldr	r2, [pc, #104]	; (830f4 <pmc_switch_mck_to_mainck+0x7c>)
   8308a:	f043 0301 	orr.w	r3, r3, #1
   8308e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83090:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83094:	60fb      	str	r3, [r7, #12]
   83096:	e007      	b.n	830a8 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83098:	68fb      	ldr	r3, [r7, #12]
   8309a:	2b00      	cmp	r3, #0
   8309c:	d101      	bne.n	830a2 <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   8309e:	2301      	movs	r3, #1
   830a0:	e023      	b.n	830ea <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   830a2:	68fb      	ldr	r3, [r7, #12]
   830a4:	3b01      	subs	r3, #1
   830a6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   830a8:	4b12      	ldr	r3, [pc, #72]	; (830f4 <pmc_switch_mck_to_mainck+0x7c>)
   830aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   830ac:	f003 0308 	and.w	r3, r3, #8
   830b0:	2b00      	cmp	r3, #0
   830b2:	d0f1      	beq.n	83098 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   830b4:	4b0f      	ldr	r3, [pc, #60]	; (830f4 <pmc_switch_mck_to_mainck+0x7c>)
   830b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   830b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   830bc:	490d      	ldr	r1, [pc, #52]	; (830f4 <pmc_switch_mck_to_mainck+0x7c>)
   830be:	687b      	ldr	r3, [r7, #4]
   830c0:	4313      	orrs	r3, r2
   830c2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   830c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   830c8:	60fb      	str	r3, [r7, #12]
   830ca:	e007      	b.n	830dc <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   830cc:	68fb      	ldr	r3, [r7, #12]
   830ce:	2b00      	cmp	r3, #0
   830d0:	d101      	bne.n	830d6 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   830d2:	2301      	movs	r3, #1
   830d4:	e009      	b.n	830ea <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   830d6:	68fb      	ldr	r3, [r7, #12]
   830d8:	3b01      	subs	r3, #1
   830da:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   830dc:	4b05      	ldr	r3, [pc, #20]	; (830f4 <pmc_switch_mck_to_mainck+0x7c>)
   830de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   830e0:	f003 0308 	and.w	r3, r3, #8
   830e4:	2b00      	cmp	r3, #0
   830e6:	d0f1      	beq.n	830cc <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   830e8:	2300      	movs	r3, #0
}
   830ea:	4618      	mov	r0, r3
   830ec:	3714      	adds	r7, #20
   830ee:	46bd      	mov	sp, r7
   830f0:	bc80      	pop	{r7}
   830f2:	4770      	bx	lr
   830f4:	400e0400 	.word	0x400e0400

000830f8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   830f8:	b480      	push	{r7}
   830fa:	b085      	sub	sp, #20
   830fc:	af00      	add	r7, sp, #0
   830fe:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83100:	4b1c      	ldr	r3, [pc, #112]	; (83174 <pmc_switch_mck_to_pllack+0x7c>)
   83102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83108:	491a      	ldr	r1, [pc, #104]	; (83174 <pmc_switch_mck_to_pllack+0x7c>)
   8310a:	687b      	ldr	r3, [r7, #4]
   8310c:	4313      	orrs	r3, r2
   8310e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83110:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83114:	60fb      	str	r3, [r7, #12]
   83116:	e007      	b.n	83128 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83118:	68fb      	ldr	r3, [r7, #12]
   8311a:	2b00      	cmp	r3, #0
   8311c:	d101      	bne.n	83122 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8311e:	2301      	movs	r3, #1
   83120:	e023      	b.n	8316a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83122:	68fb      	ldr	r3, [r7, #12]
   83124:	3b01      	subs	r3, #1
   83126:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83128:	4b12      	ldr	r3, [pc, #72]	; (83174 <pmc_switch_mck_to_pllack+0x7c>)
   8312a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8312c:	f003 0308 	and.w	r3, r3, #8
   83130:	2b00      	cmp	r3, #0
   83132:	d0f1      	beq.n	83118 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83134:	4b0f      	ldr	r3, [pc, #60]	; (83174 <pmc_switch_mck_to_pllack+0x7c>)
   83136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83138:	f023 0303 	bic.w	r3, r3, #3
   8313c:	4a0d      	ldr	r2, [pc, #52]	; (83174 <pmc_switch_mck_to_pllack+0x7c>)
   8313e:	f043 0302 	orr.w	r3, r3, #2
   83142:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83144:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83148:	60fb      	str	r3, [r7, #12]
   8314a:	e007      	b.n	8315c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8314c:	68fb      	ldr	r3, [r7, #12]
   8314e:	2b00      	cmp	r3, #0
   83150:	d101      	bne.n	83156 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83152:	2301      	movs	r3, #1
   83154:	e009      	b.n	8316a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83156:	68fb      	ldr	r3, [r7, #12]
   83158:	3b01      	subs	r3, #1
   8315a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8315c:	4b05      	ldr	r3, [pc, #20]	; (83174 <pmc_switch_mck_to_pllack+0x7c>)
   8315e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83160:	f003 0308 	and.w	r3, r3, #8
   83164:	2b00      	cmp	r3, #0
   83166:	d0f1      	beq.n	8314c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   83168:	2300      	movs	r3, #0
}
   8316a:	4618      	mov	r0, r3
   8316c:	3714      	adds	r7, #20
   8316e:	46bd      	mov	sp, r7
   83170:	bc80      	pop	{r7}
   83172:	4770      	bx	lr
   83174:	400e0400 	.word	0x400e0400

00083178 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83178:	b480      	push	{r7}
   8317a:	b083      	sub	sp, #12
   8317c:	af00      	add	r7, sp, #0
   8317e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83180:	687b      	ldr	r3, [r7, #4]
   83182:	2b01      	cmp	r3, #1
   83184:	d107      	bne.n	83196 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   83186:	4b08      	ldr	r3, [pc, #32]	; (831a8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83188:	689b      	ldr	r3, [r3, #8]
   8318a:	4a07      	ldr	r2, [pc, #28]	; (831a8 <pmc_switch_sclk_to_32kxtal+0x30>)
   8318c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83194:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   83196:	4b04      	ldr	r3, [pc, #16]	; (831a8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83198:	4a04      	ldr	r2, [pc, #16]	; (831ac <pmc_switch_sclk_to_32kxtal+0x34>)
   8319a:	601a      	str	r2, [r3, #0]
}
   8319c:	bf00      	nop
   8319e:	370c      	adds	r7, #12
   831a0:	46bd      	mov	sp, r7
   831a2:	bc80      	pop	{r7}
   831a4:	4770      	bx	lr
   831a6:	bf00      	nop
   831a8:	400e1210 	.word	0x400e1210
   831ac:	a5000008 	.word	0xa5000008

000831b0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   831b0:	b480      	push	{r7}
   831b2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   831b4:	4b09      	ldr	r3, [pc, #36]	; (831dc <pmc_osc_is_ready_32kxtal+0x2c>)
   831b6:	695b      	ldr	r3, [r3, #20]
   831b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   831bc:	2b00      	cmp	r3, #0
   831be:	d007      	beq.n	831d0 <pmc_osc_is_ready_32kxtal+0x20>
   831c0:	4b07      	ldr	r3, [pc, #28]	; (831e0 <pmc_osc_is_ready_32kxtal+0x30>)
   831c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   831c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   831c8:	2b00      	cmp	r3, #0
   831ca:	d001      	beq.n	831d0 <pmc_osc_is_ready_32kxtal+0x20>
   831cc:	2301      	movs	r3, #1
   831ce:	e000      	b.n	831d2 <pmc_osc_is_ready_32kxtal+0x22>
   831d0:	2300      	movs	r3, #0
}
   831d2:	4618      	mov	r0, r3
   831d4:	46bd      	mov	sp, r7
   831d6:	bc80      	pop	{r7}
   831d8:	4770      	bx	lr
   831da:	bf00      	nop
   831dc:	400e1210 	.word	0x400e1210
   831e0:	400e0400 	.word	0x400e0400

000831e4 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   831e4:	b480      	push	{r7}
   831e6:	b083      	sub	sp, #12
   831e8:	af00      	add	r7, sp, #0
   831ea:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   831ec:	4b13      	ldr	r3, [pc, #76]	; (8323c <pmc_osc_enable_fastrc+0x58>)
   831ee:	6a1b      	ldr	r3, [r3, #32]
   831f0:	4a12      	ldr	r2, [pc, #72]	; (8323c <pmc_osc_enable_fastrc+0x58>)
   831f2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   831f6:	f043 0308 	orr.w	r3, r3, #8
   831fa:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   831fc:	bf00      	nop
   831fe:	4b0f      	ldr	r3, [pc, #60]	; (8323c <pmc_osc_enable_fastrc+0x58>)
   83200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83206:	2b00      	cmp	r3, #0
   83208:	d0f9      	beq.n	831fe <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8320a:	4b0c      	ldr	r3, [pc, #48]	; (8323c <pmc_osc_enable_fastrc+0x58>)
   8320c:	6a1b      	ldr	r3, [r3, #32]
   8320e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   83216:	687a      	ldr	r2, [r7, #4]
   83218:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8321a:	4a08      	ldr	r2, [pc, #32]	; (8323c <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   8321c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83220:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83222:	bf00      	nop
   83224:	4b05      	ldr	r3, [pc, #20]	; (8323c <pmc_osc_enable_fastrc+0x58>)
   83226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8322c:	2b00      	cmp	r3, #0
   8322e:	d0f9      	beq.n	83224 <pmc_osc_enable_fastrc+0x40>
}
   83230:	bf00      	nop
   83232:	bf00      	nop
   83234:	370c      	adds	r7, #12
   83236:	46bd      	mov	sp, r7
   83238:	bc80      	pop	{r7}
   8323a:	4770      	bx	lr
   8323c:	400e0400 	.word	0x400e0400

00083240 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   83240:	b480      	push	{r7}
   83242:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   83244:	4b03      	ldr	r3, [pc, #12]	; (83254 <pmc_osc_is_ready_fastrc+0x14>)
   83246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   8324c:	4618      	mov	r0, r3
   8324e:	46bd      	mov	sp, r7
   83250:	bc80      	pop	{r7}
   83252:	4770      	bx	lr
   83254:	400e0400 	.word	0x400e0400

00083258 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   83258:	b480      	push	{r7}
   8325a:	b085      	sub	sp, #20
   8325c:	af00      	add	r7, sp, #0
   8325e:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   83260:	4b10      	ldr	r3, [pc, #64]	; (832a4 <pmc_osc_enable_main_xtal+0x4c>)
   83262:	6a1b      	ldr	r3, [r3, #32]
   83264:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83266:	68fb      	ldr	r3, [r7, #12]
   83268:	f023 0303 	bic.w	r3, r3, #3
   8326c:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8326e:	687b      	ldr	r3, [r7, #4]
   83270:	021b      	lsls	r3, r3, #8
   83272:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83274:	68fb      	ldr	r3, [r7, #12]
   83276:	4313      	orrs	r3, r2
   83278:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8327c:	f043 0301 	orr.w	r3, r3, #1
   83280:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   83282:	4a08      	ldr	r2, [pc, #32]	; (832a4 <pmc_osc_enable_main_xtal+0x4c>)
   83284:	68fb      	ldr	r3, [r7, #12]
   83286:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83288:	bf00      	nop
   8328a:	4b06      	ldr	r3, [pc, #24]	; (832a4 <pmc_osc_enable_main_xtal+0x4c>)
   8328c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8328e:	f003 0301 	and.w	r3, r3, #1
   83292:	2b00      	cmp	r3, #0
   83294:	d0f9      	beq.n	8328a <pmc_osc_enable_main_xtal+0x32>
}
   83296:	bf00      	nop
   83298:	bf00      	nop
   8329a:	3714      	adds	r7, #20
   8329c:	46bd      	mov	sp, r7
   8329e:	bc80      	pop	{r7}
   832a0:	4770      	bx	lr
   832a2:	bf00      	nop
   832a4:	400e0400 	.word	0x400e0400

000832a8 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   832a8:	b480      	push	{r7}
   832aa:	b083      	sub	sp, #12
   832ac:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   832ae:	4b0a      	ldr	r3, [pc, #40]	; (832d8 <pmc_osc_bypass_main_xtal+0x30>)
   832b0:	6a1b      	ldr	r3, [r3, #32]
   832b2:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   832b4:	687b      	ldr	r3, [r7, #4]
   832b6:	f023 0303 	bic.w	r3, r3, #3
   832ba:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   832bc:	687b      	ldr	r3, [r7, #4]
   832be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   832c2:	f043 0302 	orr.w	r3, r3, #2
   832c6:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   832c8:	4a03      	ldr	r2, [pc, #12]	; (832d8 <pmc_osc_bypass_main_xtal+0x30>)
   832ca:	687b      	ldr	r3, [r7, #4]
   832cc:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   832ce:	bf00      	nop
   832d0:	370c      	adds	r7, #12
   832d2:	46bd      	mov	sp, r7
   832d4:	bc80      	pop	{r7}
   832d6:	4770      	bx	lr
   832d8:	400e0400 	.word	0x400e0400

000832dc <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   832dc:	b480      	push	{r7}
   832de:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   832e0:	4b03      	ldr	r3, [pc, #12]	; (832f0 <pmc_osc_is_bypassed_main_xtal+0x14>)
   832e2:	6a1b      	ldr	r3, [r3, #32]
   832e4:	f003 0302 	and.w	r3, r3, #2
}
   832e8:	4618      	mov	r0, r3
   832ea:	46bd      	mov	sp, r7
   832ec:	bc80      	pop	{r7}
   832ee:	4770      	bx	lr
   832f0:	400e0400 	.word	0x400e0400

000832f4 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   832f4:	b480      	push	{r7}
   832f6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   832f8:	4b03      	ldr	r3, [pc, #12]	; (83308 <pmc_osc_is_ready_main_xtal+0x14>)
   832fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   832fc:	f003 0301 	and.w	r3, r3, #1
}
   83300:	4618      	mov	r0, r3
   83302:	46bd      	mov	sp, r7
   83304:	bc80      	pop	{r7}
   83306:	4770      	bx	lr
   83308:	400e0400 	.word	0x400e0400

0008330c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   8330c:	b480      	push	{r7}
   8330e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83310:	4b03      	ldr	r3, [pc, #12]	; (83320 <pmc_osc_is_ready_mainck+0x14>)
   83312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83318:	4618      	mov	r0, r3
   8331a:	46bd      	mov	sp, r7
   8331c:	bc80      	pop	{r7}
   8331e:	4770      	bx	lr
   83320:	400e0400 	.word	0x400e0400

00083324 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   83324:	b480      	push	{r7}
   83326:	b085      	sub	sp, #20
   83328:	af00      	add	r7, sp, #0
   8332a:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   8332c:	4b0c      	ldr	r3, [pc, #48]	; (83360 <pmc_mainck_osc_select+0x3c>)
   8332e:	6a1b      	ldr	r3, [r3, #32]
   83330:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   83332:	687b      	ldr	r3, [r7, #4]
   83334:	2b00      	cmp	r3, #0
   83336:	d004      	beq.n	83342 <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   83338:	68fb      	ldr	r3, [r7, #12]
   8333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8333e:	60fb      	str	r3, [r7, #12]
   83340:	e003      	b.n	8334a <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   83342:	68fb      	ldr	r3, [r7, #12]
   83344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   83348:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8334a:	4a05      	ldr	r2, [pc, #20]	; (83360 <pmc_mainck_osc_select+0x3c>)
   8334c:	68fb      	ldr	r3, [r7, #12]
   8334e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83352:	6213      	str	r3, [r2, #32]
}
   83354:	bf00      	nop
   83356:	3714      	adds	r7, #20
   83358:	46bd      	mov	sp, r7
   8335a:	bc80      	pop	{r7}
   8335c:	4770      	bx	lr
   8335e:	bf00      	nop
   83360:	400e0400 	.word	0x400e0400

00083364 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83364:	b480      	push	{r7}
   83366:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83368:	4b03      	ldr	r3, [pc, #12]	; (83378 <pmc_disable_pllack+0x14>)
   8336a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8336e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83370:	bf00      	nop
   83372:	46bd      	mov	sp, r7
   83374:	bc80      	pop	{r7}
   83376:	4770      	bx	lr
   83378:	400e0400 	.word	0x400e0400

0008337c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   8337c:	b480      	push	{r7}
   8337e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83380:	4b03      	ldr	r3, [pc, #12]	; (83390 <pmc_is_locked_pllack+0x14>)
   83382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83384:	f003 0302 	and.w	r3, r3, #2
}
   83388:	4618      	mov	r0, r3
   8338a:	46bd      	mov	sp, r7
   8338c:	bc80      	pop	{r7}
   8338e:	4770      	bx	lr
   83390:	400e0400 	.word	0x400e0400

00083394 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   83394:	b480      	push	{r7}
   83396:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   83398:	4b04      	ldr	r3, [pc, #16]	; (833ac <pmc_disable_upll_clock+0x18>)
   8339a:	69db      	ldr	r3, [r3, #28]
   8339c:	4a03      	ldr	r2, [pc, #12]	; (833ac <pmc_disable_upll_clock+0x18>)
   8339e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   833a2:	61d3      	str	r3, [r2, #28]
}
   833a4:	bf00      	nop
   833a6:	46bd      	mov	sp, r7
   833a8:	bc80      	pop	{r7}
   833aa:	4770      	bx	lr
   833ac:	400e0400 	.word	0x400e0400

000833b0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   833b0:	b480      	push	{r7}
   833b2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   833b4:	4b03      	ldr	r3, [pc, #12]	; (833c4 <pmc_is_locked_upll+0x14>)
   833b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   833b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   833bc:	4618      	mov	r0, r3
   833be:	46bd      	mov	sp, r7
   833c0:	bc80      	pop	{r7}
   833c2:	4770      	bx	lr
   833c4:	400e0400 	.word	0x400e0400

000833c8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   833c8:	b480      	push	{r7}
   833ca:	b083      	sub	sp, #12
   833cc:	af00      	add	r7, sp, #0
   833ce:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   833d0:	687b      	ldr	r3, [r7, #4]
   833d2:	2b1d      	cmp	r3, #29
   833d4:	d901      	bls.n	833da <pmc_enable_periph_clk+0x12>
		return 1;
   833d6:	2301      	movs	r3, #1
   833d8:	e015      	b.n	83406 <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   833da:	687b      	ldr	r3, [r7, #4]
   833dc:	2b1f      	cmp	r3, #31
   833de:	d811      	bhi.n	83404 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   833e0:	4b0b      	ldr	r3, [pc, #44]	; (83410 <pmc_enable_periph_clk+0x48>)
   833e2:	699a      	ldr	r2, [r3, #24]
   833e4:	2101      	movs	r1, #1
   833e6:	687b      	ldr	r3, [r7, #4]
   833e8:	fa01 f303 	lsl.w	r3, r1, r3
   833ec:	401a      	ands	r2, r3
   833ee:	2101      	movs	r1, #1
   833f0:	687b      	ldr	r3, [r7, #4]
   833f2:	fa01 f303 	lsl.w	r3, r1, r3
   833f6:	429a      	cmp	r2, r3
   833f8:	d004      	beq.n	83404 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   833fa:	2201      	movs	r2, #1
   833fc:	687b      	ldr	r3, [r7, #4]
   833fe:	409a      	lsls	r2, r3
   83400:	4b03      	ldr	r3, [pc, #12]	; (83410 <pmc_enable_periph_clk+0x48>)
   83402:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83404:	2300      	movs	r3, #0
}
   83406:	4618      	mov	r0, r3
   83408:	370c      	adds	r7, #12
   8340a:	46bd      	mov	sp, r7
   8340c:	bc80      	pop	{r7}
   8340e:	4770      	bx	lr
   83410:	400e0400 	.word	0x400e0400

00083414 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   83414:	b480      	push	{r7}
   83416:	b083      	sub	sp, #12
   83418:	af00      	add	r7, sp, #0
   8341a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   8341c:	687b      	ldr	r3, [r7, #4]
   8341e:	2b1d      	cmp	r3, #29
   83420:	d901      	bls.n	83426 <pmc_disable_periph_clk+0x12>
		return 1;
   83422:	2301      	movs	r3, #1
   83424:	e015      	b.n	83452 <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   83426:	687b      	ldr	r3, [r7, #4]
   83428:	2b1f      	cmp	r3, #31
   8342a:	d811      	bhi.n	83450 <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   8342c:	4b0b      	ldr	r3, [pc, #44]	; (8345c <pmc_disable_periph_clk+0x48>)
   8342e:	699a      	ldr	r2, [r3, #24]
   83430:	2101      	movs	r1, #1
   83432:	687b      	ldr	r3, [r7, #4]
   83434:	fa01 f303 	lsl.w	r3, r1, r3
   83438:	401a      	ands	r2, r3
   8343a:	2101      	movs	r1, #1
   8343c:	687b      	ldr	r3, [r7, #4]
   8343e:	fa01 f303 	lsl.w	r3, r1, r3
   83442:	429a      	cmp	r2, r3
   83444:	d104      	bne.n	83450 <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   83446:	2201      	movs	r2, #1
   83448:	687b      	ldr	r3, [r7, #4]
   8344a:	409a      	lsls	r2, r3
   8344c:	4b03      	ldr	r3, [pc, #12]	; (8345c <pmc_disable_periph_clk+0x48>)
   8344e:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   83450:	2300      	movs	r3, #0
}
   83452:	4618      	mov	r0, r3
   83454:	370c      	adds	r7, #12
   83456:	46bd      	mov	sp, r7
   83458:	bc80      	pop	{r7}
   8345a:	4770      	bx	lr
   8345c:	400e0400 	.word	0x400e0400

00083460 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   83460:	b480      	push	{r7}
   83462:	b083      	sub	sp, #12
   83464:	af00      	add	r7, sp, #0
   83466:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83468:	4a05      	ldr	r2, [pc, #20]	; (83480 <pmc_enable_pck+0x20>)
   8346a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8346e:	687b      	ldr	r3, [r7, #4]
   83470:	fa01 f303 	lsl.w	r3, r1, r3
   83474:	6013      	str	r3, [r2, #0]
}
   83476:	bf00      	nop
   83478:	370c      	adds	r7, #12
   8347a:	46bd      	mov	sp, r7
   8347c:	bc80      	pop	{r7}
   8347e:	4770      	bx	lr
   83480:	400e0400 	.word	0x400e0400

00083484 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   83484:	b480      	push	{r7}
   83486:	b083      	sub	sp, #12
   83488:	af00      	add	r7, sp, #0
   8348a:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   8348c:	687b      	ldr	r3, [r7, #4]
   8348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
   83492:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   83494:	4b05      	ldr	r3, [pc, #20]	; (834ac <pmc_set_fast_startup_input+0x28>)
   83496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83498:	4904      	ldr	r1, [pc, #16]	; (834ac <pmc_set_fast_startup_input+0x28>)
   8349a:	687b      	ldr	r3, [r7, #4]
   8349c:	4313      	orrs	r3, r2
   8349e:	670b      	str	r3, [r1, #112]	; 0x70
}
   834a0:	bf00      	nop
   834a2:	370c      	adds	r7, #12
   834a4:	46bd      	mov	sp, r7
   834a6:	bc80      	pop	{r7}
   834a8:	4770      	bx	lr
   834aa:	bf00      	nop
   834ac:	400e0400 	.word	0x400e0400

000834b0 <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   834b0:	b480      	push	{r7}
   834b2:	b083      	sub	sp, #12
   834b4:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   834b6:	4b13      	ldr	r3, [pc, #76]	; (83504 <pmc_enable_waitmode+0x54>)
   834b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   834ba:	4a12      	ldr	r2, [pc, #72]	; (83504 <pmc_enable_waitmode+0x54>)
   834bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   834c0:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   834c2:	4b11      	ldr	r3, [pc, #68]	; (83508 <pmc_enable_waitmode+0x58>)
   834c4:	691b      	ldr	r3, [r3, #16]
   834c6:	4a10      	ldr	r2, [pc, #64]	; (83508 <pmc_enable_waitmode+0x58>)
   834c8:	f023 0304 	bic.w	r3, r3, #4
   834cc:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   834ce:	bf20      	wfe
}
   834d0:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   834d2:	2300      	movs	r3, #0
   834d4:	607b      	str	r3, [r7, #4]
   834d6:	e004      	b.n	834e2 <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   834d8:	bf00      	nop
}
   834da:	bf00      	nop
   834dc:	687b      	ldr	r3, [r7, #4]
   834de:	3301      	adds	r3, #1
   834e0:	607b      	str	r3, [r7, #4]
   834e2:	687b      	ldr	r3, [r7, #4]
   834e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   834e8:	d3f6      	bcc.n	834d8 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   834ea:	bf00      	nop
   834ec:	4b05      	ldr	r3, [pc, #20]	; (83504 <pmc_enable_waitmode+0x54>)
   834ee:	6a1b      	ldr	r3, [r3, #32]
   834f0:	f003 0308 	and.w	r3, r3, #8
   834f4:	2b00      	cmp	r3, #0
   834f6:	d0f9      	beq.n	834ec <pmc_enable_waitmode+0x3c>

}
   834f8:	bf00      	nop
   834fa:	bf00      	nop
   834fc:	370c      	adds	r7, #12
   834fe:	46bd      	mov	sp, r7
   83500:	bc80      	pop	{r7}
   83502:	4770      	bx	lr
   83504:	400e0400 	.word	0x400e0400
   83508:	e000ed00 	.word	0xe000ed00

0008350c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8350c:	b580      	push	{r7, lr}
   8350e:	b086      	sub	sp, #24
   83510:	af00      	add	r7, sp, #0
   83512:	60f8      	str	r0, [r7, #12]
   83514:	60b9      	str	r1, [r7, #8]
   83516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   83518:	2300      	movs	r3, #0
   8351a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   8351c:	68fb      	ldr	r3, [r7, #12]
   8351e:	2b00      	cmp	r3, #0
   83520:	d012      	beq.n	83548 <_read+0x3c>
		return -1;
   83522:	f04f 33ff 	mov.w	r3, #4294967295
   83526:	e013      	b.n	83550 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   83528:	4b0b      	ldr	r3, [pc, #44]	; (83558 <_read+0x4c>)
   8352a:	681b      	ldr	r3, [r3, #0]
   8352c:	4a0b      	ldr	r2, [pc, #44]	; (8355c <_read+0x50>)
   8352e:	6812      	ldr	r2, [r2, #0]
   83530:	68b9      	ldr	r1, [r7, #8]
   83532:	4610      	mov	r0, r2
   83534:	4798      	blx	r3
		ptr++;
   83536:	68bb      	ldr	r3, [r7, #8]
   83538:	3301      	adds	r3, #1
   8353a:	60bb      	str	r3, [r7, #8]
		nChars++;
   8353c:	697b      	ldr	r3, [r7, #20]
   8353e:	3301      	adds	r3, #1
   83540:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   83542:	687b      	ldr	r3, [r7, #4]
   83544:	3b01      	subs	r3, #1
   83546:	607b      	str	r3, [r7, #4]
   83548:	687b      	ldr	r3, [r7, #4]
   8354a:	2b00      	cmp	r3, #0
   8354c:	dcec      	bgt.n	83528 <_read+0x1c>
	}
	return nChars;
   8354e:	697b      	ldr	r3, [r7, #20]
}
   83550:	4618      	mov	r0, r3
   83552:	3718      	adds	r7, #24
   83554:	46bd      	mov	sp, r7
   83556:	bd80      	pop	{r7, pc}
   83558:	2000145c 	.word	0x2000145c
   8355c:	20001484 	.word	0x20001484

00083560 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   83560:	b5b0      	push	{r4, r5, r7, lr}
   83562:	b09c      	sub	sp, #112	; 0x70
   83564:	af00      	add	r7, sp, #0
   83566:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   83568:	687b      	ldr	r3, [r7, #4]
   8356a:	2b05      	cmp	r3, #5
   8356c:	f000 81e8 	beq.w	83940 <pmc_sleep+0x3e0>
   83570:	687b      	ldr	r3, [r7, #4]
   83572:	2b05      	cmp	r3, #5
   83574:	f300 81f5 	bgt.w	83962 <pmc_sleep+0x402>
   83578:	687b      	ldr	r3, [r7, #4]
   8357a:	2b02      	cmp	r3, #2
   8357c:	dc03      	bgt.n	83586 <pmc_sleep+0x26>
   8357e:	687b      	ldr	r3, [r7, #4]
   83580:	2b00      	cmp	r3, #0
   83582:	dc06      	bgt.n	83592 <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   83584:	e1ed      	b.n	83962 <pmc_sleep+0x402>
   83586:	687b      	ldr	r3, [r7, #4]
   83588:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   8358a:	2b01      	cmp	r3, #1
   8358c:	f200 81e9 	bhi.w	83962 <pmc_sleep+0x402>
   83590:	e01b      	b.n	835ca <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   83592:	4b88      	ldr	r3, [pc, #544]	; (837b4 <pmc_sleep+0x254>)
   83594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83596:	4a87      	ldr	r2, [pc, #540]	; (837b4 <pmc_sleep+0x254>)
   83598:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   8359c:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   8359e:	4b86      	ldr	r3, [pc, #536]	; (837b8 <pmc_sleep+0x258>)
   835a0:	691b      	ldr	r3, [r3, #16]
   835a2:	4a85      	ldr	r2, [pc, #532]	; (837b8 <pmc_sleep+0x258>)
   835a4:	f023 0304 	bic.w	r3, r3, #4
   835a8:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   835aa:	4b84      	ldr	r3, [pc, #528]	; (837bc <pmc_sleep+0x25c>)
   835ac:	2201      	movs	r2, #1
   835ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   835b0:	f3bf 8f5f 	dmb	sy
}
   835b4:	bf00      	nop
  __ASM volatile ("cpsie i");
   835b6:	b662      	cpsie	i
}
   835b8:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   835ba:	687b      	ldr	r3, [r7, #4]
   835bc:	2b02      	cmp	r3, #2
   835be:	d101      	bne.n	835c4 <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   835c0:	bf30      	wfi
}
   835c2:	e001      	b.n	835c8 <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   835c4:	bf20      	wfe
}
   835c6:	bf00      	nop
		break;
   835c8:	e1cb      	b.n	83962 <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   835ca:	b672      	cpsid	i
}
   835cc:	bf00      	nop
  __ASM volatile ("dmb");
   835ce:	f3bf 8f5f 	dmb	sy
}
   835d2:	bf00      	nop
		cpu_irq_disable();
   835d4:	4b79      	ldr	r3, [pc, #484]	; (837bc <pmc_sleep+0x25c>)
   835d6:	2200      	movs	r2, #0
   835d8:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   835da:	4b79      	ldr	r3, [pc, #484]	; (837c0 <pmc_sleep+0x260>)
   835dc:	2201      	movs	r2, #1
   835de:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   835e0:	687b      	ldr	r3, [r7, #4]
   835e2:	2b04      	cmp	r3, #4
   835e4:	bf0c      	ite	eq
   835e6:	2301      	moveq	r3, #1
   835e8:	2300      	movne	r3, #0
   835ea:	b2da      	uxtb	r2, r3
   835ec:	f107 0320 	add.w	r3, r7, #32
   835f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   835f2:	f107 031c 	add.w	r3, r7, #28
   835f6:	64bb      	str	r3, [r7, #72]	; 0x48
   835f8:	f107 0318 	add.w	r3, r7, #24
   835fc:	647b      	str	r3, [r7, #68]	; 0x44
   835fe:	f107 0314 	add.w	r3, r7, #20
   83602:	643b      	str	r3, [r7, #64]	; 0x40
   83604:	f107 0310 	add.w	r3, r7, #16
   83608:	63fb      	str	r3, [r7, #60]	; 0x3c
   8360a:	f107 030c 	add.w	r3, r7, #12
   8360e:	63bb      	str	r3, [r7, #56]	; 0x38
   83610:	4613      	mov	r3, r2
   83612:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   83616:	4b67      	ldr	r3, [pc, #412]	; (837b4 <pmc_sleep+0x254>)
   83618:	6a1b      	ldr	r3, [r3, #32]
   8361a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   8361c:	4b65      	ldr	r3, [pc, #404]	; (837b4 <pmc_sleep+0x254>)
   8361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83620:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   83622:	4b68      	ldr	r3, [pc, #416]	; (837c4 <pmc_sleep+0x264>)
   83624:	681b      	ldr	r3, [r3, #0]
   83626:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   83628:	4b67      	ldr	r3, [pc, #412]	; (837c8 <pmc_sleep+0x268>)
   8362a:	681b      	ldr	r3, [r3, #0]
   8362c:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   8362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   83630:	2b00      	cmp	r3, #0
   83632:	d002      	beq.n	8363a <pmc_sleep+0xda>
		*p_osc_setting = mor;
   83634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   83636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   83638:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   8363a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   8363c:	2b00      	cmp	r3, #0
   8363e:	d003      	beq.n	83648 <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   83640:	4b5c      	ldr	r3, [pc, #368]	; (837b4 <pmc_sleep+0x254>)
   83642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   83644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   83646:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   83648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   8364a:	2b00      	cmp	r3, #0
   8364c:	d003      	beq.n	83656 <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   8364e:	4b59      	ldr	r3, [pc, #356]	; (837b4 <pmc_sleep+0x254>)
   83650:	69da      	ldr	r2, [r3, #28]
   83652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   83654:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   83656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   83658:	2b00      	cmp	r3, #0
   8365a:	d002      	beq.n	83662 <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   8365c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8365e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   83660:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   83662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   83664:	2b00      	cmp	r3, #0
   83666:	d002      	beq.n	8366e <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   83668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8366a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8366c:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   8366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   83670:	2b00      	cmp	r3, #0
   83672:	d002      	beq.n	8367a <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   83674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   83676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   83678:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   8367a:	4a4e      	ldr	r2, [pc, #312]	; (837b4 <pmc_sleep+0x254>)
   8367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8367e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83682:	f043 0308 	orr.w	r3, r3, #8
   83686:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   83688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8368a:	f003 0302 	and.w	r3, r3, #2
   8368e:	2b00      	cmp	r3, #0
   83690:	d00f      	beq.n	836b2 <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   83692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83694:	f023 0303 	bic.w	r3, r3, #3
   83698:	f043 0301 	orr.w	r3, r3, #1
   8369c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   8369e:	4a45      	ldr	r2, [pc, #276]	; (837b4 <pmc_sleep+0x254>)
   836a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   836a2:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   836a4:	bf00      	nop
   836a6:	4b43      	ldr	r3, [pc, #268]	; (837b4 <pmc_sleep+0x254>)
   836a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   836aa:	f003 0308 	and.w	r3, r3, #8
   836ae:	2b00      	cmp	r3, #0
   836b0:	d0f9      	beq.n	836a6 <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   836b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   836b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   836b8:	2b00      	cmp	r3, #0
   836ba:	d00d      	beq.n	836d8 <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   836bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   836be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   836c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   836c4:	4a3b      	ldr	r2, [pc, #236]	; (837b4 <pmc_sleep+0x254>)
   836c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   836c8:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   836ca:	bf00      	nop
   836cc:	4b39      	ldr	r3, [pc, #228]	; (837b4 <pmc_sleep+0x254>)
   836ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   836d0:	f003 0308 	and.w	r3, r3, #8
   836d4:	2b00      	cmp	r3, #0
   836d6:	d0f9      	beq.n	836cc <pmc_sleep+0x16c>
	pmc_disable_pllack();
   836d8:	4b3c      	ldr	r3, [pc, #240]	; (837cc <pmc_sleep+0x26c>)
   836da:	4798      	blx	r3
	pmc_disable_upll_clock();
   836dc:	4b3c      	ldr	r3, [pc, #240]	; (837d0 <pmc_sleep+0x270>)
   836de:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   836e0:	bf00      	nop
   836e2:	4b34      	ldr	r3, [pc, #208]	; (837b4 <pmc_sleep+0x254>)
   836e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   836e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   836ea:	2b00      	cmp	r3, #0
   836ec:	d0f9      	beq.n	836e2 <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   836ee:	4b31      	ldr	r3, [pc, #196]	; (837b4 <pmc_sleep+0x254>)
   836f0:	6a1b      	ldr	r3, [r3, #32]
   836f2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   836f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   836fa:	4a2e      	ldr	r2, [pc, #184]	; (837b4 <pmc_sleep+0x254>)
   836fc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83700:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   83702:	bf00      	nop
   83704:	4b2b      	ldr	r3, [pc, #172]	; (837b4 <pmc_sleep+0x254>)
   83706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8370c:	2b00      	cmp	r3, #0
   8370e:	d0f9      	beq.n	83704 <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   83710:	4a2c      	ldr	r2, [pc, #176]	; (837c4 <pmc_sleep+0x264>)
   83712:	6abb      	ldr	r3, [r7, #40]	; 0x28
   83714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   83718:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   8371a:	4a2b      	ldr	r2, [pc, #172]	; (837c8 <pmc_sleep+0x268>)
   8371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8371e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   83722:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   83724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   83728:	2b00      	cmp	r3, #0
   8372a:	d009      	beq.n	83740 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8372c:	4b21      	ldr	r3, [pc, #132]	; (837b4 <pmc_sleep+0x254>)
   8372e:	6a1b      	ldr	r3, [r3, #32]
   83730:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83734:	f023 0301 	bic.w	r3, r3, #1
   83738:	4a1e      	ldr	r2, [pc, #120]	; (837b4 <pmc_sleep+0x254>)
   8373a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8373e:	6213      	str	r3, [r2, #32]
}
   83740:	bf00      	nop
		cpu_irq_enable();
   83742:	4b1e      	ldr	r3, [pc, #120]	; (837bc <pmc_sleep+0x25c>)
   83744:	2201      	movs	r2, #1
   83746:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   83748:	f3bf 8f5f 	dmb	sy
}
   8374c:	bf00      	nop
  __ASM volatile ("cpsie i");
   8374e:	b662      	cpsie	i
}
   83750:	bf00      	nop
		pmc_enable_waitmode();
   83752:	4b20      	ldr	r3, [pc, #128]	; (837d4 <pmc_sleep+0x274>)
   83754:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   83756:	b672      	cpsid	i
}
   83758:	bf00      	nop
  __ASM volatile ("dmb");
   8375a:	f3bf 8f5f 	dmb	sy
}
   8375e:	bf00      	nop
		cpu_irq_disable();
   83760:	4b16      	ldr	r3, [pc, #88]	; (837bc <pmc_sleep+0x25c>)
   83762:	2200      	movs	r2, #0
   83764:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   83766:	6a3d      	ldr	r5, [r7, #32]
   83768:	69fc      	ldr	r4, [r7, #28]
   8376a:	69b8      	ldr	r0, [r7, #24]
   8376c:	6979      	ldr	r1, [r7, #20]
   8376e:	693a      	ldr	r2, [r7, #16]
   83770:	68fb      	ldr	r3, [r7, #12]
   83772:	66fd      	str	r5, [r7, #108]	; 0x6c
   83774:	66bc      	str	r4, [r7, #104]	; 0x68
   83776:	6678      	str	r0, [r7, #100]	; 0x64
   83778:	6639      	str	r1, [r7, #96]	; 0x60
   8377a:	65fa      	str	r2, [r7, #92]	; 0x5c
   8377c:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   8377e:	2300      	movs	r3, #0
   83780:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   83782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   83784:	f003 0302 	and.w	r3, r3, #2
   83788:	2b00      	cmp	r3, #0
   8378a:	d029      	beq.n	837e0 <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8378c:	4b09      	ldr	r3, [pc, #36]	; (837b4 <pmc_sleep+0x254>)
   8378e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83790:	4a11      	ldr	r2, [pc, #68]	; (837d8 <pmc_sleep+0x278>)
   83792:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83794:	4907      	ldr	r1, [pc, #28]	; (837b4 <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83796:	4b11      	ldr	r3, [pc, #68]	; (837dc <pmc_sleep+0x27c>)
   83798:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8379a:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8379c:	4b05      	ldr	r3, [pc, #20]	; (837b4 <pmc_sleep+0x254>)
   8379e:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   837a0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   837a4:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   837a8:	4a02      	ldr	r2, [pc, #8]	; (837b4 <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   837aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   837ae:	6213      	str	r3, [r2, #32]
   837b0:	e053      	b.n	8385a <pmc_sleep+0x2fa>
   837b2:	bf00      	nop
   837b4:	400e0400 	.word	0x400e0400
   837b8:	e000ed00 	.word	0xe000ed00
   837bc:	200003ca 	.word	0x200003ca
   837c0:	20000f58 	.word	0x20000f58
   837c4:	400e0800 	.word	0x400e0800
   837c8:	400e0a00 	.word	0x400e0a00
   837cc:	00083365 	.word	0x00083365
   837d0:	00083395 	.word	0x00083395
   837d4:	000834b1 	.word	0x000834b1
   837d8:	fec8fffc 	.word	0xfec8fffc
   837dc:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   837e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   837e2:	f003 0301 	and.w	r3, r3, #1
   837e6:	2b00      	cmp	r3, #0
   837e8:	d037      	beq.n	8385a <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   837ea:	4b60      	ldr	r3, [pc, #384]	; (8396c <pmc_sleep+0x40c>)
   837ec:	6a1b      	ldr	r3, [r3, #32]
   837ee:	f003 0301 	and.w	r3, r3, #1
   837f2:	2b00      	cmp	r3, #0
   837f4:	d112      	bne.n	8381c <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   837f6:	4b5d      	ldr	r3, [pc, #372]	; (8396c <pmc_sleep+0x40c>)
   837f8:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   837fa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   837fe:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83802:	4a5a      	ldr	r2, [pc, #360]	; (8396c <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   83804:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83808:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8380c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8380e:	bf00      	nop
   83810:	4b56      	ldr	r3, [pc, #344]	; (8396c <pmc_sleep+0x40c>)
   83812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83814:	f003 0301 	and.w	r3, r3, #1
   83818:	2b00      	cmp	r3, #0
   8381a:	d0f9      	beq.n	83810 <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   8381c:	4b53      	ldr	r3, [pc, #332]	; (8396c <pmc_sleep+0x40c>)
   8381e:	6a1b      	ldr	r3, [r3, #32]
   83820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83824:	2b00      	cmp	r3, #0
   83826:	d10e      	bne.n	83846 <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83828:	4b50      	ldr	r3, [pc, #320]	; (8396c <pmc_sleep+0x40c>)
   8382a:	6a1b      	ldr	r3, [r3, #32]
   8382c:	4a4f      	ldr	r2, [pc, #316]	; (8396c <pmc_sleep+0x40c>)
   8382e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83836:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   83838:	bf00      	nop
   8383a:	4b4c      	ldr	r3, [pc, #304]	; (8396c <pmc_sleep+0x40c>)
   8383c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8383e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   83842:	2b00      	cmp	r3, #0
   83844:	d0f9      	beq.n	8383a <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   83846:	4b49      	ldr	r3, [pc, #292]	; (8396c <pmc_sleep+0x40c>)
   83848:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   8384a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8384e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   83852:	4a46      	ldr	r2, [pc, #280]	; (8396c <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   83854:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   83858:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   8385a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   8385c:	4b44      	ldr	r3, [pc, #272]	; (83970 <pmc_sleep+0x410>)
   8385e:	4013      	ands	r3, r2
   83860:	2b00      	cmp	r3, #0
   83862:	d008      	beq.n	83876 <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   83864:	4a41      	ldr	r2, [pc, #260]	; (8396c <pmc_sleep+0x40c>)
   83866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   83868:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8386c:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   8386e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   83870:	f043 0302 	orr.w	r3, r3, #2
   83874:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   83876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   83878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8387c:	2b00      	cmp	r3, #0
   8387e:	d006      	beq.n	8388e <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   83880:	4a3a      	ldr	r2, [pc, #232]	; (8396c <pmc_sleep+0x40c>)
   83882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   83884:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   83886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   83888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8388c:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   8388e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   83890:	f003 0303 	and.w	r3, r3, #3
   83894:	2b02      	cmp	r3, #2
   83896:	d002      	beq.n	8389e <pmc_sleep+0x33e>
   83898:	2b03      	cmp	r3, #3
   8389a:	d008      	beq.n	838ae <pmc_sleep+0x34e>
   8389c:	e00f      	b.n	838be <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   8389e:	bf00      	nop
   838a0:	4b32      	ldr	r3, [pc, #200]	; (8396c <pmc_sleep+0x40c>)
   838a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838a4:	f003 0302 	and.w	r3, r3, #2
   838a8:	2b00      	cmp	r3, #0
   838aa:	d0f9      	beq.n	838a0 <pmc_sleep+0x340>
		break;
   838ac:	e007      	b.n	838be <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   838ae:	bf00      	nop
   838b0:	4b2e      	ldr	r3, [pc, #184]	; (8396c <pmc_sleep+0x40c>)
   838b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
   838b8:	2b00      	cmp	r3, #0
   838ba:	d0f9      	beq.n	838b0 <pmc_sleep+0x350>
		break;
   838bc:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   838be:	4b2b      	ldr	r3, [pc, #172]	; (8396c <pmc_sleep+0x40c>)
   838c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   838c2:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   838c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   838c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   838ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   838cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   838d0:	4926      	ldr	r1, [pc, #152]	; (8396c <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   838d2:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   838d4:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   838d6:	bf00      	nop
   838d8:	4b24      	ldr	r3, [pc, #144]	; (8396c <pmc_sleep+0x40c>)
   838da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838dc:	f003 0308 	and.w	r3, r3, #8
   838e0:	2b00      	cmp	r3, #0
   838e2:	d0f9      	beq.n	838d8 <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   838e4:	4a23      	ldr	r2, [pc, #140]	; (83974 <pmc_sleep+0x414>)
   838e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   838e8:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   838ea:	4a23      	ldr	r2, [pc, #140]	; (83978 <pmc_sleep+0x418>)
   838ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   838ee:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   838f0:	4a1e      	ldr	r2, [pc, #120]	; (8396c <pmc_sleep+0x40c>)
   838f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   838f4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   838f6:	bf00      	nop
   838f8:	4b1c      	ldr	r3, [pc, #112]	; (8396c <pmc_sleep+0x40c>)
   838fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838fc:	f003 0308 	and.w	r3, r3, #8
   83900:	2b00      	cmp	r3, #0
   83902:	d0f9      	beq.n	838f8 <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   83904:	bf00      	nop
   83906:	4b19      	ldr	r3, [pc, #100]	; (8396c <pmc_sleep+0x40c>)
   83908:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8390a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   8390c:	4013      	ands	r3, r2
   8390e:	2b00      	cmp	r3, #0
   83910:	d0f9      	beq.n	83906 <pmc_sleep+0x3a6>
}
   83912:	bf00      	nop
		b_is_sleep_clock_used = false;
   83914:	4b19      	ldr	r3, [pc, #100]	; (8397c <pmc_sleep+0x41c>)
   83916:	2200      	movs	r2, #0
   83918:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   8391a:	4b19      	ldr	r3, [pc, #100]	; (83980 <pmc_sleep+0x420>)
   8391c:	681b      	ldr	r3, [r3, #0]
   8391e:	2b00      	cmp	r3, #0
   83920:	d005      	beq.n	8392e <pmc_sleep+0x3ce>
			callback_clocks_restored();
   83922:	4b17      	ldr	r3, [pc, #92]	; (83980 <pmc_sleep+0x420>)
   83924:	681b      	ldr	r3, [r3, #0]
   83926:	4798      	blx	r3
			callback_clocks_restored = NULL;
   83928:	4b15      	ldr	r3, [pc, #84]	; (83980 <pmc_sleep+0x420>)
   8392a:	2200      	movs	r2, #0
   8392c:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   8392e:	4b15      	ldr	r3, [pc, #84]	; (83984 <pmc_sleep+0x424>)
   83930:	2201      	movs	r2, #1
   83932:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   83934:	f3bf 8f5f 	dmb	sy
}
   83938:	bf00      	nop
  __ASM volatile ("cpsie i");
   8393a:	b662      	cpsie	i
}
   8393c:	bf00      	nop
		break;
   8393e:	e010      	b.n	83962 <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   83940:	4b11      	ldr	r3, [pc, #68]	; (83988 <pmc_sleep+0x428>)
   83942:	691b      	ldr	r3, [r3, #16]
   83944:	4a10      	ldr	r2, [pc, #64]	; (83988 <pmc_sleep+0x428>)
   83946:	f043 0304 	orr.w	r3, r3, #4
   8394a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   8394c:	4b0d      	ldr	r3, [pc, #52]	; (83984 <pmc_sleep+0x424>)
   8394e:	2201      	movs	r2, #1
   83950:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   83952:	f3bf 8f5f 	dmb	sy
}
   83956:	bf00      	nop
  __ASM volatile ("cpsie i");
   83958:	b662      	cpsie	i
}
   8395a:	bf00      	nop
  __ASM volatile ("wfe");
   8395c:	bf20      	wfe
}
   8395e:	bf00      	nop
		break;
   83960:	bf00      	nop
}
   83962:	bf00      	nop
   83964:	3770      	adds	r7, #112	; 0x70
   83966:	46bd      	mov	sp, r7
   83968:	bdb0      	pop	{r4, r5, r7, pc}
   8396a:	bf00      	nop
   8396c:	400e0400 	.word	0x400e0400
   83970:	07ff0000 	.word	0x07ff0000
   83974:	400e0800 	.word	0x400e0800
   83978:	400e0a00 	.word	0x400e0a00
   8397c:	20000f58 	.word	0x20000f58
   83980:	20000f5c 	.word	0x20000f5c
   83984:	200003ca 	.word	0x200003ca
   83988:	e000ed00 	.word	0xe000ed00

0008398c <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   8398c:	b480      	push	{r7}
   8398e:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   83990:	4b08      	ldr	r3, [pc, #32]	; (839b4 <pmc_is_wakeup_clocks_restored+0x28>)
   83992:	781b      	ldrb	r3, [r3, #0]
   83994:	b2db      	uxtb	r3, r3
   83996:	2b00      	cmp	r3, #0
   83998:	bf14      	ite	ne
   8399a:	2301      	movne	r3, #1
   8399c:	2300      	moveq	r3, #0
   8399e:	b2db      	uxtb	r3, r3
   839a0:	f083 0301 	eor.w	r3, r3, #1
   839a4:	b2db      	uxtb	r3, r3
   839a6:	f003 0301 	and.w	r3, r3, #1
   839aa:	b2db      	uxtb	r3, r3
}
   839ac:	4618      	mov	r0, r3
   839ae:	46bd      	mov	sp, r7
   839b0:	bc80      	pop	{r7}
   839b2:	4770      	bx	lr
   839b4:	20000f58 	.word	0x20000f58

000839b8 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   839b8:	b480      	push	{r7}
   839ba:	b085      	sub	sp, #20
   839bc:	af00      	add	r7, sp, #0
   839be:	60f8      	str	r0, [r7, #12]
   839c0:	60b9      	str	r1, [r7, #8]
   839c2:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   839c4:	68f9      	ldr	r1, [r7, #12]
   839c6:	68ba      	ldr	r2, [r7, #8]
   839c8:	4613      	mov	r3, r2
   839ca:	009b      	lsls	r3, r3, #2
   839cc:	4413      	add	r3, r2
   839ce:	009b      	lsls	r3, r3, #2
   839d0:	440b      	add	r3, r1
   839d2:	3370      	adds	r3, #112	; 0x70
   839d4:	687a      	ldr	r2, [r7, #4]
   839d6:	601a      	str	r2, [r3, #0]
}
   839d8:	bf00      	nop
   839da:	3714      	adds	r7, #20
   839dc:	46bd      	mov	sp, r7
   839de:	bc80      	pop	{r7}
   839e0:	4770      	bx	lr

000839e2 <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   839e2:	b480      	push	{r7}
   839e4:	b085      	sub	sp, #20
   839e6:	af00      	add	r7, sp, #0
   839e8:	60f8      	str	r0, [r7, #12]
   839ea:	60b9      	str	r1, [r7, #8]
   839ec:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   839ee:	68f9      	ldr	r1, [r7, #12]
   839f0:	68ba      	ldr	r2, [r7, #8]
   839f2:	4613      	mov	r3, r2
   839f4:	009b      	lsls	r3, r3, #2
   839f6:	4413      	add	r3, r2
   839f8:	009b      	lsls	r3, r3, #2
   839fa:	440b      	add	r3, r1
   839fc:	3374      	adds	r3, #116	; 0x74
   839fe:	687a      	ldr	r2, [r7, #4]
   83a00:	601a      	str	r2, [r3, #0]
}
   83a02:	bf00      	nop
   83a04:	3714      	adds	r7, #20
   83a06:	46bd      	mov	sp, r7
   83a08:	bc80      	pop	{r7}
   83a0a:	4770      	bx	lr

00083a0c <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   83a0c:	b480      	push	{r7}
   83a0e:	b085      	sub	sp, #20
   83a10:	af00      	add	r7, sp, #0
   83a12:	60f8      	str	r0, [r7, #12]
   83a14:	60b9      	str	r1, [r7, #8]
   83a16:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83a18:	68f9      	ldr	r1, [r7, #12]
   83a1a:	68ba      	ldr	r2, [r7, #8]
   83a1c:	4613      	mov	r3, r2
   83a1e:	009b      	lsls	r3, r3, #2
   83a20:	4413      	add	r3, r2
   83a22:	009b      	lsls	r3, r3, #2
   83a24:	440b      	add	r3, r1
   83a26:	3378      	adds	r3, #120	; 0x78
   83a28:	687a      	ldr	r2, [r7, #4]
   83a2a:	601a      	str	r2, [r3, #0]
}
   83a2c:	bf00      	nop
   83a2e:	3714      	adds	r7, #20
   83a30:	46bd      	mov	sp, r7
   83a32:	bc80      	pop	{r7}
   83a34:	4770      	bx	lr

00083a36 <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   83a36:	b480      	push	{r7}
   83a38:	b085      	sub	sp, #20
   83a3a:	af00      	add	r7, sp, #0
   83a3c:	60f8      	str	r0, [r7, #12]
   83a3e:	60b9      	str	r1, [r7, #8]
   83a40:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   83a42:	68f9      	ldr	r1, [r7, #12]
   83a44:	68ba      	ldr	r2, [r7, #8]
   83a46:	4613      	mov	r3, r2
   83a48:	009b      	lsls	r3, r3, #2
   83a4a:	4413      	add	r3, r2
   83a4c:	009b      	lsls	r3, r3, #2
   83a4e:	440b      	add	r3, r1
   83a50:	3380      	adds	r3, #128	; 0x80
   83a52:	687a      	ldr	r2, [r7, #4]
   83a54:	601a      	str	r2, [r3, #0]
}
   83a56:	bf00      	nop
   83a58:	3714      	adds	r7, #20
   83a5a:	46bd      	mov	sp, r7
   83a5c:	bc80      	pop	{r7}
   83a5e:	4770      	bx	lr

00083a60 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83a60:	b580      	push	{r7, lr}
   83a62:	b082      	sub	sp, #8
   83a64:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83a66:	4b1e      	ldr	r3, [pc, #120]	; (83ae0 <Reset_Handler+0x80>)
   83a68:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83a6a:	4b1e      	ldr	r3, [pc, #120]	; (83ae4 <Reset_Handler+0x84>)
   83a6c:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83a6e:	687a      	ldr	r2, [r7, #4]
   83a70:	683b      	ldr	r3, [r7, #0]
   83a72:	429a      	cmp	r2, r3
   83a74:	d00c      	beq.n	83a90 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83a76:	e007      	b.n	83a88 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83a78:	687a      	ldr	r2, [r7, #4]
   83a7a:	1d13      	adds	r3, r2, #4
   83a7c:	607b      	str	r3, [r7, #4]
   83a7e:	683b      	ldr	r3, [r7, #0]
   83a80:	1d19      	adds	r1, r3, #4
   83a82:	6039      	str	r1, [r7, #0]
   83a84:	6812      	ldr	r2, [r2, #0]
   83a86:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83a88:	683b      	ldr	r3, [r7, #0]
   83a8a:	4a17      	ldr	r2, [pc, #92]	; (83ae8 <Reset_Handler+0x88>)
   83a8c:	4293      	cmp	r3, r2
   83a8e:	d3f3      	bcc.n	83a78 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83a90:	4b16      	ldr	r3, [pc, #88]	; (83aec <Reset_Handler+0x8c>)
   83a92:	603b      	str	r3, [r7, #0]
   83a94:	e004      	b.n	83aa0 <Reset_Handler+0x40>
		*pDest++ = 0;
   83a96:	683b      	ldr	r3, [r7, #0]
   83a98:	1d1a      	adds	r2, r3, #4
   83a9a:	603a      	str	r2, [r7, #0]
   83a9c:	2200      	movs	r2, #0
   83a9e:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   83aa0:	683b      	ldr	r3, [r7, #0]
   83aa2:	4a13      	ldr	r2, [pc, #76]	; (83af0 <Reset_Handler+0x90>)
   83aa4:	4293      	cmp	r3, r2
   83aa6:	d3f6      	bcc.n	83a96 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83aa8:	4b12      	ldr	r3, [pc, #72]	; (83af4 <Reset_Handler+0x94>)
   83aaa:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83aac:	687b      	ldr	r3, [r7, #4]
   83aae:	4a12      	ldr	r2, [pc, #72]	; (83af8 <Reset_Handler+0x98>)
   83ab0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83ab4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83ab8:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   83aba:	687b      	ldr	r3, [r7, #4]
   83abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83ac0:	d309      	bcc.n	83ad6 <Reset_Handler+0x76>
   83ac2:	687b      	ldr	r3, [r7, #4]
   83ac4:	4a0d      	ldr	r2, [pc, #52]	; (83afc <Reset_Handler+0x9c>)
   83ac6:	4293      	cmp	r3, r2
   83ac8:	d205      	bcs.n	83ad6 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83aca:	4b0b      	ldr	r3, [pc, #44]	; (83af8 <Reset_Handler+0x98>)
   83acc:	689b      	ldr	r3, [r3, #8]
   83ace:	4a0a      	ldr	r2, [pc, #40]	; (83af8 <Reset_Handler+0x98>)
   83ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83ad4:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83ad6:	4b0a      	ldr	r3, [pc, #40]	; (83b00 <Reset_Handler+0xa0>)
   83ad8:	4798      	blx	r3

	/* Branch to main function */
	main();
   83ada:	4b0a      	ldr	r3, [pc, #40]	; (83b04 <Reset_Handler+0xa4>)
   83adc:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83ade:	e7fe      	b.n	83ade <Reset_Handler+0x7e>
   83ae0:	0008d3e4 	.word	0x0008d3e4
   83ae4:	20000000 	.word	0x20000000
   83ae8:	20000e20 	.word	0x20000e20
   83aec:	20000e20 	.word	0x20000e20
   83af0:	200014b0 	.word	0x200014b0
   83af4:	00080000 	.word	0x00080000
   83af8:	e000ed00 	.word	0xe000ed00
   83afc:	20004000 	.word	0x20004000
   83b00:	00086295 	.word	0x00086295
   83b04:	00080b51 	.word	0x00080b51

00083b08 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83b08:	b480      	push	{r7}
   83b0a:	b085      	sub	sp, #20
   83b0c:	af00      	add	r7, sp, #0
   83b0e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   83b10:	4b10      	ldr	r3, [pc, #64]	; (83b54 <_sbrk+0x4c>)
   83b12:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   83b14:	4b10      	ldr	r3, [pc, #64]	; (83b58 <_sbrk+0x50>)
   83b16:	681b      	ldr	r3, [r3, #0]
   83b18:	2b00      	cmp	r3, #0
   83b1a:	d102      	bne.n	83b22 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   83b1c:	4b0e      	ldr	r3, [pc, #56]	; (83b58 <_sbrk+0x50>)
   83b1e:	4a0f      	ldr	r2, [pc, #60]	; (83b5c <_sbrk+0x54>)
   83b20:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   83b22:	4b0d      	ldr	r3, [pc, #52]	; (83b58 <_sbrk+0x50>)
   83b24:	681b      	ldr	r3, [r3, #0]
   83b26:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   83b28:	68ba      	ldr	r2, [r7, #8]
   83b2a:	687b      	ldr	r3, [r7, #4]
   83b2c:	4413      	add	r3, r2
   83b2e:	68fa      	ldr	r2, [r7, #12]
   83b30:	429a      	cmp	r2, r3
   83b32:	da02      	bge.n	83b3a <_sbrk+0x32>
		return (caddr_t) -1;	
   83b34:	f04f 33ff 	mov.w	r3, #4294967295
   83b38:	e006      	b.n	83b48 <_sbrk+0x40>
	}

	heap += incr;
   83b3a:	4b07      	ldr	r3, [pc, #28]	; (83b58 <_sbrk+0x50>)
   83b3c:	681a      	ldr	r2, [r3, #0]
   83b3e:	687b      	ldr	r3, [r7, #4]
   83b40:	4413      	add	r3, r2
   83b42:	4a05      	ldr	r2, [pc, #20]	; (83b58 <_sbrk+0x50>)
   83b44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   83b46:	68bb      	ldr	r3, [r7, #8]
}
   83b48:	4618      	mov	r0, r3
   83b4a:	3714      	adds	r7, #20
   83b4c:	46bd      	mov	sp, r7
   83b4e:	bc80      	pop	{r7}
   83b50:	4770      	bx	lr
   83b52:	bf00      	nop
   83b54:	20081ffc 	.word	0x20081ffc
   83b58:	20000f60 	.word	0x20000f60
   83b5c:	20080400 	.word	0x20080400

00083b60 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   83b60:	b480      	push	{r7}
   83b62:	b083      	sub	sp, #12
   83b64:	af00      	add	r7, sp, #0
   83b66:	6078      	str	r0, [r7, #4]
	return -1;
   83b68:	f04f 33ff 	mov.w	r3, #4294967295
}
   83b6c:	4618      	mov	r0, r3
   83b6e:	370c      	adds	r7, #12
   83b70:	46bd      	mov	sp, r7
   83b72:	bc80      	pop	{r7}
   83b74:	4770      	bx	lr

00083b76 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   83b76:	b480      	push	{r7}
   83b78:	b083      	sub	sp, #12
   83b7a:	af00      	add	r7, sp, #0
   83b7c:	6078      	str	r0, [r7, #4]
   83b7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   83b80:	683b      	ldr	r3, [r7, #0]
   83b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83b86:	605a      	str	r2, [r3, #4]

	return 0;
   83b88:	2300      	movs	r3, #0
}
   83b8a:	4618      	mov	r0, r3
   83b8c:	370c      	adds	r7, #12
   83b8e:	46bd      	mov	sp, r7
   83b90:	bc80      	pop	{r7}
   83b92:	4770      	bx	lr

00083b94 <_isatty>:

extern int _isatty(int file)
{
   83b94:	b480      	push	{r7}
   83b96:	b083      	sub	sp, #12
   83b98:	af00      	add	r7, sp, #0
   83b9a:	6078      	str	r0, [r7, #4]
	return 1;
   83b9c:	2301      	movs	r3, #1
}
   83b9e:	4618      	mov	r0, r3
   83ba0:	370c      	adds	r7, #12
   83ba2:	46bd      	mov	sp, r7
   83ba4:	bc80      	pop	{r7}
   83ba6:	4770      	bx	lr

00083ba8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   83ba8:	b480      	push	{r7}
   83baa:	b085      	sub	sp, #20
   83bac:	af00      	add	r7, sp, #0
   83bae:	60f8      	str	r0, [r7, #12]
   83bb0:	60b9      	str	r1, [r7, #8]
   83bb2:	607a      	str	r2, [r7, #4]
	return 0;
   83bb4:	2300      	movs	r3, #0
}
   83bb6:	4618      	mov	r0, r3
   83bb8:	3714      	adds	r7, #20
   83bba:	46bd      	mov	sp, r7
   83bbc:	bc80      	pop	{r7}
   83bbe:	4770      	bx	lr

00083bc0 <_exit>:

extern void _exit(int status)
{
   83bc0:	b580      	push	{r7, lr}
   83bc2:	b082      	sub	sp, #8
   83bc4:	af00      	add	r7, sp, #0
   83bc6:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   83bc8:	6879      	ldr	r1, [r7, #4]
   83bca:	4802      	ldr	r0, [pc, #8]	; (83bd4 <_exit+0x14>)
   83bcc:	4b02      	ldr	r3, [pc, #8]	; (83bd8 <_exit+0x18>)
   83bce:	4798      	blx	r3

	for (;;);
   83bd0:	e7fe      	b.n	83bd0 <_exit+0x10>
   83bd2:	bf00      	nop
   83bd4:	0008cf6c 	.word	0x0008cf6c
   83bd8:	000862dd 	.word	0x000862dd

00083bdc <_kill>:
}

extern void _kill(int pid, int sig)
{
   83bdc:	b480      	push	{r7}
   83bde:	b083      	sub	sp, #12
   83be0:	af00      	add	r7, sp, #0
   83be2:	6078      	str	r0, [r7, #4]
   83be4:	6039      	str	r1, [r7, #0]
	return;
   83be6:	bf00      	nop
}
   83be8:	370c      	adds	r7, #12
   83bea:	46bd      	mov	sp, r7
   83bec:	bc80      	pop	{r7}
   83bee:	4770      	bx	lr

00083bf0 <_getpid>:

extern int _getpid(void)
{
   83bf0:	b480      	push	{r7}
   83bf2:	af00      	add	r7, sp, #0
	return -1;
   83bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
   83bf8:	4618      	mov	r0, r3
   83bfa:	46bd      	mov	sp, r7
   83bfc:	bc80      	pop	{r7}
   83bfe:	4770      	bx	lr

00083c00 <osc_enable>:
{
   83c00:	b580      	push	{r7, lr}
   83c02:	b082      	sub	sp, #8
   83c04:	af00      	add	r7, sp, #0
   83c06:	6078      	str	r0, [r7, #4]
   83c08:	687b      	ldr	r3, [r7, #4]
   83c0a:	2b07      	cmp	r3, #7
   83c0c:	d82e      	bhi.n	83c6c <osc_enable+0x6c>
   83c0e:	a201      	add	r2, pc, #4	; (adr r2, 83c14 <osc_enable+0x14>)
   83c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83c14:	00083c6b 	.word	0x00083c6b
   83c18:	00083c35 	.word	0x00083c35
   83c1c:	00083c3d 	.word	0x00083c3d
   83c20:	00083c45 	.word	0x00083c45
   83c24:	00083c4d 	.word	0x00083c4d
   83c28:	00083c55 	.word	0x00083c55
   83c2c:	00083c5d 	.word	0x00083c5d
   83c30:	00083c65 	.word	0x00083c65
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83c34:	2000      	movs	r0, #0
   83c36:	4b0f      	ldr	r3, [pc, #60]	; (83c74 <osc_enable+0x74>)
   83c38:	4798      	blx	r3
		break;
   83c3a:	e017      	b.n	83c6c <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83c3c:	2001      	movs	r0, #1
   83c3e:	4b0d      	ldr	r3, [pc, #52]	; (83c74 <osc_enable+0x74>)
   83c40:	4798      	blx	r3
		break;
   83c42:	e013      	b.n	83c6c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83c44:	2000      	movs	r0, #0
   83c46:	4b0c      	ldr	r3, [pc, #48]	; (83c78 <osc_enable+0x78>)
   83c48:	4798      	blx	r3
		break;
   83c4a:	e00f      	b.n	83c6c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83c4c:	2010      	movs	r0, #16
   83c4e:	4b0a      	ldr	r3, [pc, #40]	; (83c78 <osc_enable+0x78>)
   83c50:	4798      	blx	r3
		break;
   83c52:	e00b      	b.n	83c6c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83c54:	2020      	movs	r0, #32
   83c56:	4b08      	ldr	r3, [pc, #32]	; (83c78 <osc_enable+0x78>)
   83c58:	4798      	blx	r3
		break;
   83c5a:	e007      	b.n	83c6c <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83c5c:	203e      	movs	r0, #62	; 0x3e
   83c5e:	4b07      	ldr	r3, [pc, #28]	; (83c7c <osc_enable+0x7c>)
   83c60:	4798      	blx	r3
		break;
   83c62:	e003      	b.n	83c6c <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   83c64:	4b06      	ldr	r3, [pc, #24]	; (83c80 <osc_enable+0x80>)
   83c66:	4798      	blx	r3
		break;
   83c68:	e000      	b.n	83c6c <osc_enable+0x6c>
		break;
   83c6a:	bf00      	nop
}
   83c6c:	bf00      	nop
   83c6e:	3708      	adds	r7, #8
   83c70:	46bd      	mov	sp, r7
   83c72:	bd80      	pop	{r7, pc}
   83c74:	00083179 	.word	0x00083179
   83c78:	000831e5 	.word	0x000831e5
   83c7c:	00083259 	.word	0x00083259
   83c80:	000832a9 	.word	0x000832a9

00083c84 <osc_is_ready>:
{
   83c84:	b580      	push	{r7, lr}
   83c86:	b082      	sub	sp, #8
   83c88:	af00      	add	r7, sp, #0
   83c8a:	6078      	str	r0, [r7, #4]
   83c8c:	687b      	ldr	r3, [r7, #4]
   83c8e:	2b07      	cmp	r3, #7
   83c90:	d82f      	bhi.n	83cf2 <osc_is_ready+0x6e>
   83c92:	a201      	add	r2, pc, #4	; (adr r2, 83c98 <osc_is_ready+0x14>)
   83c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83c98:	00083cb9 	.word	0x00083cb9
   83c9c:	00083cbd 	.word	0x00083cbd
   83ca0:	00083cbd 	.word	0x00083cbd
   83ca4:	00083ccf 	.word	0x00083ccf
   83ca8:	00083ccf 	.word	0x00083ccf
   83cac:	00083ccf 	.word	0x00083ccf
   83cb0:	00083ce1 	.word	0x00083ce1
   83cb4:	00083ce1 	.word	0x00083ce1
		return 1;
   83cb8:	2301      	movs	r3, #1
   83cba:	e01b      	b.n	83cf4 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   83cbc:	4b0f      	ldr	r3, [pc, #60]	; (83cfc <osc_is_ready+0x78>)
   83cbe:	4798      	blx	r3
   83cc0:	4603      	mov	r3, r0
   83cc2:	2b00      	cmp	r3, #0
   83cc4:	bf14      	ite	ne
   83cc6:	2301      	movne	r3, #1
   83cc8:	2300      	moveq	r3, #0
   83cca:	b2db      	uxtb	r3, r3
   83ccc:	e012      	b.n	83cf4 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   83cce:	4b0c      	ldr	r3, [pc, #48]	; (83d00 <osc_is_ready+0x7c>)
   83cd0:	4798      	blx	r3
   83cd2:	4603      	mov	r3, r0
   83cd4:	2b00      	cmp	r3, #0
   83cd6:	bf14      	ite	ne
   83cd8:	2301      	movne	r3, #1
   83cda:	2300      	moveq	r3, #0
   83cdc:	b2db      	uxtb	r3, r3
   83cde:	e009      	b.n	83cf4 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   83ce0:	4b08      	ldr	r3, [pc, #32]	; (83d04 <osc_is_ready+0x80>)
   83ce2:	4798      	blx	r3
   83ce4:	4603      	mov	r3, r0
   83ce6:	2b00      	cmp	r3, #0
   83ce8:	bf14      	ite	ne
   83cea:	2301      	movne	r3, #1
   83cec:	2300      	moveq	r3, #0
   83cee:	b2db      	uxtb	r3, r3
   83cf0:	e000      	b.n	83cf4 <osc_is_ready+0x70>
	return 0;
   83cf2:	2300      	movs	r3, #0
}
   83cf4:	4618      	mov	r0, r3
   83cf6:	3708      	adds	r7, #8
   83cf8:	46bd      	mov	sp, r7
   83cfa:	bd80      	pop	{r7, pc}
   83cfc:	000831b1 	.word	0x000831b1
   83d00:	00083241 	.word	0x00083241
   83d04:	000832f5 	.word	0x000832f5

00083d08 <osc_get_rate>:
{
   83d08:	b480      	push	{r7}
   83d0a:	b083      	sub	sp, #12
   83d0c:	af00      	add	r7, sp, #0
   83d0e:	6078      	str	r0, [r7, #4]
   83d10:	687b      	ldr	r3, [r7, #4]
   83d12:	2b07      	cmp	r3, #7
   83d14:	d823      	bhi.n	83d5e <osc_get_rate+0x56>
   83d16:	a201      	add	r2, pc, #4	; (adr r2, 83d1c <osc_get_rate+0x14>)
   83d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83d1c:	00083d3d 	.word	0x00083d3d
   83d20:	00083d43 	.word	0x00083d43
   83d24:	00083d47 	.word	0x00083d47
   83d28:	00083d4b 	.word	0x00083d4b
   83d2c:	00083d4f 	.word	0x00083d4f
   83d30:	00083d53 	.word	0x00083d53
   83d34:	00083d57 	.word	0x00083d57
   83d38:	00083d5b 	.word	0x00083d5b
		return OSC_SLCK_32K_RC_HZ;
   83d3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83d40:	e00e      	b.n	83d60 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   83d42:	2300      	movs	r3, #0
   83d44:	e00c      	b.n	83d60 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   83d46:	2300      	movs	r3, #0
   83d48:	e00a      	b.n	83d60 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   83d4a:	4b08      	ldr	r3, [pc, #32]	; (83d6c <osc_get_rate+0x64>)
   83d4c:	e008      	b.n	83d60 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   83d4e:	4b08      	ldr	r3, [pc, #32]	; (83d70 <osc_get_rate+0x68>)
   83d50:	e006      	b.n	83d60 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   83d52:	4b08      	ldr	r3, [pc, #32]	; (83d74 <osc_get_rate+0x6c>)
   83d54:	e004      	b.n	83d60 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   83d56:	4b07      	ldr	r3, [pc, #28]	; (83d74 <osc_get_rate+0x6c>)
   83d58:	e002      	b.n	83d60 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   83d5a:	4b06      	ldr	r3, [pc, #24]	; (83d74 <osc_get_rate+0x6c>)
   83d5c:	e000      	b.n	83d60 <osc_get_rate+0x58>
	return 0;
   83d5e:	2300      	movs	r3, #0
}
   83d60:	4618      	mov	r0, r3
   83d62:	370c      	adds	r7, #12
   83d64:	46bd      	mov	sp, r7
   83d66:	bc80      	pop	{r7}
   83d68:	4770      	bx	lr
   83d6a:	bf00      	nop
   83d6c:	003d0900 	.word	0x003d0900
   83d70:	007a1200 	.word	0x007a1200
   83d74:	00b71b00 	.word	0x00b71b00

00083d78 <osc_wait_ready>:
{
   83d78:	b580      	push	{r7, lr}
   83d7a:	b082      	sub	sp, #8
   83d7c:	af00      	add	r7, sp, #0
   83d7e:	4603      	mov	r3, r0
   83d80:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   83d82:	bf00      	nop
   83d84:	79fb      	ldrb	r3, [r7, #7]
   83d86:	4618      	mov	r0, r3
   83d88:	4b06      	ldr	r3, [pc, #24]	; (83da4 <osc_wait_ready+0x2c>)
   83d8a:	4798      	blx	r3
   83d8c:	4603      	mov	r3, r0
   83d8e:	f083 0301 	eor.w	r3, r3, #1
   83d92:	b2db      	uxtb	r3, r3
   83d94:	2b00      	cmp	r3, #0
   83d96:	d1f5      	bne.n	83d84 <osc_wait_ready+0xc>
}
   83d98:	bf00      	nop
   83d9a:	bf00      	nop
   83d9c:	3708      	adds	r7, #8
   83d9e:	46bd      	mov	sp, r7
   83da0:	bd80      	pop	{r7, pc}
   83da2:	bf00      	nop
   83da4:	00083c85 	.word	0x00083c85

00083da8 <pll_config_init>:
{
   83da8:	b580      	push	{r7, lr}
   83daa:	b086      	sub	sp, #24
   83dac:	af00      	add	r7, sp, #0
   83dae:	60f8      	str	r0, [r7, #12]
   83db0:	607a      	str	r2, [r7, #4]
   83db2:	603b      	str	r3, [r7, #0]
   83db4:	460b      	mov	r3, r1
   83db6:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   83db8:	687b      	ldr	r3, [r7, #4]
   83dba:	2b00      	cmp	r3, #0
   83dbc:	d107      	bne.n	83dce <pll_config_init+0x26>
   83dbe:	683b      	ldr	r3, [r7, #0]
   83dc0:	2b00      	cmp	r3, #0
   83dc2:	d104      	bne.n	83dce <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83dc4:	68fb      	ldr	r3, [r7, #12]
   83dc6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   83dca:	601a      	str	r2, [r3, #0]
   83dcc:	e01a      	b.n	83e04 <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   83dce:	7afb      	ldrb	r3, [r7, #11]
   83dd0:	4618      	mov	r0, r3
   83dd2:	4b0e      	ldr	r3, [pc, #56]	; (83e0c <pll_config_init+0x64>)
   83dd4:	4798      	blx	r3
   83dd6:	4602      	mov	r2, r0
   83dd8:	687b      	ldr	r3, [r7, #4]
   83dda:	fbb2 f3f3 	udiv	r3, r2, r3
   83dde:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   83de0:	697b      	ldr	r3, [r7, #20]
   83de2:	683a      	ldr	r2, [r7, #0]
   83de4:	fb02 f303 	mul.w	r3, r2, r3
   83de8:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83dea:	683b      	ldr	r3, [r7, #0]
   83dec:	3b01      	subs	r3, #1
   83dee:	041a      	lsls	r2, r3, #16
   83df0:	4b07      	ldr	r3, [pc, #28]	; (83e10 <pll_config_init+0x68>)
   83df2:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83df4:	687a      	ldr	r2, [r7, #4]
   83df6:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83df8:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83dfa:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83dfe:	68fb      	ldr	r3, [r7, #12]
   83e00:	601a      	str	r2, [r3, #0]
}
   83e02:	bf00      	nop
   83e04:	bf00      	nop
   83e06:	3718      	adds	r7, #24
   83e08:	46bd      	mov	sp, r7
   83e0a:	bd80      	pop	{r7, pc}
   83e0c:	00083d09 	.word	0x00083d09
   83e10:	07ff0000 	.word	0x07ff0000

00083e14 <pll_enable>:
{
   83e14:	b580      	push	{r7, lr}
   83e16:	b082      	sub	sp, #8
   83e18:	af00      	add	r7, sp, #0
   83e1a:	6078      	str	r0, [r7, #4]
   83e1c:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   83e1e:	683b      	ldr	r3, [r7, #0]
   83e20:	2b00      	cmp	r3, #0
   83e22:	d108      	bne.n	83e36 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83e24:	4b09      	ldr	r3, [pc, #36]	; (83e4c <pll_enable+0x38>)
   83e26:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83e28:	687b      	ldr	r3, [r7, #4]
   83e2a:	681b      	ldr	r3, [r3, #0]
   83e2c:	4a08      	ldr	r2, [pc, #32]	; (83e50 <pll_enable+0x3c>)
   83e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83e32:	6293      	str	r3, [r2, #40]	; 0x28
}
   83e34:	e005      	b.n	83e42 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83e36:	687b      	ldr	r3, [r7, #4]
   83e38:	681b      	ldr	r3, [r3, #0]
   83e3a:	4a05      	ldr	r2, [pc, #20]	; (83e50 <pll_enable+0x3c>)
   83e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83e40:	61d3      	str	r3, [r2, #28]
}
   83e42:	bf00      	nop
   83e44:	3708      	adds	r7, #8
   83e46:	46bd      	mov	sp, r7
   83e48:	bd80      	pop	{r7, pc}
   83e4a:	bf00      	nop
   83e4c:	00083365 	.word	0x00083365
   83e50:	400e0400 	.word	0x400e0400

00083e54 <pll_is_locked>:
{
   83e54:	b580      	push	{r7, lr}
   83e56:	b082      	sub	sp, #8
   83e58:	af00      	add	r7, sp, #0
   83e5a:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   83e5c:	687b      	ldr	r3, [r7, #4]
   83e5e:	2b00      	cmp	r3, #0
   83e60:	d103      	bne.n	83e6a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83e62:	4b05      	ldr	r3, [pc, #20]	; (83e78 <pll_is_locked+0x24>)
   83e64:	4798      	blx	r3
   83e66:	4603      	mov	r3, r0
   83e68:	e002      	b.n	83e70 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   83e6a:	4b04      	ldr	r3, [pc, #16]	; (83e7c <pll_is_locked+0x28>)
   83e6c:	4798      	blx	r3
   83e6e:	4603      	mov	r3, r0
}
   83e70:	4618      	mov	r0, r3
   83e72:	3708      	adds	r7, #8
   83e74:	46bd      	mov	sp, r7
   83e76:	bd80      	pop	{r7, pc}
   83e78:	0008337d 	.word	0x0008337d
   83e7c:	000833b1 	.word	0x000833b1

00083e80 <pll_enable_source>:
{
   83e80:	b580      	push	{r7, lr}
   83e82:	b082      	sub	sp, #8
   83e84:	af00      	add	r7, sp, #0
   83e86:	4603      	mov	r3, r0
   83e88:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   83e8a:	79fb      	ldrb	r3, [r7, #7]
   83e8c:	3b03      	subs	r3, #3
   83e8e:	2b04      	cmp	r3, #4
   83e90:	d808      	bhi.n	83ea4 <pll_enable_source+0x24>
		osc_enable(e_src);
   83e92:	79fb      	ldrb	r3, [r7, #7]
   83e94:	4618      	mov	r0, r3
   83e96:	4b06      	ldr	r3, [pc, #24]	; (83eb0 <pll_enable_source+0x30>)
   83e98:	4798      	blx	r3
		osc_wait_ready(e_src);
   83e9a:	79fb      	ldrb	r3, [r7, #7]
   83e9c:	4618      	mov	r0, r3
   83e9e:	4b05      	ldr	r3, [pc, #20]	; (83eb4 <pll_enable_source+0x34>)
   83ea0:	4798      	blx	r3
		break;
   83ea2:	e000      	b.n	83ea6 <pll_enable_source+0x26>
		break;
   83ea4:	bf00      	nop
}
   83ea6:	bf00      	nop
   83ea8:	3708      	adds	r7, #8
   83eaa:	46bd      	mov	sp, r7
   83eac:	bd80      	pop	{r7, pc}
   83eae:	bf00      	nop
   83eb0:	00083c01 	.word	0x00083c01
   83eb4:	00083d79 	.word	0x00083d79

00083eb8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83eb8:	b580      	push	{r7, lr}
   83eba:	b082      	sub	sp, #8
   83ebc:	af00      	add	r7, sp, #0
   83ebe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83ec0:	bf00      	nop
   83ec2:	6878      	ldr	r0, [r7, #4]
   83ec4:	4b04      	ldr	r3, [pc, #16]	; (83ed8 <pll_wait_for_lock+0x20>)
   83ec6:	4798      	blx	r3
   83ec8:	4603      	mov	r3, r0
   83eca:	2b00      	cmp	r3, #0
   83ecc:	d0f9      	beq.n	83ec2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83ece:	2300      	movs	r3, #0
}
   83ed0:	4618      	mov	r0, r3
   83ed2:	3708      	adds	r7, #8
   83ed4:	46bd      	mov	sp, r7
   83ed6:	bd80      	pop	{r7, pc}
   83ed8:	00083e55 	.word	0x00083e55

00083edc <sysclk_get_main_hz>:
{
   83edc:	b580      	push	{r7, lr}
   83ede:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83ee0:	2006      	movs	r0, #6
   83ee2:	4b03      	ldr	r3, [pc, #12]	; (83ef0 <sysclk_get_main_hz+0x14>)
   83ee4:	4798      	blx	r3
   83ee6:	4603      	mov	r3, r0
   83ee8:	011b      	lsls	r3, r3, #4
}
   83eea:	4618      	mov	r0, r3
   83eec:	bd80      	pop	{r7, pc}
   83eee:	bf00      	nop
   83ef0:	00083d09 	.word	0x00083d09

00083ef4 <sysclk_get_cpu_hz>:
{
   83ef4:	b580      	push	{r7, lr}
   83ef6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83ef8:	4b02      	ldr	r3, [pc, #8]	; (83f04 <sysclk_get_cpu_hz+0x10>)
   83efa:	4798      	blx	r3
   83efc:	4603      	mov	r3, r0
   83efe:	085b      	lsrs	r3, r3, #1
}
   83f00:	4618      	mov	r0, r3
   83f02:	bd80      	pop	{r7, pc}
   83f04:	00083edd 	.word	0x00083edd

00083f08 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83f08:	b590      	push	{r4, r7, lr}
   83f0a:	b083      	sub	sp, #12
   83f0c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   83f0e:	2006      	movs	r0, #6
   83f10:	4b09      	ldr	r3, [pc, #36]	; (83f38 <sysclk_enable_usb+0x30>)
   83f12:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   83f14:	1d38      	adds	r0, r7, #4
   83f16:	2300      	movs	r3, #0
   83f18:	2200      	movs	r2, #0
   83f1a:	2106      	movs	r1, #6
   83f1c:	4c07      	ldr	r4, [pc, #28]	; (83f3c <sysclk_enable_usb+0x34>)
   83f1e:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   83f20:	1d3b      	adds	r3, r7, #4
   83f22:	2101      	movs	r1, #1
   83f24:	4618      	mov	r0, r3
   83f26:	4b06      	ldr	r3, [pc, #24]	; (83f40 <sysclk_enable_usb+0x38>)
   83f28:	4798      	blx	r3
	pll_wait_for_lock(1);
   83f2a:	2001      	movs	r0, #1
   83f2c:	4b05      	ldr	r3, [pc, #20]	; (83f44 <sysclk_enable_usb+0x3c>)
   83f2e:	4798      	blx	r3
}
   83f30:	bf00      	nop
   83f32:	370c      	adds	r7, #12
   83f34:	46bd      	mov	sp, r7
   83f36:	bd90      	pop	{r4, r7, pc}
   83f38:	00083e81 	.word	0x00083e81
   83f3c:	00083da9 	.word	0x00083da9
   83f40:	00083e15 	.word	0x00083e15
   83f44:	00083eb9 	.word	0x00083eb9

00083f48 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83f48:	b590      	push	{r4, r7, lr}
   83f4a:	b083      	sub	sp, #12
   83f4c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83f4e:	4816      	ldr	r0, [pc, #88]	; (83fa8 <sysclk_init+0x60>)
   83f50:	4b16      	ldr	r3, [pc, #88]	; (83fac <sysclk_init+0x64>)
   83f52:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83f54:	2006      	movs	r0, #6
   83f56:	4b16      	ldr	r3, [pc, #88]	; (83fb0 <sysclk_init+0x68>)
   83f58:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83f5a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83f5e:	4b15      	ldr	r3, [pc, #84]	; (83fb4 <sysclk_init+0x6c>)
   83f60:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83f62:	bf00      	nop
   83f64:	4b14      	ldr	r3, [pc, #80]	; (83fb8 <sysclk_init+0x70>)
   83f66:	4798      	blx	r3
   83f68:	4603      	mov	r3, r0
   83f6a:	2b00      	cmp	r3, #0
   83f6c:	d0fa      	beq.n	83f64 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   83f6e:	1d38      	adds	r0, r7, #4
   83f70:	2310      	movs	r3, #16
   83f72:	2201      	movs	r2, #1
   83f74:	2106      	movs	r1, #6
   83f76:	4c11      	ldr	r4, [pc, #68]	; (83fbc <sysclk_init+0x74>)
   83f78:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83f7a:	1d3b      	adds	r3, r7, #4
   83f7c:	2100      	movs	r1, #0
   83f7e:	4618      	mov	r0, r3
   83f80:	4b0f      	ldr	r3, [pc, #60]	; (83fc0 <sysclk_init+0x78>)
   83f82:	4798      	blx	r3
		pll_wait_for_lock(0);
   83f84:	2000      	movs	r0, #0
   83f86:	4b0f      	ldr	r3, [pc, #60]	; (83fc4 <sysclk_init+0x7c>)
   83f88:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83f8a:	2010      	movs	r0, #16
   83f8c:	4b0e      	ldr	r3, [pc, #56]	; (83fc8 <sysclk_init+0x80>)
   83f8e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83f90:	4b0e      	ldr	r3, [pc, #56]	; (83fcc <sysclk_init+0x84>)
   83f92:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83f94:	4b0e      	ldr	r3, [pc, #56]	; (83fd0 <sysclk_init+0x88>)
   83f96:	4798      	blx	r3
   83f98:	4603      	mov	r3, r0
   83f9a:	4618      	mov	r0, r3
   83f9c:	4b03      	ldr	r3, [pc, #12]	; (83fac <sysclk_init+0x64>)
   83f9e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83fa0:	bf00      	nop
   83fa2:	370c      	adds	r7, #12
   83fa4:	46bd      	mov	sp, r7
   83fa6:	bd90      	pop	{r4, r7, pc}
   83fa8:	05b8d800 	.word	0x05b8d800
   83fac:	200001bd 	.word	0x200001bd
   83fb0:	00083e81 	.word	0x00083e81
   83fb4:	00083325 	.word	0x00083325
   83fb8:	0008330d 	.word	0x0008330d
   83fbc:	00083da9 	.word	0x00083da9
   83fc0:	00083e15 	.word	0x00083e15
   83fc4:	00083eb9 	.word	0x00083eb9
   83fc8:	000830f9 	.word	0x000830f9
   83fcc:	00083fd5 	.word	0x00083fd5
   83fd0:	00083ef5 	.word	0x00083ef5

00083fd4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83fd4:	b480      	push	{r7}
   83fd6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83fd8:	4b58      	ldr	r3, [pc, #352]	; (8413c <SystemCoreClockUpdate+0x168>)
   83fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83fdc:	f003 0303 	and.w	r3, r3, #3
   83fe0:	2b03      	cmp	r3, #3
   83fe2:	f200 808c 	bhi.w	840fe <SystemCoreClockUpdate+0x12a>
   83fe6:	2b02      	cmp	r3, #2
   83fe8:	d23f      	bcs.n	8406a <SystemCoreClockUpdate+0x96>
   83fea:	2b00      	cmp	r3, #0
   83fec:	d002      	beq.n	83ff4 <SystemCoreClockUpdate+0x20>
   83fee:	2b01      	cmp	r3, #1
   83ff0:	d010      	beq.n	84014 <SystemCoreClockUpdate+0x40>
   83ff2:	e084      	b.n	840fe <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83ff4:	4b52      	ldr	r3, [pc, #328]	; (84140 <SystemCoreClockUpdate+0x16c>)
   83ff6:	695b      	ldr	r3, [r3, #20]
   83ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83ffc:	2b00      	cmp	r3, #0
   83ffe:	d004      	beq.n	8400a <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   84000:	4b50      	ldr	r3, [pc, #320]	; (84144 <SystemCoreClockUpdate+0x170>)
   84002:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84006:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   84008:	e079      	b.n	840fe <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8400a:	4b4e      	ldr	r3, [pc, #312]	; (84144 <SystemCoreClockUpdate+0x170>)
   8400c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   84010:	601a      	str	r2, [r3, #0]
		break;
   84012:	e074      	b.n	840fe <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84014:	4b49      	ldr	r3, [pc, #292]	; (8413c <SystemCoreClockUpdate+0x168>)
   84016:	6a1b      	ldr	r3, [r3, #32]
   84018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8401c:	2b00      	cmp	r3, #0
   8401e:	d003      	beq.n	84028 <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84020:	4b48      	ldr	r3, [pc, #288]	; (84144 <SystemCoreClockUpdate+0x170>)
   84022:	4a49      	ldr	r2, [pc, #292]	; (84148 <SystemCoreClockUpdate+0x174>)
   84024:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   84026:	e06a      	b.n	840fe <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84028:	4b46      	ldr	r3, [pc, #280]	; (84144 <SystemCoreClockUpdate+0x170>)
   8402a:	4a48      	ldr	r2, [pc, #288]	; (8414c <SystemCoreClockUpdate+0x178>)
   8402c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8402e:	4b43      	ldr	r3, [pc, #268]	; (8413c <SystemCoreClockUpdate+0x168>)
   84030:	6a1b      	ldr	r3, [r3, #32]
   84032:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84036:	2b20      	cmp	r3, #32
   84038:	d00b      	beq.n	84052 <SystemCoreClockUpdate+0x7e>
   8403a:	2b20      	cmp	r3, #32
   8403c:	d811      	bhi.n	84062 <SystemCoreClockUpdate+0x8e>
   8403e:	2b00      	cmp	r3, #0
   84040:	d011      	beq.n	84066 <SystemCoreClockUpdate+0x92>
   84042:	2b10      	cmp	r3, #16
   84044:	d10d      	bne.n	84062 <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   84046:	4b3f      	ldr	r3, [pc, #252]	; (84144 <SystemCoreClockUpdate+0x170>)
   84048:	681b      	ldr	r3, [r3, #0]
   8404a:	005b      	lsls	r3, r3, #1
   8404c:	4a3d      	ldr	r2, [pc, #244]	; (84144 <SystemCoreClockUpdate+0x170>)
   8404e:	6013      	str	r3, [r2, #0]
				break;
   84050:	e00a      	b.n	84068 <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   84052:	4b3c      	ldr	r3, [pc, #240]	; (84144 <SystemCoreClockUpdate+0x170>)
   84054:	681a      	ldr	r2, [r3, #0]
   84056:	4613      	mov	r3, r2
   84058:	005b      	lsls	r3, r3, #1
   8405a:	4413      	add	r3, r2
   8405c:	4a39      	ldr	r2, [pc, #228]	; (84144 <SystemCoreClockUpdate+0x170>)
   8405e:	6013      	str	r3, [r2, #0]
				break;
   84060:	e002      	b.n	84068 <SystemCoreClockUpdate+0x94>
				break;
   84062:	bf00      	nop
   84064:	e04b      	b.n	840fe <SystemCoreClockUpdate+0x12a>
				break;
   84066:	bf00      	nop
		break;
   84068:	e049      	b.n	840fe <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8406a:	4b34      	ldr	r3, [pc, #208]	; (8413c <SystemCoreClockUpdate+0x168>)
   8406c:	6a1b      	ldr	r3, [r3, #32]
   8406e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84072:	2b00      	cmp	r3, #0
   84074:	d003      	beq.n	8407e <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84076:	4b33      	ldr	r3, [pc, #204]	; (84144 <SystemCoreClockUpdate+0x170>)
   84078:	4a33      	ldr	r2, [pc, #204]	; (84148 <SystemCoreClockUpdate+0x174>)
   8407a:	601a      	str	r2, [r3, #0]
   8407c:	e01f      	b.n	840be <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8407e:	4b31      	ldr	r3, [pc, #196]	; (84144 <SystemCoreClockUpdate+0x170>)
   84080:	4a32      	ldr	r2, [pc, #200]	; (8414c <SystemCoreClockUpdate+0x178>)
   84082:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84084:	4b2d      	ldr	r3, [pc, #180]	; (8413c <SystemCoreClockUpdate+0x168>)
   84086:	6a1b      	ldr	r3, [r3, #32]
   84088:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8408c:	2b20      	cmp	r3, #32
   8408e:	d00b      	beq.n	840a8 <SystemCoreClockUpdate+0xd4>
   84090:	2b20      	cmp	r3, #32
   84092:	d811      	bhi.n	840b8 <SystemCoreClockUpdate+0xe4>
   84094:	2b00      	cmp	r3, #0
   84096:	d011      	beq.n	840bc <SystemCoreClockUpdate+0xe8>
   84098:	2b10      	cmp	r3, #16
   8409a:	d10d      	bne.n	840b8 <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8409c:	4b29      	ldr	r3, [pc, #164]	; (84144 <SystemCoreClockUpdate+0x170>)
   8409e:	681b      	ldr	r3, [r3, #0]
   840a0:	005b      	lsls	r3, r3, #1
   840a2:	4a28      	ldr	r2, [pc, #160]	; (84144 <SystemCoreClockUpdate+0x170>)
   840a4:	6013      	str	r3, [r2, #0]
				break;
   840a6:	e00a      	b.n	840be <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   840a8:	4b26      	ldr	r3, [pc, #152]	; (84144 <SystemCoreClockUpdate+0x170>)
   840aa:	681a      	ldr	r2, [r3, #0]
   840ac:	4613      	mov	r3, r2
   840ae:	005b      	lsls	r3, r3, #1
   840b0:	4413      	add	r3, r2
   840b2:	4a24      	ldr	r2, [pc, #144]	; (84144 <SystemCoreClockUpdate+0x170>)
   840b4:	6013      	str	r3, [r2, #0]
				break;
   840b6:	e002      	b.n	840be <SystemCoreClockUpdate+0xea>
			default:
				break;
   840b8:	bf00      	nop
   840ba:	e000      	b.n	840be <SystemCoreClockUpdate+0xea>
				break;
   840bc:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   840be:	4b1f      	ldr	r3, [pc, #124]	; (8413c <SystemCoreClockUpdate+0x168>)
   840c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   840c2:	f003 0303 	and.w	r3, r3, #3
   840c6:	2b02      	cmp	r3, #2
   840c8:	d115      	bne.n	840f6 <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   840ca:	4b1c      	ldr	r3, [pc, #112]	; (8413c <SystemCoreClockUpdate+0x168>)
   840cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   840ce:	0c1b      	lsrs	r3, r3, #16
   840d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   840d4:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   840d6:	4a1b      	ldr	r2, [pc, #108]	; (84144 <SystemCoreClockUpdate+0x170>)
   840d8:	6812      	ldr	r2, [r2, #0]
   840da:	fb02 f303 	mul.w	r3, r2, r3
   840de:	4a19      	ldr	r2, [pc, #100]	; (84144 <SystemCoreClockUpdate+0x170>)
   840e0:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   840e2:	4b16      	ldr	r3, [pc, #88]	; (8413c <SystemCoreClockUpdate+0x168>)
   840e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   840e6:	b2db      	uxtb	r3, r3
   840e8:	4a16      	ldr	r2, [pc, #88]	; (84144 <SystemCoreClockUpdate+0x170>)
   840ea:	6812      	ldr	r2, [r2, #0]
   840ec:	fbb2 f3f3 	udiv	r3, r2, r3
   840f0:	4a14      	ldr	r2, [pc, #80]	; (84144 <SystemCoreClockUpdate+0x170>)
   840f2:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   840f4:	e002      	b.n	840fc <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   840f6:	4b13      	ldr	r3, [pc, #76]	; (84144 <SystemCoreClockUpdate+0x170>)
   840f8:	4a15      	ldr	r2, [pc, #84]	; (84150 <SystemCoreClockUpdate+0x17c>)
   840fa:	601a      	str	r2, [r3, #0]
		break;
   840fc:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   840fe:	4b0f      	ldr	r3, [pc, #60]	; (8413c <SystemCoreClockUpdate+0x168>)
   84100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84102:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84106:	2b70      	cmp	r3, #112	; 0x70
   84108:	d108      	bne.n	8411c <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   8410a:	4b0e      	ldr	r3, [pc, #56]	; (84144 <SystemCoreClockUpdate+0x170>)
   8410c:	681b      	ldr	r3, [r3, #0]
   8410e:	4a11      	ldr	r2, [pc, #68]	; (84154 <SystemCoreClockUpdate+0x180>)
   84110:	fba2 2303 	umull	r2, r3, r2, r3
   84114:	085b      	lsrs	r3, r3, #1
   84116:	4a0b      	ldr	r2, [pc, #44]	; (84144 <SystemCoreClockUpdate+0x170>)
   84118:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   8411a:	e00a      	b.n	84132 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8411c:	4b07      	ldr	r3, [pc, #28]	; (8413c <SystemCoreClockUpdate+0x168>)
   8411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84120:	091b      	lsrs	r3, r3, #4
   84122:	f003 0307 	and.w	r3, r3, #7
   84126:	4a07      	ldr	r2, [pc, #28]	; (84144 <SystemCoreClockUpdate+0x170>)
   84128:	6812      	ldr	r2, [r2, #0]
   8412a:	fa22 f303 	lsr.w	r3, r2, r3
   8412e:	4a05      	ldr	r2, [pc, #20]	; (84144 <SystemCoreClockUpdate+0x170>)
   84130:	6013      	str	r3, [r2, #0]
}
   84132:	bf00      	nop
   84134:	46bd      	mov	sp, r7
   84136:	bc80      	pop	{r7}
   84138:	4770      	bx	lr
   8413a:	bf00      	nop
   8413c:	400e0400 	.word	0x400e0400
   84140:	400e1210 	.word	0x400e1210
   84144:	200003cc 	.word	0x200003cc
   84148:	00b71b00 	.word	0x00b71b00
   8414c:	003d0900 	.word	0x003d0900
   84150:	0e4e1c00 	.word	0x0e4e1c00
   84154:	aaaaaaab 	.word	0xaaaaaaab

00084158 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   84158:	b580      	push	{r7, lr}
   8415a:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   8415c:	4b0b      	ldr	r3, [pc, #44]	; (8418c <udi_vendor_enable+0x34>)
   8415e:	4798      	blx	r3
   84160:	4603      	mov	r3, r0
   84162:	78da      	ldrb	r2, [r3, #3]
   84164:	4b0a      	ldr	r3, [pc, #40]	; (84190 <udi_vendor_enable+0x38>)
   84166:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   84168:	4b09      	ldr	r3, [pc, #36]	; (84190 <udi_vendor_enable+0x38>)
   8416a:	781b      	ldrb	r3, [r3, #0]
   8416c:	2b00      	cmp	r3, #0
   8416e:	d109      	bne.n	84184 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84170:	4b08      	ldr	r3, [pc, #32]	; (84194 <udi_vendor_enable+0x3c>)
   84172:	4798      	blx	r3
   84174:	4603      	mov	r3, r0
   84176:	f083 0301 	eor.w	r3, r3, #1
   8417a:	b2db      	uxtb	r3, r3
   8417c:	2b00      	cmp	r3, #0
   8417e:	d001      	beq.n	84184 <udi_vendor_enable+0x2c>
			return false;
   84180:	2300      	movs	r3, #0
   84182:	e000      	b.n	84186 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   84184:	2301      	movs	r3, #1
}
   84186:	4618      	mov	r0, r3
   84188:	bd80      	pop	{r7, pc}
   8418a:	bf00      	nop
   8418c:	0008197d 	.word	0x0008197d
   84190:	20000f64 	.word	0x20000f64
   84194:	00080fcd 	.word	0x00080fcd

00084198 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   84198:	b580      	push	{r7, lr}
   8419a:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   8419c:	4b03      	ldr	r3, [pc, #12]	; (841ac <udi_vendor_disable+0x14>)
   8419e:	781b      	ldrb	r3, [r3, #0]
   841a0:	2b00      	cmp	r3, #0
   841a2:	d101      	bne.n	841a8 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   841a4:	4b02      	ldr	r3, [pc, #8]	; (841b0 <udi_vendor_disable+0x18>)
   841a6:	4798      	blx	r3
	}
}
   841a8:	bf00      	nop
   841aa:	bd80      	pop	{r7, pc}
   841ac:	20000f64 	.word	0x20000f64
   841b0:	00081005 	.word	0x00081005

000841b4 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   841b4:	b580      	push	{r7, lr}
   841b6:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   841b8:	4b10      	ldr	r3, [pc, #64]	; (841fc <udi_vendor_setup+0x48>)
   841ba:	781b      	ldrb	r3, [r3, #0]
   841bc:	b25b      	sxtb	r3, r3
   841be:	2b00      	cmp	r3, #0
   841c0:	da09      	bge.n	841d6 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   841c2:	4b0e      	ldr	r3, [pc, #56]	; (841fc <udi_vendor_setup+0x48>)
   841c4:	781b      	ldrb	r3, [r3, #0]
   841c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
   841ca:	2b40      	cmp	r3, #64	; 0x40
   841cc:	d103      	bne.n	841d6 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   841ce:	4b0c      	ldr	r3, [pc, #48]	; (84200 <udi_vendor_setup+0x4c>)
   841d0:	4798      	blx	r3
   841d2:	4603      	mov	r3, r0
   841d4:	e00f      	b.n	841f6 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   841d6:	4b09      	ldr	r3, [pc, #36]	; (841fc <udi_vendor_setup+0x48>)
   841d8:	781b      	ldrb	r3, [r3, #0]
   841da:	b25b      	sxtb	r3, r3
   841dc:	2b00      	cmp	r3, #0
   841de:	db09      	blt.n	841f4 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   841e0:	4b06      	ldr	r3, [pc, #24]	; (841fc <udi_vendor_setup+0x48>)
   841e2:	781b      	ldrb	r3, [r3, #0]
   841e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
   841e8:	2b40      	cmp	r3, #64	; 0x40
   841ea:	d103      	bne.n	841f4 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   841ec:	4b05      	ldr	r3, [pc, #20]	; (84204 <udi_vendor_setup+0x50>)
   841ee:	4798      	blx	r3
   841f0:	4603      	mov	r3, r0
   841f2:	e000      	b.n	841f6 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   841f4:	2300      	movs	r3, #0
}
   841f6:	4618      	mov	r0, r3
   841f8:	bd80      	pop	{r7, pc}
   841fa:	bf00      	nop
   841fc:	20001468 	.word	0x20001468
   84200:	00081085 	.word	0x00081085
   84204:	0008101d 	.word	0x0008101d

00084208 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   84208:	b480      	push	{r7}
   8420a:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   8420c:	4b02      	ldr	r3, [pc, #8]	; (84218 <udi_vendor_getsetting+0x10>)
   8420e:	781b      	ldrb	r3, [r3, #0]
}
   84210:	4618      	mov	r0, r3
   84212:	46bd      	mov	sp, r7
   84214:	bc80      	pop	{r7}
   84216:	4770      	bx	lr
   84218:	20000f64 	.word	0x20000f64

0008421c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8421c:	b590      	push	{r4, r7, lr}
   8421e:	b087      	sub	sp, #28
   84220:	af02      	add	r7, sp, #8
   84222:	60f8      	str	r0, [r7, #12]
   84224:	60b9      	str	r1, [r7, #8]
   84226:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84228:	687b      	ldr	r3, [r7, #4]
   8422a:	9300      	str	r3, [sp, #0]
   8422c:	68bb      	ldr	r3, [r7, #8]
   8422e:	68fa      	ldr	r2, [r7, #12]
   84230:	2100      	movs	r1, #0
   84232:	2081      	movs	r0, #129	; 0x81
   84234:	4c03      	ldr	r4, [pc, #12]	; (84244 <udi_vendor_bulk_in_run+0x28>)
   84236:	47a0      	blx	r4
   84238:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   8423a:	4618      	mov	r0, r3
   8423c:	3714      	adds	r7, #20
   8423e:	46bd      	mov	sp, r7
   84240:	bd90      	pop	{r4, r7, pc}
   84242:	bf00      	nop
   84244:	00084f5d 	.word	0x00084f5d

00084248 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84248:	b590      	push	{r4, r7, lr}
   8424a:	b087      	sub	sp, #28
   8424c:	af02      	add	r7, sp, #8
   8424e:	60f8      	str	r0, [r7, #12]
   84250:	60b9      	str	r1, [r7, #8]
   84252:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84254:	687b      	ldr	r3, [r7, #4]
   84256:	9300      	str	r3, [sp, #0]
   84258:	68bb      	ldr	r3, [r7, #8]
   8425a:	68fa      	ldr	r2, [r7, #12]
   8425c:	2100      	movs	r1, #0
   8425e:	2002      	movs	r0, #2
   84260:	4c03      	ldr	r4, [pc, #12]	; (84270 <udi_vendor_bulk_out_run+0x28>)
   84262:	47a0      	blx	r4
   84264:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84266:	4618      	mov	r0, r3
   84268:	3714      	adds	r7, #20
   8426a:	46bd      	mov	sp, r7
   8426c:	bd90      	pop	{r4, r7, pc}
   8426e:	bf00      	nop
   84270:	00084f5d 	.word	0x00084f5d

00084274 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   84274:	b480      	push	{r7}
   84276:	b083      	sub	sp, #12
   84278:	af00      	add	r7, sp, #0
   8427a:	4603      	mov	r3, r0
   8427c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8427e:	79fb      	ldrb	r3, [r7, #7]
   84280:	f003 031f 	and.w	r3, r3, #31
   84284:	2201      	movs	r2, #1
   84286:	fa02 f103 	lsl.w	r1, r2, r3
   8428a:	4a05      	ldr	r2, [pc, #20]	; (842a0 <NVIC_EnableIRQ+0x2c>)
   8428c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84290:	095b      	lsrs	r3, r3, #5
   84292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   84296:	bf00      	nop
   84298:	370c      	adds	r7, #12
   8429a:	46bd      	mov	sp, r7
   8429c:	bc80      	pop	{r7}
   8429e:	4770      	bx	lr
   842a0:	e000e100 	.word	0xe000e100

000842a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   842a4:	b480      	push	{r7}
   842a6:	b083      	sub	sp, #12
   842a8:	af00      	add	r7, sp, #0
   842aa:	4603      	mov	r3, r0
   842ac:	6039      	str	r1, [r7, #0]
   842ae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   842b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   842b4:	2b00      	cmp	r3, #0
   842b6:	da0b      	bge.n	842d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   842b8:	683b      	ldr	r3, [r7, #0]
   842ba:	b2da      	uxtb	r2, r3
   842bc:	490c      	ldr	r1, [pc, #48]	; (842f0 <NVIC_SetPriority+0x4c>)
   842be:	79fb      	ldrb	r3, [r7, #7]
   842c0:	f003 030f 	and.w	r3, r3, #15
   842c4:	3b04      	subs	r3, #4
   842c6:	0112      	lsls	r2, r2, #4
   842c8:	b2d2      	uxtb	r2, r2
   842ca:	440b      	add	r3, r1
   842cc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   842ce:	e009      	b.n	842e4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   842d0:	683b      	ldr	r3, [r7, #0]
   842d2:	b2da      	uxtb	r2, r3
   842d4:	4907      	ldr	r1, [pc, #28]	; (842f4 <NVIC_SetPriority+0x50>)
   842d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   842da:	0112      	lsls	r2, r2, #4
   842dc:	b2d2      	uxtb	r2, r2
   842de:	440b      	add	r3, r1
   842e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   842e4:	bf00      	nop
   842e6:	370c      	adds	r7, #12
   842e8:	46bd      	mov	sp, r7
   842ea:	bc80      	pop	{r7}
   842ec:	4770      	bx	lr
   842ee:	bf00      	nop
   842f0:	e000ed00 	.word	0xe000ed00
   842f4:	e000e100 	.word	0xe000e100

000842f8 <cpu_irq_save>:
{
   842f8:	b480      	push	{r7}
   842fa:	b083      	sub	sp, #12
   842fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   842fe:	f3ef 8310 	mrs	r3, PRIMASK
   84302:	603b      	str	r3, [r7, #0]
  return(result);
   84304:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   84306:	2b00      	cmp	r3, #0
   84308:	bf0c      	ite	eq
   8430a:	2301      	moveq	r3, #1
   8430c:	2300      	movne	r3, #0
   8430e:	b2db      	uxtb	r3, r3
   84310:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   84312:	b672      	cpsid	i
}
   84314:	bf00      	nop
  __ASM volatile ("dmb");
   84316:	f3bf 8f5f 	dmb	sy
}
   8431a:	bf00      	nop
	cpu_irq_disable();
   8431c:	4b04      	ldr	r3, [pc, #16]	; (84330 <cpu_irq_save+0x38>)
   8431e:	2200      	movs	r2, #0
   84320:	701a      	strb	r2, [r3, #0]
	return flags;
   84322:	687b      	ldr	r3, [r7, #4]
}
   84324:	4618      	mov	r0, r3
   84326:	370c      	adds	r7, #12
   84328:	46bd      	mov	sp, r7
   8432a:	bc80      	pop	{r7}
   8432c:	4770      	bx	lr
   8432e:	bf00      	nop
   84330:	200003ca 	.word	0x200003ca

00084334 <cpu_irq_is_enabled_flags>:
{
   84334:	b480      	push	{r7}
   84336:	b083      	sub	sp, #12
   84338:	af00      	add	r7, sp, #0
   8433a:	6078      	str	r0, [r7, #4]
	return (flags);
   8433c:	687b      	ldr	r3, [r7, #4]
   8433e:	2b00      	cmp	r3, #0
   84340:	bf14      	ite	ne
   84342:	2301      	movne	r3, #1
   84344:	2300      	moveq	r3, #0
   84346:	b2db      	uxtb	r3, r3
}
   84348:	4618      	mov	r0, r3
   8434a:	370c      	adds	r7, #12
   8434c:	46bd      	mov	sp, r7
   8434e:	bc80      	pop	{r7}
   84350:	4770      	bx	lr
   84352:	0000      	movs	r0, r0

00084354 <cpu_irq_restore>:
{
   84354:	b580      	push	{r7, lr}
   84356:	b082      	sub	sp, #8
   84358:	af00      	add	r7, sp, #0
   8435a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   8435c:	6878      	ldr	r0, [r7, #4]
   8435e:	4b08      	ldr	r3, [pc, #32]	; (84380 <cpu_irq_restore+0x2c>)
   84360:	4798      	blx	r3
   84362:	4603      	mov	r3, r0
   84364:	2b00      	cmp	r3, #0
   84366:	d007      	beq.n	84378 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   84368:	4b06      	ldr	r3, [pc, #24]	; (84384 <cpu_irq_restore+0x30>)
   8436a:	2201      	movs	r2, #1
   8436c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8436e:	f3bf 8f5f 	dmb	sy
}
   84372:	bf00      	nop
  __ASM volatile ("cpsie i");
   84374:	b662      	cpsie	i
}
   84376:	bf00      	nop
}
   84378:	bf00      	nop
   8437a:	3708      	adds	r7, #8
   8437c:	46bd      	mov	sp, r7
   8437e:	bd80      	pop	{r7, pc}
   84380:	00084335 	.word	0x00084335
   84384:	200003ca 	.word	0x200003ca

00084388 <sleepmgr_lock_mode>:
{
   84388:	b580      	push	{r7, lr}
   8438a:	b084      	sub	sp, #16
   8438c:	af00      	add	r7, sp, #0
   8438e:	4603      	mov	r3, r0
   84390:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   84392:	4b08      	ldr	r3, [pc, #32]	; (843b4 <sleepmgr_lock_mode+0x2c>)
   84394:	4798      	blx	r3
   84396:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   84398:	79fb      	ldrb	r3, [r7, #7]
   8439a:	4a07      	ldr	r2, [pc, #28]	; (843b8 <sleepmgr_lock_mode+0x30>)
   8439c:	5cd2      	ldrb	r2, [r2, r3]
   8439e:	3201      	adds	r2, #1
   843a0:	b2d1      	uxtb	r1, r2
   843a2:	4a05      	ldr	r2, [pc, #20]	; (843b8 <sleepmgr_lock_mode+0x30>)
   843a4:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   843a6:	68f8      	ldr	r0, [r7, #12]
   843a8:	4b04      	ldr	r3, [pc, #16]	; (843bc <sleepmgr_lock_mode+0x34>)
   843aa:	4798      	blx	r3
}
   843ac:	bf00      	nop
   843ae:	3710      	adds	r7, #16
   843b0:	46bd      	mov	sp, r7
   843b2:	bd80      	pop	{r7, pc}
   843b4:	000842f9 	.word	0x000842f9
   843b8:	20001460 	.word	0x20001460
   843bc:	00084355 	.word	0x00084355

000843c0 <sleepmgr_unlock_mode>:
{
   843c0:	b580      	push	{r7, lr}
   843c2:	b084      	sub	sp, #16
   843c4:	af00      	add	r7, sp, #0
   843c6:	4603      	mov	r3, r0
   843c8:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   843ca:	4b08      	ldr	r3, [pc, #32]	; (843ec <sleepmgr_unlock_mode+0x2c>)
   843cc:	4798      	blx	r3
   843ce:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   843d0:	79fb      	ldrb	r3, [r7, #7]
   843d2:	4a07      	ldr	r2, [pc, #28]	; (843f0 <sleepmgr_unlock_mode+0x30>)
   843d4:	5cd2      	ldrb	r2, [r2, r3]
   843d6:	3a01      	subs	r2, #1
   843d8:	b2d1      	uxtb	r1, r2
   843da:	4a05      	ldr	r2, [pc, #20]	; (843f0 <sleepmgr_unlock_mode+0x30>)
   843dc:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   843de:	68f8      	ldr	r0, [r7, #12]
   843e0:	4b04      	ldr	r3, [pc, #16]	; (843f4 <sleepmgr_unlock_mode+0x34>)
   843e2:	4798      	blx	r3
}
   843e4:	bf00      	nop
   843e6:	3710      	adds	r7, #16
   843e8:	46bd      	mov	sp, r7
   843ea:	bd80      	pop	{r7, pc}
   843ec:	000842f9 	.word	0x000842f9
   843f0:	20001460 	.word	0x20001460
   843f4:	00084355 	.word	0x00084355

000843f8 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   843f8:	b580      	push	{r7, lr}
   843fa:	b082      	sub	sp, #8
   843fc:	af00      	add	r7, sp, #0
   843fe:	4603      	mov	r3, r0
   84400:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   84402:	79fb      	ldrb	r3, [r7, #7]
   84404:	f083 0301 	eor.w	r3, r3, #1
   84408:	b2db      	uxtb	r3, r3
   8440a:	2b00      	cmp	r3, #0
   8440c:	d006      	beq.n	8441c <udd_sleep_mode+0x24>
   8440e:	4b0d      	ldr	r3, [pc, #52]	; (84444 <udd_sleep_mode+0x4c>)
   84410:	781b      	ldrb	r3, [r3, #0]
   84412:	2b00      	cmp	r3, #0
   84414:	d002      	beq.n	8441c <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84416:	2002      	movs	r0, #2
   84418:	4b0b      	ldr	r3, [pc, #44]	; (84448 <udd_sleep_mode+0x50>)
   8441a:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   8441c:	79fb      	ldrb	r3, [r7, #7]
   8441e:	2b00      	cmp	r3, #0
   84420:	d009      	beq.n	84436 <udd_sleep_mode+0x3e>
   84422:	4b08      	ldr	r3, [pc, #32]	; (84444 <udd_sleep_mode+0x4c>)
   84424:	781b      	ldrb	r3, [r3, #0]
   84426:	f083 0301 	eor.w	r3, r3, #1
   8442a:	b2db      	uxtb	r3, r3
   8442c:	2b00      	cmp	r3, #0
   8442e:	d002      	beq.n	84436 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84430:	2002      	movs	r0, #2
   84432:	4b06      	ldr	r3, [pc, #24]	; (8444c <udd_sleep_mode+0x54>)
   84434:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   84436:	4a03      	ldr	r2, [pc, #12]	; (84444 <udd_sleep_mode+0x4c>)
   84438:	79fb      	ldrb	r3, [r7, #7]
   8443a:	7013      	strb	r3, [r2, #0]
}
   8443c:	bf00      	nop
   8443e:	3708      	adds	r7, #8
   84440:	46bd      	mov	sp, r7
   84442:	bd80      	pop	{r7, pc}
   84444:	20000f65 	.word	0x20000f65
   84448:	000843c1 	.word	0x000843c1
   8444c:	00084389 	.word	0x00084389

00084450 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   84450:	b580      	push	{r7, lr}
   84452:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84454:	201d      	movs	r0, #29
   84456:	4b5f      	ldr	r3, [pc, #380]	; (845d4 <UDPHS_Handler+0x184>)
   84458:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8445a:	4b5f      	ldr	r3, [pc, #380]	; (845d8 <UDPHS_Handler+0x188>)
   8445c:	4798      	blx	r3
   8445e:	4603      	mov	r3, r0
   84460:	f083 0301 	eor.w	r3, r3, #1
   84464:	b2db      	uxtb	r3, r3
   84466:	2b00      	cmp	r3, #0
   84468:	d00e      	beq.n	84488 <UDPHS_Handler+0x38>
   8446a:	4b5c      	ldr	r3, [pc, #368]	; (845dc <UDPHS_Handler+0x18c>)
   8446c:	695b      	ldr	r3, [r3, #20]
   8446e:	f003 0302 	and.w	r3, r3, #2
   84472:	2b00      	cmp	r3, #0
   84474:	d108      	bne.n	84488 <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   84476:	b672      	cpsid	i
}
   84478:	bf00      	nop
  __ASM volatile ("dmb");
   8447a:	f3bf 8f5f 	dmb	sy
}
   8447e:	bf00      	nop
		cpu_irq_disable();
   84480:	4b57      	ldr	r3, [pc, #348]	; (845e0 <UDPHS_Handler+0x190>)
   84482:	2200      	movs	r2, #0
   84484:	701a      	strb	r2, [r3, #0]
		return;
   84486:	e0a4      	b.n	845d2 <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   84488:	4b54      	ldr	r3, [pc, #336]	; (845dc <UDPHS_Handler+0x18c>)
   8448a:	695b      	ldr	r3, [r3, #20]
   8448c:	f003 0308 	and.w	r3, r3, #8
   84490:	2b00      	cmp	r3, #0
   84492:	d00d      	beq.n	844b0 <UDPHS_Handler+0x60>
		udd_ack_sof();
   84494:	4b51      	ldr	r3, [pc, #324]	; (845dc <UDPHS_Handler+0x18c>)
   84496:	2208      	movs	r2, #8
   84498:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   8449a:	4b50      	ldr	r3, [pc, #320]	; (845dc <UDPHS_Handler+0x18c>)
   8449c:	695b      	ldr	r3, [r3, #20]
   8449e:	f003 0301 	and.w	r3, r3, #1
   844a2:	2b00      	cmp	r3, #0
   844a4:	d101      	bne.n	844aa <UDPHS_Handler+0x5a>
			udc_sof_notify();
   844a6:	4b4f      	ldr	r3, [pc, #316]	; (845e4 <UDPHS_Handler+0x194>)
   844a8:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   844aa:	4b4f      	ldr	r3, [pc, #316]	; (845e8 <UDPHS_Handler+0x198>)
   844ac:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   844ae:	e08f      	b.n	845d0 <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   844b0:	4b4a      	ldr	r3, [pc, #296]	; (845dc <UDPHS_Handler+0x18c>)
   844b2:	695b      	ldr	r3, [r3, #20]
   844b4:	f003 0304 	and.w	r3, r3, #4
   844b8:	2b00      	cmp	r3, #0
   844ba:	d005      	beq.n	844c8 <UDPHS_Handler+0x78>
		udd_ack_msof();
   844bc:	4b47      	ldr	r3, [pc, #284]	; (845dc <UDPHS_Handler+0x18c>)
   844be:	2204      	movs	r2, #4
   844c0:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   844c2:	4b48      	ldr	r3, [pc, #288]	; (845e4 <UDPHS_Handler+0x194>)
   844c4:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   844c6:	e083      	b.n	845d0 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   844c8:	4b48      	ldr	r3, [pc, #288]	; (845ec <UDPHS_Handler+0x19c>)
   844ca:	4798      	blx	r3
   844cc:	4603      	mov	r3, r0
   844ce:	2b00      	cmp	r3, #0
   844d0:	d179      	bne.n	845c6 <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   844d2:	4b47      	ldr	r3, [pc, #284]	; (845f0 <UDPHS_Handler+0x1a0>)
   844d4:	4798      	blx	r3
   844d6:	4603      	mov	r3, r0
   844d8:	2b00      	cmp	r3, #0
   844da:	d176      	bne.n	845ca <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   844dc:	4b3f      	ldr	r3, [pc, #252]	; (845dc <UDPHS_Handler+0x18c>)
   844de:	695b      	ldr	r3, [r3, #20]
   844e0:	f003 0310 	and.w	r3, r3, #16
   844e4:	2b00      	cmp	r3, #0
   844e6:	d01d      	beq.n	84524 <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   844e8:	4b3c      	ldr	r3, [pc, #240]	; (845dc <UDPHS_Handler+0x18c>)
   844ea:	2210      	movs	r2, #16
   844ec:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   844ee:	4b41      	ldr	r3, [pc, #260]	; (845f4 <UDPHS_Handler+0x1a4>)
   844f0:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   844f2:	4b41      	ldr	r3, [pc, #260]	; (845f8 <UDPHS_Handler+0x1a8>)
   844f4:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   844f6:	4b41      	ldr	r3, [pc, #260]	; (845fc <UDPHS_Handler+0x1ac>)
   844f8:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   844fa:	4b41      	ldr	r3, [pc, #260]	; (84600 <UDPHS_Handler+0x1b0>)
   844fc:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   844fe:	4b37      	ldr	r3, [pc, #220]	; (845dc <UDPHS_Handler+0x18c>)
   84500:	691b      	ldr	r3, [r3, #16]
   84502:	4a36      	ldr	r2, [pc, #216]	; (845dc <UDPHS_Handler+0x18c>)
   84504:	f043 0308 	orr.w	r3, r3, #8
   84508:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   8450a:	4b34      	ldr	r3, [pc, #208]	; (845dc <UDPHS_Handler+0x18c>)
   8450c:	691b      	ldr	r3, [r3, #16]
   8450e:	4a33      	ldr	r2, [pc, #204]	; (845dc <UDPHS_Handler+0x18c>)
   84510:	f043 0304 	orr.w	r3, r3, #4
   84514:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   84516:	4b31      	ldr	r3, [pc, #196]	; (845dc <UDPHS_Handler+0x18c>)
   84518:	691b      	ldr	r3, [r3, #16]
   8451a:	4a30      	ldr	r2, [pc, #192]	; (845dc <UDPHS_Handler+0x18c>)
   8451c:	f043 0302 	orr.w	r3, r3, #2
   84520:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   84522:	e055      	b.n	845d0 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84524:	4b2d      	ldr	r3, [pc, #180]	; (845dc <UDPHS_Handler+0x18c>)
   84526:	691b      	ldr	r3, [r3, #16]
   84528:	f003 0302 	and.w	r3, r3, #2
   8452c:	2b00      	cmp	r3, #0
   8452e:	d020      	beq.n	84572 <UDPHS_Handler+0x122>
   84530:	4b2a      	ldr	r3, [pc, #168]	; (845dc <UDPHS_Handler+0x18c>)
   84532:	695b      	ldr	r3, [r3, #20]
   84534:	f003 0302 	and.w	r3, r3, #2
   84538:	2b00      	cmp	r3, #0
   8453a:	d01a      	beq.n	84572 <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   8453c:	4b27      	ldr	r3, [pc, #156]	; (845dc <UDPHS_Handler+0x18c>)
   8453e:	2220      	movs	r2, #32
   84540:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   84542:	4b26      	ldr	r3, [pc, #152]	; (845dc <UDPHS_Handler+0x18c>)
   84544:	691b      	ldr	r3, [r3, #16]
   84546:	4a25      	ldr	r2, [pc, #148]	; (845dc <UDPHS_Handler+0x18c>)
   84548:	f023 0302 	bic.w	r3, r3, #2
   8454c:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   8454e:	4b23      	ldr	r3, [pc, #140]	; (845dc <UDPHS_Handler+0x18c>)
   84550:	691b      	ldr	r3, [r3, #16]
   84552:	4a22      	ldr	r2, [pc, #136]	; (845dc <UDPHS_Handler+0x18c>)
   84554:	f043 0320 	orr.w	r3, r3, #32
   84558:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   8455a:	4b20      	ldr	r3, [pc, #128]	; (845dc <UDPHS_Handler+0x18c>)
   8455c:	2202      	movs	r2, #2
   8455e:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   84560:	201d      	movs	r0, #29
   84562:	4b28      	ldr	r3, [pc, #160]	; (84604 <UDPHS_Handler+0x1b4>)
   84564:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   84566:	4b28      	ldr	r3, [pc, #160]	; (84608 <UDPHS_Handler+0x1b8>)
   84568:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   8456a:	2000      	movs	r0, #0
   8456c:	4b27      	ldr	r3, [pc, #156]	; (8460c <UDPHS_Handler+0x1bc>)
   8456e:	4798      	blx	r3
		goto udd_interrupt_end;
   84570:	e02e      	b.n	845d0 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   84572:	4b1a      	ldr	r3, [pc, #104]	; (845dc <UDPHS_Handler+0x18c>)
   84574:	695b      	ldr	r3, [r3, #20]
   84576:	f003 0320 	and.w	r3, r3, #32
   8457a:	2b00      	cmp	r3, #0
   8457c:	d027      	beq.n	845ce <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   8457e:	2001      	movs	r0, #1
   84580:	4b22      	ldr	r3, [pc, #136]	; (8460c <UDPHS_Handler+0x1bc>)
   84582:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   84584:	4b15      	ldr	r3, [pc, #84]	; (845dc <UDPHS_Handler+0x18c>)
   84586:	2202      	movs	r2, #2
   84588:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   8458a:	4b14      	ldr	r3, [pc, #80]	; (845dc <UDPHS_Handler+0x18c>)
   8458c:	2220      	movs	r2, #32
   8458e:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   84590:	4b12      	ldr	r3, [pc, #72]	; (845dc <UDPHS_Handler+0x18c>)
   84592:	691b      	ldr	r3, [r3, #16]
   84594:	4a11      	ldr	r2, [pc, #68]	; (845dc <UDPHS_Handler+0x18c>)
   84596:	f023 0320 	bic.w	r3, r3, #32
   8459a:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   8459c:	4b0f      	ldr	r3, [pc, #60]	; (845dc <UDPHS_Handler+0x18c>)
   8459e:	691b      	ldr	r3, [r3, #16]
   845a0:	4a0e      	ldr	r2, [pc, #56]	; (845dc <UDPHS_Handler+0x18c>)
   845a2:	f043 0302 	orr.w	r3, r3, #2
   845a6:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   845a8:	4b0c      	ldr	r3, [pc, #48]	; (845dc <UDPHS_Handler+0x18c>)
   845aa:	691b      	ldr	r3, [r3, #16]
   845ac:	4a0b      	ldr	r2, [pc, #44]	; (845dc <UDPHS_Handler+0x18c>)
   845ae:	f043 0308 	orr.w	r3, r3, #8
   845b2:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   845b4:	4b09      	ldr	r3, [pc, #36]	; (845dc <UDPHS_Handler+0x18c>)
   845b6:	691b      	ldr	r3, [r3, #16]
   845b8:	4a08      	ldr	r2, [pc, #32]	; (845dc <UDPHS_Handler+0x18c>)
   845ba:	f043 0304 	orr.w	r3, r3, #4
   845be:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   845c0:	4b13      	ldr	r3, [pc, #76]	; (84610 <UDPHS_Handler+0x1c0>)
   845c2:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   845c4:	e004      	b.n	845d0 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   845c6:	bf00      	nop
   845c8:	e002      	b.n	845d0 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   845ca:	bf00      	nop
   845cc:	e000      	b.n	845d0 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   845ce:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   845d0:	bf00      	nop
}
   845d2:	bd80      	pop	{r7, pc}
   845d4:	000833c9 	.word	0x000833c9
   845d8:	0008398d 	.word	0x0008398d
   845dc:	400a4000 	.word	0x400a4000
   845e0:	200003ca 	.word	0x200003ca
   845e4:	00081c49 	.word	0x00081c49
   845e8:	00080f99 	.word	0x00080f99
   845ec:	000858e5 	.word	0x000858e5
   845f0:	00085d01 	.word	0x00085d01
   845f4:	00085a25 	.word	0x00085a25
   845f8:	00081bf5 	.word	0x00081bf5
   845fc:	00085245 	.word	0x00085245
   84600:	000852c5 	.word	0x000852c5
   84604:	00083415 	.word	0x00083415
   84608:	00080f6d 	.word	0x00080f6d
   8460c:	000843f9 	.word	0x000843f9
   84610:	00080f89 	.word	0x00080f89

00084614 <udd_enable>:
#endif
}


void udd_enable(void)
{
   84614:	b580      	push	{r7, lr}
   84616:	b082      	sub	sp, #8
   84618:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   8461a:	4b19      	ldr	r3, [pc, #100]	; (84680 <udd_enable+0x6c>)
   8461c:	4798      	blx	r3

	udd_enable_periph_ck();
   8461e:	201d      	movs	r0, #29
   84620:	4b18      	ldr	r3, [pc, #96]	; (84684 <udd_enable+0x70>)
   84622:	4798      	blx	r3

	flags = cpu_irq_save();
   84624:	4b18      	ldr	r3, [pc, #96]	; (84688 <udd_enable+0x74>)
   84626:	4798      	blx	r3
   84628:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   8462a:	4b18      	ldr	r3, [pc, #96]	; (8468c <udd_enable+0x78>)
   8462c:	681b      	ldr	r3, [r3, #0]
   8462e:	4a17      	ldr	r2, [pc, #92]	; (8468c <udd_enable+0x78>)
   84630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   84634:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   84636:	2105      	movs	r1, #5
   84638:	201d      	movs	r0, #29
   8463a:	4b15      	ldr	r3, [pc, #84]	; (84690 <udd_enable+0x7c>)
   8463c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   8463e:	201d      	movs	r0, #29
   84640:	4b14      	ldr	r3, [pc, #80]	; (84694 <udd_enable+0x80>)
   84642:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   84644:	4b14      	ldr	r3, [pc, #80]	; (84698 <udd_enable+0x84>)
   84646:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   84648:	4b10      	ldr	r3, [pc, #64]	; (8468c <udd_enable+0x78>)
   8464a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8464e:	4a0f      	ldr	r2, [pc, #60]	; (8468c <udd_enable+0x78>)
   84650:	f023 0303 	bic.w	r3, r3, #3
   84654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84658:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8465c:	4b0f      	ldr	r3, [pc, #60]	; (8469c <udd_enable+0x88>)
   8465e:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   84660:	4b0f      	ldr	r3, [pc, #60]	; (846a0 <udd_enable+0x8c>)
   84662:	2200      	movs	r2, #0
   84664:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   84666:	2003      	movs	r0, #3
   84668:	4b0e      	ldr	r3, [pc, #56]	; (846a4 <udd_enable+0x90>)
   8466a:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   8466c:	4b0e      	ldr	r3, [pc, #56]	; (846a8 <udd_enable+0x94>)
   8466e:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   84670:	6878      	ldr	r0, [r7, #4]
   84672:	4b0e      	ldr	r3, [pc, #56]	; (846ac <udd_enable+0x98>)
   84674:	4798      	blx	r3
}
   84676:	bf00      	nop
   84678:	3708      	adds	r7, #8
   8467a:	46bd      	mov	sp, r7
   8467c:	bd80      	pop	{r7, pc}
   8467e:	bf00      	nop
   84680:	00083f09 	.word	0x00083f09
   84684:	000833c9 	.word	0x000833c9
   84688:	000842f9 	.word	0x000842f9
   8468c:	400a4000 	.word	0x400a4000
   84690:	000842a5 	.word	0x000842a5
   84694:	00084275 	.word	0x00084275
   84698:	000859c9 	.word	0x000859c9
   8469c:	00083485 	.word	0x00083485
   846a0:	20000f65 	.word	0x20000f65
   846a4:	00084389 	.word	0x00084389
   846a8:	000846b1 	.word	0x000846b1
   846ac:	00084355 	.word	0x00084355

000846b0 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   846b0:	b580      	push	{r7, lr}
   846b2:	b082      	sub	sp, #8
   846b4:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   846b6:	4b26      	ldr	r3, [pc, #152]	; (84750 <udd_attach+0xa0>)
   846b8:	4798      	blx	r3
   846ba:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   846bc:	2001      	movs	r0, #1
   846be:	4b25      	ldr	r3, [pc, #148]	; (84754 <udd_attach+0xa4>)
   846c0:	4798      	blx	r3
	udd_enable_periph_ck();
   846c2:	201d      	movs	r0, #29
   846c4:	4b24      	ldr	r3, [pc, #144]	; (84758 <udd_attach+0xa8>)
   846c6:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   846c8:	4b24      	ldr	r3, [pc, #144]	; (8475c <udd_attach+0xac>)
   846ca:	681b      	ldr	r3, [r3, #0]
   846cc:	4a23      	ldr	r2, [pc, #140]	; (8475c <udd_attach+0xac>)
   846ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   846d2:	6013      	str	r3, [r2, #0]
   846d4:	4b21      	ldr	r3, [pc, #132]	; (8475c <udd_attach+0xac>)
   846d6:	681b      	ldr	r3, [r3, #0]
   846d8:	4a20      	ldr	r2, [pc, #128]	; (8475c <udd_attach+0xac>)
   846da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   846de:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   846e0:	4b1e      	ldr	r3, [pc, #120]	; (8475c <udd_attach+0xac>)
   846e2:	691b      	ldr	r3, [r3, #16]
   846e4:	4a1d      	ldr	r2, [pc, #116]	; (8475c <udd_attach+0xac>)
   846e6:	f043 0310 	orr.w	r3, r3, #16
   846ea:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   846ec:	4b1b      	ldr	r3, [pc, #108]	; (8475c <udd_attach+0xac>)
   846ee:	691b      	ldr	r3, [r3, #16]
   846f0:	4a1a      	ldr	r2, [pc, #104]	; (8475c <udd_attach+0xac>)
   846f2:	f043 0302 	orr.w	r3, r3, #2
   846f6:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   846f8:	4b18      	ldr	r3, [pc, #96]	; (8475c <udd_attach+0xac>)
   846fa:	691b      	ldr	r3, [r3, #16]
   846fc:	4a17      	ldr	r2, [pc, #92]	; (8475c <udd_attach+0xac>)
   846fe:	f043 0320 	orr.w	r3, r3, #32
   84702:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   84704:	4b15      	ldr	r3, [pc, #84]	; (8475c <udd_attach+0xac>)
   84706:	691b      	ldr	r3, [r3, #16]
   84708:	4a14      	ldr	r2, [pc, #80]	; (8475c <udd_attach+0xac>)
   8470a:	f043 0308 	orr.w	r3, r3, #8
   8470e:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   84710:	4b12      	ldr	r3, [pc, #72]	; (8475c <udd_attach+0xac>)
   84712:	691b      	ldr	r3, [r3, #16]
   84714:	4a11      	ldr	r2, [pc, #68]	; (8475c <udd_attach+0xac>)
   84716:	f043 0304 	orr.w	r3, r3, #4
   8471a:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   8471c:	4b0f      	ldr	r3, [pc, #60]	; (8475c <udd_attach+0xac>)
   8471e:	2208      	movs	r2, #8
   84720:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84722:	4b0e      	ldr	r3, [pc, #56]	; (8475c <udd_attach+0xac>)
   84724:	2204      	movs	r2, #4
   84726:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84728:	4b0c      	ldr	r3, [pc, #48]	; (8475c <udd_attach+0xac>)
   8472a:	2210      	movs	r2, #16
   8472c:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   8472e:	4b0b      	ldr	r3, [pc, #44]	; (8475c <udd_attach+0xac>)
   84730:	2202      	movs	r2, #2
   84732:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84734:	4b09      	ldr	r3, [pc, #36]	; (8475c <udd_attach+0xac>)
   84736:	2220      	movs	r2, #32
   84738:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   8473a:	201d      	movs	r0, #29
   8473c:	4b08      	ldr	r3, [pc, #32]	; (84760 <udd_attach+0xb0>)
   8473e:	4798      	blx	r3
	cpu_irq_restore(flags);
   84740:	6878      	ldr	r0, [r7, #4]
   84742:	4b08      	ldr	r3, [pc, #32]	; (84764 <udd_attach+0xb4>)
   84744:	4798      	blx	r3
}
   84746:	bf00      	nop
   84748:	3708      	adds	r7, #8
   8474a:	46bd      	mov	sp, r7
   8474c:	bd80      	pop	{r7, pc}
   8474e:	bf00      	nop
   84750:	000842f9 	.word	0x000842f9
   84754:	000843f9 	.word	0x000843f9
   84758:	000833c9 	.word	0x000833c9
   8475c:	400a4000 	.word	0x400a4000
   84760:	00083415 	.word	0x00083415
   84764:	00084355 	.word	0x00084355

00084768 <udd_detach>:


void udd_detach(void)
{
   84768:	b580      	push	{r7, lr}
   8476a:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   8476c:	201d      	movs	r0, #29
   8476e:	4b0b      	ldr	r3, [pc, #44]	; (8479c <udd_detach+0x34>)
   84770:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   84772:	4b0b      	ldr	r3, [pc, #44]	; (847a0 <udd_detach+0x38>)
   84774:	681b      	ldr	r3, [r3, #0]
   84776:	4a0a      	ldr	r2, [pc, #40]	; (847a0 <udd_detach+0x38>)
   84778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8477c:	6013      	str	r3, [r2, #0]
   8477e:	4b08      	ldr	r3, [pc, #32]	; (847a0 <udd_detach+0x38>)
   84780:	681b      	ldr	r3, [r3, #0]
   84782:	4a07      	ldr	r2, [pc, #28]	; (847a0 <udd_detach+0x38>)
   84784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84788:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   8478a:	201d      	movs	r0, #29
   8478c:	4b05      	ldr	r3, [pc, #20]	; (847a4 <udd_detach+0x3c>)
   8478e:	4798      	blx	r3
	udd_sleep_mode(false);
   84790:	2000      	movs	r0, #0
   84792:	4b05      	ldr	r3, [pc, #20]	; (847a8 <udd_detach+0x40>)
   84794:	4798      	blx	r3
}
   84796:	bf00      	nop
   84798:	bd80      	pop	{r7, pc}
   8479a:	bf00      	nop
   8479c:	000833c9 	.word	0x000833c9
   847a0:	400a4000 	.word	0x400a4000
   847a4:	00083415 	.word	0x00083415
   847a8:	000843f9 	.word	0x000843f9

000847ac <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   847ac:	b480      	push	{r7}
   847ae:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   847b0:	4b06      	ldr	r3, [pc, #24]	; (847cc <udd_is_high_speed+0x20>)
   847b2:	695b      	ldr	r3, [r3, #20]
   847b4:	f003 0301 	and.w	r3, r3, #1
   847b8:	2b00      	cmp	r3, #0
   847ba:	bf14      	ite	ne
   847bc:	2301      	movne	r3, #1
   847be:	2300      	moveq	r3, #0
   847c0:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   847c2:	4618      	mov	r0, r3
   847c4:	46bd      	mov	sp, r7
   847c6:	bc80      	pop	{r7}
   847c8:	4770      	bx	lr
   847ca:	bf00      	nop
   847cc:	400a4000 	.word	0x400a4000

000847d0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   847d0:	b480      	push	{r7}
   847d2:	b083      	sub	sp, #12
   847d4:	af00      	add	r7, sp, #0
   847d6:	4603      	mov	r3, r0
   847d8:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   847da:	4b0d      	ldr	r3, [pc, #52]	; (84810 <udd_set_address+0x40>)
   847dc:	681b      	ldr	r3, [r3, #0]
   847de:	4a0c      	ldr	r2, [pc, #48]	; (84810 <udd_set_address+0x40>)
   847e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   847e4:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   847e6:	4b0a      	ldr	r3, [pc, #40]	; (84810 <udd_set_address+0x40>)
   847e8:	681b      	ldr	r3, [r3, #0]
   847ea:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   847ee:	79fb      	ldrb	r3, [r7, #7]
   847f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   847f4:	4906      	ldr	r1, [pc, #24]	; (84810 <udd_set_address+0x40>)
   847f6:	4313      	orrs	r3, r2
   847f8:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   847fa:	4b05      	ldr	r3, [pc, #20]	; (84810 <udd_set_address+0x40>)
   847fc:	681b      	ldr	r3, [r3, #0]
   847fe:	4a04      	ldr	r2, [pc, #16]	; (84810 <udd_set_address+0x40>)
   84800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84804:	6013      	str	r3, [r2, #0]
}
   84806:	bf00      	nop
   84808:	370c      	adds	r7, #12
   8480a:	46bd      	mov	sp, r7
   8480c:	bc80      	pop	{r7}
   8480e:	4770      	bx	lr
   84810:	400a4000 	.word	0x400a4000

00084814 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   84814:	b480      	push	{r7}
   84816:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   84818:	4b04      	ldr	r3, [pc, #16]	; (8482c <udd_getaddress+0x18>)
   8481a:	681b      	ldr	r3, [r3, #0]
   8481c:	b2db      	uxtb	r3, r3
   8481e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84822:	b2db      	uxtb	r3, r3
}
   84824:	4618      	mov	r0, r3
   84826:	46bd      	mov	sp, r7
   84828:	bc80      	pop	{r7}
   8482a:	4770      	bx	lr
   8482c:	400a4000 	.word	0x400a4000

00084830 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
   84830:	b480      	push	{r7}
   84832:	af00      	add	r7, sp, #0
	return udd_frame_number();
   84834:	4b05      	ldr	r3, [pc, #20]	; (8484c <udd_get_frame_number+0x1c>)
   84836:	685b      	ldr	r3, [r3, #4]
   84838:	08db      	lsrs	r3, r3, #3
   8483a:	b29b      	uxth	r3, r3
   8483c:	f3c3 030a 	ubfx	r3, r3, #0, #11
   84840:	b29b      	uxth	r3, r3
}
   84842:	4618      	mov	r0, r3
   84844:	46bd      	mov	sp, r7
   84846:	bc80      	pop	{r7}
   84848:	4770      	bx	lr
   8484a:	bf00      	nop
   8484c:	400a4000 	.word	0x400a4000

00084850 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   84850:	b480      	push	{r7}
   84852:	b083      	sub	sp, #12
   84854:	af00      	add	r7, sp, #0
   84856:	6078      	str	r0, [r7, #4]
   84858:	460b      	mov	r3, r1
   8485a:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   8485c:	4a05      	ldr	r2, [pc, #20]	; (84874 <udd_set_setup_payload+0x24>)
   8485e:	687b      	ldr	r3, [r7, #4]
   84860:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84862:	4a04      	ldr	r2, [pc, #16]	; (84874 <udd_set_setup_payload+0x24>)
   84864:	887b      	ldrh	r3, [r7, #2]
   84866:	8193      	strh	r3, [r2, #12]
}
   84868:	bf00      	nop
   8486a:	370c      	adds	r7, #12
   8486c:	46bd      	mov	sp, r7
   8486e:	bc80      	pop	{r7}
   84870:	4770      	bx	lr
   84872:	bf00      	nop
   84874:	20001468 	.word	0x20001468

00084878 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   84878:	b590      	push	{r4, r7, lr}
   8487a:	b089      	sub	sp, #36	; 0x24
   8487c:	af02      	add	r7, sp, #8
   8487e:	4603      	mov	r3, r0
   84880:	71fb      	strb	r3, [r7, #7]
   84882:	460b      	mov	r3, r1
   84884:	71bb      	strb	r3, [r7, #6]
   84886:	4613      	mov	r3, r2
   84888:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   8488a:	2300      	movs	r3, #0
   8488c:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   8488e:	2300      	movs	r3, #0
   84890:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   84892:	79fb      	ldrb	r3, [r7, #7]
   84894:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84898:	2b00      	cmp	r3, #0
   8489a:	bf14      	ite	ne
   8489c:	2301      	movne	r3, #1
   8489e:	2300      	moveq	r3, #0
   848a0:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   848a2:	79fb      	ldrb	r3, [r7, #7]
   848a4:	f003 030f 	and.w	r3, r3, #15
   848a8:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   848aa:	79fb      	ldrb	r3, [r7, #7]
   848ac:	2b02      	cmp	r3, #2
   848ae:	d901      	bls.n	848b4 <udd_ep_alloc+0x3c>
		return false;
   848b0:	2300      	movs	r3, #0
   848b2:	e1b4      	b.n	84c1e <udd_ep_alloc+0x3a6>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   848b4:	4ab3      	ldr	r2, [pc, #716]	; (84b84 <udd_ep_alloc+0x30c>)
   848b6:	79fb      	ldrb	r3, [r7, #7]
   848b8:	015b      	lsls	r3, r3, #5
   848ba:	4413      	add	r3, r2
   848bc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   848c0:	681b      	ldr	r3, [r3, #0]
   848c2:	f003 0301 	and.w	r3, r3, #1
   848c6:	2b00      	cmp	r3, #0
   848c8:	d001      	beq.n	848ce <udd_ep_alloc+0x56>
		return false;
   848ca:	2300      	movs	r3, #0
   848cc:	e1a7      	b.n	84c1e <udd_ep_alloc+0x3a6>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   848ce:	79bb      	ldrb	r3, [r7, #6]
   848d0:	f003 0303 	and.w	r3, r3, #3
   848d4:	2b03      	cmp	r3, #3
   848d6:	d01a      	beq.n	8490e <udd_ep_alloc+0x96>
   848d8:	2b03      	cmp	r3, #3
   848da:	dc1e      	bgt.n	8491a <udd_ep_alloc+0xa2>
   848dc:	2b01      	cmp	r3, #1
   848de:	d002      	beq.n	848e6 <udd_ep_alloc+0x6e>
   848e0:	2b02      	cmp	r3, #2
   848e2:	d017      	beq.n	84914 <udd_ep_alloc+0x9c>
   848e4:	e019      	b.n	8491a <udd_ep_alloc+0xa2>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   848e6:	79fb      	ldrb	r3, [r7, #7]
   848e8:	2b00      	cmp	r3, #0
   848ea:	d007      	beq.n	848fc <udd_ep_alloc+0x84>
   848ec:	79fb      	ldrb	r3, [r7, #7]
   848ee:	2b03      	cmp	r3, #3
   848f0:	d004      	beq.n	848fc <udd_ep_alloc+0x84>
   848f2:	79fb      	ldrb	r3, [r7, #7]
   848f4:	2b04      	cmp	r3, #4
   848f6:	d001      	beq.n	848fc <udd_ep_alloc+0x84>
   848f8:	2301      	movs	r3, #1
   848fa:	e000      	b.n	848fe <udd_ep_alloc+0x86>
   848fc:	2300      	movs	r3, #0
   848fe:	747b      	strb	r3, [r7, #17]
   84900:	7c7b      	ldrb	r3, [r7, #17]
   84902:	f003 0301 	and.w	r3, r3, #1
   84906:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   84908:	2301      	movs	r3, #1
   8490a:	757b      	strb	r3, [r7, #21]
		break;
   8490c:	e007      	b.n	8491e <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   8490e:	2301      	movs	r3, #1
   84910:	757b      	strb	r3, [r7, #21]
		break;
   84912:	e004      	b.n	8491e <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   84914:	2302      	movs	r3, #2
   84916:	757b      	strb	r3, [r7, #21]
		break;
   84918:	e001      	b.n	8491e <udd_ep_alloc+0xa6>
	default:
		Assert(false);
		return false;
   8491a:	2300      	movs	r3, #0
   8491c:	e17f      	b.n	84c1e <udd_ep_alloc+0x3a6>
	}
	switch (nb_bank) {
   8491e:	7d7b      	ldrb	r3, [r7, #21]
   84920:	2b03      	cmp	r3, #3
   84922:	d00c      	beq.n	8493e <udd_ep_alloc+0xc6>
   84924:	2b03      	cmp	r3, #3
   84926:	dc0d      	bgt.n	84944 <udd_ep_alloc+0xcc>
   84928:	2b01      	cmp	r3, #1
   8492a:	d002      	beq.n	84932 <udd_ep_alloc+0xba>
   8492c:	2b02      	cmp	r3, #2
   8492e:	d003      	beq.n	84938 <udd_ep_alloc+0xc0>
   84930:	e008      	b.n	84944 <udd_ep_alloc+0xcc>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84932:	2301      	movs	r3, #1
   84934:	753b      	strb	r3, [r7, #20]
		break;
   84936:	e007      	b.n	84948 <udd_ep_alloc+0xd0>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84938:	2302      	movs	r3, #2
   8493a:	753b      	strb	r3, [r7, #20]
		break;
   8493c:	e004      	b.n	84948 <udd_ep_alloc+0xd0>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8493e:	2303      	movs	r3, #3
   84940:	753b      	strb	r3, [r7, #20]
		break;
   84942:	e001      	b.n	84948 <udd_ep_alloc+0xd0>
	default:
		Assert(false);
		return false;
   84944:	2300      	movs	r3, #0
   84946:	e16a      	b.n	84c1e <udd_ep_alloc+0x3a6>
	}
	if (b_iso_hbw) {
   84948:	7c7b      	ldrb	r3, [r7, #17]
   8494a:	2b00      	cmp	r3, #0
   8494c:	d017      	beq.n	8497e <udd_ep_alloc+0x106>
		switch(MaxEndpointSize & (0x3u << 11)) {
   8494e:	88bb      	ldrh	r3, [r7, #4]
   84950:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   84958:	d003      	beq.n	84962 <udd_ep_alloc+0xea>
   8495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   8495e:	d003      	beq.n	84968 <udd_ep_alloc+0xf0>
   84960:	e005      	b.n	8496e <udd_ep_alloc+0xf6>
		case (0x1u << 11):
			nb_tran = 2;
   84962:	2302      	movs	r3, #2
   84964:	74fb      	strb	r3, [r7, #19]
			break;
   84966:	e005      	b.n	84974 <udd_ep_alloc+0xfc>
		case (0x2u << 11):
			nb_tran = 3;
   84968:	2303      	movs	r3, #3
   8496a:	74fb      	strb	r3, [r7, #19]
			break;
   8496c:	e002      	b.n	84974 <udd_ep_alloc+0xfc>
		default:
			nb_tran = 1;
   8496e:	2301      	movs	r3, #1
   84970:	74fb      	strb	r3, [r7, #19]
			break;
   84972:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   84974:	88bb      	ldrh	r3, [r7, #4]
   84976:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   8497a:	80bb      	strh	r3, [r7, #4]
   8497c:	e006      	b.n	8498c <udd_ep_alloc+0x114>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   8497e:	88bb      	ldrh	r3, [r7, #4]
   84980:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84984:	2b00      	cmp	r3, #0
   84986:	d001      	beq.n	8498c <udd_ep_alloc+0x114>
		// High BW not supported
		return false;
   84988:	2300      	movs	r3, #0
   8498a:	e148      	b.n	84c1e <udd_ep_alloc+0x3a6>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8498c:	4a7d      	ldr	r2, [pc, #500]	; (84b84 <udd_ep_alloc+0x30c>)
   8498e:	79fb      	ldrb	r3, [r7, #7]
   84990:	3308      	adds	r3, #8
   84992:	015b      	lsls	r3, r3, #5
   84994:	4413      	add	r3, r2
   84996:	681b      	ldr	r3, [r3, #0]
   84998:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   8499c:	f023 0303 	bic.w	r3, r3, #3
   849a0:	79ba      	ldrb	r2, [r7, #6]
   849a2:	0112      	lsls	r2, r2, #4
   849a4:	f002 0230 	and.w	r2, r2, #48	; 0x30
   849a8:	7c39      	ldrb	r1, [r7, #16]
   849aa:	2900      	cmp	r1, #0
   849ac:	d001      	beq.n	849b2 <udd_ep_alloc+0x13a>
   849ae:	2108      	movs	r1, #8
   849b0:	e000      	b.n	849b4 <udd_ep_alloc+0x13c>
   849b2:	2100      	movs	r1, #0
   849b4:	4311      	orrs	r1, r2
   849b6:	88ba      	ldrh	r2, [r7, #4]
   849b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   849bc:	d207      	bcs.n	849ce <udd_ep_alloc+0x156>
   849be:	88ba      	ldrh	r2, [r7, #4]
   849c0:	2a08      	cmp	r2, #8
   849c2:	bf38      	it	cc
   849c4:	2208      	movcc	r2, #8
   849c6:	b292      	uxth	r2, r2
   849c8:	0052      	lsls	r2, r2, #1
   849ca:	3a01      	subs	r2, #1
   849cc:	e001      	b.n	849d2 <udd_ep_alloc+0x15a>
   849ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
   849d2:	fab2 f282 	clz	r2, r2
   849d6:	f1c2 021c 	rsb	r2, r2, #28
   849da:	4311      	orrs	r1, r2
   849dc:	7d3a      	ldrb	r2, [r7, #20]
   849de:	0192      	lsls	r2, r2, #6
   849e0:	b2d2      	uxtb	r2, r2
   849e2:	4311      	orrs	r1, r2
   849e4:	7c7a      	ldrb	r2, [r7, #17]
   849e6:	2a00      	cmp	r2, #0
   849e8:	d004      	beq.n	849f4 <udd_ep_alloc+0x17c>
   849ea:	7cfa      	ldrb	r2, [r7, #19]
   849ec:	0212      	lsls	r2, r2, #8
   849ee:	f402 7240 	and.w	r2, r2, #768	; 0x300
   849f2:	e000      	b.n	849f6 <udd_ep_alloc+0x17e>
   849f4:	2200      	movs	r2, #0
   849f6:	430a      	orrs	r2, r1
   849f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
   849fc:	4861      	ldr	r0, [pc, #388]	; (84b84 <udd_ep_alloc+0x30c>)
   849fe:	79f9      	ldrb	r1, [r7, #7]
   84a00:	431a      	orrs	r2, r3
   84a02:	f101 0308 	add.w	r3, r1, #8
   84a06:	015b      	lsls	r3, r3, #5
   84a08:	4403      	add	r3, r0
   84a0a:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   84a0c:	4a5d      	ldr	r2, [pc, #372]	; (84b84 <udd_ep_alloc+0x30c>)
   84a0e:	79fb      	ldrb	r3, [r7, #7]
   84a10:	3308      	adds	r3, #8
   84a12:	015b      	lsls	r3, r3, #5
   84a14:	4413      	add	r3, r2
   84a16:	681b      	ldr	r3, [r3, #0]
   84a18:	2b00      	cmp	r3, #0
   84a1a:	db01      	blt.n	84a20 <udd_ep_alloc+0x1a8>
		return false;
   84a1c:	2300      	movs	r3, #0
   84a1e:	e0fe      	b.n	84c1e <udd_ep_alloc+0x3a6>
	}
	udd_enable_endpoint(ep);
   84a20:	4a58      	ldr	r2, [pc, #352]	; (84b84 <udd_ep_alloc+0x30c>)
   84a22:	79fb      	ldrb	r3, [r7, #7]
   84a24:	3308      	adds	r3, #8
   84a26:	015b      	lsls	r3, r3, #5
   84a28:	4413      	add	r3, r2
   84a2a:	3304      	adds	r3, #4
   84a2c:	2201      	movs	r2, #1
   84a2e:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   84a30:	2300      	movs	r3, #0
   84a32:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84a34:	2302      	movs	r3, #2
   84a36:	74bb      	strb	r3, [r7, #18]
   84a38:	e039      	b.n	84aae <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
   84a3a:	4a52      	ldr	r2, [pc, #328]	; (84b84 <udd_ep_alloc+0x30c>)
   84a3c:	7cbb      	ldrb	r3, [r7, #18]
   84a3e:	015b      	lsls	r3, r3, #5
   84a40:	4413      	add	r3, r2
   84a42:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84a46:	681b      	ldr	r3, [r3, #0]
   84a48:	f003 0301 	and.w	r3, r3, #1
   84a4c:	2b00      	cmp	r3, #0
   84a4e:	d02b      	beq.n	84aa8 <udd_ep_alloc+0x230>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   84a50:	4a4c      	ldr	r2, [pc, #304]	; (84b84 <udd_ep_alloc+0x30c>)
   84a52:	7cbb      	ldrb	r3, [r7, #18]
   84a54:	3308      	adds	r3, #8
   84a56:	015b      	lsls	r3, r3, #5
   84a58:	4413      	add	r3, r2
   84a5a:	681b      	ldr	r3, [r3, #0]
   84a5c:	099b      	lsrs	r3, r3, #6
   84a5e:	b2db      	uxtb	r3, r3
   84a60:	f003 0303 	and.w	r3, r3, #3
   84a64:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   84a66:	7d3a      	ldrb	r2, [r7, #20]
   84a68:	7cbb      	ldrb	r3, [r7, #18]
   84a6a:	005b      	lsls	r3, r3, #1
   84a6c:	fa02 f303 	lsl.w	r3, r2, r3
   84a70:	b21a      	sxth	r2, r3
   84a72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   84a76:	4313      	orrs	r3, r2
   84a78:	b21b      	sxth	r3, r3
   84a7a:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   84a7c:	4a41      	ldr	r2, [pc, #260]	; (84b84 <udd_ep_alloc+0x30c>)
   84a7e:	7cbb      	ldrb	r3, [r7, #18]
   84a80:	015b      	lsls	r3, r3, #5
   84a82:	4413      	add	r3, r2
   84a84:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84a88:	2201      	movs	r2, #1
   84a8a:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   84a8c:	4a3d      	ldr	r2, [pc, #244]	; (84b84 <udd_ep_alloc+0x30c>)
   84a8e:	7cbb      	ldrb	r3, [r7, #18]
   84a90:	3308      	adds	r3, #8
   84a92:	015b      	lsls	r3, r3, #5
   84a94:	4413      	add	r3, r2
   84a96:	681a      	ldr	r2, [r3, #0]
   84a98:	493a      	ldr	r1, [pc, #232]	; (84b84 <udd_ep_alloc+0x30c>)
   84a9a:	7cbb      	ldrb	r3, [r7, #18]
   84a9c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   84aa0:	3308      	adds	r3, #8
   84aa2:	015b      	lsls	r3, r3, #5
   84aa4:	440b      	add	r3, r1
   84aa6:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84aa8:	7cbb      	ldrb	r3, [r7, #18]
   84aaa:	3b01      	subs	r3, #1
   84aac:	74bb      	strb	r3, [r7, #18]
   84aae:	7cba      	ldrb	r2, [r7, #18]
   84ab0:	79fb      	ldrb	r3, [r7, #7]
   84ab2:	429a      	cmp	r2, r3
   84ab4:	d2c1      	bcs.n	84a3a <udd_ep_alloc+0x1c2>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84ab6:	79fb      	ldrb	r3, [r7, #7]
   84ab8:	74bb      	strb	r3, [r7, #18]
   84aba:	e0ab      	b.n	84c14 <udd_ep_alloc+0x39c>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   84abc:	7cbb      	ldrb	r3, [r7, #18]
   84abe:	1e5a      	subs	r2, r3, #1
   84ac0:	4613      	mov	r3, r2
   84ac2:	005b      	lsls	r3, r3, #1
   84ac4:	4413      	add	r3, r2
   84ac6:	00db      	lsls	r3, r3, #3
   84ac8:	4a2f      	ldr	r2, [pc, #188]	; (84b88 <udd_ep_alloc+0x310>)
   84aca:	4413      	add	r3, r2
   84acc:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   84ace:	68fb      	ldr	r3, [r7, #12]
   84ad0:	7d1b      	ldrb	r3, [r3, #20]
   84ad2:	f3c3 0300 	ubfx	r3, r3, #0, #1
   84ad6:	b2db      	uxtb	r3, r3
   84ad8:	2b00      	cmp	r3, #0
   84ada:	bf14      	ite	ne
   84adc:	2301      	movne	r3, #1
   84ade:	2300      	moveq	r3, #0
   84ae0:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   84ae2:	8afa      	ldrh	r2, [r7, #22]
   84ae4:	7cbb      	ldrb	r3, [r7, #18]
   84ae6:	005b      	lsls	r3, r3, #1
   84ae8:	fa42 f303 	asr.w	r3, r2, r3
   84aec:	b2db      	uxtb	r3, r3
   84aee:	f003 0303 	and.w	r3, r3, #3
   84af2:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   84af4:	7d3b      	ldrb	r3, [r7, #20]
   84af6:	2b00      	cmp	r3, #0
   84af8:	f000 8088 	beq.w	84c0c <udd_ep_alloc+0x394>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   84afc:	68fa      	ldr	r2, [r7, #12]
   84afe:	7d13      	ldrb	r3, [r2, #20]
   84b00:	f36f 0300 	bfc	r3, #0, #1
   84b04:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   84b06:	4a1f      	ldr	r2, [pc, #124]	; (84b84 <udd_ep_alloc+0x30c>)
   84b08:	7cbb      	ldrb	r3, [r7, #18]
   84b0a:	3308      	adds	r3, #8
   84b0c:	015b      	lsls	r3, r3, #5
   84b0e:	4413      	add	r3, r2
   84b10:	681b      	ldr	r3, [r3, #0]
   84b12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   84b16:	7d3b      	ldrb	r3, [r7, #20]
   84b18:	019b      	lsls	r3, r3, #6
   84b1a:	b2da      	uxtb	r2, r3
   84b1c:	4819      	ldr	r0, [pc, #100]	; (84b84 <udd_ep_alloc+0x30c>)
   84b1e:	7cbb      	ldrb	r3, [r7, #18]
   84b20:	430a      	orrs	r2, r1
   84b22:	3308      	adds	r3, #8
   84b24:	015b      	lsls	r3, r3, #5
   84b26:	4403      	add	r3, r0
   84b28:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   84b2a:	4a16      	ldr	r2, [pc, #88]	; (84b84 <udd_ep_alloc+0x30c>)
   84b2c:	7cbb      	ldrb	r3, [r7, #18]
   84b2e:	3308      	adds	r3, #8
   84b30:	015b      	lsls	r3, r3, #5
   84b32:	4413      	add	r3, r2
   84b34:	3304      	adds	r3, #4
   84b36:	2201      	movs	r2, #1
   84b38:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   84b3a:	4a12      	ldr	r2, [pc, #72]	; (84b84 <udd_ep_alloc+0x30c>)
   84b3c:	7cbb      	ldrb	r3, [r7, #18]
   84b3e:	3308      	adds	r3, #8
   84b40:	015b      	lsls	r3, r3, #5
   84b42:	4413      	add	r3, r2
   84b44:	681b      	ldr	r3, [r3, #0]
   84b46:	2b00      	cmp	r3, #0
   84b48:	db20      	blt.n	84b8c <udd_ep_alloc+0x314>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   84b4a:	68fb      	ldr	r3, [r7, #12]
   84b4c:	681b      	ldr	r3, [r3, #0]
   84b4e:	2b00      	cmp	r3, #0
   84b50:	d101      	bne.n	84b56 <udd_ep_alloc+0x2de>
				return false;
   84b52:	2300      	movs	r3, #0
   84b54:	e063      	b.n	84c1e <udd_ep_alloc+0x3a6>
			}
			if (Is_udd_endpoint_in(i)) {
   84b56:	4a0b      	ldr	r2, [pc, #44]	; (84b84 <udd_ep_alloc+0x30c>)
   84b58:	7cbb      	ldrb	r3, [r7, #18]
   84b5a:	3308      	adds	r3, #8
   84b5c:	015b      	lsls	r3, r3, #5
   84b5e:	4413      	add	r3, r2
   84b60:	681b      	ldr	r3, [r3, #0]
   84b62:	f003 0308 	and.w	r3, r3, #8
   84b66:	2b00      	cmp	r3, #0
   84b68:	d003      	beq.n	84b72 <udd_ep_alloc+0x2fa>
				i |= USB_EP_DIR_IN;
   84b6a:	7cbb      	ldrb	r3, [r7, #18]
   84b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   84b70:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84b72:	68fb      	ldr	r3, [r7, #12]
   84b74:	681b      	ldr	r3, [r3, #0]
   84b76:	68fa      	ldr	r2, [r7, #12]
   84b78:	68d1      	ldr	r1, [r2, #12]
   84b7a:	7cba      	ldrb	r2, [r7, #18]
   84b7c:	2001      	movs	r0, #1
   84b7e:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   84b80:	2300      	movs	r3, #0
   84b82:	e04c      	b.n	84c1e <udd_ep_alloc+0x3a6>
   84b84:	400a4000 	.word	0x400a4000
   84b88:	20000f6c 	.word	0x20000f6c
		}
		udd_enable_endpoint_bank_autoswitch(i);
   84b8c:	4a26      	ldr	r2, [pc, #152]	; (84c28 <udd_ep_alloc+0x3b0>)
   84b8e:	7cbb      	ldrb	r3, [r7, #18]
   84b90:	3308      	adds	r3, #8
   84b92:	015b      	lsls	r3, r3, #5
   84b94:	4413      	add	r3, r2
   84b96:	3304      	adds	r3, #4
   84b98:	681a      	ldr	r2, [r3, #0]
   84b9a:	4923      	ldr	r1, [pc, #140]	; (84c28 <udd_ep_alloc+0x3b0>)
   84b9c:	7cbb      	ldrb	r3, [r7, #18]
   84b9e:	f042 0202 	orr.w	r2, r2, #2
   84ba2:	3308      	adds	r3, #8
   84ba4:	015b      	lsls	r3, r3, #5
   84ba6:	440b      	add	r3, r1
   84ba8:	3304      	adds	r3, #4
   84baa:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   84bac:	7afb      	ldrb	r3, [r7, #11]
   84bae:	2b00      	cmp	r3, #0
   84bb0:	d02d      	beq.n	84c0e <udd_ep_alloc+0x396>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   84bb2:	68fb      	ldr	r3, [r7, #12]
   84bb4:	68da      	ldr	r2, [r3, #12]
   84bb6:	68fb      	ldr	r3, [r7, #12]
   84bb8:	691b      	ldr	r3, [r3, #16]
   84bba:	1ad2      	subs	r2, r2, r3
   84bbc:	68fb      	ldr	r3, [r7, #12]
   84bbe:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   84bc0:	68fb      	ldr	r3, [r7, #12]
   84bc2:	7d1b      	ldrb	r3, [r3, #20]
   84bc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   84bc8:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   84bca:	2b00      	cmp	r3, #0
   84bcc:	bf14      	ite	ne
   84bce:	2301      	movne	r3, #1
   84bd0:	2300      	moveq	r3, #0
   84bd2:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   84bd4:	68fb      	ldr	r3, [r7, #12]
   84bd6:	685a      	ldr	r2, [r3, #4]
   84bd8:	68fb      	ldr	r3, [r7, #12]
   84bda:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84bdc:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   84bde:	68fb      	ldr	r3, [r7, #12]
   84be0:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   84be2:	68fb      	ldr	r3, [r7, #12]
   84be4:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84be6:	1ad2      	subs	r2, r2, r3
   84be8:	68fb      	ldr	r3, [r7, #12]
   84bea:	681b      	ldr	r3, [r3, #0]
   84bec:	7cb8      	ldrb	r0, [r7, #18]
   84bee:	9300      	str	r3, [sp, #0]
   84bf0:	4613      	mov	r3, r2
   84bf2:	4622      	mov	r2, r4
   84bf4:	4c0d      	ldr	r4, [pc, #52]	; (84c2c <udd_ep_alloc+0x3b4>)
   84bf6:	47a0      	blx	r4
   84bf8:	4603      	mov	r3, r0
   84bfa:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   84bfc:	7afb      	ldrb	r3, [r7, #11]
   84bfe:	f083 0301 	eor.w	r3, r3, #1
   84c02:	b2db      	uxtb	r3, r3
   84c04:	2b00      	cmp	r3, #0
   84c06:	d002      	beq.n	84c0e <udd_ep_alloc+0x396>
				dbg_print("ErrReRun%d ", i);
				return false;
   84c08:	2300      	movs	r3, #0
   84c0a:	e008      	b.n	84c1e <udd_ep_alloc+0x3a6>
			continue;
   84c0c:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84c0e:	7cbb      	ldrb	r3, [r7, #18]
   84c10:	3301      	adds	r3, #1
   84c12:	74bb      	strb	r3, [r7, #18]
   84c14:	7cbb      	ldrb	r3, [r7, #18]
   84c16:	2b02      	cmp	r3, #2
   84c18:	f67f af50 	bls.w	84abc <udd_ep_alloc+0x244>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   84c1c:	2301      	movs	r3, #1
}
   84c1e:	4618      	mov	r0, r3
   84c20:	371c      	adds	r7, #28
   84c22:	46bd      	mov	sp, r7
   84c24:	bd90      	pop	{r4, r7, pc}
   84c26:	bf00      	nop
   84c28:	400a4000 	.word	0x400a4000
   84c2c:	00084f5d 	.word	0x00084f5d

00084c30 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   84c30:	b580      	push	{r7, lr}
   84c32:	b084      	sub	sp, #16
   84c34:	af00      	add	r7, sp, #0
   84c36:	4603      	mov	r3, r0
   84c38:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84c3a:	79fb      	ldrb	r3, [r7, #7]
   84c3c:	f003 030f 	and.w	r3, r3, #15
   84c40:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   84c42:	7bfb      	ldrb	r3, [r7, #15]
   84c44:	2b02      	cmp	r3, #2
   84c46:	d828      	bhi.n	84c9a <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   84c48:	4a16      	ldr	r2, [pc, #88]	; (84ca4 <udd_ep_free+0x74>)
   84c4a:	7bfb      	ldrb	r3, [r7, #15]
   84c4c:	015b      	lsls	r3, r3, #5
   84c4e:	4413      	add	r3, r2
   84c50:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84c54:	2201      	movs	r2, #1
   84c56:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   84c58:	4a12      	ldr	r2, [pc, #72]	; (84ca4 <udd_ep_free+0x74>)
   84c5a:	7bfb      	ldrb	r3, [r7, #15]
   84c5c:	3308      	adds	r3, #8
   84c5e:	015b      	lsls	r3, r3, #5
   84c60:	4413      	add	r3, r2
   84c62:	681a      	ldr	r2, [r3, #0]
   84c64:	490f      	ldr	r1, [pc, #60]	; (84ca4 <udd_ep_free+0x74>)
   84c66:	7bfb      	ldrb	r3, [r7, #15]
   84c68:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   84c6c:	3308      	adds	r3, #8
   84c6e:	015b      	lsls	r3, r3, #5
   84c70:	440b      	add	r3, r1
   84c72:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   84c74:	79fb      	ldrb	r3, [r7, #7]
   84c76:	4618      	mov	r0, r3
   84c78:	4b0b      	ldr	r3, [pc, #44]	; (84ca8 <udd_ep_free+0x78>)
   84c7a:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   84c7c:	7bfb      	ldrb	r3, [r7, #15]
   84c7e:	1e5a      	subs	r2, r3, #1
   84c80:	490a      	ldr	r1, [pc, #40]	; (84cac <udd_ep_free+0x7c>)
   84c82:	4613      	mov	r3, r2
   84c84:	005b      	lsls	r3, r3, #1
   84c86:	4413      	add	r3, r2
   84c88:	00db      	lsls	r3, r3, #3
   84c8a:	440b      	add	r3, r1
   84c8c:	f103 0210 	add.w	r2, r3, #16
   84c90:	7913      	ldrb	r3, [r2, #4]
   84c92:	f36f 0382 	bfc	r3, #2, #1
   84c96:	7113      	strb	r3, [r2, #4]
   84c98:	e000      	b.n	84c9c <udd_ep_free+0x6c>
		return;
   84c9a:	bf00      	nop
}
   84c9c:	3710      	adds	r7, #16
   84c9e:	46bd      	mov	sp, r7
   84ca0:	bd80      	pop	{r7, pc}
   84ca2:	bf00      	nop
   84ca4:	400a4000 	.word	0x400a4000
   84ca8:	00085a6d 	.word	0x00085a6d
   84cac:	20000f6c 	.word	0x20000f6c

00084cb0 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   84cb0:	b480      	push	{r7}
   84cb2:	b085      	sub	sp, #20
   84cb4:	af00      	add	r7, sp, #0
   84cb6:	4603      	mov	r3, r0
   84cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84cba:	79fb      	ldrb	r3, [r7, #7]
   84cbc:	f003 030f 	and.w	r3, r3, #15
   84cc0:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84cc2:	7bfb      	ldrb	r3, [r7, #15]
   84cc4:	1e5a      	subs	r2, r3, #1
   84cc6:	4613      	mov	r3, r2
   84cc8:	005b      	lsls	r3, r3, #1
   84cca:	4413      	add	r3, r2
   84ccc:	00db      	lsls	r3, r3, #3
   84cce:	4a10      	ldr	r2, [pc, #64]	; (84d10 <udd_ep_is_halted+0x60>)
   84cd0:	4413      	add	r3, r2
   84cd2:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   84cd4:	4a0f      	ldr	r2, [pc, #60]	; (84d14 <udd_ep_is_halted+0x64>)
   84cd6:	7bfb      	ldrb	r3, [r7, #15]
   84cd8:	015b      	lsls	r3, r3, #5
   84cda:	4413      	add	r3, r2
   84cdc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84ce0:	681b      	ldr	r3, [r3, #0]
   84ce2:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   84ce6:	2b00      	cmp	r3, #0
   84ce8:	d106      	bne.n	84cf8 <udd_ep_is_halted+0x48>
   84cea:	68bb      	ldr	r3, [r7, #8]
   84cec:	7d1b      	ldrb	r3, [r3, #20]
   84cee:	f003 0304 	and.w	r3, r3, #4
   84cf2:	b2db      	uxtb	r3, r3
   84cf4:	2b00      	cmp	r3, #0
   84cf6:	d001      	beq.n	84cfc <udd_ep_is_halted+0x4c>
   84cf8:	2301      	movs	r3, #1
   84cfa:	e000      	b.n	84cfe <udd_ep_is_halted+0x4e>
   84cfc:	2300      	movs	r3, #0
   84cfe:	f003 0301 	and.w	r3, r3, #1
   84d02:	b2db      	uxtb	r3, r3
}
   84d04:	4618      	mov	r0, r3
   84d06:	3714      	adds	r7, #20
   84d08:	46bd      	mov	sp, r7
   84d0a:	bc80      	pop	{r7}
   84d0c:	4770      	bx	lr
   84d0e:	bf00      	nop
   84d10:	20000f6c 	.word	0x20000f6c
   84d14:	400a4000 	.word	0x400a4000

00084d18 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   84d18:	b480      	push	{r7}
   84d1a:	b085      	sub	sp, #20
   84d1c:	af00      	add	r7, sp, #0
   84d1e:	4603      	mov	r3, r0
   84d20:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84d22:	79fb      	ldrb	r3, [r7, #7]
   84d24:	f003 030f 	and.w	r3, r3, #15
   84d28:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   84d2a:	7bfb      	ldrb	r3, [r7, #15]
   84d2c:	2b02      	cmp	r3, #2
   84d2e:	d901      	bls.n	84d34 <udd_ep_set_halt+0x1c>
		return false;
   84d30:	2300      	movs	r3, #0
   84d32:	e071      	b.n	84e18 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   84d34:	7bfb      	ldrb	r3, [r7, #15]
   84d36:	1e5a      	subs	r2, r3, #1
   84d38:	4613      	mov	r3, r2
   84d3a:	005b      	lsls	r3, r3, #1
   84d3c:	4413      	add	r3, r2
   84d3e:	00db      	lsls	r3, r3, #3
   84d40:	4a38      	ldr	r2, [pc, #224]	; (84e24 <udd_ep_set_halt+0x10c>)
   84d42:	4413      	add	r3, r2
   84d44:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84d46:	4a38      	ldr	r2, [pc, #224]	; (84e28 <udd_ep_set_halt+0x110>)
   84d48:	7bfb      	ldrb	r3, [r7, #15]
   84d4a:	015b      	lsls	r3, r3, #5
   84d4c:	4413      	add	r3, r2
   84d4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84d52:	681b      	ldr	r3, [r3, #0]
   84d54:	f003 0320 	and.w	r3, r3, #32
   84d58:	2b00      	cmp	r3, #0
   84d5a:	d106      	bne.n	84d6a <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84d5c:	68bb      	ldr	r3, [r7, #8]
   84d5e:	7d1b      	ldrb	r3, [r3, #20]
   84d60:	f003 0304 	and.w	r3, r3, #4
   84d64:	b2db      	uxtb	r3, r3
   84d66:	2b00      	cmp	r3, #0
   84d68:	d001      	beq.n	84d6e <udd_ep_set_halt+0x56>
		return true; // Already STALL
   84d6a:	2301      	movs	r3, #1
   84d6c:	e054      	b.n	84e18 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   84d6e:	68bb      	ldr	r3, [r7, #8]
   84d70:	7d1b      	ldrb	r3, [r3, #20]
   84d72:	f003 0301 	and.w	r3, r3, #1
   84d76:	b2db      	uxtb	r3, r3
   84d78:	2b00      	cmp	r3, #0
   84d7a:	d001      	beq.n	84d80 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   84d7c:	2300      	movs	r3, #0
   84d7e:	e04b      	b.n	84e18 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84d84:	2b00      	cmp	r3, #0
   84d86:	da25      	bge.n	84dd4 <udd_ep_set_halt+0xbc>
   84d88:	4a27      	ldr	r2, [pc, #156]	; (84e28 <udd_ep_set_halt+0x110>)
   84d8a:	7bfb      	ldrb	r3, [r7, #15]
   84d8c:	015b      	lsls	r3, r3, #5
   84d8e:	4413      	add	r3, r2
   84d90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84d94:	681b      	ldr	r3, [r3, #0]
   84d96:	0c9b      	lsrs	r3, r3, #18
   84d98:	f003 0303 	and.w	r3, r3, #3
   84d9c:	2b00      	cmp	r3, #0
   84d9e:	d019      	beq.n	84dd4 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   84da0:	68ba      	ldr	r2, [r7, #8]
   84da2:	7d13      	ldrb	r3, [r2, #20]
   84da4:	f043 0304 	orr.w	r3, r3, #4
   84da8:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   84daa:	4a1f      	ldr	r2, [pc, #124]	; (84e28 <udd_ep_set_halt+0x110>)
   84dac:	7bfb      	ldrb	r3, [r7, #15]
   84dae:	3308      	adds	r3, #8
   84db0:	015b      	lsls	r3, r3, #5
   84db2:	4413      	add	r3, r2
   84db4:	3304      	adds	r3, #4
   84db6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84dba:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   84dbc:	4b1a      	ldr	r3, [pc, #104]	; (84e28 <udd_ep_set_halt+0x110>)
   84dbe:	691a      	ldr	r2, [r3, #16]
   84dc0:	7bfb      	ldrb	r3, [r7, #15]
   84dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
   84dc6:	fa01 f303 	lsl.w	r3, r1, r3
   84dca:	4917      	ldr	r1, [pc, #92]	; (84e28 <udd_ep_set_halt+0x110>)
   84dcc:	4313      	orrs	r3, r2
   84dce:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   84dd0:	2301      	movs	r3, #1
   84dd2:	e021      	b.n	84e18 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84dd4:	4a14      	ldr	r2, [pc, #80]	; (84e28 <udd_ep_set_halt+0x110>)
   84dd6:	7bfb      	ldrb	r3, [r7, #15]
   84dd8:	015b      	lsls	r3, r3, #5
   84dda:	4413      	add	r3, r2
   84ddc:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84de0:	681a      	ldr	r2, [r3, #0]
   84de2:	4911      	ldr	r1, [pc, #68]	; (84e28 <udd_ep_set_halt+0x110>)
   84de4:	7bfb      	ldrb	r3, [r7, #15]
   84de6:	f022 0202 	bic.w	r2, r2, #2
   84dea:	015b      	lsls	r3, r3, #5
   84dec:	440b      	add	r3, r1
   84dee:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84df2:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   84df4:	4a0c      	ldr	r2, [pc, #48]	; (84e28 <udd_ep_set_halt+0x110>)
   84df6:	7bfb      	ldrb	r3, [r7, #15]
   84df8:	015b      	lsls	r3, r3, #5
   84dfa:	4413      	add	r3, r2
   84dfc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   84e00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84e04:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   84e06:	4a08      	ldr	r2, [pc, #32]	; (84e28 <udd_ep_set_halt+0x110>)
   84e08:	7bfb      	ldrb	r3, [r7, #15]
   84e0a:	015b      	lsls	r3, r3, #5
   84e0c:	4413      	add	r3, r2
   84e0e:	f503 738a 	add.w	r3, r3, #276	; 0x114
   84e12:	2220      	movs	r2, #32
   84e14:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   84e16:	2301      	movs	r3, #1
}
   84e18:	4618      	mov	r0, r3
   84e1a:	3714      	adds	r7, #20
   84e1c:	46bd      	mov	sp, r7
   84e1e:	bc80      	pop	{r7}
   84e20:	4770      	bx	lr
   84e22:	bf00      	nop
   84e24:	20000f6c 	.word	0x20000f6c
   84e28:	400a4000 	.word	0x400a4000

00084e2c <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   84e2c:	b580      	push	{r7, lr}
   84e2e:	b084      	sub	sp, #16
   84e30:	af00      	add	r7, sp, #0
   84e32:	4603      	mov	r3, r0
   84e34:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   84e36:	2300      	movs	r3, #0
   84e38:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   84e3a:	79fb      	ldrb	r3, [r7, #7]
   84e3c:	f003 030f 	and.w	r3, r3, #15
   84e40:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   84e42:	79fb      	ldrb	r3, [r7, #7]
   84e44:	2b02      	cmp	r3, #2
   84e46:	d901      	bls.n	84e4c <udd_ep_clear_halt+0x20>
		return false;
   84e48:	2300      	movs	r3, #0
   84e4a:	e07e      	b.n	84f4a <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   84e4c:	79fb      	ldrb	r3, [r7, #7]
   84e4e:	1e5a      	subs	r2, r3, #1
   84e50:	4613      	mov	r3, r2
   84e52:	005b      	lsls	r3, r3, #1
   84e54:	4413      	add	r3, r2
   84e56:	00db      	lsls	r3, r3, #3
   84e58:	4a3e      	ldr	r2, [pc, #248]	; (84f54 <udd_ep_clear_halt+0x128>)
   84e5a:	4413      	add	r3, r2
   84e5c:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   84e5e:	68bb      	ldr	r3, [r7, #8]
   84e60:	7d1b      	ldrb	r3, [r3, #20]
   84e62:	f003 0304 	and.w	r3, r3, #4
   84e66:	b2db      	uxtb	r3, r3
   84e68:	2b00      	cmp	r3, #0
   84e6a:	d01a      	beq.n	84ea2 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   84e6c:	68ba      	ldr	r2, [r7, #8]
   84e6e:	7d13      	ldrb	r3, [r2, #20]
   84e70:	f36f 0382 	bfc	r3, #2, #1
   84e74:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   84e76:	4a38      	ldr	r2, [pc, #224]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84e78:	79fb      	ldrb	r3, [r7, #7]
   84e7a:	015b      	lsls	r3, r3, #5
   84e7c:	4413      	add	r3, r2
   84e7e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84e82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84e86:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   84e88:	4b33      	ldr	r3, [pc, #204]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84e8a:	691a      	ldr	r2, [r3, #16]
   84e8c:	79fb      	ldrb	r3, [r7, #7]
   84e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
   84e92:	fa01 f303 	lsl.w	r3, r1, r3
   84e96:	43db      	mvns	r3, r3
   84e98:	492f      	ldr	r1, [pc, #188]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84e9a:	4013      	ands	r3, r2
   84e9c:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   84e9e:	2301      	movs	r3, #1
   84ea0:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   84ea2:	4a2d      	ldr	r2, [pc, #180]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84ea4:	79fb      	ldrb	r3, [r7, #7]
   84ea6:	015b      	lsls	r3, r3, #5
   84ea8:	4413      	add	r3, r2
   84eaa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84eae:	681b      	ldr	r3, [r3, #0]
   84eb0:	f003 0320 	and.w	r3, r3, #32
   84eb4:	2b00      	cmp	r3, #0
   84eb6:	d035      	beq.n	84f24 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   84eb8:	4a27      	ldr	r2, [pc, #156]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84eba:	79fb      	ldrb	r3, [r7, #7]
   84ebc:	015b      	lsls	r3, r3, #5
   84ebe:	4413      	add	r3, r2
   84ec0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84ec4:	681b      	ldr	r3, [r3, #0]
   84ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   84eca:	2b00      	cmp	r3, #0
   84ecc:	d010      	beq.n	84ef0 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   84ece:	4a22      	ldr	r2, [pc, #136]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84ed0:	79fb      	ldrb	r3, [r7, #7]
   84ed2:	015b      	lsls	r3, r3, #5
   84ed4:	4413      	add	r3, r2
   84ed6:	f503 738c 	add.w	r3, r3, #280	; 0x118
   84eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84ede:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   84ee0:	4a1d      	ldr	r2, [pc, #116]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84ee2:	79fb      	ldrb	r3, [r7, #7]
   84ee4:	015b      	lsls	r3, r3, #5
   84ee6:	4413      	add	r3, r2
   84ee8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   84eec:	2240      	movs	r2, #64	; 0x40
   84eee:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   84ef0:	4a19      	ldr	r2, [pc, #100]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84ef2:	79fb      	ldrb	r3, [r7, #7]
   84ef4:	015b      	lsls	r3, r3, #5
   84ef6:	4413      	add	r3, r2
   84ef8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   84efc:	2220      	movs	r2, #32
   84efe:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   84f00:	4a15      	ldr	r2, [pc, #84]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84f02:	79fb      	ldrb	r3, [r7, #7]
   84f04:	3308      	adds	r3, #8
   84f06:	015b      	lsls	r3, r3, #5
   84f08:	4413      	add	r3, r2
   84f0a:	3304      	adds	r3, #4
   84f0c:	681a      	ldr	r2, [r3, #0]
   84f0e:	4912      	ldr	r1, [pc, #72]	; (84f58 <udd_ep_clear_halt+0x12c>)
   84f10:	79fb      	ldrb	r3, [r7, #7]
   84f12:	f042 0202 	orr.w	r2, r2, #2
   84f16:	3308      	adds	r3, #8
   84f18:	015b      	lsls	r3, r3, #5
   84f1a:	440b      	add	r3, r1
   84f1c:	3304      	adds	r3, #4
   84f1e:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   84f20:	2301      	movs	r3, #1
   84f22:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   84f24:	7bfb      	ldrb	r3, [r7, #15]
   84f26:	2b00      	cmp	r3, #0
   84f28:	d00e      	beq.n	84f48 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   84f2a:	68bb      	ldr	r3, [r7, #8]
   84f2c:	7d1b      	ldrb	r3, [r3, #20]
   84f2e:	f003 0301 	and.w	r3, r3, #1
   84f32:	b2db      	uxtb	r3, r3
   84f34:	2b00      	cmp	r3, #0
   84f36:	d007      	beq.n	84f48 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   84f38:	68ba      	ldr	r2, [r7, #8]
   84f3a:	7d13      	ldrb	r3, [r2, #20]
   84f3c:	f36f 0300 	bfc	r3, #0, #1
   84f40:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   84f42:	68bb      	ldr	r3, [r7, #8]
   84f44:	681b      	ldr	r3, [r3, #0]
   84f46:	4798      	blx	r3
		}
	}
	return true;
   84f48:	2301      	movs	r3, #1
}
   84f4a:	4618      	mov	r0, r3
   84f4c:	3710      	adds	r7, #16
   84f4e:	46bd      	mov	sp, r7
   84f50:	bd80      	pop	{r7, pc}
   84f52:	bf00      	nop
   84f54:	20000f6c 	.word	0x20000f6c
   84f58:	400a4000 	.word	0x400a4000

00084f5c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84f5c:	b580      	push	{r7, lr}
   84f5e:	b086      	sub	sp, #24
   84f60:	af00      	add	r7, sp, #0
   84f62:	60ba      	str	r2, [r7, #8]
   84f64:	607b      	str	r3, [r7, #4]
   84f66:	4603      	mov	r3, r0
   84f68:	73fb      	strb	r3, [r7, #15]
   84f6a:	460b      	mov	r3, r1
   84f6c:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   84f6e:	7bfb      	ldrb	r3, [r7, #15]
   84f70:	f003 030f 	and.w	r3, r3, #15
   84f74:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   84f76:	7bfb      	ldrb	r3, [r7, #15]
   84f78:	2b02      	cmp	r3, #2
   84f7a:	d901      	bls.n	84f80 <udd_ep_run+0x24>
		return false;
   84f7c:	2300      	movs	r3, #0
   84f7e:	e063      	b.n	85048 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   84f80:	7bfb      	ldrb	r3, [r7, #15]
   84f82:	1e5a      	subs	r2, r3, #1
   84f84:	4613      	mov	r3, r2
   84f86:	005b      	lsls	r3, r3, #1
   84f88:	4413      	add	r3, r2
   84f8a:	00db      	lsls	r3, r3, #3
   84f8c:	4a30      	ldr	r2, [pc, #192]	; (85050 <udd_ep_run+0xf4>)
   84f8e:	4413      	add	r3, r2
   84f90:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   84f92:	4a30      	ldr	r2, [pc, #192]	; (85054 <udd_ep_run+0xf8>)
   84f94:	7bfb      	ldrb	r3, [r7, #15]
   84f96:	015b      	lsls	r3, r3, #5
   84f98:	4413      	add	r3, r2
   84f9a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84f9e:	681b      	ldr	r3, [r3, #0]
   84fa0:	f003 0301 	and.w	r3, r3, #1
   84fa4:	2b00      	cmp	r3, #0
   84fa6:	d011      	beq.n	84fcc <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   84fa8:	4a2a      	ldr	r2, [pc, #168]	; (85054 <udd_ep_run+0xf8>)
   84faa:	7bfb      	ldrb	r3, [r7, #15]
   84fac:	015b      	lsls	r3, r3, #5
   84fae:	4413      	add	r3, r2
   84fb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84fb4:	681b      	ldr	r3, [r3, #0]
   84fb6:	f003 0320 	and.w	r3, r3, #32
   84fba:	2b00      	cmp	r3, #0
   84fbc:	d106      	bne.n	84fcc <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   84fbe:	697b      	ldr	r3, [r7, #20]
   84fc0:	7d1b      	ldrb	r3, [r3, #20]
   84fc2:	f003 0304 	and.w	r3, r3, #4
   84fc6:	b2db      	uxtb	r3, r3
   84fc8:	2b00      	cmp	r3, #0
   84fca:	d001      	beq.n	84fd0 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   84fcc:	2300      	movs	r3, #0
   84fce:	e03b      	b.n	85048 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   84fd0:	4b21      	ldr	r3, [pc, #132]	; (85058 <udd_ep_run+0xfc>)
   84fd2:	4798      	blx	r3
   84fd4:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   84fd6:	697b      	ldr	r3, [r7, #20]
   84fd8:	7d1b      	ldrb	r3, [r3, #20]
   84fda:	f003 0301 	and.w	r3, r3, #1
   84fde:	b2db      	uxtb	r3, r3
   84fe0:	2b00      	cmp	r3, #0
   84fe2:	d004      	beq.n	84fee <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   84fe4:	6938      	ldr	r0, [r7, #16]
   84fe6:	4b1d      	ldr	r3, [pc, #116]	; (8505c <udd_ep_run+0x100>)
   84fe8:	4798      	blx	r3
		return false; // Job already on going
   84fea:	2300      	movs	r3, #0
   84fec:	e02c      	b.n	85048 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   84fee:	697a      	ldr	r2, [r7, #20]
   84ff0:	7d13      	ldrb	r3, [r2, #20]
   84ff2:	f043 0301 	orr.w	r3, r3, #1
   84ff6:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   84ff8:	6938      	ldr	r0, [r7, #16]
   84ffa:	4b18      	ldr	r3, [pc, #96]	; (8505c <udd_ep_run+0x100>)
   84ffc:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   84ffe:	697b      	ldr	r3, [r7, #20]
   85000:	68ba      	ldr	r2, [r7, #8]
   85002:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   85004:	697b      	ldr	r3, [r7, #20]
   85006:	687a      	ldr	r2, [r7, #4]
   85008:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   8500a:	697b      	ldr	r3, [r7, #20]
   8500c:	2200      	movs	r2, #0
   8500e:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   85010:	697b      	ldr	r3, [r7, #20]
   85012:	2200      	movs	r2, #0
   85014:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   85016:	697b      	ldr	r3, [r7, #20]
   85018:	6a3a      	ldr	r2, [r7, #32]
   8501a:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8501c:	7bbb      	ldrb	r3, [r7, #14]
   8501e:	2b00      	cmp	r3, #0
   85020:	d102      	bne.n	85028 <udd_ep_run+0xcc>
   85022:	687b      	ldr	r3, [r7, #4]
   85024:	2b00      	cmp	r3, #0
   85026:	d101      	bne.n	8502c <udd_ep_run+0xd0>
   85028:	2301      	movs	r3, #1
   8502a:	e000      	b.n	8502e <udd_ep_run+0xd2>
   8502c:	2300      	movs	r3, #0
   8502e:	f003 0301 	and.w	r3, r3, #1
   85032:	b2d9      	uxtb	r1, r3
   85034:	697a      	ldr	r2, [r7, #20]
   85036:	7d13      	ldrb	r3, [r2, #20]
   85038:	f361 0341 	bfi	r3, r1, #1, #1
   8503c:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   8503e:	7bfb      	ldrb	r3, [r7, #15]
   85040:	4618      	mov	r0, r3
   85042:	4b07      	ldr	r3, [pc, #28]	; (85060 <udd_ep_run+0x104>)
   85044:	4798      	blx	r3
	return true;
   85046:	2301      	movs	r3, #1
}
   85048:	4618      	mov	r0, r3
   8504a:	3718      	adds	r7, #24
   8504c:	46bd      	mov	sp, r7
   8504e:	bd80      	pop	{r7, pc}
   85050:	20000f6c 	.word	0x20000f6c
   85054:	400a4000 	.word	0x400a4000
   85058:	000842f9 	.word	0x000842f9
   8505c:	00084355 	.word	0x00084355
   85060:	00085b19 	.word	0x00085b19

00085064 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   85064:	b580      	push	{r7, lr}
   85066:	b084      	sub	sp, #16
   85068:	af00      	add	r7, sp, #0
   8506a:	4603      	mov	r3, r0
   8506c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8506e:	79fb      	ldrb	r3, [r7, #7]
   85070:	f003 030f 	and.w	r3, r3, #15
   85074:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   85076:	7bfb      	ldrb	r3, [r7, #15]
   85078:	011a      	lsls	r2, r3, #4
   8507a:	4b19      	ldr	r3, [pc, #100]	; (850e0 <udd_ep_abort+0x7c>)
   8507c:	4413      	add	r3, r2
   8507e:	2200      	movs	r2, #0
   85080:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   85082:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85086:	2b00      	cmp	r3, #0
   85088:	da21      	bge.n	850ce <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   8508a:	e014      	b.n	850b6 <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   8508c:	4a15      	ldr	r2, [pc, #84]	; (850e4 <udd_ep_abort+0x80>)
   8508e:	7bfb      	ldrb	r3, [r7, #15]
   85090:	015b      	lsls	r3, r3, #5
   85092:	4413      	add	r3, r2
   85094:	f503 738a 	add.w	r3, r3, #276	; 0x114
   85098:	f44f 7200 	mov.w	r2, #512	; 0x200
   8509c:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   8509e:	bf00      	nop
   850a0:	4a10      	ldr	r2, [pc, #64]	; (850e4 <udd_ep_abort+0x80>)
   850a2:	7bfb      	ldrb	r3, [r7, #15]
   850a4:	015b      	lsls	r3, r3, #5
   850a6:	4413      	add	r3, r2
   850a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   850ac:	681b      	ldr	r3, [r3, #0]
   850ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
   850b2:	2b00      	cmp	r3, #0
   850b4:	d1f4      	bne.n	850a0 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   850b6:	4a0b      	ldr	r2, [pc, #44]	; (850e4 <udd_ep_abort+0x80>)
   850b8:	7bfb      	ldrb	r3, [r7, #15]
   850ba:	015b      	lsls	r3, r3, #5
   850bc:	4413      	add	r3, r2
   850be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   850c2:	681b      	ldr	r3, [r3, #0]
   850c4:	0c9b      	lsrs	r3, r3, #18
   850c6:	f003 0303 	and.w	r3, r3, #3
   850ca:	2b00      	cmp	r3, #0
   850cc:	d1de      	bne.n	8508c <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   850ce:	79fb      	ldrb	r3, [r7, #7]
   850d0:	4618      	mov	r0, r3
   850d2:	4b05      	ldr	r3, [pc, #20]	; (850e8 <udd_ep_abort+0x84>)
   850d4:	4798      	blx	r3
}
   850d6:	bf00      	nop
   850d8:	3710      	adds	r7, #16
   850da:	46bd      	mov	sp, r7
   850dc:	bd80      	pop	{r7, pc}
   850de:	bf00      	nop
   850e0:	400a4300 	.word	0x400a4300
   850e4:	400a4000 	.word	0x400a4000
   850e8:	00085a6d 	.word	0x00085a6d

000850ec <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   850ec:	b480      	push	{r7}
   850ee:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   850f0:	4b0a      	ldr	r3, [pc, #40]	; (8511c <udd_test_mode_j+0x30>)
   850f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   850f6:	f023 0303 	bic.w	r3, r3, #3
   850fa:	4a08      	ldr	r2, [pc, #32]	; (8511c <udd_test_mode_j+0x30>)
   850fc:	f043 0302 	orr.w	r3, r3, #2
   85100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   85104:	4b05      	ldr	r3, [pc, #20]	; (8511c <udd_test_mode_j+0x30>)
   85106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8510a:	4a04      	ldr	r2, [pc, #16]	; (8511c <udd_test_mode_j+0x30>)
   8510c:	f043 0304 	orr.w	r3, r3, #4
   85110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85114:	bf00      	nop
   85116:	46bd      	mov	sp, r7
   85118:	bc80      	pop	{r7}
   8511a:	4770      	bx	lr
   8511c:	400a4000 	.word	0x400a4000

00085120 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   85120:	b480      	push	{r7}
   85122:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85124:	4b0a      	ldr	r3, [pc, #40]	; (85150 <udd_test_mode_k+0x30>)
   85126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8512a:	f023 0303 	bic.w	r3, r3, #3
   8512e:	4a08      	ldr	r2, [pc, #32]	; (85150 <udd_test_mode_k+0x30>)
   85130:	f043 0302 	orr.w	r3, r3, #2
   85134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   85138:	4b05      	ldr	r3, [pc, #20]	; (85150 <udd_test_mode_k+0x30>)
   8513a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8513e:	4a04      	ldr	r2, [pc, #16]	; (85150 <udd_test_mode_k+0x30>)
   85140:	f043 0308 	orr.w	r3, r3, #8
   85144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85148:	bf00      	nop
   8514a:	46bd      	mov	sp, r7
   8514c:	bc80      	pop	{r7}
   8514e:	4770      	bx	lr
   85150:	400a4000 	.word	0x400a4000

00085154 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   85154:	b480      	push	{r7}
   85156:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85158:	4b06      	ldr	r3, [pc, #24]	; (85174 <udd_test_mode_se0_nak+0x20>)
   8515a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8515e:	f023 0303 	bic.w	r3, r3, #3
   85162:	4a04      	ldr	r2, [pc, #16]	; (85174 <udd_test_mode_se0_nak+0x20>)
   85164:	f043 0302 	orr.w	r3, r3, #2
   85168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8516c:	bf00      	nop
   8516e:	46bd      	mov	sp, r7
   85170:	bc80      	pop	{r7}
   85172:	4770      	bx	lr
   85174:	400a4000 	.word	0x400a4000

00085178 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   85178:	b4b0      	push	{r4, r5, r7}
   8517a:	b093      	sub	sp, #76	; 0x4c
   8517c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   8517e:	4b2e      	ldr	r3, [pc, #184]	; (85238 <udd_test_mode_packet+0xc0>)
   85180:	1d3c      	adds	r4, r7, #4
   85182:	461d      	mov	r5, r3
   85184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8518a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8518c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8518e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85190:	e895 0003 	ldmia.w	r5, {r0, r1}
   85194:	6020      	str	r0, [r4, #0]
   85196:	3404      	adds	r4, #4
   85198:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   8519a:	4b28      	ldr	r3, [pc, #160]	; (8523c <udd_test_mode_packet+0xc4>)
   8519c:	2201      	movs	r2, #1
   8519e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   851a2:	4b26      	ldr	r3, [pc, #152]	; (8523c <udd_test_mode_packet+0xc4>)
   851a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   851a8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   851ac:	f023 0303 	bic.w	r3, r3, #3
   851b0:	4a22      	ldr	r2, [pc, #136]	; (8523c <udd_test_mode_packet+0xc4>)
   851b2:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   851b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   851ba:	4b20      	ldr	r3, [pc, #128]	; (8523c <udd_test_mode_packet+0xc4>)
   851bc:	2201      	movs	r2, #1
   851be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   851c2:	4b1e      	ldr	r3, [pc, #120]	; (8523c <udd_test_mode_packet+0xc4>)
   851c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   851c8:	f023 0303 	bic.w	r3, r3, #3
   851cc:	4a1b      	ldr	r2, [pc, #108]	; (8523c <udd_test_mode_packet+0xc4>)
   851ce:	f043 0302 	orr.w	r3, r3, #2
   851d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   851d6:	4b19      	ldr	r3, [pc, #100]	; (8523c <udd_test_mode_packet+0xc4>)
   851d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   851dc:	4a17      	ldr	r2, [pc, #92]	; (8523c <udd_test_mode_packet+0xc4>)
   851de:	f043 0310 	orr.w	r3, r3, #16
   851e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   851e6:	4b16      	ldr	r3, [pc, #88]	; (85240 <udd_test_mode_packet+0xc8>)
   851e8:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   851ea:	1d3b      	adds	r3, r7, #4
   851ec:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   851ee:	2300      	movs	r3, #0
   851f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   851f4:	e00c      	b.n	85210 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   851f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   851f8:	1c53      	adds	r3, r2, #1
   851fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   851fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   851fe:	1c59      	adds	r1, r3, #1
   85200:	6439      	str	r1, [r7, #64]	; 0x40
   85202:	7812      	ldrb	r2, [r2, #0]
   85204:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   85206:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8520a:	3301      	adds	r3, #1
   8520c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   85210:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85214:	2b34      	cmp	r3, #52	; 0x34
   85216:	d9ee      	bls.n	851f6 <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   85218:	4b08      	ldr	r3, [pc, #32]	; (8523c <udd_test_mode_packet+0xc4>)
   8521a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8521e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85222:	4b06      	ldr	r3, [pc, #24]	; (8523c <udd_test_mode_packet+0xc4>)
   85224:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85228:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   8522c:	bf00      	nop
   8522e:	374c      	adds	r7, #76	; 0x4c
   85230:	46bd      	mov	sp, r7
   85232:	bcb0      	pop	{r4, r5, r7}
   85234:	4770      	bx	lr
   85236:	bf00      	nop
   85238:	0008cf88 	.word	0x0008cf88
   8523c:	400a4000 	.word	0x400a4000
   85240:	20180000 	.word	0x20180000

00085244 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   85244:	b580      	push	{r7, lr}
   85246:	b082      	sub	sp, #8
   85248:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   8524a:	4b1b      	ldr	r3, [pc, #108]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   8524c:	681b      	ldr	r3, [r3, #0]
   8524e:	4a1a      	ldr	r2, [pc, #104]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   85250:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   85254:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   85256:	4b18      	ldr	r3, [pc, #96]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   85258:	681b      	ldr	r3, [r3, #0]
   8525a:	4a17      	ldr	r2, [pc, #92]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   8525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85260:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   85262:	4b15      	ldr	r3, [pc, #84]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   85264:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   85268:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   8526c:	f023 0303 	bic.w	r3, r3, #3
   85270:	4a11      	ldr	r2, [pc, #68]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   85272:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   85276:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   8527a:	4b0f      	ldr	r3, [pc, #60]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   8527c:	2201      	movs	r2, #1
   8527e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   85282:	4b0e      	ldr	r3, [pc, #56]	; (852bc <udd_reset_ep_ctrl+0x78>)
   85284:	4798      	blx	r3
   85286:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   85288:	4b0b      	ldr	r3, [pc, #44]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   8528a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8528e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   85292:	4b09      	ldr	r3, [pc, #36]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   85294:	f44f 7200 	mov.w	r2, #512	; 0x200
   85298:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   8529c:	4b06      	ldr	r3, [pc, #24]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   8529e:	691b      	ldr	r3, [r3, #16]
   852a0:	4a05      	ldr	r2, [pc, #20]	; (852b8 <udd_reset_ep_ctrl+0x74>)
   852a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   852a6:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   852a8:	6878      	ldr	r0, [r7, #4]
   852aa:	4b05      	ldr	r3, [pc, #20]	; (852c0 <udd_reset_ep_ctrl+0x7c>)
   852ac:	4798      	blx	r3
}
   852ae:	bf00      	nop
   852b0:	3708      	adds	r7, #8
   852b2:	46bd      	mov	sp, r7
   852b4:	bd80      	pop	{r7, pc}
   852b6:	bf00      	nop
   852b8:	400a4000 	.word	0x400a4000
   852bc:	000842f9 	.word	0x000842f9
   852c0:	00084355 	.word	0x00084355

000852c4 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   852c4:	b580      	push	{r7, lr}
   852c6:	b082      	sub	sp, #8
   852c8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   852ca:	4b10      	ldr	r3, [pc, #64]	; (8530c <udd_ctrl_init+0x48>)
   852cc:	4798      	blx	r3
   852ce:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   852d0:	4b0f      	ldr	r3, [pc, #60]	; (85310 <udd_ctrl_init+0x4c>)
   852d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   852d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   852da:	6878      	ldr	r0, [r7, #4]
   852dc:	4b0d      	ldr	r3, [pc, #52]	; (85314 <udd_ctrl_init+0x50>)
   852de:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   852e0:	4b0b      	ldr	r3, [pc, #44]	; (85310 <udd_ctrl_init+0x4c>)
   852e2:	f44f 7200 	mov.w	r2, #512	; 0x200
   852e6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   852ea:	4b0b      	ldr	r3, [pc, #44]	; (85318 <udd_ctrl_init+0x54>)
   852ec:	2200      	movs	r2, #0
   852ee:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   852f0:	4b09      	ldr	r3, [pc, #36]	; (85318 <udd_ctrl_init+0x54>)
   852f2:	2200      	movs	r2, #0
   852f4:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   852f6:	4b08      	ldr	r3, [pc, #32]	; (85318 <udd_ctrl_init+0x54>)
   852f8:	2200      	movs	r2, #0
   852fa:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   852fc:	4b07      	ldr	r3, [pc, #28]	; (8531c <udd_ctrl_init+0x58>)
   852fe:	2200      	movs	r2, #0
   85300:	701a      	strb	r2, [r3, #0]
}
   85302:	bf00      	nop
   85304:	3708      	adds	r7, #8
   85306:	46bd      	mov	sp, r7
   85308:	bd80      	pop	{r7, pc}
   8530a:	bf00      	nop
   8530c:	000842f9 	.word	0x000842f9
   85310:	400a4000 	.word	0x400a4000
   85314:	00084355 	.word	0x00084355
   85318:	20001468 	.word	0x20001468
   8531c:	20000f66 	.word	0x20000f66

00085320 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   85320:	b580      	push	{r7, lr}
   85322:	b084      	sub	sp, #16
   85324:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85326:	4b40      	ldr	r3, [pc, #256]	; (85428 <udd_ctrl_setup_received+0x108>)
   85328:	781b      	ldrb	r3, [r3, #0]
   8532a:	2b00      	cmp	r3, #0
   8532c:	d003      	beq.n	85336 <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   8532e:	4b3f      	ldr	r3, [pc, #252]	; (8542c <udd_ctrl_setup_received+0x10c>)
   85330:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   85332:	4b3f      	ldr	r3, [pc, #252]	; (85430 <udd_ctrl_setup_received+0x110>)
   85334:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   85336:	4b3f      	ldr	r3, [pc, #252]	; (85434 <udd_ctrl_setup_received+0x114>)
   85338:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8533c:	0d1b      	lsrs	r3, r3, #20
   8533e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85342:	2b08      	cmp	r3, #8
   85344:	d007      	beq.n	85356 <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   85346:	4b3c      	ldr	r3, [pc, #240]	; (85438 <udd_ctrl_setup_received+0x118>)
   85348:	4798      	blx	r3
		udd_ack_setup_received(0);
   8534a:	4b3a      	ldr	r3, [pc, #232]	; (85434 <udd_ctrl_setup_received+0x114>)
   8534c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85350:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   85354:	e064      	b.n	85420 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85356:	4b39      	ldr	r3, [pc, #228]	; (8543c <udd_ctrl_setup_received+0x11c>)
   85358:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   8535a:	2300      	movs	r3, #0
   8535c:	73fb      	strb	r3, [r7, #15]
   8535e:	e00a      	b.n	85376 <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85360:	68bb      	ldr	r3, [r7, #8]
   85362:	1c5a      	adds	r2, r3, #1
   85364:	60ba      	str	r2, [r7, #8]
   85366:	7bfa      	ldrb	r2, [r7, #15]
   85368:	4935      	ldr	r1, [pc, #212]	; (85440 <udd_ctrl_setup_received+0x120>)
   8536a:	440a      	add	r2, r1
   8536c:	781b      	ldrb	r3, [r3, #0]
   8536e:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   85370:	7bfb      	ldrb	r3, [r7, #15]
   85372:	3301      	adds	r3, #1
   85374:	73fb      	strb	r3, [r7, #15]
   85376:	7bfb      	ldrb	r3, [r7, #15]
   85378:	2b07      	cmp	r3, #7
   8537a:	d9f1      	bls.n	85360 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   8537c:	4b30      	ldr	r3, [pc, #192]	; (85440 <udd_ctrl_setup_received+0x120>)
   8537e:	885a      	ldrh	r2, [r3, #2]
   85380:	4b2f      	ldr	r3, [pc, #188]	; (85440 <udd_ctrl_setup_received+0x120>)
   85382:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   85384:	4b2e      	ldr	r3, [pc, #184]	; (85440 <udd_ctrl_setup_received+0x120>)
   85386:	889a      	ldrh	r2, [r3, #4]
   85388:	4b2d      	ldr	r3, [pc, #180]	; (85440 <udd_ctrl_setup_received+0x120>)
   8538a:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   8538c:	4b2c      	ldr	r3, [pc, #176]	; (85440 <udd_ctrl_setup_received+0x120>)
   8538e:	88da      	ldrh	r2, [r3, #6]
   85390:	4b2b      	ldr	r3, [pc, #172]	; (85440 <udd_ctrl_setup_received+0x120>)
   85392:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   85394:	4b2b      	ldr	r3, [pc, #172]	; (85444 <udd_ctrl_setup_received+0x124>)
   85396:	4798      	blx	r3
   85398:	4603      	mov	r3, r0
   8539a:	f083 0301 	eor.w	r3, r3, #1
   8539e:	b2db      	uxtb	r3, r3
   853a0:	2b00      	cmp	r3, #0
   853a2:	d007      	beq.n	853b4 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   853a4:	4b24      	ldr	r3, [pc, #144]	; (85438 <udd_ctrl_setup_received+0x118>)
   853a6:	4798      	blx	r3
		udd_ack_setup_received(0);
   853a8:	4b22      	ldr	r3, [pc, #136]	; (85434 <udd_ctrl_setup_received+0x114>)
   853aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   853ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   853b2:	e035      	b.n	85420 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   853b4:	4b1f      	ldr	r3, [pc, #124]	; (85434 <udd_ctrl_setup_received+0x114>)
   853b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   853ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   853be:	4b20      	ldr	r3, [pc, #128]	; (85440 <udd_ctrl_setup_received+0x120>)
   853c0:	781b      	ldrb	r3, [r3, #0]
   853c2:	b25b      	sxtb	r3, r3
   853c4:	2b00      	cmp	r3, #0
   853c6:	da0b      	bge.n	853e0 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   853c8:	4b1f      	ldr	r3, [pc, #124]	; (85448 <udd_ctrl_setup_received+0x128>)
   853ca:	2200      	movs	r2, #0
   853cc:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   853ce:	4b1f      	ldr	r3, [pc, #124]	; (8544c <udd_ctrl_setup_received+0x12c>)
   853d0:	2200      	movs	r2, #0
   853d2:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   853d4:	4b14      	ldr	r3, [pc, #80]	; (85428 <udd_ctrl_setup_received+0x108>)
   853d6:	2202      	movs	r2, #2
   853d8:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   853da:	4b1d      	ldr	r3, [pc, #116]	; (85450 <udd_ctrl_setup_received+0x130>)
   853dc:	4798      	blx	r3
   853de:	e01f      	b.n	85420 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   853e0:	4b17      	ldr	r3, [pc, #92]	; (85440 <udd_ctrl_setup_received+0x120>)
   853e2:	88db      	ldrh	r3, [r3, #6]
   853e4:	2b00      	cmp	r3, #0
   853e6:	d102      	bne.n	853ee <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   853e8:	4b1a      	ldr	r3, [pc, #104]	; (85454 <udd_ctrl_setup_received+0x134>)
   853ea:	4798      	blx	r3
			return;
   853ec:	e018      	b.n	85420 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   853ee:	4b16      	ldr	r3, [pc, #88]	; (85448 <udd_ctrl_setup_received+0x128>)
   853f0:	2200      	movs	r2, #0
   853f2:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   853f4:	4b15      	ldr	r3, [pc, #84]	; (8544c <udd_ctrl_setup_received+0x12c>)
   853f6:	2200      	movs	r2, #0
   853f8:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   853fa:	4b0b      	ldr	r3, [pc, #44]	; (85428 <udd_ctrl_setup_received+0x108>)
   853fc:	2201      	movs	r2, #1
   853fe:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   85400:	4b0c      	ldr	r3, [pc, #48]	; (85434 <udd_ctrl_setup_received+0x114>)
   85402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85406:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   8540a:	4b13      	ldr	r3, [pc, #76]	; (85458 <udd_ctrl_setup_received+0x138>)
   8540c:	4798      	blx	r3
   8540e:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   85410:	4b08      	ldr	r3, [pc, #32]	; (85434 <udd_ctrl_setup_received+0x114>)
   85412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85416:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   8541a:	6878      	ldr	r0, [r7, #4]
   8541c:	4b0f      	ldr	r3, [pc, #60]	; (8545c <udd_ctrl_setup_received+0x13c>)
   8541e:	4798      	blx	r3
	}
}
   85420:	3710      	adds	r7, #16
   85422:	46bd      	mov	sp, r7
   85424:	bd80      	pop	{r7, pc}
   85426:	bf00      	nop
   85428:	20000f66 	.word	0x20000f66
   8542c:	000858c9 	.word	0x000858c9
   85430:	000852c5 	.word	0x000852c5
   85434:	400a4000 	.word	0x400a4000
   85438:	000857fd 	.word	0x000857fd
   8543c:	20180000 	.word	0x20180000
   85440:	20001468 	.word	0x20001468
   85444:	000826ad 	.word	0x000826ad
   85448:	20000f68 	.word	0x20000f68
   8544c:	20000f6a 	.word	0x20000f6a
   85450:	00085461 	.word	0x00085461
   85454:	00085821 	.word	0x00085821
   85458:	000842f9 	.word	0x000842f9
   8545c:	00084355 	.word	0x00084355

00085460 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   85460:	b580      	push	{r7, lr}
   85462:	b084      	sub	sp, #16
   85464:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   85466:	4b4c      	ldr	r3, [pc, #304]	; (85598 <udd_ctrl_in_sent+0x138>)
   85468:	4798      	blx	r3
   8546a:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   8546c:	4b4b      	ldr	r3, [pc, #300]	; (8559c <udd_ctrl_in_sent+0x13c>)
   8546e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85472:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   85476:	6838      	ldr	r0, [r7, #0]
   85478:	4b49      	ldr	r3, [pc, #292]	; (855a0 <udd_ctrl_in_sent+0x140>)
   8547a:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8547c:	4b49      	ldr	r3, [pc, #292]	; (855a4 <udd_ctrl_in_sent+0x144>)
   8547e:	781b      	ldrb	r3, [r3, #0]
   85480:	2b03      	cmp	r3, #3
   85482:	d104      	bne.n	8548e <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   85484:	4b48      	ldr	r3, [pc, #288]	; (855a8 <udd_ctrl_in_sent+0x148>)
   85486:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   85488:	4b48      	ldr	r3, [pc, #288]	; (855ac <udd_ctrl_in_sent+0x14c>)
   8548a:	4798      	blx	r3
		return;
   8548c:	e081      	b.n	85592 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8548e:	4b48      	ldr	r3, [pc, #288]	; (855b0 <udd_ctrl_in_sent+0x150>)
   85490:	899a      	ldrh	r2, [r3, #12]
   85492:	4b48      	ldr	r3, [pc, #288]	; (855b4 <udd_ctrl_in_sent+0x154>)
   85494:	881b      	ldrh	r3, [r3, #0]
   85496:	1ad3      	subs	r3, r2, r3
   85498:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   8549a:	89fb      	ldrh	r3, [r7, #14]
   8549c:	2b00      	cmp	r3, #0
   8549e:	d127      	bne.n	854f0 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   854a0:	4b45      	ldr	r3, [pc, #276]	; (855b8 <udd_ctrl_in_sent+0x158>)
   854a2:	881a      	ldrh	r2, [r3, #0]
   854a4:	4b43      	ldr	r3, [pc, #268]	; (855b4 <udd_ctrl_in_sent+0x154>)
   854a6:	881b      	ldrh	r3, [r3, #0]
   854a8:	4413      	add	r3, r2
   854aa:	b29a      	uxth	r2, r3
   854ac:	4b42      	ldr	r3, [pc, #264]	; (855b8 <udd_ctrl_in_sent+0x158>)
   854ae:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   854b0:	4b3f      	ldr	r3, [pc, #252]	; (855b0 <udd_ctrl_in_sent+0x150>)
   854b2:	88da      	ldrh	r2, [r3, #6]
   854b4:	4b40      	ldr	r3, [pc, #256]	; (855b8 <udd_ctrl_in_sent+0x158>)
   854b6:	881b      	ldrh	r3, [r3, #0]
   854b8:	429a      	cmp	r2, r3
   854ba:	d003      	beq.n	854c4 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   854bc:	4b3f      	ldr	r3, [pc, #252]	; (855bc <udd_ctrl_in_sent+0x15c>)
   854be:	781b      	ldrb	r3, [r3, #0]
   854c0:	2b00      	cmp	r3, #0
   854c2:	d002      	beq.n	854ca <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   854c4:	4b3e      	ldr	r3, [pc, #248]	; (855c0 <udd_ctrl_in_sent+0x160>)
   854c6:	4798      	blx	r3
			return;
   854c8:	e063      	b.n	85592 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   854ca:	4b39      	ldr	r3, [pc, #228]	; (855b0 <udd_ctrl_in_sent+0x150>)
   854cc:	695b      	ldr	r3, [r3, #20]
   854ce:	2b00      	cmp	r3, #0
   854d0:	d00e      	beq.n	854f0 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   854d2:	4b37      	ldr	r3, [pc, #220]	; (855b0 <udd_ctrl_in_sent+0x150>)
   854d4:	695b      	ldr	r3, [r3, #20]
   854d6:	4798      	blx	r3
   854d8:	4603      	mov	r3, r0
   854da:	f083 0301 	eor.w	r3, r3, #1
   854de:	b2db      	uxtb	r3, r3
   854e0:	2b00      	cmp	r3, #0
   854e2:	d105      	bne.n	854f0 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   854e4:	4b33      	ldr	r3, [pc, #204]	; (855b4 <udd_ctrl_in_sent+0x154>)
   854e6:	2200      	movs	r2, #0
   854e8:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   854ea:	4b31      	ldr	r3, [pc, #196]	; (855b0 <udd_ctrl_in_sent+0x150>)
   854ec:	899b      	ldrh	r3, [r3, #12]
   854ee:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   854f0:	89fb      	ldrh	r3, [r7, #14]
   854f2:	2b3f      	cmp	r3, #63	; 0x3f
   854f4:	d905      	bls.n	85502 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   854f6:	2340      	movs	r3, #64	; 0x40
   854f8:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   854fa:	4b30      	ldr	r3, [pc, #192]	; (855bc <udd_ctrl_in_sent+0x15c>)
   854fc:	2200      	movs	r2, #0
   854fe:	701a      	strb	r2, [r3, #0]
   85500:	e002      	b.n	85508 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   85502:	4b2e      	ldr	r3, [pc, #184]	; (855bc <udd_ctrl_in_sent+0x15c>)
   85504:	2201      	movs	r2, #1
   85506:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85508:	4b2e      	ldr	r3, [pc, #184]	; (855c4 <udd_ctrl_in_sent+0x164>)
   8550a:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8550c:	4b28      	ldr	r3, [pc, #160]	; (855b0 <udd_ctrl_in_sent+0x150>)
   8550e:	689b      	ldr	r3, [r3, #8]
   85510:	4a28      	ldr	r2, [pc, #160]	; (855b4 <udd_ctrl_in_sent+0x154>)
   85512:	8812      	ldrh	r2, [r2, #0]
   85514:	4413      	add	r3, r2
   85516:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   85518:	4b1f      	ldr	r3, [pc, #124]	; (85598 <udd_ctrl_in_sent+0x138>)
   8551a:	4798      	blx	r3
   8551c:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   8551e:	4b1f      	ldr	r3, [pc, #124]	; (8559c <udd_ctrl_in_sent+0x13c>)
   85520:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85524:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85528:	2b00      	cmp	r3, #0
   8552a:	d006      	beq.n	8553a <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   8552c:	6838      	ldr	r0, [r7, #0]
   8552e:	4b1c      	ldr	r3, [pc, #112]	; (855a0 <udd_ctrl_in_sent+0x140>)
   85530:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85532:	4b1c      	ldr	r3, [pc, #112]	; (855a4 <udd_ctrl_in_sent+0x144>)
   85534:	2204      	movs	r2, #4
   85536:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   85538:	e02b      	b.n	85592 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8553a:	2300      	movs	r3, #0
   8553c:	737b      	strb	r3, [r7, #13]
   8553e:	e00a      	b.n	85556 <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   85540:	687a      	ldr	r2, [r7, #4]
   85542:	1c53      	adds	r3, r2, #1
   85544:	607b      	str	r3, [r7, #4]
   85546:	68bb      	ldr	r3, [r7, #8]
   85548:	1c59      	adds	r1, r3, #1
   8554a:	60b9      	str	r1, [r7, #8]
   8554c:	7812      	ldrb	r2, [r2, #0]
   8554e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   85550:	7b7b      	ldrb	r3, [r7, #13]
   85552:	3301      	adds	r3, #1
   85554:	737b      	strb	r3, [r7, #13]
   85556:	7b7b      	ldrb	r3, [r7, #13]
   85558:	b29b      	uxth	r3, r3
   8555a:	89fa      	ldrh	r2, [r7, #14]
   8555c:	429a      	cmp	r2, r3
   8555e:	d8ef      	bhi.n	85540 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   85560:	4b14      	ldr	r3, [pc, #80]	; (855b4 <udd_ctrl_in_sent+0x154>)
   85562:	881a      	ldrh	r2, [r3, #0]
   85564:	89fb      	ldrh	r3, [r7, #14]
   85566:	4413      	add	r3, r2
   85568:	b29a      	uxth	r2, r3
   8556a:	4b12      	ldr	r3, [pc, #72]	; (855b4 <udd_ctrl_in_sent+0x154>)
   8556c:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   8556e:	4b0b      	ldr	r3, [pc, #44]	; (8559c <udd_ctrl_in_sent+0x13c>)
   85570:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85574:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85578:	4b08      	ldr	r3, [pc, #32]	; (8559c <udd_ctrl_in_sent+0x13c>)
   8557a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8557e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85582:	4b06      	ldr	r3, [pc, #24]	; (8559c <udd_ctrl_in_sent+0x13c>)
   85584:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85588:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   8558c:	6838      	ldr	r0, [r7, #0]
   8558e:	4b04      	ldr	r3, [pc, #16]	; (855a0 <udd_ctrl_in_sent+0x140>)
   85590:	4798      	blx	r3
}
   85592:	3710      	adds	r7, #16
   85594:	46bd      	mov	sp, r7
   85596:	bd80      	pop	{r7, pc}
   85598:	000842f9 	.word	0x000842f9
   8559c:	400a4000 	.word	0x400a4000
   855a0:	00084355 	.word	0x00084355
   855a4:	20000f66 	.word	0x20000f66
   855a8:	000858c9 	.word	0x000858c9
   855ac:	000852c5 	.word	0x000852c5
   855b0:	20001468 	.word	0x20001468
   855b4:	20000f6a 	.word	0x20000f6a
   855b8:	20000f68 	.word	0x20000f68
   855bc:	20000f9c 	.word	0x20000f9c
   855c0:	00085885 	.word	0x00085885
   855c4:	20180000 	.word	0x20180000

000855c8 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   855c8:	b580      	push	{r7, lr}
   855ca:	b084      	sub	sp, #16
   855cc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   855ce:	4b61      	ldr	r3, [pc, #388]	; (85754 <udd_ctrl_out_received+0x18c>)
   855d0:	781b      	ldrb	r3, [r3, #0]
   855d2:	2b01      	cmp	r3, #1
   855d4:	d00f      	beq.n	855f6 <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   855d6:	4b5f      	ldr	r3, [pc, #380]	; (85754 <udd_ctrl_out_received+0x18c>)
   855d8:	781b      	ldrb	r3, [r3, #0]
   855da:	2b02      	cmp	r3, #2
   855dc:	d003      	beq.n	855e6 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   855de:	4b5d      	ldr	r3, [pc, #372]	; (85754 <udd_ctrl_out_received+0x18c>)
   855e0:	781b      	ldrb	r3, [r3, #0]
   855e2:	2b04      	cmp	r3, #4
   855e4:	d102      	bne.n	855ec <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   855e6:	4b5c      	ldr	r3, [pc, #368]	; (85758 <udd_ctrl_out_received+0x190>)
   855e8:	4798      	blx	r3
   855ea:	e001      	b.n	855f0 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   855ec:	4b5b      	ldr	r3, [pc, #364]	; (8575c <udd_ctrl_out_received+0x194>)
   855ee:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   855f0:	4b5b      	ldr	r3, [pc, #364]	; (85760 <udd_ctrl_out_received+0x198>)
   855f2:	4798      	blx	r3
		return;
   855f4:	e0ab      	b.n	8574e <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   855f6:	4b5b      	ldr	r3, [pc, #364]	; (85764 <udd_ctrl_out_received+0x19c>)
   855f8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   855fc:	0d1b      	lsrs	r3, r3, #20
   855fe:	b29b      	uxth	r3, r3
   85600:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85604:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85606:	4b58      	ldr	r3, [pc, #352]	; (85768 <udd_ctrl_out_received+0x1a0>)
   85608:	899b      	ldrh	r3, [r3, #12]
   8560a:	461a      	mov	r2, r3
   8560c:	4b57      	ldr	r3, [pc, #348]	; (8576c <udd_ctrl_out_received+0x1a4>)
   8560e:	881b      	ldrh	r3, [r3, #0]
   85610:	4619      	mov	r1, r3
   85612:	89bb      	ldrh	r3, [r7, #12]
   85614:	440b      	add	r3, r1
   85616:	429a      	cmp	r2, r3
   85618:	da05      	bge.n	85626 <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8561a:	4b53      	ldr	r3, [pc, #332]	; (85768 <udd_ctrl_out_received+0x1a0>)
   8561c:	899a      	ldrh	r2, [r3, #12]
   8561e:	4b53      	ldr	r3, [pc, #332]	; (8576c <udd_ctrl_out_received+0x1a4>)
   85620:	881b      	ldrh	r3, [r3, #0]
   85622:	1ad3      	subs	r3, r2, r3
   85624:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85626:	4b52      	ldr	r3, [pc, #328]	; (85770 <udd_ctrl_out_received+0x1a8>)
   85628:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8562a:	4b4f      	ldr	r3, [pc, #316]	; (85768 <udd_ctrl_out_received+0x1a0>)
   8562c:	689b      	ldr	r3, [r3, #8]
   8562e:	4a4f      	ldr	r2, [pc, #316]	; (8576c <udd_ctrl_out_received+0x1a4>)
   85630:	8812      	ldrh	r2, [r2, #0]
   85632:	4413      	add	r3, r2
   85634:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   85636:	2300      	movs	r3, #0
   85638:	73fb      	strb	r3, [r7, #15]
   8563a:	e00a      	b.n	85652 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   8563c:	68ba      	ldr	r2, [r7, #8]
   8563e:	1c53      	adds	r3, r2, #1
   85640:	60bb      	str	r3, [r7, #8]
   85642:	687b      	ldr	r3, [r7, #4]
   85644:	1c59      	adds	r1, r3, #1
   85646:	6079      	str	r1, [r7, #4]
   85648:	7812      	ldrb	r2, [r2, #0]
   8564a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   8564c:	7bfb      	ldrb	r3, [r7, #15]
   8564e:	3301      	adds	r3, #1
   85650:	73fb      	strb	r3, [r7, #15]
   85652:	7bfb      	ldrb	r3, [r7, #15]
   85654:	b29b      	uxth	r3, r3
   85656:	89ba      	ldrh	r2, [r7, #12]
   85658:	429a      	cmp	r2, r3
   8565a:	d8ef      	bhi.n	8563c <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   8565c:	4b43      	ldr	r3, [pc, #268]	; (8576c <udd_ctrl_out_received+0x1a4>)
   8565e:	881a      	ldrh	r2, [r3, #0]
   85660:	89bb      	ldrh	r3, [r7, #12]
   85662:	4413      	add	r3, r2
   85664:	b29a      	uxth	r2, r3
   85666:	4b41      	ldr	r3, [pc, #260]	; (8576c <udd_ctrl_out_received+0x1a4>)
   85668:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8566a:	89bb      	ldrh	r3, [r7, #12]
   8566c:	2b40      	cmp	r3, #64	; 0x40
   8566e:	d10a      	bne.n	85686 <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   85670:	4b3d      	ldr	r3, [pc, #244]	; (85768 <udd_ctrl_out_received+0x1a0>)
   85672:	88db      	ldrh	r3, [r3, #6]
   85674:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   85676:	4b3f      	ldr	r3, [pc, #252]	; (85774 <udd_ctrl_out_received+0x1ac>)
   85678:	881b      	ldrh	r3, [r3, #0]
   8567a:	4619      	mov	r1, r3
   8567c:	4b3b      	ldr	r3, [pc, #236]	; (8576c <udd_ctrl_out_received+0x1a4>)
   8567e:	881b      	ldrh	r3, [r3, #0]
   85680:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   85682:	429a      	cmp	r2, r3
   85684:	dc20      	bgt.n	856c8 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85686:	4b39      	ldr	r3, [pc, #228]	; (8576c <udd_ctrl_out_received+0x1a4>)
   85688:	881a      	ldrh	r2, [r3, #0]
   8568a:	4b37      	ldr	r3, [pc, #220]	; (85768 <udd_ctrl_out_received+0x1a0>)
   8568c:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8568e:	4b36      	ldr	r3, [pc, #216]	; (85768 <udd_ctrl_out_received+0x1a0>)
   85690:	695b      	ldr	r3, [r3, #20]
   85692:	2b00      	cmp	r3, #0
   85694:	d010      	beq.n	856b8 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   85696:	4b34      	ldr	r3, [pc, #208]	; (85768 <udd_ctrl_out_received+0x1a0>)
   85698:	695b      	ldr	r3, [r3, #20]
   8569a:	4798      	blx	r3
   8569c:	4603      	mov	r3, r0
   8569e:	f083 0301 	eor.w	r3, r3, #1
   856a2:	b2db      	uxtb	r3, r3
   856a4:	2b00      	cmp	r3, #0
   856a6:	d007      	beq.n	856b8 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   856a8:	4b2c      	ldr	r3, [pc, #176]	; (8575c <udd_ctrl_out_received+0x194>)
   856aa:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   856ac:	4b2d      	ldr	r3, [pc, #180]	; (85764 <udd_ctrl_out_received+0x19c>)
   856ae:	f44f 7200 	mov.w	r2, #512	; 0x200
   856b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   856b6:	e04a      	b.n	8574e <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   856b8:	4b2a      	ldr	r3, [pc, #168]	; (85764 <udd_ctrl_out_received+0x19c>)
   856ba:	f44f 7200 	mov.w	r2, #512	; 0x200
   856be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   856c2:	4b2d      	ldr	r3, [pc, #180]	; (85778 <udd_ctrl_out_received+0x1b0>)
   856c4:	4798      	blx	r3
		return;
   856c6:	e042      	b.n	8574e <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   856c8:	4b27      	ldr	r3, [pc, #156]	; (85768 <udd_ctrl_out_received+0x1a0>)
   856ca:	899a      	ldrh	r2, [r3, #12]
   856cc:	4b27      	ldr	r3, [pc, #156]	; (8576c <udd_ctrl_out_received+0x1a4>)
   856ce:	881b      	ldrh	r3, [r3, #0]
   856d0:	429a      	cmp	r2, r3
   856d2:	d127      	bne.n	85724 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   856d4:	4b24      	ldr	r3, [pc, #144]	; (85768 <udd_ctrl_out_received+0x1a0>)
   856d6:	695b      	ldr	r3, [r3, #20]
   856d8:	2b00      	cmp	r3, #0
   856da:	d107      	bne.n	856ec <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   856dc:	4b1f      	ldr	r3, [pc, #124]	; (8575c <udd_ctrl_out_received+0x194>)
   856de:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   856e0:	4b20      	ldr	r3, [pc, #128]	; (85764 <udd_ctrl_out_received+0x19c>)
   856e2:	f44f 7200 	mov.w	r2, #512	; 0x200
   856e6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   856ea:	e030      	b.n	8574e <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   856ec:	4b1e      	ldr	r3, [pc, #120]	; (85768 <udd_ctrl_out_received+0x1a0>)
   856ee:	695b      	ldr	r3, [r3, #20]
   856f0:	4798      	blx	r3
   856f2:	4603      	mov	r3, r0
   856f4:	f083 0301 	eor.w	r3, r3, #1
   856f8:	b2db      	uxtb	r3, r3
   856fa:	2b00      	cmp	r3, #0
   856fc:	d007      	beq.n	8570e <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   856fe:	4b17      	ldr	r3, [pc, #92]	; (8575c <udd_ctrl_out_received+0x194>)
   85700:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85702:	4b18      	ldr	r3, [pc, #96]	; (85764 <udd_ctrl_out_received+0x19c>)
   85704:	f44f 7200 	mov.w	r2, #512	; 0x200
   85708:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   8570c:	e01f      	b.n	8574e <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8570e:	4b19      	ldr	r3, [pc, #100]	; (85774 <udd_ctrl_out_received+0x1ac>)
   85710:	881a      	ldrh	r2, [r3, #0]
   85712:	4b16      	ldr	r3, [pc, #88]	; (8576c <udd_ctrl_out_received+0x1a4>)
   85714:	881b      	ldrh	r3, [r3, #0]
   85716:	4413      	add	r3, r2
   85718:	b29a      	uxth	r2, r3
   8571a:	4b16      	ldr	r3, [pc, #88]	; (85774 <udd_ctrl_out_received+0x1ac>)
   8571c:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   8571e:	4b13      	ldr	r3, [pc, #76]	; (8576c <udd_ctrl_out_received+0x1a4>)
   85720:	2200      	movs	r2, #0
   85722:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   85724:	4b0f      	ldr	r3, [pc, #60]	; (85764 <udd_ctrl_out_received+0x19c>)
   85726:	f44f 7200 	mov.w	r2, #512	; 0x200
   8572a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   8572e:	4b0d      	ldr	r3, [pc, #52]	; (85764 <udd_ctrl_out_received+0x19c>)
   85730:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85734:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   85738:	4b10      	ldr	r3, [pc, #64]	; (8577c <udd_ctrl_out_received+0x1b4>)
   8573a:	4798      	blx	r3
   8573c:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   8573e:	4b09      	ldr	r3, [pc, #36]	; (85764 <udd_ctrl_out_received+0x19c>)
   85740:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85744:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85748:	6838      	ldr	r0, [r7, #0]
   8574a:	4b0d      	ldr	r3, [pc, #52]	; (85780 <udd_ctrl_out_received+0x1b8>)
   8574c:	4798      	blx	r3
}
   8574e:	3710      	adds	r7, #16
   85750:	46bd      	mov	sp, r7
   85752:	bd80      	pop	{r7, pc}
   85754:	20000f66 	.word	0x20000f66
   85758:	000858c9 	.word	0x000858c9
   8575c:	000857fd 	.word	0x000857fd
   85760:	000852c5 	.word	0x000852c5
   85764:	400a4000 	.word	0x400a4000
   85768:	20001468 	.word	0x20001468
   8576c:	20000f6a 	.word	0x20000f6a
   85770:	20180000 	.word	0x20180000
   85774:	20000f68 	.word	0x20000f68
   85778:	00085821 	.word	0x00085821
   8577c:	000842f9 	.word	0x000842f9
   85780:	00084355 	.word	0x00084355

00085784 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   85784:	b580      	push	{r7, lr}
   85786:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   85788:	4b0c      	ldr	r3, [pc, #48]	; (857bc <udd_ctrl_underflow+0x38>)
   8578a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8578e:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85792:	2b00      	cmp	r3, #0
   85794:	d10f      	bne.n	857b6 <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85796:	4b0a      	ldr	r3, [pc, #40]	; (857c0 <udd_ctrl_underflow+0x3c>)
   85798:	781b      	ldrb	r3, [r3, #0]
   8579a:	2b01      	cmp	r3, #1
   8579c:	d102      	bne.n	857a4 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   8579e:	4b09      	ldr	r3, [pc, #36]	; (857c4 <udd_ctrl_underflow+0x40>)
   857a0:	4798      	blx	r3
   857a2:	e009      	b.n	857b8 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   857a4:	4b06      	ldr	r3, [pc, #24]	; (857c0 <udd_ctrl_underflow+0x3c>)
   857a6:	781b      	ldrb	r3, [r3, #0]
   857a8:	2b04      	cmp	r3, #4
   857aa:	d105      	bne.n	857b8 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   857ac:	4b03      	ldr	r3, [pc, #12]	; (857bc <udd_ctrl_underflow+0x38>)
   857ae:	2220      	movs	r2, #32
   857b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   857b4:	e000      	b.n	857b8 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   857b6:	bf00      	nop
	}
}
   857b8:	bd80      	pop	{r7, pc}
   857ba:	bf00      	nop
   857bc:	400a4000 	.word	0x400a4000
   857c0:	20000f66 	.word	0x20000f66
   857c4:	00085821 	.word	0x00085821

000857c8 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   857c8:	b480      	push	{r7}
   857ca:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   857cc:	4b09      	ldr	r3, [pc, #36]	; (857f4 <udd_ctrl_overflow+0x2c>)
   857ce:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   857d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   857d6:	2b00      	cmp	r3, #0
   857d8:	d108      	bne.n	857ec <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   857da:	4b07      	ldr	r3, [pc, #28]	; (857f8 <udd_ctrl_overflow+0x30>)
   857dc:	781b      	ldrb	r3, [r3, #0]
   857de:	2b03      	cmp	r3, #3
   857e0:	d105      	bne.n	857ee <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   857e2:	4b04      	ldr	r3, [pc, #16]	; (857f4 <udd_ctrl_overflow+0x2c>)
   857e4:	2220      	movs	r2, #32
   857e6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   857ea:	e000      	b.n	857ee <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   857ec:	bf00      	nop
	}
}
   857ee:	46bd      	mov	sp, r7
   857f0:	bc80      	pop	{r7}
   857f2:	4770      	bx	lr
   857f4:	400a4000 	.word	0x400a4000
   857f8:	20000f66 	.word	0x20000f66

000857fc <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   857fc:	b480      	push	{r7}
   857fe:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85800:	4b05      	ldr	r3, [pc, #20]	; (85818 <udd_ctrl_stall_data+0x1c>)
   85802:	2205      	movs	r2, #5
   85804:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   85806:	4b05      	ldr	r3, [pc, #20]	; (8581c <udd_ctrl_stall_data+0x20>)
   85808:	2220      	movs	r2, #32
   8580a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   8580e:	bf00      	nop
   85810:	46bd      	mov	sp, r7
   85812:	bc80      	pop	{r7}
   85814:	4770      	bx	lr
   85816:	bf00      	nop
   85818:	20000f66 	.word	0x20000f66
   8581c:	400a4000 	.word	0x400a4000

00085820 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   85820:	b580      	push	{r7, lr}
   85822:	b082      	sub	sp, #8
   85824:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   85826:	4b13      	ldr	r3, [pc, #76]	; (85874 <udd_ctrl_send_zlp_in+0x54>)
   85828:	2203      	movs	r2, #3
   8582a:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   8582c:	4b12      	ldr	r3, [pc, #72]	; (85878 <udd_ctrl_send_zlp_in+0x58>)
   8582e:	4798      	blx	r3
   85830:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   85832:	4b12      	ldr	r3, [pc, #72]	; (8587c <udd_ctrl_send_zlp_in+0x5c>)
   85834:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85838:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8583c:	4b0f      	ldr	r3, [pc, #60]	; (8587c <udd_ctrl_send_zlp_in+0x5c>)
   8583e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85842:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85846:	4b0d      	ldr	r3, [pc, #52]	; (8587c <udd_ctrl_send_zlp_in+0x5c>)
   85848:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8584c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   85850:	4b0a      	ldr	r3, [pc, #40]	; (8587c <udd_ctrl_send_zlp_in+0x5c>)
   85852:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85856:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   8585a:	4b08      	ldr	r3, [pc, #32]	; (8587c <udd_ctrl_send_zlp_in+0x5c>)
   8585c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85860:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85864:	6878      	ldr	r0, [r7, #4]
   85866:	4b06      	ldr	r3, [pc, #24]	; (85880 <udd_ctrl_send_zlp_in+0x60>)
   85868:	4798      	blx	r3
}
   8586a:	bf00      	nop
   8586c:	3708      	adds	r7, #8
   8586e:	46bd      	mov	sp, r7
   85870:	bd80      	pop	{r7, pc}
   85872:	bf00      	nop
   85874:	20000f66 	.word	0x20000f66
   85878:	000842f9 	.word	0x000842f9
   8587c:	400a4000 	.word	0x400a4000
   85880:	00084355 	.word	0x00084355

00085884 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   85884:	b580      	push	{r7, lr}
   85886:	b082      	sub	sp, #8
   85888:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8588a:	4b0b      	ldr	r3, [pc, #44]	; (858b8 <udd_ctrl_send_zlp_out+0x34>)
   8588c:	2204      	movs	r2, #4
   8588e:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   85890:	4b0a      	ldr	r3, [pc, #40]	; (858bc <udd_ctrl_send_zlp_out+0x38>)
   85892:	4798      	blx	r3
   85894:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   85896:	4b0a      	ldr	r3, [pc, #40]	; (858c0 <udd_ctrl_send_zlp_out+0x3c>)
   85898:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8589c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   858a0:	4b07      	ldr	r3, [pc, #28]	; (858c0 <udd_ctrl_send_zlp_out+0x3c>)
   858a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   858a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   858aa:	6878      	ldr	r0, [r7, #4]
   858ac:	4b05      	ldr	r3, [pc, #20]	; (858c4 <udd_ctrl_send_zlp_out+0x40>)
   858ae:	4798      	blx	r3
}
   858b0:	bf00      	nop
   858b2:	3708      	adds	r7, #8
   858b4:	46bd      	mov	sp, r7
   858b6:	bd80      	pop	{r7, pc}
   858b8:	20000f66 	.word	0x20000f66
   858bc:	000842f9 	.word	0x000842f9
   858c0:	400a4000 	.word	0x400a4000
   858c4:	00084355 	.word	0x00084355

000858c8 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   858c8:	b580      	push	{r7, lr}
   858ca:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   858cc:	4b04      	ldr	r3, [pc, #16]	; (858e0 <udd_ctrl_endofrequest+0x18>)
   858ce:	691b      	ldr	r3, [r3, #16]
   858d0:	2b00      	cmp	r3, #0
   858d2:	d002      	beq.n	858da <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   858d4:	4b02      	ldr	r3, [pc, #8]	; (858e0 <udd_ctrl_endofrequest+0x18>)
   858d6:	691b      	ldr	r3, [r3, #16]
   858d8:	4798      	blx	r3
	}
}
   858da:	bf00      	nop
   858dc:	bd80      	pop	{r7, pc}
   858de:	bf00      	nop
   858e0:	20001468 	.word	0x20001468

000858e4 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   858e4:	b580      	push	{r7, lr}
   858e6:	b082      	sub	sp, #8
   858e8:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   858ea:	4b31      	ldr	r3, [pc, #196]	; (859b0 <udd_ctrl_interrupt+0xcc>)
   858ec:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   858f0:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   858f2:	4b2f      	ldr	r3, [pc, #188]	; (859b0 <udd_ctrl_interrupt+0xcc>)
   858f4:	695b      	ldr	r3, [r3, #20]
   858f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
   858fa:	2b00      	cmp	r3, #0
   858fc:	d101      	bne.n	85902 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   858fe:	2300      	movs	r3, #0
   85900:	e052      	b.n	859a8 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   85902:	4b2b      	ldr	r3, [pc, #172]	; (859b0 <udd_ctrl_interrupt+0xcc>)
   85904:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85908:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   8590c:	4b28      	ldr	r3, [pc, #160]	; (859b0 <udd_ctrl_interrupt+0xcc>)
   8590e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85912:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   85916:	687b      	ldr	r3, [r7, #4]
   85918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   8591c:	2b00      	cmp	r3, #0
   8591e:	d003      	beq.n	85928 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   85920:	4b24      	ldr	r3, [pc, #144]	; (859b4 <udd_ctrl_interrupt+0xd0>)
   85922:	4798      	blx	r3
		return true;
   85924:	2301      	movs	r3, #1
   85926:	e03f      	b.n	859a8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   85928:	687b      	ldr	r3, [r7, #4]
   8592a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8592e:	2b00      	cmp	r3, #0
   85930:	d00a      	beq.n	85948 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85932:	4b1f      	ldr	r3, [pc, #124]	; (859b0 <udd_ctrl_interrupt+0xcc>)
   85934:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   85938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8593c:	2b00      	cmp	r3, #0
   8593e:	d003      	beq.n	85948 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   85940:	4b1d      	ldr	r3, [pc, #116]	; (859b8 <udd_ctrl_interrupt+0xd4>)
   85942:	4798      	blx	r3
		return true;
   85944:	2301      	movs	r3, #1
   85946:	e02f      	b.n	859a8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   85948:	687b      	ldr	r3, [r7, #4]
   8594a:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8594e:	2b00      	cmp	r3, #0
   85950:	d003      	beq.n	8595a <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   85952:	4b1a      	ldr	r3, [pc, #104]	; (859bc <udd_ctrl_interrupt+0xd8>)
   85954:	4798      	blx	r3
		return true;
   85956:	2301      	movs	r3, #1
   85958:	e026      	b.n	859a8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   8595a:	687b      	ldr	r3, [r7, #4]
   8595c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   85960:	2b00      	cmp	r3, #0
   85962:	d004      	beq.n	8596e <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   85964:	4b12      	ldr	r3, [pc, #72]	; (859b0 <udd_ctrl_interrupt+0xcc>)
   85966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8596a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   8596e:	687b      	ldr	r3, [r7, #4]
   85970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   85974:	2b00      	cmp	r3, #0
   85976:	d008      	beq.n	8598a <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   85978:	4b0d      	ldr	r3, [pc, #52]	; (859b0 <udd_ctrl_interrupt+0xcc>)
   8597a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8597e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   85982:	4b0f      	ldr	r3, [pc, #60]	; (859c0 <udd_ctrl_interrupt+0xdc>)
   85984:	4798      	blx	r3
		return true;
   85986:	2301      	movs	r3, #1
   85988:	e00e      	b.n	859a8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   8598a:	687b      	ldr	r3, [r7, #4]
   8598c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   85990:	2b00      	cmp	r3, #0
   85992:	d008      	beq.n	859a6 <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   85994:	4b06      	ldr	r3, [pc, #24]	; (859b0 <udd_ctrl_interrupt+0xcc>)
   85996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8599a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   8599e:	4b09      	ldr	r3, [pc, #36]	; (859c4 <udd_ctrl_interrupt+0xe0>)
   859a0:	4798      	blx	r3
		return true;
   859a2:	2301      	movs	r3, #1
   859a4:	e000      	b.n	859a8 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   859a6:	2300      	movs	r3, #0
}
   859a8:	4618      	mov	r0, r3
   859aa:	3708      	adds	r7, #8
   859ac:	46bd      	mov	sp, r7
   859ae:	bd80      	pop	{r7, pc}
   859b0:	400a4000 	.word	0x400a4000
   859b4:	00085321 	.word	0x00085321
   859b8:	00085461 	.word	0x00085461
   859bc:	000855c9 	.word	0x000855c9
   859c0:	000857c9 	.word	0x000857c9
   859c4:	00085785 	.word	0x00085785

000859c8 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   859c8:	b480      	push	{r7}
   859ca:	b083      	sub	sp, #12
   859cc:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   859ce:	2300      	movs	r3, #0
   859d0:	71fb      	strb	r3, [r7, #7]
   859d2:	e01c      	b.n	85a0e <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   859d4:	79fa      	ldrb	r2, [r7, #7]
   859d6:	4912      	ldr	r1, [pc, #72]	; (85a20 <udd_ep_job_table_reset+0x58>)
   859d8:	4613      	mov	r3, r2
   859da:	005b      	lsls	r3, r3, #1
   859dc:	4413      	add	r3, r2
   859de:	00db      	lsls	r3, r3, #3
   859e0:	440b      	add	r3, r1
   859e2:	f103 0210 	add.w	r2, r3, #16
   859e6:	7913      	ldrb	r3, [r2, #4]
   859e8:	f36f 0300 	bfc	r3, #0, #1
   859ec:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   859ee:	79fa      	ldrb	r2, [r7, #7]
   859f0:	490b      	ldr	r1, [pc, #44]	; (85a20 <udd_ep_job_table_reset+0x58>)
   859f2:	4613      	mov	r3, r2
   859f4:	005b      	lsls	r3, r3, #1
   859f6:	4413      	add	r3, r2
   859f8:	00db      	lsls	r3, r3, #3
   859fa:	440b      	add	r3, r1
   859fc:	f103 0210 	add.w	r2, r3, #16
   85a00:	7913      	ldrb	r3, [r2, #4]
   85a02:	f36f 0382 	bfc	r3, #2, #1
   85a06:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85a08:	79fb      	ldrb	r3, [r7, #7]
   85a0a:	3301      	adds	r3, #1
   85a0c:	71fb      	strb	r3, [r7, #7]
   85a0e:	79fb      	ldrb	r3, [r7, #7]
   85a10:	2b01      	cmp	r3, #1
   85a12:	d9df      	bls.n	859d4 <udd_ep_job_table_reset+0xc>
	}
}
   85a14:	bf00      	nop
   85a16:	bf00      	nop
   85a18:	370c      	adds	r7, #12
   85a1a:	46bd      	mov	sp, r7
   85a1c:	bc80      	pop	{r7}
   85a1e:	4770      	bx	lr
   85a20:	20000f6c 	.word	0x20000f6c

00085a24 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   85a24:	b580      	push	{r7, lr}
   85a26:	b082      	sub	sp, #8
   85a28:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85a2a:	2300      	movs	r3, #0
   85a2c:	71fb      	strb	r3, [r7, #7]
   85a2e:	e010      	b.n	85a52 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   85a30:	79fa      	ldrb	r2, [r7, #7]
   85a32:	4613      	mov	r3, r2
   85a34:	005b      	lsls	r3, r3, #1
   85a36:	4413      	add	r3, r2
   85a38:	00db      	lsls	r3, r3, #3
   85a3a:	4a0a      	ldr	r2, [pc, #40]	; (85a64 <udd_ep_job_table_kill+0x40>)
   85a3c:	1898      	adds	r0, r3, r2
   85a3e:	79fb      	ldrb	r3, [r7, #7]
   85a40:	3301      	adds	r3, #1
   85a42:	b2db      	uxtb	r3, r3
   85a44:	461a      	mov	r2, r3
   85a46:	2101      	movs	r1, #1
   85a48:	4b07      	ldr	r3, [pc, #28]	; (85a68 <udd_ep_job_table_kill+0x44>)
   85a4a:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85a4c:	79fb      	ldrb	r3, [r7, #7]
   85a4e:	3301      	adds	r3, #1
   85a50:	71fb      	strb	r3, [r7, #7]
   85a52:	79fb      	ldrb	r3, [r7, #7]
   85a54:	2b01      	cmp	r3, #1
   85a56:	d9eb      	bls.n	85a30 <udd_ep_job_table_kill+0xc>
	}
}
   85a58:	bf00      	nop
   85a5a:	bf00      	nop
   85a5c:	3708      	adds	r7, #8
   85a5e:	46bd      	mov	sp, r7
   85a60:	bd80      	pop	{r7, pc}
   85a62:	bf00      	nop
   85a64:	20000f6c 	.word	0x20000f6c
   85a68:	00085aa9 	.word	0x00085aa9

00085a6c <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   85a6c:	b580      	push	{r7, lr}
   85a6e:	b082      	sub	sp, #8
   85a70:	af00      	add	r7, sp, #0
   85a72:	4603      	mov	r3, r0
   85a74:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   85a76:	79fb      	ldrb	r3, [r7, #7]
   85a78:	f003 030f 	and.w	r3, r3, #15
   85a7c:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85a7e:	79fb      	ldrb	r3, [r7, #7]
   85a80:	1e5a      	subs	r2, r3, #1
   85a82:	4613      	mov	r3, r2
   85a84:	005b      	lsls	r3, r3, #1
   85a86:	4413      	add	r3, r2
   85a88:	00db      	lsls	r3, r3, #3
   85a8a:	4a05      	ldr	r2, [pc, #20]	; (85aa0 <udd_ep_abort_job+0x34>)
   85a8c:	4413      	add	r3, r2
   85a8e:	79fa      	ldrb	r2, [r7, #7]
   85a90:	2101      	movs	r1, #1
   85a92:	4618      	mov	r0, r3
   85a94:	4b03      	ldr	r3, [pc, #12]	; (85aa4 <udd_ep_abort_job+0x38>)
   85a96:	4798      	blx	r3
}
   85a98:	bf00      	nop
   85a9a:	3708      	adds	r7, #8
   85a9c:	46bd      	mov	sp, r7
   85a9e:	bd80      	pop	{r7, pc}
   85aa0:	20000f6c 	.word	0x20000f6c
   85aa4:	00085aa9 	.word	0x00085aa9

00085aa8 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85aa8:	b580      	push	{r7, lr}
   85aaa:	b082      	sub	sp, #8
   85aac:	af00      	add	r7, sp, #0
   85aae:	6078      	str	r0, [r7, #4]
   85ab0:	460b      	mov	r3, r1
   85ab2:	70fb      	strb	r3, [r7, #3]
   85ab4:	4613      	mov	r3, r2
   85ab6:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   85ab8:	687b      	ldr	r3, [r7, #4]
   85aba:	7d1b      	ldrb	r3, [r3, #20]
   85abc:	f003 0301 	and.w	r3, r3, #1
   85ac0:	b2db      	uxtb	r3, r3
   85ac2:	2b00      	cmp	r3, #0
   85ac4:	d01f      	beq.n	85b06 <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   85ac6:	687a      	ldr	r2, [r7, #4]
   85ac8:	7d13      	ldrb	r3, [r2, #20]
   85aca:	f36f 0300 	bfc	r3, #0, #1
   85ace:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   85ad0:	687b      	ldr	r3, [r7, #4]
   85ad2:	681b      	ldr	r3, [r3, #0]
   85ad4:	2b00      	cmp	r3, #0
   85ad6:	d018      	beq.n	85b0a <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   85ad8:	4a0e      	ldr	r2, [pc, #56]	; (85b14 <udd_ep_finish_job+0x6c>)
   85ada:	78bb      	ldrb	r3, [r7, #2]
   85adc:	3308      	adds	r3, #8
   85ade:	015b      	lsls	r3, r3, #5
   85ae0:	4413      	add	r3, r2
   85ae2:	681b      	ldr	r3, [r3, #0]
   85ae4:	f003 0308 	and.w	r3, r3, #8
   85ae8:	2b00      	cmp	r3, #0
   85aea:	d003      	beq.n	85af4 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   85aec:	78bb      	ldrb	r3, [r7, #2]
   85aee:	f063 037f 	orn	r3, r3, #127	; 0x7f
   85af2:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85af4:	687b      	ldr	r3, [r7, #4]
   85af6:	681b      	ldr	r3, [r3, #0]
   85af8:	78fa      	ldrb	r2, [r7, #3]
   85afa:	4610      	mov	r0, r2
   85afc:	687a      	ldr	r2, [r7, #4]
   85afe:	6891      	ldr	r1, [r2, #8]
   85b00:	78ba      	ldrb	r2, [r7, #2]
   85b02:	4798      	blx	r3
   85b04:	e002      	b.n	85b0c <udd_ep_finish_job+0x64>
		return; // No on-going job
   85b06:	bf00      	nop
   85b08:	e000      	b.n	85b0c <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   85b0a:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   85b0c:	3708      	adds	r7, #8
   85b0e:	46bd      	mov	sp, r7
   85b10:	bd80      	pop	{r7, pc}
   85b12:	bf00      	nop
   85b14:	400a4000 	.word	0x400a4000

00085b18 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   85b18:	b580      	push	{r7, lr}
   85b1a:	b086      	sub	sp, #24
   85b1c:	af00      	add	r7, sp, #0
   85b1e:	4603      	mov	r3, r0
   85b20:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   85b22:	2300      	movs	r3, #0
   85b24:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85b26:	79fb      	ldrb	r3, [r7, #7]
   85b28:	1e5a      	subs	r2, r3, #1
   85b2a:	4613      	mov	r3, r2
   85b2c:	005b      	lsls	r3, r3, #1
   85b2e:	4413      	add	r3, r2
   85b30:	00db      	lsls	r3, r3, #3
   85b32:	4a6d      	ldr	r2, [pc, #436]	; (85ce8 <udd_ep_trans_done+0x1d0>)
   85b34:	4413      	add	r3, r2
   85b36:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   85b38:	68fb      	ldr	r3, [r7, #12]
   85b3a:	7d1b      	ldrb	r3, [r3, #20]
   85b3c:	f003 0301 	and.w	r3, r3, #1
   85b40:	b2db      	uxtb	r3, r3
   85b42:	2b00      	cmp	r3, #0
   85b44:	f000 80cc 	beq.w	85ce0 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   85b48:	68fb      	ldr	r3, [r7, #12]
   85b4a:	68da      	ldr	r2, [r3, #12]
   85b4c:	68fb      	ldr	r3, [r7, #12]
   85b4e:	689b      	ldr	r3, [r3, #8]
   85b50:	429a      	cmp	r2, r3
   85b52:	f000 8099 	beq.w	85c88 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   85b56:	68fb      	ldr	r3, [r7, #12]
   85b58:	689a      	ldr	r2, [r3, #8]
   85b5a:	68fb      	ldr	r3, [r7, #12]
   85b5c:	68db      	ldr	r3, [r3, #12]
   85b5e:	1ad3      	subs	r3, r2, r3
   85b60:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   85b62:	693b      	ldr	r3, [r7, #16]
   85b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   85b68:	d905      	bls.n	85b76 <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   85b6e:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   85b70:	2300      	movs	r3, #0
   85b72:	617b      	str	r3, [r7, #20]
   85b74:	e002      	b.n	85b7c <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   85b76:	693b      	ldr	r3, [r7, #16]
   85b78:	041b      	lsls	r3, r3, #16
   85b7a:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   85b7c:	4a5b      	ldr	r2, [pc, #364]	; (85cec <udd_ep_trans_done+0x1d4>)
   85b7e:	79fb      	ldrb	r3, [r7, #7]
   85b80:	3308      	adds	r3, #8
   85b82:	015b      	lsls	r3, r3, #5
   85b84:	4413      	add	r3, r2
   85b86:	681b      	ldr	r3, [r3, #0]
   85b88:	f003 0308 	and.w	r3, r3, #8
   85b8c:	2b00      	cmp	r3, #0
   85b8e:	d01d      	beq.n	85bcc <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85b90:	4a56      	ldr	r2, [pc, #344]	; (85cec <udd_ep_trans_done+0x1d4>)
   85b92:	79fb      	ldrb	r3, [r7, #7]
   85b94:	3308      	adds	r3, #8
   85b96:	015b      	lsls	r3, r3, #5
   85b98:	4413      	add	r3, r2
   85b9a:	681b      	ldr	r3, [r3, #0]
   85b9c:	f003 0307 	and.w	r3, r3, #7
   85ba0:	2208      	movs	r2, #8
   85ba2:	fa02 f303 	lsl.w	r3, r2, r3
   85ba6:	461a      	mov	r2, r3
   85ba8:	693b      	ldr	r3, [r7, #16]
   85baa:	fbb3 f1f2 	udiv	r1, r3, r2
   85bae:	fb02 f201 	mul.w	r2, r2, r1
   85bb2:	1a9b      	subs	r3, r3, r2
   85bb4:	2b00      	cmp	r3, #0
   85bb6:	d027      	beq.n	85c08 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   85bb8:	697b      	ldr	r3, [r7, #20]
   85bba:	f043 0308 	orr.w	r3, r3, #8
   85bbe:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   85bc0:	68fa      	ldr	r2, [r7, #12]
   85bc2:	7d13      	ldrb	r3, [r2, #20]
   85bc4:	f36f 0341 	bfc	r3, #1, #1
   85bc8:	7513      	strb	r3, [r2, #20]
   85bca:	e01d      	b.n	85c08 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85bcc:	4a47      	ldr	r2, [pc, #284]	; (85cec <udd_ep_trans_done+0x1d4>)
   85bce:	79fb      	ldrb	r3, [r7, #7]
   85bd0:	3308      	adds	r3, #8
   85bd2:	015b      	lsls	r3, r3, #5
   85bd4:	4413      	add	r3, r2
   85bd6:	681b      	ldr	r3, [r3, #0]
   85bd8:	091b      	lsrs	r3, r3, #4
   85bda:	f003 0303 	and.w	r3, r3, #3
   85bde:	2b01      	cmp	r3, #1
   85be0:	d10e      	bne.n	85c00 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85be2:	4a42      	ldr	r2, [pc, #264]	; (85cec <udd_ep_trans_done+0x1d4>)
   85be4:	79fb      	ldrb	r3, [r7, #7]
   85be6:	3308      	adds	r3, #8
   85be8:	015b      	lsls	r3, r3, #5
   85bea:	4413      	add	r3, r2
   85bec:	681b      	ldr	r3, [r3, #0]
   85bee:	f003 0307 	and.w	r3, r3, #7
   85bf2:	2208      	movs	r2, #8
   85bf4:	fa02 f303 	lsl.w	r3, r2, r3
   85bf8:	461a      	mov	r2, r3
   85bfa:	693b      	ldr	r3, [r7, #16]
   85bfc:	4293      	cmp	r3, r2
   85bfe:	d803      	bhi.n	85c08 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85c00:	697b      	ldr	r3, [r7, #20]
   85c02:	f043 0314 	orr.w	r3, r3, #20
   85c06:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85c08:	68fb      	ldr	r3, [r7, #12]
   85c0a:	685a      	ldr	r2, [r3, #4]
   85c0c:	68fb      	ldr	r3, [r7, #12]
   85c0e:	68db      	ldr	r3, [r3, #12]
   85c10:	18d1      	adds	r1, r2, r3
   85c12:	79fb      	ldrb	r3, [r7, #7]
   85c14:	011a      	lsls	r2, r3, #4
   85c16:	4b36      	ldr	r3, [pc, #216]	; (85cf0 <udd_ep_trans_done+0x1d8>)
   85c18:	4413      	add	r3, r2
   85c1a:	460a      	mov	r2, r1
   85c1c:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   85c1e:	697b      	ldr	r3, [r7, #20]
   85c20:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   85c24:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   85c26:	4b33      	ldr	r3, [pc, #204]	; (85cf4 <udd_ep_trans_done+0x1dc>)
   85c28:	4798      	blx	r3
   85c2a:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   85c2c:	79fb      	ldrb	r3, [r7, #7]
   85c2e:	011a      	lsls	r2, r3, #4
   85c30:	4b2f      	ldr	r3, [pc, #188]	; (85cf0 <udd_ep_trans_done+0x1d8>)
   85c32:	4413      	add	r3, r2
   85c34:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   85c36:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   85c3a:	2b00      	cmp	r3, #0
   85c3c:	d11d      	bne.n	85c7a <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   85c3e:	79fb      	ldrb	r3, [r7, #7]
   85c40:	011a      	lsls	r2, r3, #4
   85c42:	4b2b      	ldr	r3, [pc, #172]	; (85cf0 <udd_ep_trans_done+0x1d8>)
   85c44:	4413      	add	r3, r2
   85c46:	697a      	ldr	r2, [r7, #20]
   85c48:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   85c4a:	68fb      	ldr	r3, [r7, #12]
   85c4c:	68da      	ldr	r2, [r3, #12]
   85c4e:	693b      	ldr	r3, [r7, #16]
   85c50:	441a      	add	r2, r3
   85c52:	68fb      	ldr	r3, [r7, #12]
   85c54:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   85c56:	68fb      	ldr	r3, [r7, #12]
   85c58:	693a      	ldr	r2, [r7, #16]
   85c5a:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   85c5c:	4b23      	ldr	r3, [pc, #140]	; (85cec <udd_ep_trans_done+0x1d4>)
   85c5e:	691a      	ldr	r2, [r3, #16]
   85c60:	79fb      	ldrb	r3, [r7, #7]
   85c62:	3b01      	subs	r3, #1
   85c64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85c68:	fa01 f303 	lsl.w	r3, r1, r3
   85c6c:	491f      	ldr	r1, [pc, #124]	; (85cec <udd_ep_trans_done+0x1d4>)
   85c6e:	4313      	orrs	r3, r2
   85c70:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   85c72:	68b8      	ldr	r0, [r7, #8]
   85c74:	4b20      	ldr	r3, [pc, #128]	; (85cf8 <udd_ep_trans_done+0x1e0>)
   85c76:	4798      	blx	r3
			return;
   85c78:	e033      	b.n	85ce2 <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   85c7a:	68b8      	ldr	r0, [r7, #8]
   85c7c:	4b1e      	ldr	r3, [pc, #120]	; (85cf8 <udd_ep_trans_done+0x1e0>)
   85c7e:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   85c80:	68fb      	ldr	r3, [r7, #12]
   85c82:	68da      	ldr	r2, [r3, #12]
   85c84:	68fb      	ldr	r3, [r7, #12]
   85c86:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   85c88:	4a18      	ldr	r2, [pc, #96]	; (85cec <udd_ep_trans_done+0x1d4>)
   85c8a:	79fb      	ldrb	r3, [r7, #7]
   85c8c:	3308      	adds	r3, #8
   85c8e:	015b      	lsls	r3, r3, #5
   85c90:	4413      	add	r3, r2
   85c92:	681b      	ldr	r3, [r3, #0]
   85c94:	f003 0308 	and.w	r3, r3, #8
   85c98:	2b00      	cmp	r3, #0
   85c9a:	d01a      	beq.n	85cd2 <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   85c9c:	68fb      	ldr	r3, [r7, #12]
   85c9e:	7d1b      	ldrb	r3, [r3, #20]
   85ca0:	f003 0302 	and.w	r3, r3, #2
   85ca4:	b2db      	uxtb	r3, r3
   85ca6:	2b00      	cmp	r3, #0
   85ca8:	d013      	beq.n	85cd2 <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   85caa:	4a10      	ldr	r2, [pc, #64]	; (85cec <udd_ep_trans_done+0x1d4>)
   85cac:	79fb      	ldrb	r3, [r7, #7]
   85cae:	3308      	adds	r3, #8
   85cb0:	015b      	lsls	r3, r3, #5
   85cb2:	4413      	add	r3, r2
   85cb4:	3304      	adds	r3, #4
   85cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85cba:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   85cbc:	4b0b      	ldr	r3, [pc, #44]	; (85cec <udd_ep_trans_done+0x1d4>)
   85cbe:	691a      	ldr	r2, [r3, #16]
   85cc0:	79fb      	ldrb	r3, [r7, #7]
   85cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
   85cc6:	fa01 f303 	lsl.w	r3, r1, r3
   85cca:	4908      	ldr	r1, [pc, #32]	; (85cec <udd_ep_trans_done+0x1d4>)
   85ccc:	4313      	orrs	r3, r2
   85cce:	610b      	str	r3, [r1, #16]
			return;
   85cd0:	e007      	b.n	85ce2 <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   85cd2:	79fb      	ldrb	r3, [r7, #7]
   85cd4:	461a      	mov	r2, r3
   85cd6:	2100      	movs	r1, #0
   85cd8:	68f8      	ldr	r0, [r7, #12]
   85cda:	4b08      	ldr	r3, [pc, #32]	; (85cfc <udd_ep_trans_done+0x1e4>)
   85cdc:	4798      	blx	r3
   85cde:	e000      	b.n	85ce2 <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   85ce0:	bf00      	nop
}
   85ce2:	3718      	adds	r7, #24
   85ce4:	46bd      	mov	sp, r7
   85ce6:	bd80      	pop	{r7, pc}
   85ce8:	20000f6c 	.word	0x20000f6c
   85cec:	400a4000 	.word	0x400a4000
   85cf0:	400a4300 	.word	0x400a4300
   85cf4:	000842f9 	.word	0x000842f9
   85cf8:	00084355 	.word	0x00084355
   85cfc:	00085aa9 	.word	0x00085aa9

00085d00 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   85d00:	b580      	push	{r7, lr}
   85d02:	b084      	sub	sp, #16
   85d04:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85d06:	2301      	movs	r3, #1
   85d08:	73fb      	strb	r3, [r7, #15]
   85d0a:	e0e0      	b.n	85ece <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   85d0c:	7bfb      	ldrb	r3, [r7, #15]
   85d0e:	1e5a      	subs	r2, r3, #1
   85d10:	4613      	mov	r3, r2
   85d12:	005b      	lsls	r3, r3, #1
   85d14:	4413      	add	r3, r2
   85d16:	00db      	lsls	r3, r3, #3
   85d18:	4a71      	ldr	r2, [pc, #452]	; (85ee0 <udd_ep_interrupt+0x1e0>)
   85d1a:	4413      	add	r3, r2
   85d1c:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85d1e:	4b71      	ldr	r3, [pc, #452]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85d20:	691a      	ldr	r2, [r3, #16]
   85d22:	7bfb      	ldrb	r3, [r7, #15]
   85d24:	3b01      	subs	r3, #1
   85d26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85d2a:	fa01 f303 	lsl.w	r3, r1, r3
   85d2e:	4013      	ands	r3, r2
   85d30:	2b00      	cmp	r3, #0
   85d32:	d03c      	beq.n	85dae <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   85d34:	4b6b      	ldr	r3, [pc, #428]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85d36:	695a      	ldr	r2, [r3, #20]
   85d38:	7bfb      	ldrb	r3, [r7, #15]
   85d3a:	3b01      	subs	r3, #1
   85d3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85d40:	fa01 f303 	lsl.w	r3, r1, r3
   85d44:	4013      	ands	r3, r2
   85d46:	2b00      	cmp	r3, #0
   85d48:	d031      	beq.n	85dae <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   85d4a:	7bfb      	ldrb	r3, [r7, #15]
   85d4c:	011a      	lsls	r2, r3, #4
   85d4e:	4b66      	ldr	r3, [pc, #408]	; (85ee8 <udd_ep_interrupt+0x1e8>)
   85d50:	4413      	add	r3, r2
   85d52:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   85d54:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   85d58:	2b00      	cmp	r3, #0
   85d5a:	d001      	beq.n	85d60 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   85d5c:	2301      	movs	r3, #1
   85d5e:	e0bb      	b.n	85ed8 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   85d60:	4b60      	ldr	r3, [pc, #384]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85d62:	691a      	ldr	r2, [r3, #16]
   85d64:	7bfb      	ldrb	r3, [r7, #15]
   85d66:	3b01      	subs	r3, #1
   85d68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85d6c:	fa01 f303 	lsl.w	r3, r1, r3
   85d70:	43db      	mvns	r3, r3
   85d72:	495c      	ldr	r1, [pc, #368]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85d74:	4013      	ands	r3, r2
   85d76:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   85d78:	7bfb      	ldrb	r3, [r7, #15]
   85d7a:	011a      	lsls	r2, r3, #4
   85d7c:	4b5a      	ldr	r3, [pc, #360]	; (85ee8 <udd_ep_interrupt+0x1e8>)
   85d7e:	4413      	add	r3, r2
   85d80:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   85d82:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   85d84:	b29b      	uxth	r3, r3
   85d86:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   85d88:	687b      	ldr	r3, [r7, #4]
   85d8a:	2b00      	cmp	r3, #0
   85d8c:	d009      	beq.n	85da2 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   85d8e:	68bb      	ldr	r3, [r7, #8]
   85d90:	68da      	ldr	r2, [r3, #12]
   85d92:	687b      	ldr	r3, [r7, #4]
   85d94:	1ad2      	subs	r2, r2, r3
   85d96:	68bb      	ldr	r3, [r7, #8]
   85d98:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   85d9a:	68bb      	ldr	r3, [r7, #8]
   85d9c:	68da      	ldr	r2, [r3, #12]
   85d9e:	68bb      	ldr	r3, [r7, #8]
   85da0:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   85da2:	7bfb      	ldrb	r3, [r7, #15]
   85da4:	4618      	mov	r0, r3
   85da6:	4b51      	ldr	r3, [pc, #324]	; (85eec <udd_ep_interrupt+0x1ec>)
   85da8:	4798      	blx	r3
			return true;
   85daa:	2301      	movs	r3, #1
   85dac:	e094      	b.n	85ed8 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85dae:	4b4d      	ldr	r3, [pc, #308]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85db0:	691a      	ldr	r2, [r3, #16]
   85db2:	7bfb      	ldrb	r3, [r7, #15]
   85db4:	f44f 7180 	mov.w	r1, #256	; 0x100
   85db8:	fa01 f303 	lsl.w	r3, r1, r3
   85dbc:	4013      	ands	r3, r2
   85dbe:	2b00      	cmp	r3, #0
   85dc0:	f000 8082 	beq.w	85ec8 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   85dc4:	4a47      	ldr	r2, [pc, #284]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85dc6:	7bfb      	ldrb	r3, [r7, #15]
   85dc8:	015b      	lsls	r3, r3, #5
   85dca:	4413      	add	r3, r2
   85dcc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   85dd0:	681b      	ldr	r3, [r3, #0]
   85dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   85dd6:	2b00      	cmp	r3, #0
   85dd8:	d024      	beq.n	85e24 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   85dda:	4a42      	ldr	r2, [pc, #264]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85ddc:	7bfb      	ldrb	r3, [r7, #15]
   85dde:	015b      	lsls	r3, r3, #5
   85de0:	4413      	add	r3, r2
   85de2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85de6:	681b      	ldr	r3, [r3, #0]
   85de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   85dec:	2b00      	cmp	r3, #0
   85dee:	d119      	bne.n	85e24 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   85df0:	4a3c      	ldr	r2, [pc, #240]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85df2:	7bfb      	ldrb	r3, [r7, #15]
   85df4:	015b      	lsls	r3, r3, #5
   85df6:	4413      	add	r3, r2
   85df8:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85e00:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   85e02:	4a38      	ldr	r2, [pc, #224]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85e04:	7bfb      	ldrb	r3, [r7, #15]
   85e06:	015b      	lsls	r3, r3, #5
   85e08:	4413      	add	r3, r2
   85e0a:	f503 738a 	add.w	r3, r3, #276	; 0x114
   85e0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85e12:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   85e14:	7bfb      	ldrb	r3, [r7, #15]
   85e16:	461a      	mov	r2, r3
   85e18:	2100      	movs	r1, #0
   85e1a:	68b8      	ldr	r0, [r7, #8]
   85e1c:	4b34      	ldr	r3, [pc, #208]	; (85ef0 <udd_ep_interrupt+0x1f0>)
   85e1e:	4798      	blx	r3
				return true;
   85e20:	2301      	movs	r3, #1
   85e22:	e059      	b.n	85ed8 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   85e24:	4a2f      	ldr	r2, [pc, #188]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85e26:	7bfb      	ldrb	r3, [r7, #15]
   85e28:	015b      	lsls	r3, r3, #5
   85e2a:	4413      	add	r3, r2
   85e2c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   85e30:	681b      	ldr	r3, [r3, #0]
   85e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   85e36:	2b00      	cmp	r3, #0
   85e38:	d046      	beq.n	85ec8 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   85e3a:	4a2a      	ldr	r2, [pc, #168]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85e3c:	7bfb      	ldrb	r3, [r7, #15]
   85e3e:	015b      	lsls	r3, r3, #5
   85e40:	4413      	add	r3, r2
   85e42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85e46:	681b      	ldr	r3, [r3, #0]
   85e48:	0c9b      	lsrs	r3, r3, #18
   85e4a:	f003 0303 	and.w	r3, r3, #3
   85e4e:	2b00      	cmp	r3, #0
   85e50:	d13a      	bne.n	85ec8 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   85e52:	4a24      	ldr	r2, [pc, #144]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85e54:	7bfb      	ldrb	r3, [r7, #15]
   85e56:	015b      	lsls	r3, r3, #5
   85e58:	4413      	add	r3, r2
   85e5a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85e5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   85e62:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   85e64:	4b1f      	ldr	r3, [pc, #124]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85e66:	691a      	ldr	r2, [r3, #16]
   85e68:	7bfb      	ldrb	r3, [r7, #15]
   85e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
   85e6e:	fa01 f303 	lsl.w	r3, r1, r3
   85e72:	43db      	mvns	r3, r3
   85e74:	491b      	ldr	r1, [pc, #108]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85e76:	4013      	ands	r3, r2
   85e78:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   85e7a:	68ba      	ldr	r2, [r7, #8]
   85e7c:	7d13      	ldrb	r3, [r2, #20]
   85e7e:	f36f 0382 	bfc	r3, #2, #1
   85e82:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   85e84:	4a17      	ldr	r2, [pc, #92]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85e86:	7bfb      	ldrb	r3, [r7, #15]
   85e88:	015b      	lsls	r3, r3, #5
   85e8a:	4413      	add	r3, r2
   85e8c:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85e90:	681a      	ldr	r2, [r3, #0]
   85e92:	4914      	ldr	r1, [pc, #80]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85e94:	7bfb      	ldrb	r3, [r7, #15]
   85e96:	f022 0202 	bic.w	r2, r2, #2
   85e9a:	015b      	lsls	r3, r3, #5
   85e9c:	440b      	add	r3, r1
   85e9e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85ea2:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   85ea4:	4a0f      	ldr	r2, [pc, #60]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85ea6:	7bfb      	ldrb	r3, [r7, #15]
   85ea8:	015b      	lsls	r3, r3, #5
   85eaa:	4413      	add	r3, r2
   85eac:	f503 738a 	add.w	r3, r3, #276	; 0x114
   85eb0:	2220      	movs	r2, #32
   85eb2:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   85eb4:	4a0b      	ldr	r2, [pc, #44]	; (85ee4 <udd_ep_interrupt+0x1e4>)
   85eb6:	7bfb      	ldrb	r3, [r7, #15]
   85eb8:	015b      	lsls	r3, r3, #5
   85eba:	4413      	add	r3, r2
   85ebc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   85ec0:	2240      	movs	r2, #64	; 0x40
   85ec2:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   85ec4:	2301      	movs	r3, #1
   85ec6:	e007      	b.n	85ed8 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85ec8:	7bfb      	ldrb	r3, [r7, #15]
   85eca:	3301      	adds	r3, #1
   85ecc:	73fb      	strb	r3, [r7, #15]
   85ece:	7bfb      	ldrb	r3, [r7, #15]
   85ed0:	2b02      	cmp	r3, #2
   85ed2:	f67f af1b 	bls.w	85d0c <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   85ed6:	2300      	movs	r3, #0
}
   85ed8:	4618      	mov	r0, r3
   85eda:	3710      	adds	r7, #16
   85edc:	46bd      	mov	sp, r7
   85ede:	bd80      	pop	{r7, pc}
   85ee0:	20000f6c 	.word	0x20000f6c
   85ee4:	400a4000 	.word	0x400a4000
   85ee8:	400a4300 	.word	0x400a4300
   85eec:	00085b19 	.word	0x00085b19
   85ef0:	00085aa9 	.word	0x00085aa9

00085ef4 <ui_powerdown>:
	LED_Off(LED1_GPIO);
	//LED_Off(LED2_GPIO);
}

void ui_powerdown(void)
{
   85ef4:	b580      	push	{r7, lr}
   85ef6:	af00      	add	r7, sp, #0
	LED_Off(LED0_GPIO);
   85ef8:	201d      	movs	r0, #29
   85efa:	4b03      	ldr	r3, [pc, #12]	; (85f08 <ui_powerdown+0x14>)
   85efc:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   85efe:	201f      	movs	r0, #31
   85f00:	4b01      	ldr	r3, [pc, #4]	; (85f08 <ui_powerdown+0x14>)
   85f02:	4798      	blx	r3
	//LED_Off(LED2_GPIO);
	
	// Power off FPGA
	//board_sram_pwroff();
		
}
   85f04:	bf00      	nop
   85f06:	bd80      	pop	{r7, pc}
   85f08:	00082a0d 	.word	0x00082a0d

00085f0c <ui_wakeup>:

void ui_wakeup(void)
{
   85f0c:	b580      	push	{r7, lr}
   85f0e:	af00      	add	r7, sp, #0
	LED_On(LED0_GPIO);
   85f10:	201d      	movs	r0, #29
   85f12:	4b02      	ldr	r3, [pc, #8]	; (85f1c <ui_wakeup+0x10>)
   85f14:	4798      	blx	r3
	//board_sram_pwron();
}
   85f16:	bf00      	nop
   85f18:	bd80      	pop	{r7, pc}
   85f1a:	bf00      	nop
   85f1c:	00082a69 	.word	0x00082a69

00085f20 <ui_process>:

void ui_process(uint16_t framenumber)
{
   85f20:	b580      	push	{r7, lr}
   85f22:	b082      	sub	sp, #8
   85f24:	af00      	add	r7, sp, #0
   85f26:	4603      	mov	r3, r0
   85f28:	80fb      	strh	r3, [r7, #6]
	if ((framenumber % 1000) == 0) {
   85f2a:	88fb      	ldrh	r3, [r7, #6]
   85f2c:	4a16      	ldr	r2, [pc, #88]	; (85f88 <ui_process+0x68>)
   85f2e:	fba2 1203 	umull	r1, r2, r2, r3
   85f32:	0992      	lsrs	r2, r2, #6
   85f34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   85f38:	fb01 f202 	mul.w	r2, r1, r2
   85f3c:	1a9b      	subs	r3, r3, r2
   85f3e:	b29b      	uxth	r3, r3
   85f40:	2b00      	cmp	r3, #0
   85f42:	d102      	bne.n	85f4a <ui_process+0x2a>
		LED_On(LED0_GPIO);
   85f44:	201d      	movs	r0, #29
   85f46:	4b11      	ldr	r3, [pc, #68]	; (85f8c <ui_process+0x6c>)
   85f48:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
   85f4a:	88fb      	ldrh	r3, [r7, #6]
   85f4c:	4a0e      	ldr	r2, [pc, #56]	; (85f88 <ui_process+0x68>)
   85f4e:	fba2 1203 	umull	r1, r2, r2, r3
   85f52:	0992      	lsrs	r2, r2, #6
   85f54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   85f58:	fb01 f202 	mul.w	r2, r1, r2
   85f5c:	1a9b      	subs	r3, r3, r2
   85f5e:	b29b      	uxth	r3, r3
   85f60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   85f64:	d102      	bne.n	85f6c <ui_process+0x4c>
		LED_Off(LED0_GPIO);
   85f66:	201d      	movs	r0, #29
   85f68:	4b09      	ldr	r3, [pc, #36]	; (85f90 <ui_process+0x70>)
   85f6a:	4798      	blx	r3
	}
	
	if ((framenumber % 512) == 0) {
   85f6c:	88fb      	ldrh	r3, [r7, #6]
   85f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   85f72:	b29b      	uxth	r3, r3
   85f74:	2b00      	cmp	r3, #0
   85f76:	d102      	bne.n	85f7e <ui_process+0x5e>
		LED_Off(LED1_GPIO);
   85f78:	201f      	movs	r0, #31
   85f7a:	4b05      	ldr	r3, [pc, #20]	; (85f90 <ui_process+0x70>)
   85f7c:	4798      	blx	r3
		//LED_Off(LED2_GPIO);
	}
}
   85f7e:	bf00      	nop
   85f80:	3708      	adds	r7, #8
   85f82:	46bd      	mov	sp, r7
   85f84:	bd80      	pop	{r7, pc}
   85f86:	bf00      	nop
   85f88:	10624dd3 	.word	0x10624dd3
   85f8c:	00082a69 	.word	0x00082a69
   85f90:	00082a0d 	.word	0x00082a0d

00085f94 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   85f94:	b480      	push	{r7}
   85f96:	b087      	sub	sp, #28
   85f98:	af00      	add	r7, sp, #0
   85f9a:	60f8      	str	r0, [r7, #12]
   85f9c:	60b9      	str	r1, [r7, #8]
   85f9e:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   85fa0:	68bb      	ldr	r3, [r7, #8]
   85fa2:	085a      	lsrs	r2, r3, #1
   85fa4:	687b      	ldr	r3, [r7, #4]
   85fa6:	441a      	add	r2, r3
   85fa8:	68bb      	ldr	r3, [r7, #8]
   85faa:	fbb2 f3f3 	udiv	r3, r2, r3
   85fae:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   85fb0:	697b      	ldr	r3, [r7, #20]
   85fb2:	2b03      	cmp	r3, #3
   85fb4:	d903      	bls.n	85fbe <usart_set_spi_master_baudrate+0x2a>
   85fb6:	697b      	ldr	r3, [r7, #20]
   85fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   85fbc:	d301      	bcc.n	85fc2 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   85fbe:	2301      	movs	r3, #1
   85fc0:	e003      	b.n	85fca <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   85fc2:	68fb      	ldr	r3, [r7, #12]
   85fc4:	697a      	ldr	r2, [r7, #20]
   85fc6:	621a      	str	r2, [r3, #32]

	return 0;
   85fc8:	2300      	movs	r3, #0
}
   85fca:	4618      	mov	r0, r3
   85fcc:	371c      	adds	r7, #28
   85fce:	46bd      	mov	sp, r7
   85fd0:	bc80      	pop	{r7}
   85fd2:	4770      	bx	lr

00085fd4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   85fd4:	b580      	push	{r7, lr}
   85fd6:	b082      	sub	sp, #8
   85fd8:	af00      	add	r7, sp, #0
   85fda:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   85fdc:	6878      	ldr	r0, [r7, #4]
   85fde:	4b0f      	ldr	r3, [pc, #60]	; (8601c <usart_reset+0x48>)
   85fe0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   85fe2:	687b      	ldr	r3, [r7, #4]
   85fe4:	2200      	movs	r2, #0
   85fe6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   85fe8:	687b      	ldr	r3, [r7, #4]
   85fea:	2200      	movs	r2, #0
   85fec:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   85fee:	687b      	ldr	r3, [r7, #4]
   85ff0:	2200      	movs	r2, #0
   85ff2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   85ff4:	6878      	ldr	r0, [r7, #4]
   85ff6:	4b0a      	ldr	r3, [pc, #40]	; (86020 <usart_reset+0x4c>)
   85ff8:	4798      	blx	r3
	usart_reset_rx(p_usart);
   85ffa:	6878      	ldr	r0, [r7, #4]
   85ffc:	4b09      	ldr	r3, [pc, #36]	; (86024 <usart_reset+0x50>)
   85ffe:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   86000:	6878      	ldr	r0, [r7, #4]
   86002:	4b09      	ldr	r3, [pc, #36]	; (86028 <usart_reset+0x54>)
   86004:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   86006:	6878      	ldr	r0, [r7, #4]
   86008:	4b08      	ldr	r3, [pc, #32]	; (8602c <usart_reset+0x58>)
   8600a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   8600c:	6878      	ldr	r0, [r7, #4]
   8600e:	4b08      	ldr	r3, [pc, #32]	; (86030 <usart_reset+0x5c>)
   86010:	4798      	blx	r3
#endif
}
   86012:	bf00      	nop
   86014:	3708      	adds	r7, #8
   86016:	46bd      	mov	sp, r7
   86018:	bd80      	pop	{r7, pc}
   8601a:	bf00      	nop
   8601c:	00086209 	.word	0x00086209
   86020:	0008615d 	.word	0x0008615d
   86024:	00086175 	.word	0x00086175
   86028:	0008618d 	.word	0x0008618d
   8602c:	000861c1 	.word	0x000861c1
   86030:	000861a7 	.word	0x000861a7

00086034 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   86034:	b580      	push	{r7, lr}
   86036:	b084      	sub	sp, #16
   86038:	af00      	add	r7, sp, #0
   8603a:	60f8      	str	r0, [r7, #12]
   8603c:	60b9      	str	r1, [r7, #8]
   8603e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   86040:	68f8      	ldr	r0, [r7, #12]
   86042:	4b3d      	ldr	r3, [pc, #244]	; (86138 <usart_init_spi_master+0x104>)
   86044:	4798      	blx	r3

	ul_reg_val = 0;
   86046:	4b3d      	ldr	r3, [pc, #244]	; (8613c <usart_init_spi_master+0x108>)
   86048:	2200      	movs	r2, #0
   8604a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   8604c:	68bb      	ldr	r3, [r7, #8]
   8604e:	2b00      	cmp	r3, #0
   86050:	d00d      	beq.n	8606e <usart_init_spi_master+0x3a>
   86052:	68bb      	ldr	r3, [r7, #8]
   86054:	689b      	ldr	r3, [r3, #8]
   86056:	2b03      	cmp	r3, #3
   86058:	d809      	bhi.n	8606e <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   8605a:	68bb      	ldr	r3, [r7, #8]
   8605c:	681b      	ldr	r3, [r3, #0]
   8605e:	687a      	ldr	r2, [r7, #4]
   86060:	4619      	mov	r1, r3
   86062:	68f8      	ldr	r0, [r7, #12]
   86064:	4b36      	ldr	r3, [pc, #216]	; (86140 <usart_init_spi_master+0x10c>)
   86066:	4798      	blx	r3
   86068:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   8606a:	2b00      	cmp	r3, #0
   8606c:	d001      	beq.n	86072 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   8606e:	2301      	movs	r3, #1
   86070:	e05d      	b.n	8612e <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   86072:	68bb      	ldr	r3, [r7, #8]
   86074:	685a      	ldr	r2, [r3, #4]
   86076:	4b31      	ldr	r3, [pc, #196]	; (8613c <usart_init_spi_master+0x108>)
   86078:	681b      	ldr	r3, [r3, #0]
   8607a:	4313      	orrs	r3, r2
   8607c:	4a2f      	ldr	r2, [pc, #188]	; (8613c <usart_init_spi_master+0x108>)
   8607e:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   86080:	68bb      	ldr	r3, [r7, #8]
   86082:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   86084:	4b2d      	ldr	r3, [pc, #180]	; (8613c <usart_init_spi_master+0x108>)
   86086:	681b      	ldr	r3, [r3, #0]
   86088:	4313      	orrs	r3, r2
   8608a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8608e:	f043 030e 	orr.w	r3, r3, #14
   86092:	4a2a      	ldr	r2, [pc, #168]	; (8613c <usart_init_spi_master+0x108>)
   86094:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   86096:	68bb      	ldr	r3, [r7, #8]
   86098:	689b      	ldr	r3, [r3, #8]
   8609a:	2b03      	cmp	r3, #3
   8609c:	d83e      	bhi.n	8611c <usart_init_spi_master+0xe8>
   8609e:	a201      	add	r2, pc, #4	; (adr r2, 860a4 <usart_init_spi_master+0x70>)
   860a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   860a4:	000860b5 	.word	0x000860b5
   860a8:	000860cf 	.word	0x000860cf
   860ac:	000860e9 	.word	0x000860e9
   860b0:	00086103 	.word	0x00086103
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   860b4:	4b21      	ldr	r3, [pc, #132]	; (8613c <usart_init_spi_master+0x108>)
   860b6:	681b      	ldr	r3, [r3, #0]
   860b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   860bc:	4a1f      	ldr	r2, [pc, #124]	; (8613c <usart_init_spi_master+0x108>)
   860be:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   860c0:	4b1e      	ldr	r3, [pc, #120]	; (8613c <usart_init_spi_master+0x108>)
   860c2:	681b      	ldr	r3, [r3, #0]
   860c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   860c8:	4a1c      	ldr	r2, [pc, #112]	; (8613c <usart_init_spi_master+0x108>)
   860ca:	6013      	str	r3, [r2, #0]
		break;
   860cc:	e027      	b.n	8611e <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   860ce:	4b1b      	ldr	r3, [pc, #108]	; (8613c <usart_init_spi_master+0x108>)
   860d0:	681b      	ldr	r3, [r3, #0]
   860d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   860d6:	4a19      	ldr	r2, [pc, #100]	; (8613c <usart_init_spi_master+0x108>)
   860d8:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   860da:	4b18      	ldr	r3, [pc, #96]	; (8613c <usart_init_spi_master+0x108>)
   860dc:	681b      	ldr	r3, [r3, #0]
   860de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   860e2:	4a16      	ldr	r2, [pc, #88]	; (8613c <usart_init_spi_master+0x108>)
   860e4:	6013      	str	r3, [r2, #0]
		break;
   860e6:	e01a      	b.n	8611e <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   860e8:	4b14      	ldr	r3, [pc, #80]	; (8613c <usart_init_spi_master+0x108>)
   860ea:	681b      	ldr	r3, [r3, #0]
   860ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   860f0:	4a12      	ldr	r2, [pc, #72]	; (8613c <usart_init_spi_master+0x108>)
   860f2:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   860f4:	4b11      	ldr	r3, [pc, #68]	; (8613c <usart_init_spi_master+0x108>)
   860f6:	681b      	ldr	r3, [r3, #0]
   860f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   860fc:	4a0f      	ldr	r2, [pc, #60]	; (8613c <usart_init_spi_master+0x108>)
   860fe:	6013      	str	r3, [r2, #0]
		break;
   86100:	e00d      	b.n	8611e <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   86102:	4b0e      	ldr	r3, [pc, #56]	; (8613c <usart_init_spi_master+0x108>)
   86104:	681b      	ldr	r3, [r3, #0]
   86106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8610a:	4a0c      	ldr	r2, [pc, #48]	; (8613c <usart_init_spi_master+0x108>)
   8610c:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8610e:	4b0b      	ldr	r3, [pc, #44]	; (8613c <usart_init_spi_master+0x108>)
   86110:	681b      	ldr	r3, [r3, #0]
   86112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86116:	4a09      	ldr	r2, [pc, #36]	; (8613c <usart_init_spi_master+0x108>)
   86118:	6013      	str	r3, [r2, #0]
		break;
   8611a:	e000      	b.n	8611e <usart_init_spi_master+0xea>

	default:
		break;
   8611c:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8611e:	68fb      	ldr	r3, [r7, #12]
   86120:	685a      	ldr	r2, [r3, #4]
   86122:	4b06      	ldr	r3, [pc, #24]	; (8613c <usart_init_spi_master+0x108>)
   86124:	681b      	ldr	r3, [r3, #0]
   86126:	431a      	orrs	r2, r3
   86128:	68fb      	ldr	r3, [r7, #12]
   8612a:	605a      	str	r2, [r3, #4]

	return 0;
   8612c:	2300      	movs	r3, #0
}
   8612e:	4618      	mov	r0, r3
   86130:	3710      	adds	r7, #16
   86132:	46bd      	mov	sp, r7
   86134:	bd80      	pop	{r7, pc}
   86136:	bf00      	nop
   86138:	00085fd5 	.word	0x00085fd5
   8613c:	20000fa0 	.word	0x20000fa0
   86140:	00085f95 	.word	0x00085f95

00086144 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   86144:	b480      	push	{r7}
   86146:	b083      	sub	sp, #12
   86148:	af00      	add	r7, sp, #0
   8614a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   8614c:	687b      	ldr	r3, [r7, #4]
   8614e:	2240      	movs	r2, #64	; 0x40
   86150:	601a      	str	r2, [r3, #0]
}
   86152:	bf00      	nop
   86154:	370c      	adds	r7, #12
   86156:	46bd      	mov	sp, r7
   86158:	bc80      	pop	{r7}
   8615a:	4770      	bx	lr

0008615c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   8615c:	b480      	push	{r7}
   8615e:	b083      	sub	sp, #12
   86160:	af00      	add	r7, sp, #0
   86162:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   86164:	687b      	ldr	r3, [r7, #4]
   86166:	2288      	movs	r2, #136	; 0x88
   86168:	601a      	str	r2, [r3, #0]
}
   8616a:	bf00      	nop
   8616c:	370c      	adds	r7, #12
   8616e:	46bd      	mov	sp, r7
   86170:	bc80      	pop	{r7}
   86172:	4770      	bx	lr

00086174 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   86174:	b480      	push	{r7}
   86176:	b083      	sub	sp, #12
   86178:	af00      	add	r7, sp, #0
   8617a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8617c:	687b      	ldr	r3, [r7, #4]
   8617e:	2224      	movs	r2, #36	; 0x24
   86180:	601a      	str	r2, [r3, #0]
}
   86182:	bf00      	nop
   86184:	370c      	adds	r7, #12
   86186:	46bd      	mov	sp, r7
   86188:	bc80      	pop	{r7}
   8618a:	4770      	bx	lr

0008618c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   8618c:	b480      	push	{r7}
   8618e:	b083      	sub	sp, #12
   86190:	af00      	add	r7, sp, #0
   86192:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   86194:	687b      	ldr	r3, [r7, #4]
   86196:	f44f 7280 	mov.w	r2, #256	; 0x100
   8619a:	601a      	str	r2, [r3, #0]
}
   8619c:	bf00      	nop
   8619e:	370c      	adds	r7, #12
   861a0:	46bd      	mov	sp, r7
   861a2:	bc80      	pop	{r7}
   861a4:	4770      	bx	lr

000861a6 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   861a6:	b480      	push	{r7}
   861a8:	b083      	sub	sp, #12
   861aa:	af00      	add	r7, sp, #0
   861ac:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   861ae:	687b      	ldr	r3, [r7, #4]
   861b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   861b4:	601a      	str	r2, [r3, #0]
}
   861b6:	bf00      	nop
   861b8:	370c      	adds	r7, #12
   861ba:	46bd      	mov	sp, r7
   861bc:	bc80      	pop	{r7}
   861be:	4770      	bx	lr

000861c0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   861c0:	b480      	push	{r7}
   861c2:	b083      	sub	sp, #12
   861c4:	af00      	add	r7, sp, #0
   861c6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   861c8:	687b      	ldr	r3, [r7, #4]
   861ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   861ce:	601a      	str	r2, [r3, #0]
}
   861d0:	bf00      	nop
   861d2:	370c      	adds	r7, #12
   861d4:	46bd      	mov	sp, r7
   861d6:	bc80      	pop	{r7}
   861d8:	4770      	bx	lr

000861da <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   861da:	b480      	push	{r7}
   861dc:	b083      	sub	sp, #12
   861de:	af00      	add	r7, sp, #0
   861e0:	6078      	str	r0, [r7, #4]
   861e2:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   861e4:	bf00      	nop
   861e6:	687b      	ldr	r3, [r7, #4]
   861e8:	695b      	ldr	r3, [r3, #20]
   861ea:	f003 0302 	and.w	r3, r3, #2
   861ee:	2b00      	cmp	r3, #0
   861f0:	d0f9      	beq.n	861e6 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   861f2:	683b      	ldr	r3, [r7, #0]
   861f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   861f8:	687b      	ldr	r3, [r7, #4]
   861fa:	61da      	str	r2, [r3, #28]

	return 0;
   861fc:	2300      	movs	r3, #0
}
   861fe:	4618      	mov	r0, r3
   86200:	370c      	adds	r7, #12
   86202:	46bd      	mov	sp, r7
   86204:	bc80      	pop	{r7}
   86206:	4770      	bx	lr

00086208 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   86208:	b480      	push	{r7}
   8620a:	b083      	sub	sp, #12
   8620c:	af00      	add	r7, sp, #0
   8620e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86210:	687b      	ldr	r3, [r7, #4]
   86212:	4a04      	ldr	r2, [pc, #16]	; (86224 <usart_disable_writeprotect+0x1c>)
   86214:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   86218:	bf00      	nop
   8621a:	370c      	adds	r7, #12
   8621c:	46bd      	mov	sp, r7
   8621e:	bc80      	pop	{r7}
   86220:	4770      	bx	lr
   86222:	bf00      	nop
   86224:	55534100 	.word	0x55534100

00086228 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   86228:	b580      	push	{r7, lr}
   8622a:	b086      	sub	sp, #24
   8622c:	af00      	add	r7, sp, #0
   8622e:	60f8      	str	r0, [r7, #12]
   86230:	60b9      	str	r1, [r7, #8]
   86232:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   86234:	2300      	movs	r3, #0
   86236:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   86238:	68fb      	ldr	r3, [r7, #12]
   8623a:	2b01      	cmp	r3, #1
   8623c:	d01e      	beq.n	8627c <_write+0x54>
   8623e:	68fb      	ldr	r3, [r7, #12]
   86240:	2b02      	cmp	r3, #2
   86242:	d01b      	beq.n	8627c <_write+0x54>
   86244:	68fb      	ldr	r3, [r7, #12]
   86246:	2b03      	cmp	r3, #3
   86248:	d018      	beq.n	8627c <_write+0x54>
		return -1;
   8624a:	f04f 33ff 	mov.w	r3, #4294967295
   8624e:	e019      	b.n	86284 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   86250:	4b0e      	ldr	r3, [pc, #56]	; (8628c <_write+0x64>)
   86252:	681a      	ldr	r2, [r3, #0]
   86254:	4b0e      	ldr	r3, [pc, #56]	; (86290 <_write+0x68>)
   86256:	6818      	ldr	r0, [r3, #0]
   86258:	68bb      	ldr	r3, [r7, #8]
   8625a:	1c59      	adds	r1, r3, #1
   8625c:	60b9      	str	r1, [r7, #8]
   8625e:	781b      	ldrb	r3, [r3, #0]
   86260:	4619      	mov	r1, r3
   86262:	4790      	blx	r2
   86264:	4603      	mov	r3, r0
   86266:	2b00      	cmp	r3, #0
   86268:	da02      	bge.n	86270 <_write+0x48>
			return -1;
   8626a:	f04f 33ff 	mov.w	r3, #4294967295
   8626e:	e009      	b.n	86284 <_write+0x5c>
		}
		++nChars;
   86270:	697b      	ldr	r3, [r7, #20]
   86272:	3301      	adds	r3, #1
   86274:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   86276:	687b      	ldr	r3, [r7, #4]
   86278:	3b01      	subs	r3, #1
   8627a:	607b      	str	r3, [r7, #4]
   8627c:	687b      	ldr	r3, [r7, #4]
   8627e:	2b00      	cmp	r3, #0
   86280:	d1e6      	bne.n	86250 <_write+0x28>
	}
	return nChars;
   86282:	697b      	ldr	r3, [r7, #20]
}
   86284:	4618      	mov	r0, r3
   86286:	3718      	adds	r7, #24
   86288:	46bd      	mov	sp, r7
   8628a:	bd80      	pop	{r7, pc}
   8628c:	20001480 	.word	0x20001480
   86290:	20001484 	.word	0x20001484

00086294 <__libc_init_array>:
   86294:	b570      	push	{r4, r5, r6, lr}
   86296:	4e0d      	ldr	r6, [pc, #52]	; (862cc <__libc_init_array+0x38>)
   86298:	4d0d      	ldr	r5, [pc, #52]	; (862d0 <__libc_init_array+0x3c>)
   8629a:	1b76      	subs	r6, r6, r5
   8629c:	10b6      	asrs	r6, r6, #2
   8629e:	d006      	beq.n	862ae <__libc_init_array+0x1a>
   862a0:	2400      	movs	r4, #0
   862a2:	f855 3b04 	ldr.w	r3, [r5], #4
   862a6:	3401      	adds	r4, #1
   862a8:	4798      	blx	r3
   862aa:	42a6      	cmp	r6, r4
   862ac:	d1f9      	bne.n	862a2 <__libc_init_array+0xe>
   862ae:	4e09      	ldr	r6, [pc, #36]	; (862d4 <__libc_init_array+0x40>)
   862b0:	4d09      	ldr	r5, [pc, #36]	; (862d8 <__libc_init_array+0x44>)
   862b2:	f007 f881 	bl	8d3b8 <_init>
   862b6:	1b76      	subs	r6, r6, r5
   862b8:	10b6      	asrs	r6, r6, #2
   862ba:	d006      	beq.n	862ca <__libc_init_array+0x36>
   862bc:	2400      	movs	r4, #0
   862be:	f855 3b04 	ldr.w	r3, [r5], #4
   862c2:	3401      	adds	r4, #1
   862c4:	4798      	blx	r3
   862c6:	42a6      	cmp	r6, r4
   862c8:	d1f9      	bne.n	862be <__libc_init_array+0x2a>
   862ca:	bd70      	pop	{r4, r5, r6, pc}
   862cc:	0008d3c4 	.word	0x0008d3c4
   862d0:	0008d3c4 	.word	0x0008d3c4
   862d4:	0008d3cc 	.word	0x0008d3cc
   862d8:	0008d3c4 	.word	0x0008d3c4

000862dc <iprintf>:
   862dc:	b40f      	push	{r0, r1, r2, r3}
   862de:	b500      	push	{lr}
   862e0:	4907      	ldr	r1, [pc, #28]	; (86300 <iprintf+0x24>)
   862e2:	b083      	sub	sp, #12
   862e4:	ab04      	add	r3, sp, #16
   862e6:	6808      	ldr	r0, [r1, #0]
   862e8:	f853 2b04 	ldr.w	r2, [r3], #4
   862ec:	6881      	ldr	r1, [r0, #8]
   862ee:	9301      	str	r3, [sp, #4]
   862f0:	f001 ff36 	bl	88160 <_vfiprintf_r>
   862f4:	b003      	add	sp, #12
   862f6:	f85d eb04 	ldr.w	lr, [sp], #4
   862fa:	b004      	add	sp, #16
   862fc:	4770      	bx	lr
   862fe:	bf00      	nop
   86300:	20000470 	.word	0x20000470

00086304 <memcpy>:
   86304:	4684      	mov	ip, r0
   86306:	ea41 0300 	orr.w	r3, r1, r0
   8630a:	f013 0303 	ands.w	r3, r3, #3
   8630e:	d149      	bne.n	863a4 <memcpy+0xa0>
   86310:	3a40      	subs	r2, #64	; 0x40
   86312:	d323      	bcc.n	8635c <memcpy+0x58>
   86314:	680b      	ldr	r3, [r1, #0]
   86316:	6003      	str	r3, [r0, #0]
   86318:	684b      	ldr	r3, [r1, #4]
   8631a:	6043      	str	r3, [r0, #4]
   8631c:	688b      	ldr	r3, [r1, #8]
   8631e:	6083      	str	r3, [r0, #8]
   86320:	68cb      	ldr	r3, [r1, #12]
   86322:	60c3      	str	r3, [r0, #12]
   86324:	690b      	ldr	r3, [r1, #16]
   86326:	6103      	str	r3, [r0, #16]
   86328:	694b      	ldr	r3, [r1, #20]
   8632a:	6143      	str	r3, [r0, #20]
   8632c:	698b      	ldr	r3, [r1, #24]
   8632e:	6183      	str	r3, [r0, #24]
   86330:	69cb      	ldr	r3, [r1, #28]
   86332:	61c3      	str	r3, [r0, #28]
   86334:	6a0b      	ldr	r3, [r1, #32]
   86336:	6203      	str	r3, [r0, #32]
   86338:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8633a:	6243      	str	r3, [r0, #36]	; 0x24
   8633c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8633e:	6283      	str	r3, [r0, #40]	; 0x28
   86340:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86342:	62c3      	str	r3, [r0, #44]	; 0x2c
   86344:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86346:	6303      	str	r3, [r0, #48]	; 0x30
   86348:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8634a:	6343      	str	r3, [r0, #52]	; 0x34
   8634c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8634e:	6383      	str	r3, [r0, #56]	; 0x38
   86350:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86352:	63c3      	str	r3, [r0, #60]	; 0x3c
   86354:	3040      	adds	r0, #64	; 0x40
   86356:	3140      	adds	r1, #64	; 0x40
   86358:	3a40      	subs	r2, #64	; 0x40
   8635a:	d2db      	bcs.n	86314 <memcpy+0x10>
   8635c:	3230      	adds	r2, #48	; 0x30
   8635e:	d30b      	bcc.n	86378 <memcpy+0x74>
   86360:	680b      	ldr	r3, [r1, #0]
   86362:	6003      	str	r3, [r0, #0]
   86364:	684b      	ldr	r3, [r1, #4]
   86366:	6043      	str	r3, [r0, #4]
   86368:	688b      	ldr	r3, [r1, #8]
   8636a:	6083      	str	r3, [r0, #8]
   8636c:	68cb      	ldr	r3, [r1, #12]
   8636e:	60c3      	str	r3, [r0, #12]
   86370:	3010      	adds	r0, #16
   86372:	3110      	adds	r1, #16
   86374:	3a10      	subs	r2, #16
   86376:	d2f3      	bcs.n	86360 <memcpy+0x5c>
   86378:	320c      	adds	r2, #12
   8637a:	d305      	bcc.n	86388 <memcpy+0x84>
   8637c:	f851 3b04 	ldr.w	r3, [r1], #4
   86380:	f840 3b04 	str.w	r3, [r0], #4
   86384:	3a04      	subs	r2, #4
   86386:	d2f9      	bcs.n	8637c <memcpy+0x78>
   86388:	3204      	adds	r2, #4
   8638a:	d008      	beq.n	8639e <memcpy+0x9a>
   8638c:	07d2      	lsls	r2, r2, #31
   8638e:	bf1c      	itt	ne
   86390:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86394:	f800 3b01 	strbne.w	r3, [r0], #1
   86398:	d301      	bcc.n	8639e <memcpy+0x9a>
   8639a:	880b      	ldrh	r3, [r1, #0]
   8639c:	8003      	strh	r3, [r0, #0]
   8639e:	4660      	mov	r0, ip
   863a0:	4770      	bx	lr
   863a2:	bf00      	nop
   863a4:	2a08      	cmp	r2, #8
   863a6:	d313      	bcc.n	863d0 <memcpy+0xcc>
   863a8:	078b      	lsls	r3, r1, #30
   863aa:	d0b1      	beq.n	86310 <memcpy+0xc>
   863ac:	f010 0303 	ands.w	r3, r0, #3
   863b0:	d0ae      	beq.n	86310 <memcpy+0xc>
   863b2:	f1c3 0304 	rsb	r3, r3, #4
   863b6:	1ad2      	subs	r2, r2, r3
   863b8:	07db      	lsls	r3, r3, #31
   863ba:	bf1c      	itt	ne
   863bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   863c0:	f800 3b01 	strbne.w	r3, [r0], #1
   863c4:	d3a4      	bcc.n	86310 <memcpy+0xc>
   863c6:	f831 3b02 	ldrh.w	r3, [r1], #2
   863ca:	f820 3b02 	strh.w	r3, [r0], #2
   863ce:	e79f      	b.n	86310 <memcpy+0xc>
   863d0:	3a04      	subs	r2, #4
   863d2:	d3d9      	bcc.n	86388 <memcpy+0x84>
   863d4:	3a01      	subs	r2, #1
   863d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   863da:	f800 3b01 	strb.w	r3, [r0], #1
   863de:	d2f9      	bcs.n	863d4 <memcpy+0xd0>
   863e0:	780b      	ldrb	r3, [r1, #0]
   863e2:	7003      	strb	r3, [r0, #0]
   863e4:	784b      	ldrb	r3, [r1, #1]
   863e6:	7043      	strb	r3, [r0, #1]
   863e8:	788b      	ldrb	r3, [r1, #2]
   863ea:	7083      	strb	r3, [r0, #2]
   863ec:	4660      	mov	r0, ip
   863ee:	4770      	bx	lr

000863f0 <memset>:
   863f0:	b4f0      	push	{r4, r5, r6, r7}
   863f2:	0786      	lsls	r6, r0, #30
   863f4:	d046      	beq.n	86484 <memset+0x94>
   863f6:	1e54      	subs	r4, r2, #1
   863f8:	2a00      	cmp	r2, #0
   863fa:	d03c      	beq.n	86476 <memset+0x86>
   863fc:	4603      	mov	r3, r0
   863fe:	b2ca      	uxtb	r2, r1
   86400:	e001      	b.n	86406 <memset+0x16>
   86402:	3c01      	subs	r4, #1
   86404:	d337      	bcc.n	86476 <memset+0x86>
   86406:	f803 2b01 	strb.w	r2, [r3], #1
   8640a:	079d      	lsls	r5, r3, #30
   8640c:	d1f9      	bne.n	86402 <memset+0x12>
   8640e:	2c03      	cmp	r4, #3
   86410:	d92a      	bls.n	86468 <memset+0x78>
   86412:	b2cd      	uxtb	r5, r1
   86414:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86418:	2c0f      	cmp	r4, #15
   8641a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8641e:	d934      	bls.n	8648a <memset+0x9a>
   86420:	f1a4 0210 	sub.w	r2, r4, #16
   86424:	f022 0c0f 	bic.w	ip, r2, #15
   86428:	f103 0720 	add.w	r7, r3, #32
   8642c:	0916      	lsrs	r6, r2, #4
   8642e:	4467      	add	r7, ip
   86430:	f103 0210 	add.w	r2, r3, #16
   86434:	e942 5504 	strd	r5, r5, [r2, #-16]
   86438:	e942 5502 	strd	r5, r5, [r2, #-8]
   8643c:	3210      	adds	r2, #16
   8643e:	42ba      	cmp	r2, r7
   86440:	d1f8      	bne.n	86434 <memset+0x44>
   86442:	1c72      	adds	r2, r6, #1
   86444:	f014 0f0c 	tst.w	r4, #12
   86448:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   8644c:	f004 060f 	and.w	r6, r4, #15
   86450:	d013      	beq.n	8647a <memset+0x8a>
   86452:	1f33      	subs	r3, r6, #4
   86454:	f023 0303 	bic.w	r3, r3, #3
   86458:	3304      	adds	r3, #4
   8645a:	4413      	add	r3, r2
   8645c:	f842 5b04 	str.w	r5, [r2], #4
   86460:	4293      	cmp	r3, r2
   86462:	d1fb      	bne.n	8645c <memset+0x6c>
   86464:	f006 0403 	and.w	r4, r6, #3
   86468:	b12c      	cbz	r4, 86476 <memset+0x86>
   8646a:	b2ca      	uxtb	r2, r1
   8646c:	441c      	add	r4, r3
   8646e:	f803 2b01 	strb.w	r2, [r3], #1
   86472:	429c      	cmp	r4, r3
   86474:	d1fb      	bne.n	8646e <memset+0x7e>
   86476:	bcf0      	pop	{r4, r5, r6, r7}
   86478:	4770      	bx	lr
   8647a:	4634      	mov	r4, r6
   8647c:	4613      	mov	r3, r2
   8647e:	2c00      	cmp	r4, #0
   86480:	d1f3      	bne.n	8646a <memset+0x7a>
   86482:	e7f8      	b.n	86476 <memset+0x86>
   86484:	4614      	mov	r4, r2
   86486:	4603      	mov	r3, r0
   86488:	e7c1      	b.n	8640e <memset+0x1e>
   8648a:	461a      	mov	r2, r3
   8648c:	4626      	mov	r6, r4
   8648e:	e7e0      	b.n	86452 <memset+0x62>

00086490 <sprintf>:
   86490:	b40e      	push	{r1, r2, r3}
   86492:	4601      	mov	r1, r0
   86494:	b530      	push	{r4, r5, lr}
   86496:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   8649a:	b09c      	sub	sp, #112	; 0x70
   8649c:	ab1f      	add	r3, sp, #124	; 0x7c
   8649e:	480b      	ldr	r0, [pc, #44]	; (864cc <sprintf+0x3c>)
   864a0:	f853 2b04 	ldr.w	r2, [r3], #4
   864a4:	4d0a      	ldr	r5, [pc, #40]	; (864d0 <sprintf+0x40>)
   864a6:	9102      	str	r1, [sp, #8]
   864a8:	9106      	str	r1, [sp, #24]
   864aa:	6800      	ldr	r0, [r0, #0]
   864ac:	a902      	add	r1, sp, #8
   864ae:	9301      	str	r3, [sp, #4]
   864b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   864b4:	9407      	str	r4, [sp, #28]
   864b6:	f000 f86f 	bl	86598 <_svfprintf_r>
   864ba:	2200      	movs	r2, #0
   864bc:	9b02      	ldr	r3, [sp, #8]
   864be:	701a      	strb	r2, [r3, #0]
   864c0:	b01c      	add	sp, #112	; 0x70
   864c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   864c6:	b003      	add	sp, #12
   864c8:	4770      	bx	lr
   864ca:	bf00      	nop
   864cc:	20000470 	.word	0x20000470
   864d0:	ffff0208 	.word	0xffff0208

000864d4 <strlen>:
   864d4:	f020 0103 	bic.w	r1, r0, #3
   864d8:	f010 0003 	ands.w	r0, r0, #3
   864dc:	f1c0 0000 	rsb	r0, r0, #0
   864e0:	f851 3b04 	ldr.w	r3, [r1], #4
   864e4:	f100 0c04 	add.w	ip, r0, #4
   864e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   864ec:	f06f 0200 	mvn.w	r2, #0
   864f0:	bf1c      	itt	ne
   864f2:	fa22 f20c 	lsrne.w	r2, r2, ip
   864f6:	4313      	orrne	r3, r2
   864f8:	f04f 0c01 	mov.w	ip, #1
   864fc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   86500:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   86504:	eba3 020c 	sub.w	r2, r3, ip
   86508:	ea22 0203 	bic.w	r2, r2, r3
   8650c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   86510:	bf04      	itt	eq
   86512:	f851 3b04 	ldreq.w	r3, [r1], #4
   86516:	3004      	addeq	r0, #4
   86518:	d0f4      	beq.n	86504 <strlen+0x30>
   8651a:	f1c2 0100 	rsb	r1, r2, #0
   8651e:	ea02 0201 	and.w	r2, r2, r1
   86522:	fab2 f282 	clz	r2, r2
   86526:	f1c2 021f 	rsb	r2, r2, #31
   8652a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8652e:	4770      	bx	lr

00086530 <strncpy>:
   86530:	b470      	push	{r4, r5, r6}
   86532:	ea40 0401 	orr.w	r4, r0, r1
   86536:	07a3      	lsls	r3, r4, #30
   86538:	d122      	bne.n	86580 <strncpy+0x50>
   8653a:	2a03      	cmp	r2, #3
   8653c:	d920      	bls.n	86580 <strncpy+0x50>
   8653e:	460b      	mov	r3, r1
   86540:	4604      	mov	r4, r0
   86542:	4619      	mov	r1, r3
   86544:	f853 6b04 	ldr.w	r6, [r3], #4
   86548:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8654c:	ea25 0506 	bic.w	r5, r5, r6
   86550:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   86554:	d115      	bne.n	86582 <strncpy+0x52>
   86556:	3a04      	subs	r2, #4
   86558:	2a03      	cmp	r2, #3
   8655a:	4619      	mov	r1, r3
   8655c:	f844 6b04 	str.w	r6, [r4], #4
   86560:	d8ef      	bhi.n	86542 <strncpy+0x12>
   86562:	1e4d      	subs	r5, r1, #1
   86564:	b152      	cbz	r2, 8657c <strncpy+0x4c>
   86566:	4623      	mov	r3, r4
   86568:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8656c:	1e56      	subs	r6, r2, #1
   8656e:	f803 1b01 	strb.w	r1, [r3], #1
   86572:	b141      	cbz	r1, 86586 <strncpy+0x56>
   86574:	4632      	mov	r2, r6
   86576:	461c      	mov	r4, r3
   86578:	2a00      	cmp	r2, #0
   8657a:	d1f4      	bne.n	86566 <strncpy+0x36>
   8657c:	bc70      	pop	{r4, r5, r6}
   8657e:	4770      	bx	lr
   86580:	4604      	mov	r4, r0
   86582:	1e4d      	subs	r5, r1, #1
   86584:	e7ee      	b.n	86564 <strncpy+0x34>
   86586:	4422      	add	r2, r4
   86588:	2e00      	cmp	r6, #0
   8658a:	d0f7      	beq.n	8657c <strncpy+0x4c>
   8658c:	f803 1b01 	strb.w	r1, [r3], #1
   86590:	4293      	cmp	r3, r2
   86592:	d1fb      	bne.n	8658c <strncpy+0x5c>
   86594:	bc70      	pop	{r4, r5, r6}
   86596:	4770      	bx	lr

00086598 <_svfprintf_r>:
   86598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8659c:	b0d7      	sub	sp, #348	; 0x15c
   8659e:	468b      	mov	fp, r1
   865a0:	4617      	mov	r7, r2
   865a2:	930e      	str	r3, [sp, #56]	; 0x38
   865a4:	4681      	mov	r9, r0
   865a6:	f004 f9e1 	bl	8a96c <_localeconv_r>
   865aa:	6803      	ldr	r3, [r0, #0]
   865ac:	4618      	mov	r0, r3
   865ae:	9318      	str	r3, [sp, #96]	; 0x60
   865b0:	f7ff ff90 	bl	864d4 <strlen>
   865b4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   865b8:	9017      	str	r0, [sp, #92]	; 0x5c
   865ba:	061d      	lsls	r5, r3, #24
   865bc:	d504      	bpl.n	865c8 <_svfprintf_r+0x30>
   865be:	f8db 3010 	ldr.w	r3, [fp, #16]
   865c2:	2b00      	cmp	r3, #0
   865c4:	f000 87df 	beq.w	87586 <_svfprintf_r+0xfee>
   865c8:	2300      	movs	r3, #0
   865ca:	2100      	movs	r1, #0
   865cc:	2200      	movs	r2, #0
   865ce:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   865d2:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   865d6:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   865da:	9313      	str	r3, [sp, #76]	; 0x4c
   865dc:	9319      	str	r3, [sp, #100]	; 0x64
   865de:	930a      	str	r3, [sp, #40]	; 0x28
   865e0:	ab2d      	add	r3, sp, #180	; 0xb4
   865e2:	4698      	mov	r8, r3
   865e4:	932a      	str	r3, [sp, #168]	; 0xa8
   865e6:	783b      	ldrb	r3, [r7, #0]
   865e8:	46da      	mov	sl, fp
   865ea:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   865ee:	2b00      	cmp	r3, #0
   865f0:	f000 81a4 	beq.w	8693c <_svfprintf_r+0x3a4>
   865f4:	463c      	mov	r4, r7
   865f6:	e004      	b.n	86602 <_svfprintf_r+0x6a>
   865f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   865fc:	2b00      	cmp	r3, #0
   865fe:	f000 80fd 	beq.w	867fc <_svfprintf_r+0x264>
   86602:	2b25      	cmp	r3, #37	; 0x25
   86604:	d1f8      	bne.n	865f8 <_svfprintf_r+0x60>
   86606:	1be5      	subs	r5, r4, r7
   86608:	f040 80fb 	bne.w	86802 <_svfprintf_r+0x26a>
   8660c:	7823      	ldrb	r3, [r4, #0]
   8660e:	2b00      	cmp	r3, #0
   86610:	f000 8194 	beq.w	8693c <_svfprintf_r+0x3a4>
   86614:	2300      	movs	r3, #0
   86616:	930b      	str	r3, [sp, #44]	; 0x2c
   86618:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8661c:	9307      	str	r3, [sp, #28]
   8661e:	f04f 33ff 	mov.w	r3, #4294967295
   86622:	7866      	ldrb	r6, [r4, #1]
   86624:	f104 0b01 	add.w	fp, r4, #1
   86628:	2120      	movs	r1, #32
   8662a:	242b      	movs	r4, #43	; 0x2b
   8662c:	9309      	str	r3, [sp, #36]	; 0x24
   8662e:	f10b 0b01 	add.w	fp, fp, #1
   86632:	f1a6 0320 	sub.w	r3, r6, #32
   86636:	2b5a      	cmp	r3, #90	; 0x5a
   86638:	f200 80ff 	bhi.w	8683a <_svfprintf_r+0x2a2>
   8663c:	e8df f013 	tbh	[pc, r3, lsl #1]
   86640:	00fd02bc 	.word	0x00fd02bc
   86644:	02b500fd 	.word	0x02b500fd
   86648:	00fd00fd 	.word	0x00fd00fd
   8664c:	029100fd 	.word	0x029100fd
   86650:	00fd00fd 	.word	0x00fd00fd
   86654:	02e7006a 	.word	0x02e7006a
   86658:	023400fd 	.word	0x023400fd
   8665c:	00fd02cd 	.word	0x00fd02cd
   86660:	005b02c6 	.word	0x005b02c6
   86664:	005b005b 	.word	0x005b005b
   86668:	005b005b 	.word	0x005b005b
   8666c:	005b005b 	.word	0x005b005b
   86670:	005b005b 	.word	0x005b005b
   86674:	00fd00fd 	.word	0x00fd00fd
   86678:	00fd00fd 	.word	0x00fd00fd
   8667c:	00fd00fd 	.word	0x00fd00fd
   86680:	019000fd 	.word	0x019000fd
   86684:	01f700fd 	.word	0x01f700fd
   86688:	0190007c 	.word	0x0190007c
   8668c:	01900190 	.word	0x01900190
   86690:	00fd00fd 	.word	0x00fd00fd
   86694:	00fd00fd 	.word	0x00fd00fd
   86698:	00fd028a 	.word	0x00fd028a
   8669c:	00a900fd 	.word	0x00a900fd
   866a0:	00fd00fd 	.word	0x00fd00fd
   866a4:	020b00fd 	.word	0x020b00fd
   866a8:	023b00fd 	.word	0x023b00fd
   866ac:	00fd00fd 	.word	0x00fd00fd
   866b0:	00fd0781 	.word	0x00fd0781
   866b4:	00fd00fd 	.word	0x00fd00fd
   866b8:	00fd00fd 	.word	0x00fd00fd
   866bc:	00fd00fd 	.word	0x00fd00fd
   866c0:	019000fd 	.word	0x019000fd
   866c4:	01f700fd 	.word	0x01f700fd
   866c8:	01900080 	.word	0x01900080
   866cc:	01900190 	.word	0x01900190
   866d0:	00800280 	.word	0x00800280
   866d4:	00fd0075 	.word	0x00fd0075
   866d8:	00fd0276 	.word	0x00fd0276
   866dc:	00ad025e 	.word	0x00ad025e
   866e0:	0075024c 	.word	0x0075024c
   866e4:	020b00fd 	.word	0x020b00fd
   866e8:	075b0072 	.word	0x075b0072
   866ec:	00fd00fd 	.word	0x00fd00fd
   866f0:	00fd075f 	.word	0x00fd075f
   866f4:	0072      	.short	0x0072
   866f6:	2200      	movs	r2, #0
   866f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   866fc:	f81b 6b01 	ldrb.w	r6, [fp], #1
   86700:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86704:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86708:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8670c:	2b09      	cmp	r3, #9
   8670e:	d9f5      	bls.n	866fc <_svfprintf_r+0x164>
   86710:	920b      	str	r2, [sp, #44]	; 0x2c
   86712:	e78e      	b.n	86632 <_svfprintf_r+0x9a>
   86714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86716:	f853 2b04 	ldr.w	r2, [r3], #4
   8671a:	2a00      	cmp	r2, #0
   8671c:	920b      	str	r2, [sp, #44]	; 0x2c
   8671e:	930e      	str	r3, [sp, #56]	; 0x38
   86720:	f2c0 81bf 	blt.w	86aa2 <_svfprintf_r+0x50a>
   86724:	f89b 6000 	ldrb.w	r6, [fp]
   86728:	e781      	b.n	8662e <_svfprintf_r+0x96>
   8672a:	9b07      	ldr	r3, [sp, #28]
   8672c:	f89b 6000 	ldrb.w	r6, [fp]
   86730:	f043 0320 	orr.w	r3, r3, #32
   86734:	9307      	str	r3, [sp, #28]
   86736:	e77a      	b.n	8662e <_svfprintf_r+0x96>
   86738:	9b07      	ldr	r3, [sp, #28]
   8673a:	f043 0310 	orr.w	r3, r3, #16
   8673e:	9307      	str	r3, [sp, #28]
   86740:	9b07      	ldr	r3, [sp, #28]
   86742:	069c      	lsls	r4, r3, #26
   86744:	f140 8162 	bpl.w	86a0c <_svfprintf_r+0x474>
   86748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8674a:	3307      	adds	r3, #7
   8674c:	f023 0307 	bic.w	r3, r3, #7
   86750:	4619      	mov	r1, r3
   86752:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86756:	4614      	mov	r4, r2
   86758:	461d      	mov	r5, r3
   8675a:	910e      	str	r1, [sp, #56]	; 0x38
   8675c:	2a00      	cmp	r2, #0
   8675e:	f173 0300 	sbcs.w	r3, r3, #0
   86762:	f2c0 85ab 	blt.w	872bc <_svfprintf_r+0xd24>
   86766:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86768:	3301      	adds	r3, #1
   8676a:	9b07      	ldr	r3, [sp, #28]
   8676c:	f000 8414 	beq.w	86f98 <_svfprintf_r+0xa00>
   86770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86774:	ea54 0205 	orrs.w	r2, r4, r5
   86778:	9308      	str	r3, [sp, #32]
   8677a:	f040 840e 	bne.w	86f9a <_svfprintf_r+0xa02>
   8677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86780:	2a00      	cmp	r2, #0
   86782:	f040 840f 	bne.w	86fa4 <_svfprintf_r+0xa0c>
   86786:	9307      	str	r3, [sp, #28]
   86788:	2300      	movs	r3, #0
   8678a:	af56      	add	r7, sp, #344	; 0x158
   8678c:	9309      	str	r3, [sp, #36]	; 0x24
   8678e:	930c      	str	r3, [sp, #48]	; 0x30
   86790:	e26b      	b.n	86c6a <_svfprintf_r+0x6d2>
   86792:	9b07      	ldr	r3, [sp, #28]
   86794:	f043 0310 	orr.w	r3, r3, #16
   86798:	9307      	str	r3, [sp, #28]
   8679a:	9b07      	ldr	r3, [sp, #28]
   8679c:	069a      	lsls	r2, r3, #26
   8679e:	f140 8126 	bpl.w	869ee <_svfprintf_r+0x456>
   867a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867a4:	3307      	adds	r3, #7
   867a6:	f023 0307 	bic.w	r3, r3, #7
   867aa:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   867ae:	930e      	str	r3, [sp, #56]	; 0x38
   867b0:	9b07      	ldr	r3, [sp, #28]
   867b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   867b6:	9308      	str	r3, [sp, #32]
   867b8:	2300      	movs	r3, #0
   867ba:	2200      	movs	r2, #0
   867bc:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   867c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   867c2:	4611      	mov	r1, r2
   867c4:	3101      	adds	r1, #1
   867c6:	f000 8231 	beq.w	86c2c <_svfprintf_r+0x694>
   867ca:	9908      	ldr	r1, [sp, #32]
   867cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   867d0:	9107      	str	r1, [sp, #28]
   867d2:	ea54 0105 	orrs.w	r1, r4, r5
   867d6:	f040 8227 	bne.w	86c28 <_svfprintf_r+0x690>
   867da:	2a00      	cmp	r2, #0
   867dc:	f040 837d 	bne.w	86eda <_svfprintf_r+0x942>
   867e0:	2b00      	cmp	r3, #0
   867e2:	d1d1      	bne.n	86788 <_svfprintf_r+0x1f0>
   867e4:	9b08      	ldr	r3, [sp, #32]
   867e6:	f013 0301 	ands.w	r3, r3, #1
   867ea:	930c      	str	r3, [sp, #48]	; 0x30
   867ec:	f000 8590 	beq.w	87310 <_svfprintf_r+0xd78>
   867f0:	2330      	movs	r3, #48	; 0x30
   867f2:	f20d 1757 	addw	r7, sp, #343	; 0x157
   867f6:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   867fa:	e236      	b.n	86c6a <_svfprintf_r+0x6d2>
   867fc:	1be5      	subs	r5, r4, r7
   867fe:	f000 809d 	beq.w	8693c <_svfprintf_r+0x3a4>
   86802:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   86806:	3301      	adds	r3, #1
   86808:	442a      	add	r2, r5
   8680a:	2b07      	cmp	r3, #7
   8680c:	e9c8 7500 	strd	r7, r5, [r8]
   86810:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   86814:	dc06      	bgt.n	86824 <_svfprintf_r+0x28c>
   86816:	f108 0808 	add.w	r8, r8, #8
   8681a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8681c:	7823      	ldrb	r3, [r4, #0]
   8681e:	442a      	add	r2, r5
   86820:	920a      	str	r2, [sp, #40]	; 0x28
   86822:	e6f4      	b.n	8660e <_svfprintf_r+0x76>
   86824:	4651      	mov	r1, sl
   86826:	4648      	mov	r0, r9
   86828:	aa2a      	add	r2, sp, #168	; 0xa8
   8682a:	f005 fa99 	bl	8bd60 <__ssprint_r>
   8682e:	2800      	cmp	r0, #0
   86830:	f041 83ce 	bne.w	87fd0 <_svfprintf_r+0x1a38>
   86834:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86838:	e7ef      	b.n	8681a <_svfprintf_r+0x282>
   8683a:	2e00      	cmp	r6, #0
   8683c:	d07e      	beq.n	8693c <_svfprintf_r+0x3a4>
   8683e:	2300      	movs	r3, #0
   86840:	2101      	movs	r1, #1
   86842:	461a      	mov	r2, r3
   86844:	9108      	str	r1, [sp, #32]
   86846:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   8684a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8684e:	930d      	str	r3, [sp, #52]	; 0x34
   86850:	9309      	str	r3, [sp, #36]	; 0x24
   86852:	9312      	str	r3, [sp, #72]	; 0x48
   86854:	9316      	str	r3, [sp, #88]	; 0x58
   86856:	9310      	str	r3, [sp, #64]	; 0x40
   86858:	910c      	str	r1, [sp, #48]	; 0x30
   8685a:	af3d      	add	r7, sp, #244	; 0xf4
   8685c:	9b07      	ldr	r3, [sp, #28]
   8685e:	f013 0302 	ands.w	r3, r3, #2
   86862:	d002      	beq.n	8686a <_svfprintf_r+0x2d2>
   86864:	9908      	ldr	r1, [sp, #32]
   86866:	3102      	adds	r1, #2
   86868:	9108      	str	r1, [sp, #32]
   8686a:	9907      	ldr	r1, [sp, #28]
   8686c:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   86870:	910f      	str	r1, [sp, #60]	; 0x3c
   86872:	d105      	bne.n	86880 <_svfprintf_r+0x2e8>
   86874:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86876:	9808      	ldr	r0, [sp, #32]
   86878:	1a0d      	subs	r5, r1, r0
   8687a:	2d00      	cmp	r5, #0
   8687c:	f300 834b 	bgt.w	86f16 <_svfprintf_r+0x97e>
   86880:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86882:	b172      	cbz	r2, 868a2 <_svfprintf_r+0x30a>
   86884:	2001      	movs	r0, #1
   86886:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86888:	4404      	add	r4, r0
   8688a:	4402      	add	r2, r0
   8688c:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   86890:	2a07      	cmp	r2, #7
   86892:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86896:	e9c8 1000 	strd	r1, r0, [r8]
   8689a:	f300 83cd 	bgt.w	87038 <_svfprintf_r+0xaa0>
   8689e:	f108 0808 	add.w	r8, r8, #8
   868a2:	b16b      	cbz	r3, 868c0 <_svfprintf_r+0x328>
   868a4:	2102      	movs	r1, #2
   868a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   868a8:	440c      	add	r4, r1
   868aa:	3301      	adds	r3, #1
   868ac:	aa23      	add	r2, sp, #140	; 0x8c
   868ae:	2b07      	cmp	r3, #7
   868b0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   868b4:	e9c8 2100 	strd	r2, r1, [r8]
   868b8:	f300 83cc 	bgt.w	87054 <_svfprintf_r+0xabc>
   868bc:	f108 0808 	add.w	r8, r8, #8
   868c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   868c2:	2b80      	cmp	r3, #128	; 0x80
   868c4:	f000 8234 	beq.w	86d30 <_svfprintf_r+0x798>
   868c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   868ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   868cc:	1a9d      	subs	r5, r3, r2
   868ce:	2d00      	cmp	r5, #0
   868d0:	f300 826e 	bgt.w	86db0 <_svfprintf_r+0x818>
   868d4:	9b07      	ldr	r3, [sp, #28]
   868d6:	05d9      	lsls	r1, r3, #23
   868d8:	f100 81d5 	bmi.w	86c86 <_svfprintf_r+0x6ee>
   868dc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   868de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   868e0:	3301      	adds	r3, #1
   868e2:	4414      	add	r4, r2
   868e4:	2b07      	cmp	r3, #7
   868e6:	e9c8 7200 	strd	r7, r2, [r8]
   868ea:	942c      	str	r4, [sp, #176]	; 0xb0
   868ec:	932b      	str	r3, [sp, #172]	; 0xac
   868ee:	f300 8397 	bgt.w	87020 <_svfprintf_r+0xa88>
   868f2:	f108 0808 	add.w	r8, r8, #8
   868f6:	9b07      	ldr	r3, [sp, #28]
   868f8:	0759      	lsls	r1, r3, #29
   868fa:	d505      	bpl.n	86908 <_svfprintf_r+0x370>
   868fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   868fe:	9a08      	ldr	r2, [sp, #32]
   86900:	1a9d      	subs	r5, r3, r2
   86902:	2d00      	cmp	r5, #0
   86904:	f300 83b2 	bgt.w	8706c <_svfprintf_r+0xad4>
   86908:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   8690c:	9908      	ldr	r1, [sp, #32]
   8690e:	428a      	cmp	r2, r1
   86910:	bfac      	ite	ge
   86912:	189b      	addge	r3, r3, r2
   86914:	185b      	addlt	r3, r3, r1
   86916:	930a      	str	r3, [sp, #40]	; 0x28
   86918:	2c00      	cmp	r4, #0
   8691a:	f040 827d 	bne.w	86e18 <_svfprintf_r+0x880>
   8691e:	2300      	movs	r3, #0
   86920:	932b      	str	r3, [sp, #172]	; 0xac
   86922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86924:	b11b      	cbz	r3, 8692e <_svfprintf_r+0x396>
   86926:	4648      	mov	r0, r9
   86928:	990d      	ldr	r1, [sp, #52]	; 0x34
   8692a:	f003 fd79 	bl	8a420 <_free_r>
   8692e:	465f      	mov	r7, fp
   86930:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86934:	783b      	ldrb	r3, [r7, #0]
   86936:	2b00      	cmp	r3, #0
   86938:	f47f ae5c 	bne.w	865f4 <_svfprintf_r+0x5c>
   8693c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8693e:	46d3      	mov	fp, sl
   86940:	2b00      	cmp	r3, #0
   86942:	f041 824b 	bne.w	87ddc <_svfprintf_r+0x1844>
   86946:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8694a:	f013 0f40 	tst.w	r3, #64	; 0x40
   8694e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86950:	bf18      	it	ne
   86952:	f04f 33ff 	movne.w	r3, #4294967295
   86956:	930a      	str	r3, [sp, #40]	; 0x28
   86958:	980a      	ldr	r0, [sp, #40]	; 0x28
   8695a:	b057      	add	sp, #348	; 0x15c
   8695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86962:	3307      	adds	r3, #7
   86964:	f023 0307 	bic.w	r3, r3, #7
   86968:	4619      	mov	r1, r3
   8696a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8696e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   86972:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86976:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   8697a:	461d      	mov	r5, r3
   8697c:	4618      	mov	r0, r3
   8697e:	910e      	str	r1, [sp, #56]	; 0x38
   86980:	f04f 32ff 	mov.w	r2, #4294967295
   86984:	4621      	mov	r1, r4
   86986:	4ba4      	ldr	r3, [pc, #656]	; (86c18 <_svfprintf_r+0x680>)
   86988:	f006 f91e 	bl	8cbc8 <__aeabi_dcmpun>
   8698c:	2800      	cmp	r0, #0
   8698e:	f040 84d9 	bne.w	87344 <_svfprintf_r+0xdac>
   86992:	4628      	mov	r0, r5
   86994:	4621      	mov	r1, r4
   86996:	f04f 32ff 	mov.w	r2, #4294967295
   8699a:	4b9f      	ldr	r3, [pc, #636]	; (86c18 <_svfprintf_r+0x680>)
   8699c:	f006 f8f6 	bl	8cb8c <__aeabi_dcmple>
   869a0:	2800      	cmp	r0, #0
   869a2:	f040 84cf 	bne.w	87344 <_svfprintf_r+0xdac>
   869a6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   869aa:	2200      	movs	r2, #0
   869ac:	2300      	movs	r3, #0
   869ae:	f006 f8e3 	bl	8cb78 <__aeabi_dcmplt>
   869b2:	2800      	cmp	r0, #0
   869b4:	f041 800e 	bne.w	879d4 <_svfprintf_r+0x143c>
   869b8:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   869bc:	2003      	movs	r0, #3
   869be:	2100      	movs	r1, #0
   869c0:	4f96      	ldr	r7, [pc, #600]	; (86c1c <_svfprintf_r+0x684>)
   869c2:	4b97      	ldr	r3, [pc, #604]	; (86c20 <_svfprintf_r+0x688>)
   869c4:	9008      	str	r0, [sp, #32]
   869c6:	910d      	str	r1, [sp, #52]	; 0x34
   869c8:	2e47      	cmp	r6, #71	; 0x47
   869ca:	bfc8      	it	gt
   869cc:	461f      	movgt	r7, r3
   869ce:	9c07      	ldr	r4, [sp, #28]
   869d0:	900c      	str	r0, [sp, #48]	; 0x30
   869d2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   869d6:	9407      	str	r4, [sp, #28]
   869d8:	9109      	str	r1, [sp, #36]	; 0x24
   869da:	9112      	str	r1, [sp, #72]	; 0x48
   869dc:	9116      	str	r1, [sp, #88]	; 0x58
   869de:	9110      	str	r1, [sp, #64]	; 0x40
   869e0:	2a00      	cmp	r2, #0
   869e2:	f43f af3b 	beq.w	8685c <_svfprintf_r+0x2c4>
   869e6:	9b08      	ldr	r3, [sp, #32]
   869e8:	3301      	adds	r3, #1
   869ea:	9308      	str	r3, [sp, #32]
   869ec:	e736      	b.n	8685c <_svfprintf_r+0x2c4>
   869ee:	9b07      	ldr	r3, [sp, #28]
   869f0:	06db      	lsls	r3, r3, #27
   869f2:	f100 849c 	bmi.w	8732e <_svfprintf_r+0xd96>
   869f6:	9b07      	ldr	r3, [sp, #28]
   869f8:	065f      	lsls	r7, r3, #25
   869fa:	f140 87b2 	bpl.w	87962 <_svfprintf_r+0x13ca>
   869fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a00:	2500      	movs	r5, #0
   86a02:	f853 4b04 	ldr.w	r4, [r3], #4
   86a06:	930e      	str	r3, [sp, #56]	; 0x38
   86a08:	b2a4      	uxth	r4, r4
   86a0a:	e6d1      	b.n	867b0 <_svfprintf_r+0x218>
   86a0c:	9b07      	ldr	r3, [sp, #28]
   86a0e:	06d8      	lsls	r0, r3, #27
   86a10:	f100 8568 	bmi.w	874e4 <_svfprintf_r+0xf4c>
   86a14:	9b07      	ldr	r3, [sp, #28]
   86a16:	0659      	lsls	r1, r3, #25
   86a18:	f140 87be 	bpl.w	87998 <_svfprintf_r+0x1400>
   86a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a1e:	f853 4b04 	ldr.w	r4, [r3], #4
   86a22:	b224      	sxth	r4, r4
   86a24:	17e5      	asrs	r5, r4, #31
   86a26:	930e      	str	r3, [sp, #56]	; 0x38
   86a28:	4622      	mov	r2, r4
   86a2a:	462b      	mov	r3, r5
   86a2c:	e696      	b.n	8675c <_svfprintf_r+0x1c4>
   86a2e:	2100      	movs	r1, #0
   86a30:	2401      	movs	r4, #1
   86a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a34:	460a      	mov	r2, r1
   86a36:	f853 0b04 	ldr.w	r0, [r3], #4
   86a3a:	9408      	str	r4, [sp, #32]
   86a3c:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   86a40:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86a44:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   86a48:	9109      	str	r1, [sp, #36]	; 0x24
   86a4a:	9112      	str	r1, [sp, #72]	; 0x48
   86a4c:	9116      	str	r1, [sp, #88]	; 0x58
   86a4e:	9110      	str	r1, [sp, #64]	; 0x40
   86a50:	940c      	str	r4, [sp, #48]	; 0x30
   86a52:	af3d      	add	r7, sp, #244	; 0xf4
   86a54:	e702      	b.n	8685c <_svfprintf_r+0x2c4>
   86a56:	2500      	movs	r5, #0
   86a58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86a5a:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   86a5e:	f854 7b04 	ldr.w	r7, [r4], #4
   86a62:	2f00      	cmp	r7, #0
   86a64:	f000 859f 	beq.w	875a6 <_svfprintf_r+0x100e>
   86a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86a6a:	4613      	mov	r3, r2
   86a6c:	3301      	adds	r3, #1
   86a6e:	f000 8770 	beq.w	87952 <_svfprintf_r+0x13ba>
   86a72:	4629      	mov	r1, r5
   86a74:	4638      	mov	r0, r7
   86a76:	f004 fac1 	bl	8affc <memchr>
   86a7a:	900d      	str	r0, [sp, #52]	; 0x34
   86a7c:	2800      	cmp	r0, #0
   86a7e:	f001 80b9 	beq.w	87bf4 <_svfprintf_r+0x165c>
   86a82:	462b      	mov	r3, r5
   86a84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86a86:	9509      	str	r5, [sp, #36]	; 0x24
   86a88:	1bd2      	subs	r2, r2, r7
   86a8a:	920c      	str	r2, [sp, #48]	; 0x30
   86a8c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   86a90:	9208      	str	r2, [sp, #32]
   86a92:	940e      	str	r4, [sp, #56]	; 0x38
   86a94:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86a98:	930d      	str	r3, [sp, #52]	; 0x34
   86a9a:	9312      	str	r3, [sp, #72]	; 0x48
   86a9c:	9316      	str	r3, [sp, #88]	; 0x58
   86a9e:	9310      	str	r3, [sp, #64]	; 0x40
   86aa0:	e79e      	b.n	869e0 <_svfprintf_r+0x448>
   86aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86aa4:	425b      	negs	r3, r3
   86aa6:	930b      	str	r3, [sp, #44]	; 0x2c
   86aa8:	9b07      	ldr	r3, [sp, #28]
   86aaa:	f89b 6000 	ldrb.w	r6, [fp]
   86aae:	f043 0304 	orr.w	r3, r3, #4
   86ab2:	9307      	str	r3, [sp, #28]
   86ab4:	e5bb      	b.n	8662e <_svfprintf_r+0x96>
   86ab6:	9b07      	ldr	r3, [sp, #28]
   86ab8:	f043 0310 	orr.w	r3, r3, #16
   86abc:	9308      	str	r3, [sp, #32]
   86abe:	9b08      	ldr	r3, [sp, #32]
   86ac0:	069d      	lsls	r5, r3, #26
   86ac2:	f140 83ea 	bpl.w	8729a <_svfprintf_r+0xd02>
   86ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ac8:	3307      	adds	r3, #7
   86aca:	f023 0307 	bic.w	r3, r3, #7
   86ace:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86ad2:	930e      	str	r3, [sp, #56]	; 0x38
   86ad4:	2301      	movs	r3, #1
   86ad6:	e670      	b.n	867ba <_svfprintf_r+0x222>
   86ad8:	f647 0230 	movw	r2, #30768	; 0x7830
   86adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ade:	9907      	ldr	r1, [sp, #28]
   86ae0:	f853 4b04 	ldr.w	r4, [r3], #4
   86ae4:	f041 0102 	orr.w	r1, r1, #2
   86ae8:	930e      	str	r3, [sp, #56]	; 0x38
   86aea:	4b4e      	ldr	r3, [pc, #312]	; (86c24 <_svfprintf_r+0x68c>)
   86aec:	2500      	movs	r5, #0
   86aee:	9319      	str	r3, [sp, #100]	; 0x64
   86af0:	2678      	movs	r6, #120	; 0x78
   86af2:	2302      	movs	r3, #2
   86af4:	9108      	str	r1, [sp, #32]
   86af6:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   86afa:	e65e      	b.n	867ba <_svfprintf_r+0x222>
   86afc:	9b07      	ldr	r3, [sp, #28]
   86afe:	069d      	lsls	r5, r3, #26
   86b00:	f100 8408 	bmi.w	87314 <_svfprintf_r+0xd7c>
   86b04:	9b07      	ldr	r3, [sp, #28]
   86b06:	06dc      	lsls	r4, r3, #27
   86b08:	f100 86e1 	bmi.w	878ce <_svfprintf_r+0x1336>
   86b0c:	9b07      	ldr	r3, [sp, #28]
   86b0e:	0658      	lsls	r0, r3, #25
   86b10:	f100 8795 	bmi.w	87a3e <_svfprintf_r+0x14a6>
   86b14:	9b07      	ldr	r3, [sp, #28]
   86b16:	0599      	lsls	r1, r3, #22
   86b18:	f140 86d9 	bpl.w	878ce <_svfprintf_r+0x1336>
   86b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86b1e:	990a      	ldr	r1, [sp, #40]	; 0x28
   86b20:	f853 2b04 	ldr.w	r2, [r3], #4
   86b24:	465f      	mov	r7, fp
   86b26:	7011      	strb	r1, [r2, #0]
   86b28:	930e      	str	r3, [sp, #56]	; 0x38
   86b2a:	e703      	b.n	86934 <_svfprintf_r+0x39c>
   86b2c:	f89b 6000 	ldrb.w	r6, [fp]
   86b30:	9b07      	ldr	r3, [sp, #28]
   86b32:	2e6c      	cmp	r6, #108	; 0x6c
   86b34:	f000 8508 	beq.w	87548 <_svfprintf_r+0xfb0>
   86b38:	f043 0310 	orr.w	r3, r3, #16
   86b3c:	9307      	str	r3, [sp, #28]
   86b3e:	e576      	b.n	8662e <_svfprintf_r+0x96>
   86b40:	f89b 6000 	ldrb.w	r6, [fp]
   86b44:	9b07      	ldr	r3, [sp, #28]
   86b46:	2e68      	cmp	r6, #104	; 0x68
   86b48:	f000 8507 	beq.w	8755a <_svfprintf_r+0xfc2>
   86b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86b50:	9307      	str	r3, [sp, #28]
   86b52:	e56c      	b.n	8662e <_svfprintf_r+0x96>
   86b54:	9b07      	ldr	r3, [sp, #28]
   86b56:	f89b 6000 	ldrb.w	r6, [fp]
   86b5a:	f043 0308 	orr.w	r3, r3, #8
   86b5e:	9307      	str	r3, [sp, #28]
   86b60:	e565      	b.n	8662e <_svfprintf_r+0x96>
   86b62:	4648      	mov	r0, r9
   86b64:	f003 ff02 	bl	8a96c <_localeconv_r>
   86b68:	6843      	ldr	r3, [r0, #4]
   86b6a:	4618      	mov	r0, r3
   86b6c:	931c      	str	r3, [sp, #112]	; 0x70
   86b6e:	f7ff fcb1 	bl	864d4 <strlen>
   86b72:	4603      	mov	r3, r0
   86b74:	4648      	mov	r0, r9
   86b76:	461d      	mov	r5, r3
   86b78:	931d      	str	r3, [sp, #116]	; 0x74
   86b7a:	f003 fef7 	bl	8a96c <_localeconv_r>
   86b7e:	6882      	ldr	r2, [r0, #8]
   86b80:	2120      	movs	r1, #32
   86b82:	921a      	str	r2, [sp, #104]	; 0x68
   86b84:	2d00      	cmp	r5, #0
   86b86:	f43f adcd 	beq.w	86724 <_svfprintf_r+0x18c>
   86b8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86b8c:	2b00      	cmp	r3, #0
   86b8e:	f43f adc9 	beq.w	86724 <_svfprintf_r+0x18c>
   86b92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86b94:	781b      	ldrb	r3, [r3, #0]
   86b96:	2b00      	cmp	r3, #0
   86b98:	f43f adc4 	beq.w	86724 <_svfprintf_r+0x18c>
   86b9c:	9b07      	ldr	r3, [sp, #28]
   86b9e:	f89b 6000 	ldrb.w	r6, [fp]
   86ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   86ba6:	9307      	str	r3, [sp, #28]
   86ba8:	e541      	b.n	8662e <_svfprintf_r+0x96>
   86baa:	9b07      	ldr	r3, [sp, #28]
   86bac:	f89b 6000 	ldrb.w	r6, [fp]
   86bb0:	f043 0301 	orr.w	r3, r3, #1
   86bb4:	9307      	str	r3, [sp, #28]
   86bb6:	e53a      	b.n	8662e <_svfprintf_r+0x96>
   86bb8:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   86bbc:	2b00      	cmp	r3, #0
   86bbe:	f47f adb1 	bne.w	86724 <_svfprintf_r+0x18c>
   86bc2:	f89b 6000 	ldrb.w	r6, [fp]
   86bc6:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86bca:	e530      	b.n	8662e <_svfprintf_r+0x96>
   86bcc:	9b07      	ldr	r3, [sp, #28]
   86bce:	f89b 6000 	ldrb.w	r6, [fp]
   86bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86bd6:	9307      	str	r3, [sp, #28]
   86bd8:	e529      	b.n	8662e <_svfprintf_r+0x96>
   86bda:	465a      	mov	r2, fp
   86bdc:	f812 6b01 	ldrb.w	r6, [r2], #1
   86be0:	2e2a      	cmp	r6, #42	; 0x2a
   86be2:	f001 8251 	beq.w	88088 <_svfprintf_r+0x1af0>
   86be6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86bea:	2b09      	cmp	r3, #9
   86bec:	4693      	mov	fp, r2
   86bee:	bf98      	it	ls
   86bf0:	2200      	movls	r2, #0
   86bf2:	f201 80ef 	bhi.w	87dd4 <_svfprintf_r+0x183c>
   86bf6:	f81b 6b01 	ldrb.w	r6, [fp], #1
   86bfa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86bfe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86c02:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86c06:	2b09      	cmp	r3, #9
   86c08:	d9f5      	bls.n	86bf6 <_svfprintf_r+0x65e>
   86c0a:	9209      	str	r2, [sp, #36]	; 0x24
   86c0c:	e511      	b.n	86632 <_svfprintf_r+0x9a>
   86c0e:	f89b 6000 	ldrb.w	r6, [fp]
   86c12:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   86c16:	e50a      	b.n	8662e <_svfprintf_r+0x96>
   86c18:	7fefffff 	.word	0x7fefffff
   86c1c:	0008cfc4 	.word	0x0008cfc4
   86c20:	0008cfc8 	.word	0x0008cfc8
   86c24:	0008cfd4 	.word	0x0008cfd4
   86c28:	9a07      	ldr	r2, [sp, #28]
   86c2a:	9208      	str	r2, [sp, #32]
   86c2c:	2b01      	cmp	r3, #1
   86c2e:	f000 81b4 	beq.w	86f9a <_svfprintf_r+0xa02>
   86c32:	2b02      	cmp	r3, #2
   86c34:	f000 8159 	beq.w	86eea <_svfprintf_r+0x952>
   86c38:	af56      	add	r7, sp, #344	; 0x158
   86c3a:	08e2      	lsrs	r2, r4, #3
   86c3c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86c40:	08e9      	lsrs	r1, r5, #3
   86c42:	f004 0307 	and.w	r3, r4, #7
   86c46:	460d      	mov	r5, r1
   86c48:	4614      	mov	r4, r2
   86c4a:	3330      	adds	r3, #48	; 0x30
   86c4c:	ea54 0105 	orrs.w	r1, r4, r5
   86c50:	463a      	mov	r2, r7
   86c52:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86c56:	d1f0      	bne.n	86c3a <_svfprintf_r+0x6a2>
   86c58:	9908      	ldr	r1, [sp, #32]
   86c5a:	4608      	mov	r0, r1
   86c5c:	07c0      	lsls	r0, r0, #31
   86c5e:	f100 82b8 	bmi.w	871d2 <_svfprintf_r+0xc3a>
   86c62:	ab56      	add	r3, sp, #344	; 0x158
   86c64:	1bdb      	subs	r3, r3, r7
   86c66:	9107      	str	r1, [sp, #28]
   86c68:	930c      	str	r3, [sp, #48]	; 0x30
   86c6a:	2300      	movs	r3, #0
   86c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   86c6e:	930d      	str	r3, [sp, #52]	; 0x34
   86c70:	9312      	str	r3, [sp, #72]	; 0x48
   86c72:	9316      	str	r3, [sp, #88]	; 0x58
   86c74:	9310      	str	r3, [sp, #64]	; 0x40
   86c76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86c78:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86c7c:	428b      	cmp	r3, r1
   86c7e:	bfb8      	it	lt
   86c80:	460b      	movlt	r3, r1
   86c82:	9308      	str	r3, [sp, #32]
   86c84:	e6ac      	b.n	869e0 <_svfprintf_r+0x448>
   86c86:	2e65      	cmp	r6, #101	; 0x65
   86c88:	f340 80d8 	ble.w	86e3c <_svfprintf_r+0x8a4>
   86c8c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86c90:	2200      	movs	r2, #0
   86c92:	2300      	movs	r3, #0
   86c94:	f005 ff66 	bl	8cb64 <__aeabi_dcmpeq>
   86c98:	2800      	cmp	r0, #0
   86c9a:	f000 821e 	beq.w	870da <_svfprintf_r+0xb42>
   86c9e:	2101      	movs	r1, #1
   86ca0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86ca2:	4ac5      	ldr	r2, [pc, #788]	; (86fb8 <_svfprintf_r+0xa20>)
   86ca4:	440b      	add	r3, r1
   86ca6:	440c      	add	r4, r1
   86ca8:	2b07      	cmp	r3, #7
   86caa:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86cae:	e9c8 2100 	strd	r2, r1, [r8]
   86cb2:	f300 85bb 	bgt.w	8782c <_svfprintf_r+0x1294>
   86cb6:	f108 0808 	add.w	r8, r8, #8
   86cba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86cbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86cbe:	4293      	cmp	r3, r2
   86cc0:	f280 8321 	bge.w	87306 <_svfprintf_r+0xd6e>
   86cc4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86cc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86cc8:	3301      	adds	r3, #1
   86cca:	9918      	ldr	r1, [sp, #96]	; 0x60
   86ccc:	4414      	add	r4, r2
   86cce:	2b07      	cmp	r3, #7
   86cd0:	e9c8 1200 	strd	r1, r2, [r8]
   86cd4:	942c      	str	r4, [sp, #176]	; 0xb0
   86cd6:	932b      	str	r3, [sp, #172]	; 0xac
   86cd8:	f300 8448 	bgt.w	8756c <_svfprintf_r+0xfd4>
   86cdc:	f108 0808 	add.w	r8, r8, #8
   86ce0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86ce2:	1e5d      	subs	r5, r3, #1
   86ce4:	2d00      	cmp	r5, #0
   86ce6:	f77f ae06 	ble.w	868f6 <_svfprintf_r+0x35e>
   86cea:	2d10      	cmp	r5, #16
   86cec:	f340 85c7 	ble.w	8787e <_svfprintf_r+0x12e6>
   86cf0:	4fb2      	ldr	r7, [pc, #712]	; (86fbc <_svfprintf_r+0xa24>)
   86cf2:	2610      	movs	r6, #16
   86cf4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86cf6:	970f      	str	r7, [sp, #60]	; 0x3c
   86cf8:	e005      	b.n	86d06 <_svfprintf_r+0x76e>
   86cfa:	f108 0808 	add.w	r8, r8, #8
   86cfe:	3d10      	subs	r5, #16
   86d00:	2d10      	cmp	r5, #16
   86d02:	f340 85bf 	ble.w	87884 <_svfprintf_r+0x12ec>
   86d06:	3301      	adds	r3, #1
   86d08:	3410      	adds	r4, #16
   86d0a:	2b07      	cmp	r3, #7
   86d0c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86d10:	e9c8 7600 	strd	r7, r6, [r8]
   86d14:	ddf1      	ble.n	86cfa <_svfprintf_r+0x762>
   86d16:	4651      	mov	r1, sl
   86d18:	4648      	mov	r0, r9
   86d1a:	aa2a      	add	r2, sp, #168	; 0xa8
   86d1c:	f005 f820 	bl	8bd60 <__ssprint_r>
   86d20:	2800      	cmp	r0, #0
   86d22:	f040 8081 	bne.w	86e28 <_svfprintf_r+0x890>
   86d26:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86d2a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d2e:	e7e6      	b.n	86cfe <_svfprintf_r+0x766>
   86d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86d32:	9a08      	ldr	r2, [sp, #32]
   86d34:	1a9d      	subs	r5, r3, r2
   86d36:	2d00      	cmp	r5, #0
   86d38:	f77f adc6 	ble.w	868c8 <_svfprintf_r+0x330>
   86d3c:	2d10      	cmp	r5, #16
   86d3e:	f341 8069 	ble.w	87e14 <_svfprintf_r+0x187c>
   86d42:	489e      	ldr	r0, [pc, #632]	; (86fbc <_svfprintf_r+0xa24>)
   86d44:	4621      	mov	r1, r4
   86d46:	2310      	movs	r3, #16
   86d48:	4604      	mov	r4, r0
   86d4a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86d4c:	900f      	str	r0, [sp, #60]	; 0x3c
   86d4e:	e004      	b.n	86d5a <_svfprintf_r+0x7c2>
   86d50:	3d10      	subs	r5, #16
   86d52:	2d10      	cmp	r5, #16
   86d54:	f108 0808 	add.w	r8, r8, #8
   86d58:	dd17      	ble.n	86d8a <_svfprintf_r+0x7f2>
   86d5a:	3201      	adds	r2, #1
   86d5c:	3110      	adds	r1, #16
   86d5e:	2a07      	cmp	r2, #7
   86d60:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86d64:	e9c8 4300 	strd	r4, r3, [r8]
   86d68:	ddf2      	ble.n	86d50 <_svfprintf_r+0x7b8>
   86d6a:	4651      	mov	r1, sl
   86d6c:	4648      	mov	r0, r9
   86d6e:	aa2a      	add	r2, sp, #168	; 0xa8
   86d70:	f004 fff6 	bl	8bd60 <__ssprint_r>
   86d74:	2800      	cmp	r0, #0
   86d76:	d157      	bne.n	86e28 <_svfprintf_r+0x890>
   86d78:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86d7c:	3d10      	subs	r5, #16
   86d7e:	2d10      	cmp	r5, #16
   86d80:	f04f 0310 	mov.w	r3, #16
   86d84:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d88:	dce7      	bgt.n	86d5a <_svfprintf_r+0x7c2>
   86d8a:	460c      	mov	r4, r1
   86d8c:	3201      	adds	r2, #1
   86d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86d90:	442c      	add	r4, r5
   86d92:	2a07      	cmp	r2, #7
   86d94:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86d98:	e9c8 3500 	strd	r3, r5, [r8]
   86d9c:	f300 858a 	bgt.w	878b4 <_svfprintf_r+0x131c>
   86da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86da2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86da4:	f108 0808 	add.w	r8, r8, #8
   86da8:	1a9d      	subs	r5, r3, r2
   86daa:	2d00      	cmp	r5, #0
   86dac:	f77f ad92 	ble.w	868d4 <_svfprintf_r+0x33c>
   86db0:	2d10      	cmp	r5, #16
   86db2:	f340 860a 	ble.w	879ca <_svfprintf_r+0x1432>
   86db6:	4881      	ldr	r0, [pc, #516]	; (86fbc <_svfprintf_r+0xa24>)
   86db8:	4621      	mov	r1, r4
   86dba:	2310      	movs	r3, #16
   86dbc:	4604      	mov	r4, r0
   86dbe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86dc0:	900f      	str	r0, [sp, #60]	; 0x3c
   86dc2:	e004      	b.n	86dce <_svfprintf_r+0x836>
   86dc4:	3d10      	subs	r5, #16
   86dc6:	2d10      	cmp	r5, #16
   86dc8:	f108 0808 	add.w	r8, r8, #8
   86dcc:	dd16      	ble.n	86dfc <_svfprintf_r+0x864>
   86dce:	3201      	adds	r2, #1
   86dd0:	3110      	adds	r1, #16
   86dd2:	2a07      	cmp	r2, #7
   86dd4:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86dd8:	e9c8 4300 	strd	r4, r3, [r8]
   86ddc:	ddf2      	ble.n	86dc4 <_svfprintf_r+0x82c>
   86dde:	4651      	mov	r1, sl
   86de0:	4648      	mov	r0, r9
   86de2:	aa2a      	add	r2, sp, #168	; 0xa8
   86de4:	f004 ffbc 	bl	8bd60 <__ssprint_r>
   86de8:	b9f0      	cbnz	r0, 86e28 <_svfprintf_r+0x890>
   86dea:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86dee:	3d10      	subs	r5, #16
   86df0:	2d10      	cmp	r5, #16
   86df2:	f04f 0310 	mov.w	r3, #16
   86df6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86dfa:	dce8      	bgt.n	86dce <_svfprintf_r+0x836>
   86dfc:	460c      	mov	r4, r1
   86dfe:	3201      	adds	r2, #1
   86e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86e02:	442c      	add	r4, r5
   86e04:	2a07      	cmp	r2, #7
   86e06:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86e0a:	e9c8 3500 	strd	r3, r5, [r8]
   86e0e:	f300 8237 	bgt.w	87280 <_svfprintf_r+0xce8>
   86e12:	f108 0808 	add.w	r8, r8, #8
   86e16:	e55d      	b.n	868d4 <_svfprintf_r+0x33c>
   86e18:	4651      	mov	r1, sl
   86e1a:	4648      	mov	r0, r9
   86e1c:	aa2a      	add	r2, sp, #168	; 0xa8
   86e1e:	f004 ff9f 	bl	8bd60 <__ssprint_r>
   86e22:	2800      	cmp	r0, #0
   86e24:	f43f ad7b 	beq.w	8691e <_svfprintf_r+0x386>
   86e28:	46d3      	mov	fp, sl
   86e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86e2c:	2b00      	cmp	r3, #0
   86e2e:	f43f ad8a 	beq.w	86946 <_svfprintf_r+0x3ae>
   86e32:	4648      	mov	r0, r9
   86e34:	990d      	ldr	r1, [sp, #52]	; 0x34
   86e36:	f003 faf3 	bl	8a420 <_free_r>
   86e3a:	e584      	b.n	86946 <_svfprintf_r+0x3ae>
   86e3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86e3e:	2b01      	cmp	r3, #1
   86e40:	f340 81d5 	ble.w	871ee <_svfprintf_r+0xc56>
   86e44:	2301      	movs	r3, #1
   86e46:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   86e48:	441c      	add	r4, r3
   86e4a:	441d      	add	r5, r3
   86e4c:	2d07      	cmp	r5, #7
   86e4e:	942c      	str	r4, [sp, #176]	; 0xb0
   86e50:	f8c8 7000 	str.w	r7, [r8]
   86e54:	952b      	str	r5, [sp, #172]	; 0xac
   86e56:	f8c8 3004 	str.w	r3, [r8, #4]
   86e5a:	f300 823a 	bgt.w	872d2 <_svfprintf_r+0xd3a>
   86e5e:	f108 0808 	add.w	r8, r8, #8
   86e62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86e64:	3501      	adds	r5, #1
   86e66:	9a18      	ldr	r2, [sp, #96]	; 0x60
   86e68:	441c      	add	r4, r3
   86e6a:	2d07      	cmp	r5, #7
   86e6c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86e70:	e9c8 2300 	strd	r2, r3, [r8]
   86e74:	f300 823a 	bgt.w	872ec <_svfprintf_r+0xd54>
   86e78:	f108 0808 	add.w	r8, r8, #8
   86e7c:	2300      	movs	r3, #0
   86e7e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86e82:	2200      	movs	r2, #0
   86e84:	f005 fe6e 	bl	8cb64 <__aeabi_dcmpeq>
   86e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86e8a:	2800      	cmp	r0, #0
   86e8c:	f040 81cd 	bne.w	8722a <_svfprintf_r+0xc92>
   86e90:	3b01      	subs	r3, #1
   86e92:	3501      	adds	r5, #1
   86e94:	3701      	adds	r7, #1
   86e96:	441c      	add	r4, r3
   86e98:	2d07      	cmp	r5, #7
   86e9a:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86e9e:	f8c8 7000 	str.w	r7, [r8]
   86ea2:	f8c8 3004 	str.w	r3, [r8, #4]
   86ea6:	f300 84dc 	bgt.w	87862 <_svfprintf_r+0x12ca>
   86eaa:	f108 0808 	add.w	r8, r8, #8
   86eae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86eb0:	3501      	adds	r5, #1
   86eb2:	4414      	add	r4, r2
   86eb4:	ab26      	add	r3, sp, #152	; 0x98
   86eb6:	2d07      	cmp	r5, #7
   86eb8:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86ebc:	e9c8 3200 	strd	r3, r2, [r8]
   86ec0:	f77f ad17 	ble.w	868f2 <_svfprintf_r+0x35a>
   86ec4:	4651      	mov	r1, sl
   86ec6:	4648      	mov	r0, r9
   86ec8:	aa2a      	add	r2, sp, #168	; 0xa8
   86eca:	f004 ff49 	bl	8bd60 <__ssprint_r>
   86ece:	2800      	cmp	r0, #0
   86ed0:	d1aa      	bne.n	86e28 <_svfprintf_r+0x890>
   86ed2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86ed4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86ed8:	e50d      	b.n	868f6 <_svfprintf_r+0x35e>
   86eda:	2b01      	cmp	r3, #1
   86edc:	f000 87ca 	beq.w	87e74 <_svfprintf_r+0x18dc>
   86ee0:	2b02      	cmp	r3, #2
   86ee2:	9b07      	ldr	r3, [sp, #28]
   86ee4:	9308      	str	r3, [sp, #32]
   86ee6:	f47f aea7 	bne.w	86c38 <_svfprintf_r+0x6a0>
   86eea:	9819      	ldr	r0, [sp, #100]	; 0x64
   86eec:	af56      	add	r7, sp, #344	; 0x158
   86eee:	0923      	lsrs	r3, r4, #4
   86ef0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   86ef4:	0929      	lsrs	r1, r5, #4
   86ef6:	f004 020f 	and.w	r2, r4, #15
   86efa:	460d      	mov	r5, r1
   86efc:	461c      	mov	r4, r3
   86efe:	5c83      	ldrb	r3, [r0, r2]
   86f00:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86f04:	ea54 0305 	orrs.w	r3, r4, r5
   86f08:	d1f1      	bne.n	86eee <_svfprintf_r+0x956>
   86f0a:	9b08      	ldr	r3, [sp, #32]
   86f0c:	9307      	str	r3, [sp, #28]
   86f0e:	ab56      	add	r3, sp, #344	; 0x158
   86f10:	1bdb      	subs	r3, r3, r7
   86f12:	930c      	str	r3, [sp, #48]	; 0x30
   86f14:	e6a9      	b.n	86c6a <_svfprintf_r+0x6d2>
   86f16:	2d10      	cmp	r5, #16
   86f18:	f340 8668 	ble.w	87bec <_svfprintf_r+0x1654>
   86f1c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86f20:	931e      	str	r3, [sp, #120]	; 0x78
   86f22:	460b      	mov	r3, r1
   86f24:	4639      	mov	r1, r7
   86f26:	2410      	movs	r4, #16
   86f28:	4637      	mov	r7, r6
   86f2a:	4656      	mov	r6, sl
   86f2c:	46ca      	mov	sl, r9
   86f2e:	4689      	mov	r9, r1
   86f30:	e004      	b.n	86f3c <_svfprintf_r+0x9a4>
   86f32:	3d10      	subs	r5, #16
   86f34:	2d10      	cmp	r5, #16
   86f36:	f108 0808 	add.w	r8, r8, #8
   86f3a:	dd17      	ble.n	86f6c <_svfprintf_r+0x9d4>
   86f3c:	3201      	adds	r2, #1
   86f3e:	4920      	ldr	r1, [pc, #128]	; (86fc0 <_svfprintf_r+0xa28>)
   86f40:	3310      	adds	r3, #16
   86f42:	2a07      	cmp	r2, #7
   86f44:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   86f48:	e9c8 1400 	strd	r1, r4, [r8]
   86f4c:	ddf1      	ble.n	86f32 <_svfprintf_r+0x99a>
   86f4e:	4631      	mov	r1, r6
   86f50:	4650      	mov	r0, sl
   86f52:	aa2a      	add	r2, sp, #168	; 0xa8
   86f54:	f004 ff04 	bl	8bd60 <__ssprint_r>
   86f58:	2800      	cmp	r0, #0
   86f5a:	f040 8458 	bne.w	8780e <_svfprintf_r+0x1276>
   86f5e:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   86f62:	3d10      	subs	r5, #16
   86f64:	2d10      	cmp	r5, #16
   86f66:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86f6a:	dce7      	bgt.n	86f3c <_svfprintf_r+0x9a4>
   86f6c:	4648      	mov	r0, r9
   86f6e:	46d1      	mov	r9, sl
   86f70:	46b2      	mov	sl, r6
   86f72:	463e      	mov	r6, r7
   86f74:	4607      	mov	r7, r0
   86f76:	4619      	mov	r1, r3
   86f78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86f7a:	194c      	adds	r4, r1, r5
   86f7c:	3201      	adds	r2, #1
   86f7e:	4910      	ldr	r1, [pc, #64]	; (86fc0 <_svfprintf_r+0xa28>)
   86f80:	2a07      	cmp	r2, #7
   86f82:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86f86:	e9c8 1500 	strd	r1, r5, [r8]
   86f8a:	f300 841f 	bgt.w	877cc <_svfprintf_r+0x1234>
   86f8e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86f92:	f108 0808 	add.w	r8, r8, #8
   86f96:	e474      	b.n	86882 <_svfprintf_r+0x2ea>
   86f98:	9308      	str	r3, [sp, #32]
   86f9a:	2d00      	cmp	r5, #0
   86f9c:	bf08      	it	eq
   86f9e:	2c0a      	cmpeq	r4, #10
   86fa0:	f080 83d0 	bcs.w	87744 <_svfprintf_r+0x11ac>
   86fa4:	9b08      	ldr	r3, [sp, #32]
   86fa6:	3430      	adds	r4, #48	; 0x30
   86fa8:	9307      	str	r3, [sp, #28]
   86faa:	2301      	movs	r3, #1
   86fac:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   86fb0:	930c      	str	r3, [sp, #48]	; 0x30
   86fb2:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86fb6:	e658      	b.n	86c6a <_svfprintf_r+0x6d2>
   86fb8:	0008d004 	.word	0x0008d004
   86fbc:	0008d018 	.word	0x0008d018
   86fc0:	0008d008 	.word	0x0008d008
   86fc4:	4651      	mov	r1, sl
   86fc6:	4648      	mov	r0, r9
   86fc8:	aa2a      	add	r2, sp, #168	; 0xa8
   86fca:	f004 fec9 	bl	8bd60 <__ssprint_r>
   86fce:	2800      	cmp	r0, #0
   86fd0:	f47f af2a 	bne.w	86e28 <_svfprintf_r+0x890>
   86fd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86fd6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86fd8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86fdc:	2a00      	cmp	r2, #0
   86fde:	f040 847f 	bne.w	878e0 <_svfprintf_r+0x1348>
   86fe2:	9b07      	ldr	r3, [sp, #28]
   86fe4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86fe6:	f003 0301 	and.w	r3, r3, #1
   86fea:	4313      	orrs	r3, r2
   86fec:	f43f ac83 	beq.w	868f6 <_svfprintf_r+0x35e>
   86ff0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86ff2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86ff4:	3301      	adds	r3, #1
   86ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
   86ff8:	4414      	add	r4, r2
   86ffa:	2b07      	cmp	r3, #7
   86ffc:	e9c8 1200 	strd	r1, r2, [r8]
   87000:	942c      	str	r4, [sp, #176]	; 0xb0
   87002:	932b      	str	r3, [sp, #172]	; 0xac
   87004:	f300 8524 	bgt.w	87a50 <_svfprintf_r+0x14b8>
   87008:	f108 0808 	add.w	r8, r8, #8
   8700c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8700e:	3301      	adds	r3, #1
   87010:	4414      	add	r4, r2
   87012:	2b07      	cmp	r3, #7
   87014:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87018:	e9c8 7200 	strd	r7, r2, [r8]
   8701c:	f77f ac69 	ble.w	868f2 <_svfprintf_r+0x35a>
   87020:	4651      	mov	r1, sl
   87022:	4648      	mov	r0, r9
   87024:	aa2a      	add	r2, sp, #168	; 0xa8
   87026:	f004 fe9b 	bl	8bd60 <__ssprint_r>
   8702a:	2800      	cmp	r0, #0
   8702c:	f47f aefc 	bne.w	86e28 <_svfprintf_r+0x890>
   87030:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87032:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87036:	e45e      	b.n	868f6 <_svfprintf_r+0x35e>
   87038:	4651      	mov	r1, sl
   8703a:	4648      	mov	r0, r9
   8703c:	aa2a      	add	r2, sp, #168	; 0xa8
   8703e:	931e      	str	r3, [sp, #120]	; 0x78
   87040:	f004 fe8e 	bl	8bd60 <__ssprint_r>
   87044:	2800      	cmp	r0, #0
   87046:	f47f aeef 	bne.w	86e28 <_svfprintf_r+0x890>
   8704a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8704c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8704e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87052:	e426      	b.n	868a2 <_svfprintf_r+0x30a>
   87054:	4651      	mov	r1, sl
   87056:	4648      	mov	r0, r9
   87058:	aa2a      	add	r2, sp, #168	; 0xa8
   8705a:	f004 fe81 	bl	8bd60 <__ssprint_r>
   8705e:	2800      	cmp	r0, #0
   87060:	f47f aee2 	bne.w	86e28 <_svfprintf_r+0x890>
   87064:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87066:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8706a:	e429      	b.n	868c0 <_svfprintf_r+0x328>
   8706c:	2d10      	cmp	r5, #16
   8706e:	f340 86be 	ble.w	87dee <_svfprintf_r+0x1856>
   87072:	2610      	movs	r6, #16
   87074:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87076:	e004      	b.n	87082 <_svfprintf_r+0xaea>
   87078:	3d10      	subs	r5, #16
   8707a:	2d10      	cmp	r5, #16
   8707c:	f108 0808 	add.w	r8, r8, #8
   87080:	dd17      	ble.n	870b2 <_svfprintf_r+0xb1a>
   87082:	3301      	adds	r3, #1
   87084:	4aad      	ldr	r2, [pc, #692]	; (8733c <_svfprintf_r+0xda4>)
   87086:	3410      	adds	r4, #16
   87088:	2b07      	cmp	r3, #7
   8708a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8708e:	e9c8 2600 	strd	r2, r6, [r8]
   87092:	ddf1      	ble.n	87078 <_svfprintf_r+0xae0>
   87094:	4651      	mov	r1, sl
   87096:	4648      	mov	r0, r9
   87098:	aa2a      	add	r2, sp, #168	; 0xa8
   8709a:	f004 fe61 	bl	8bd60 <__ssprint_r>
   8709e:	2800      	cmp	r0, #0
   870a0:	f47f aec2 	bne.w	86e28 <_svfprintf_r+0x890>
   870a4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   870a8:	3d10      	subs	r5, #16
   870aa:	2d10      	cmp	r5, #16
   870ac:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   870b0:	dce7      	bgt.n	87082 <_svfprintf_r+0xaea>
   870b2:	3301      	adds	r3, #1
   870b4:	4aa1      	ldr	r2, [pc, #644]	; (8733c <_svfprintf_r+0xda4>)
   870b6:	442c      	add	r4, r5
   870b8:	2b07      	cmp	r3, #7
   870ba:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   870be:	e9c8 2500 	strd	r2, r5, [r8]
   870c2:	f77f ac21 	ble.w	86908 <_svfprintf_r+0x370>
   870c6:	4651      	mov	r1, sl
   870c8:	4648      	mov	r0, r9
   870ca:	aa2a      	add	r2, sp, #168	; 0xa8
   870cc:	f004 fe48 	bl	8bd60 <__ssprint_r>
   870d0:	2800      	cmp	r0, #0
   870d2:	f47f aea9 	bne.w	86e28 <_svfprintf_r+0x890>
   870d6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   870d8:	e416      	b.n	86908 <_svfprintf_r+0x370>
   870da:	9a24      	ldr	r2, [sp, #144]	; 0x90
   870dc:	2a00      	cmp	r2, #0
   870de:	f340 8386 	ble.w	877ee <_svfprintf_r+0x1256>
   870e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   870e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   870e6:	4293      	cmp	r3, r2
   870e8:	bfa8      	it	ge
   870ea:	4613      	movge	r3, r2
   870ec:	2b00      	cmp	r3, #0
   870ee:	461d      	mov	r5, r3
   870f0:	dd0b      	ble.n	8710a <_svfprintf_r+0xb72>
   870f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   870f4:	442c      	add	r4, r5
   870f6:	3301      	adds	r3, #1
   870f8:	2b07      	cmp	r3, #7
   870fa:	e9c8 7500 	strd	r7, r5, [r8]
   870fe:	942c      	str	r4, [sp, #176]	; 0xb0
   87100:	932b      	str	r3, [sp, #172]	; 0xac
   87102:	f300 851e 	bgt.w	87b42 <_svfprintf_r+0x15aa>
   87106:	f108 0808 	add.w	r8, r8, #8
   8710a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8710c:	2d00      	cmp	r5, #0
   8710e:	bfa8      	it	ge
   87110:	1b5b      	subge	r3, r3, r5
   87112:	2b00      	cmp	r3, #0
   87114:	461d      	mov	r5, r3
   87116:	f300 8256 	bgt.w	875c6 <_svfprintf_r+0x102e>
   8711a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8711c:	443b      	add	r3, r7
   8711e:	461e      	mov	r6, r3
   87120:	9b07      	ldr	r3, [sp, #28]
   87122:	055b      	lsls	r3, r3, #21
   87124:	f100 8277 	bmi.w	87616 <_svfprintf_r+0x107e>
   87128:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8712a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8712c:	4293      	cmp	r3, r2
   8712e:	db03      	blt.n	87138 <_svfprintf_r+0xba0>
   87130:	9a07      	ldr	r2, [sp, #28]
   87132:	07d5      	lsls	r5, r2, #31
   87134:	f140 847a 	bpl.w	87a2c <_svfprintf_r+0x1494>
   87138:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8713a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8713c:	3201      	adds	r2, #1
   8713e:	9818      	ldr	r0, [sp, #96]	; 0x60
   87140:	440c      	add	r4, r1
   87142:	2a07      	cmp	r2, #7
   87144:	e9c8 0100 	strd	r0, r1, [r8]
   87148:	942c      	str	r4, [sp, #176]	; 0xb0
   8714a:	922b      	str	r2, [sp, #172]	; 0xac
   8714c:	f300 8506 	bgt.w	87b5c <_svfprintf_r+0x15c4>
   87150:	f108 0808 	add.w	r8, r8, #8
   87154:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87156:	18bd      	adds	r5, r7, r2
   87158:	1bad      	subs	r5, r5, r6
   8715a:	1ad3      	subs	r3, r2, r3
   8715c:	429d      	cmp	r5, r3
   8715e:	bfa8      	it	ge
   87160:	461d      	movge	r5, r3
   87162:	2d00      	cmp	r5, #0
   87164:	dd0b      	ble.n	8717e <_svfprintf_r+0xbe6>
   87166:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87168:	442c      	add	r4, r5
   8716a:	3201      	adds	r2, #1
   8716c:	2a07      	cmp	r2, #7
   8716e:	e9c8 6500 	strd	r6, r5, [r8]
   87172:	942c      	str	r4, [sp, #176]	; 0xb0
   87174:	922b      	str	r2, [sp, #172]	; 0xac
   87176:	f300 855f 	bgt.w	87c38 <_svfprintf_r+0x16a0>
   8717a:	f108 0808 	add.w	r8, r8, #8
   8717e:	2d00      	cmp	r5, #0
   87180:	bfb4      	ite	lt
   87182:	461d      	movlt	r5, r3
   87184:	1b5d      	subge	r5, r3, r5
   87186:	2d00      	cmp	r5, #0
   87188:	f77f abb5 	ble.w	868f6 <_svfprintf_r+0x35e>
   8718c:	2d10      	cmp	r5, #16
   8718e:	f340 8376 	ble.w	8787e <_svfprintf_r+0x12e6>
   87192:	4f6b      	ldr	r7, [pc, #428]	; (87340 <_svfprintf_r+0xda8>)
   87194:	2610      	movs	r6, #16
   87196:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87198:	970f      	str	r7, [sp, #60]	; 0x3c
   8719a:	e005      	b.n	871a8 <_svfprintf_r+0xc10>
   8719c:	f108 0808 	add.w	r8, r8, #8
   871a0:	3d10      	subs	r5, #16
   871a2:	2d10      	cmp	r5, #16
   871a4:	f340 836e 	ble.w	87884 <_svfprintf_r+0x12ec>
   871a8:	3301      	adds	r3, #1
   871aa:	3410      	adds	r4, #16
   871ac:	2b07      	cmp	r3, #7
   871ae:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   871b2:	e9c8 7600 	strd	r7, r6, [r8]
   871b6:	ddf1      	ble.n	8719c <_svfprintf_r+0xc04>
   871b8:	4651      	mov	r1, sl
   871ba:	4648      	mov	r0, r9
   871bc:	aa2a      	add	r2, sp, #168	; 0xa8
   871be:	f004 fdcf 	bl	8bd60 <__ssprint_r>
   871c2:	2800      	cmp	r0, #0
   871c4:	f47f ae30 	bne.w	86e28 <_svfprintf_r+0x890>
   871c8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   871cc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   871d0:	e7e6      	b.n	871a0 <_svfprintf_r+0xc08>
   871d2:	2b30      	cmp	r3, #48	; 0x30
   871d4:	f43f ae99 	beq.w	86f0a <_svfprintf_r+0x972>
   871d8:	2330      	movs	r3, #48	; 0x30
   871da:	3a02      	subs	r2, #2
   871dc:	f807 3c01 	strb.w	r3, [r7, #-1]
   871e0:	9908      	ldr	r1, [sp, #32]
   871e2:	ab56      	add	r3, sp, #344	; 0x158
   871e4:	1a9b      	subs	r3, r3, r2
   871e6:	4617      	mov	r7, r2
   871e8:	9107      	str	r1, [sp, #28]
   871ea:	930c      	str	r3, [sp, #48]	; 0x30
   871ec:	e53d      	b.n	86c6a <_svfprintf_r+0x6d2>
   871ee:	9b07      	ldr	r3, [sp, #28]
   871f0:	07d8      	lsls	r0, r3, #31
   871f2:	f53f ae27 	bmi.w	86e44 <_svfprintf_r+0x8ac>
   871f6:	2301      	movs	r3, #1
   871f8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   871fa:	441c      	add	r4, r3
   871fc:	441d      	add	r5, r3
   871fe:	2d07      	cmp	r5, #7
   87200:	942c      	str	r4, [sp, #176]	; 0xb0
   87202:	f8c8 7000 	str.w	r7, [r8]
   87206:	952b      	str	r5, [sp, #172]	; 0xac
   87208:	f8c8 3004 	str.w	r3, [r8, #4]
   8720c:	f77f ae4d 	ble.w	86eaa <_svfprintf_r+0x912>
   87210:	4651      	mov	r1, sl
   87212:	4648      	mov	r0, r9
   87214:	aa2a      	add	r2, sp, #168	; 0xa8
   87216:	f004 fda3 	bl	8bd60 <__ssprint_r>
   8721a:	2800      	cmp	r0, #0
   8721c:	f47f ae04 	bne.w	86e28 <_svfprintf_r+0x890>
   87220:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87224:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87228:	e641      	b.n	86eae <_svfprintf_r+0x916>
   8722a:	1e5e      	subs	r6, r3, #1
   8722c:	2e00      	cmp	r6, #0
   8722e:	f77f ae3e 	ble.w	86eae <_svfprintf_r+0x916>
   87232:	2e10      	cmp	r6, #16
   87234:	f340 871e 	ble.w	88074 <_svfprintf_r+0x1adc>
   87238:	4b41      	ldr	r3, [pc, #260]	; (87340 <_svfprintf_r+0xda8>)
   8723a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   8723e:	2710      	movs	r7, #16
   87240:	46d3      	mov	fp, sl
   87242:	930f      	str	r3, [sp, #60]	; 0x3c
   87244:	46ca      	mov	sl, r9
   87246:	4699      	mov	r9, r3
   87248:	e005      	b.n	87256 <_svfprintf_r+0xcbe>
   8724a:	f108 0808 	add.w	r8, r8, #8
   8724e:	3e10      	subs	r6, #16
   87250:	2e10      	cmp	r6, #16
   87252:	f340 82f8 	ble.w	87846 <_svfprintf_r+0x12ae>
   87256:	3501      	adds	r5, #1
   87258:	3410      	adds	r4, #16
   8725a:	2d07      	cmp	r5, #7
   8725c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87260:	e9c8 9700 	strd	r9, r7, [r8]
   87264:	ddf1      	ble.n	8724a <_svfprintf_r+0xcb2>
   87266:	4659      	mov	r1, fp
   87268:	4650      	mov	r0, sl
   8726a:	aa2a      	add	r2, sp, #168	; 0xa8
   8726c:	f004 fd78 	bl	8bd60 <__ssprint_r>
   87270:	2800      	cmp	r0, #0
   87272:	f040 85cc 	bne.w	87e0e <_svfprintf_r+0x1876>
   87276:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8727a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8727e:	e7e6      	b.n	8724e <_svfprintf_r+0xcb6>
   87280:	4651      	mov	r1, sl
   87282:	4648      	mov	r0, r9
   87284:	aa2a      	add	r2, sp, #168	; 0xa8
   87286:	f004 fd6b 	bl	8bd60 <__ssprint_r>
   8728a:	2800      	cmp	r0, #0
   8728c:	f47f adcc 	bne.w	86e28 <_svfprintf_r+0x890>
   87290:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87292:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87296:	f7ff bb1d 	b.w	868d4 <_svfprintf_r+0x33c>
   8729a:	9b08      	ldr	r3, [sp, #32]
   8729c:	06dc      	lsls	r4, r3, #27
   8729e:	f100 8119 	bmi.w	874d4 <_svfprintf_r+0xf3c>
   872a2:	9b08      	ldr	r3, [sp, #32]
   872a4:	0658      	lsls	r0, r3, #25
   872a6:	f140 8368 	bpl.w	8797a <_svfprintf_r+0x13e2>
   872aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   872ac:	2301      	movs	r3, #1
   872ae:	f852 4b04 	ldr.w	r4, [r2], #4
   872b2:	2500      	movs	r5, #0
   872b4:	920e      	str	r2, [sp, #56]	; 0x38
   872b6:	b2a4      	uxth	r4, r4
   872b8:	f7ff ba7f 	b.w	867ba <_svfprintf_r+0x222>
   872bc:	232d      	movs	r3, #45	; 0x2d
   872be:	9a07      	ldr	r2, [sp, #28]
   872c0:	4264      	negs	r4, r4
   872c2:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   872c6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   872ca:	2301      	movs	r3, #1
   872cc:	9208      	str	r2, [sp, #32]
   872ce:	f7ff ba77 	b.w	867c0 <_svfprintf_r+0x228>
   872d2:	4651      	mov	r1, sl
   872d4:	4648      	mov	r0, r9
   872d6:	aa2a      	add	r2, sp, #168	; 0xa8
   872d8:	f004 fd42 	bl	8bd60 <__ssprint_r>
   872dc:	2800      	cmp	r0, #0
   872de:	f47f ada3 	bne.w	86e28 <_svfprintf_r+0x890>
   872e2:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   872e6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   872ea:	e5ba      	b.n	86e62 <_svfprintf_r+0x8ca>
   872ec:	4651      	mov	r1, sl
   872ee:	4648      	mov	r0, r9
   872f0:	aa2a      	add	r2, sp, #168	; 0xa8
   872f2:	f004 fd35 	bl	8bd60 <__ssprint_r>
   872f6:	2800      	cmp	r0, #0
   872f8:	f47f ad96 	bne.w	86e28 <_svfprintf_r+0x890>
   872fc:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87300:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87304:	e5ba      	b.n	86e7c <_svfprintf_r+0x8e4>
   87306:	9b07      	ldr	r3, [sp, #28]
   87308:	07da      	lsls	r2, r3, #31
   8730a:	f57f aaf4 	bpl.w	868f6 <_svfprintf_r+0x35e>
   8730e:	e4d9      	b.n	86cc4 <_svfprintf_r+0x72c>
   87310:	af56      	add	r7, sp, #344	; 0x158
   87312:	e4aa      	b.n	86c6a <_svfprintf_r+0x6d2>
   87314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87316:	465f      	mov	r7, fp
   87318:	f853 1b04 	ldr.w	r1, [r3], #4
   8731c:	930e      	str	r3, [sp, #56]	; 0x38
   8731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87320:	17dd      	asrs	r5, r3, #31
   87322:	461a      	mov	r2, r3
   87324:	462b      	mov	r3, r5
   87326:	e9c1 2300 	strd	r2, r3, [r1]
   8732a:	f7ff bb03 	b.w	86934 <_svfprintf_r+0x39c>
   8732e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87330:	2500      	movs	r5, #0
   87332:	f853 4b04 	ldr.w	r4, [r3], #4
   87336:	930e      	str	r3, [sp, #56]	; 0x38
   87338:	f7ff ba3a 	b.w	867b0 <_svfprintf_r+0x218>
   8733c:	0008d008 	.word	0x0008d008
   87340:	0008d018 	.word	0x0008d018
   87344:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87348:	460b      	mov	r3, r1
   8734a:	4602      	mov	r2, r0
   8734c:	f005 fc3c 	bl	8cbc8 <__aeabi_dcmpun>
   87350:	4601      	mov	r1, r0
   87352:	2800      	cmp	r0, #0
   87354:	f040 8643 	bne.w	87fde <_svfprintf_r+0x1a46>
   87358:	2e61      	cmp	r6, #97	; 0x61
   8735a:	f000 8586 	beq.w	87e6a <_svfprintf_r+0x18d2>
   8735e:	2e41      	cmp	r6, #65	; 0x41
   87360:	f000 847a 	beq.w	87c58 <_svfprintf_r+0x16c0>
   87364:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87366:	f026 0520 	bic.w	r5, r6, #32
   8736a:	1c5a      	adds	r2, r3, #1
   8736c:	9508      	str	r5, [sp, #32]
   8736e:	f000 837d 	beq.w	87a6c <_svfprintf_r+0x14d4>
   87372:	2d47      	cmp	r5, #71	; 0x47
   87374:	f000 859e 	beq.w	87eb4 <_svfprintf_r+0x191c>
   87378:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8737c:	9b07      	ldr	r3, [sp, #28]
   8737e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87382:	9312      	str	r3, [sp, #72]	; 0x48
   87384:	460b      	mov	r3, r1
   87386:	2b00      	cmp	r3, #0
   87388:	f2c0 85ba 	blt.w	87f00 <_svfprintf_r+0x1968>
   8738c:	2200      	movs	r2, #0
   8738e:	930f      	str	r3, [sp, #60]	; 0x3c
   87390:	921e      	str	r2, [sp, #120]	; 0x78
   87392:	920d      	str	r2, [sp, #52]	; 0x34
   87394:	900c      	str	r0, [sp, #48]	; 0x30
   87396:	2d46      	cmp	r5, #70	; 0x46
   87398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8739a:	f000 8407 	beq.w	87bac <_svfprintf_r+0x1614>
   8739e:	2d45      	cmp	r5, #69	; 0x45
   873a0:	f04f 0002 	mov.w	r0, #2
   873a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   873a6:	f040 83e7 	bne.w	87b78 <_svfprintf_r+0x15e0>
   873aa:	9909      	ldr	r1, [sp, #36]	; 0x24
   873ac:	9000      	str	r0, [sp, #0]
   873ae:	1c4c      	adds	r4, r1, #1
   873b0:	a928      	add	r1, sp, #160	; 0xa0
   873b2:	a825      	add	r0, sp, #148	; 0x94
   873b4:	9104      	str	r1, [sp, #16]
   873b6:	a924      	add	r1, sp, #144	; 0x90
   873b8:	e9cd 1002 	strd	r1, r0, [sp, #8]
   873bc:	9401      	str	r4, [sp, #4]
   873be:	4648      	mov	r0, r9
   873c0:	f001 feb2 	bl	89128 <_dtoa_r>
   873c4:	4607      	mov	r7, r0
   873c6:	4404      	add	r4, r0
   873c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   873ca:	9d07      	ldr	r5, [sp, #28]
   873cc:	9307      	str	r3, [sp, #28]
   873ce:	2200      	movs	r2, #0
   873d0:	2300      	movs	r3, #0
   873d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   873d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   873d6:	f005 fbc5 	bl	8cb64 <__aeabi_dcmpeq>
   873da:	2800      	cmp	r0, #0
   873dc:	f000 8398 	beq.w	87b10 <_svfprintf_r+0x1578>
   873e0:	4623      	mov	r3, r4
   873e2:	1bdb      	subs	r3, r3, r7
   873e4:	9313      	str	r3, [sp, #76]	; 0x4c
   873e6:	9b08      	ldr	r3, [sp, #32]
   873e8:	2b47      	cmp	r3, #71	; 0x47
   873ea:	f000 835e 	beq.w	87aaa <_svfprintf_r+0x1512>
   873ee:	9b08      	ldr	r3, [sp, #32]
   873f0:	2b46      	cmp	r3, #70	; 0x46
   873f2:	f000 840b 	beq.w	87c0c <_svfprintf_r+0x1674>
   873f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   873f8:	9310      	str	r3, [sp, #64]	; 0x40
   873fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   873fc:	9a08      	ldr	r2, [sp, #32]
   873fe:	3b01      	subs	r3, #1
   87400:	2a41      	cmp	r2, #65	; 0x41
   87402:	9324      	str	r3, [sp, #144]	; 0x90
   87404:	f000 85ad 	beq.w	87f62 <_svfprintf_r+0x19ca>
   87408:	2100      	movs	r1, #0
   8740a:	b2f2      	uxtb	r2, r6
   8740c:	2b00      	cmp	r3, #0
   8740e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   87412:	bfb6      	itet	lt
   87414:	222d      	movlt	r2, #45	; 0x2d
   87416:	222b      	movge	r2, #43	; 0x2b
   87418:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   8741a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   8741e:	bfb8      	it	lt
   87420:	f1c3 0301 	rsblt	r3, r3, #1
   87424:	2b09      	cmp	r3, #9
   87426:	f340 85a2 	ble.w	87f6e <_svfprintf_r+0x19d6>
   8742a:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   8742e:	4672      	mov	r2, lr
   87430:	469c      	mov	ip, r3
   87432:	4cbf      	ldr	r4, [pc, #764]	; (87730 <_svfprintf_r+0x1198>)
   87434:	4660      	mov	r0, ip
   87436:	4611      	mov	r1, r2
   87438:	fb84 230c 	smull	r2, r3, r4, ip
   8743c:	ea4f 72ec 	mov.w	r2, ip, asr #31
   87440:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   87444:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   87448:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   8744c:	3330      	adds	r3, #48	; 0x30
   8744e:	2863      	cmp	r0, #99	; 0x63
   87450:	4694      	mov	ip, r2
   87452:	f801 3c01 	strb.w	r3, [r1, #-1]
   87456:	f101 32ff 	add.w	r2, r1, #4294967295
   8745a:	dceb      	bgt.n	87434 <_svfprintf_r+0xe9c>
   8745c:	4663      	mov	r3, ip
   8745e:	3330      	adds	r3, #48	; 0x30
   87460:	b2d8      	uxtb	r0, r3
   87462:	1e8b      	subs	r3, r1, #2
   87464:	459e      	cmp	lr, r3
   87466:	f802 0c01 	strb.w	r0, [r2, #-1]
   8746a:	f240 862c 	bls.w	880c6 <_svfprintf_r+0x1b2e>
   8746e:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   87472:	e001      	b.n	87478 <_svfprintf_r+0xee0>
   87474:	f812 0b01 	ldrb.w	r0, [r2], #1
   87478:	4596      	cmp	lr, r2
   8747a:	f803 0b01 	strb.w	r0, [r3], #1
   8747e:	d1f9      	bne.n	87474 <_svfprintf_r+0xedc>
   87480:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   87484:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   87488:	1a5b      	subs	r3, r3, r1
   8748a:	4413      	add	r3, r2
   8748c:	aa26      	add	r2, sp, #152	; 0x98
   8748e:	1a9b      	subs	r3, r3, r2
   87490:	931b      	str	r3, [sp, #108]	; 0x6c
   87492:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87494:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87496:	2b01      	cmp	r3, #1
   87498:	441a      	add	r2, r3
   8749a:	920c      	str	r2, [sp, #48]	; 0x30
   8749c:	f340 85cc 	ble.w	88038 <_svfprintf_r+0x1aa0>
   874a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   874a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   874a4:	4413      	add	r3, r2
   874a6:	930c      	str	r3, [sp, #48]	; 0x30
   874a8:	2300      	movs	r3, #0
   874aa:	9312      	str	r3, [sp, #72]	; 0x48
   874ac:	9316      	str	r3, [sp, #88]	; 0x58
   874ae:	9310      	str	r3, [sp, #64]	; 0x40
   874b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   874b2:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   874b6:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   874ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   874be:	9207      	str	r2, [sp, #28]
   874c0:	9308      	str	r3, [sp, #32]
   874c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   874c4:	2b00      	cmp	r3, #0
   874c6:	f040 8317 	bne.w	87af8 <_svfprintf_r+0x1560>
   874ca:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   874ce:	9309      	str	r3, [sp, #36]	; 0x24
   874d0:	f7ff ba86 	b.w	869e0 <_svfprintf_r+0x448>
   874d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   874d6:	2301      	movs	r3, #1
   874d8:	f852 4b04 	ldr.w	r4, [r2], #4
   874dc:	2500      	movs	r5, #0
   874de:	920e      	str	r2, [sp, #56]	; 0x38
   874e0:	f7ff b96b 	b.w	867ba <_svfprintf_r+0x222>
   874e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   874e6:	f853 4b04 	ldr.w	r4, [r3], #4
   874ea:	17e5      	asrs	r5, r4, #31
   874ec:	930e      	str	r3, [sp, #56]	; 0x38
   874ee:	4622      	mov	r2, r4
   874f0:	462b      	mov	r3, r5
   874f2:	f7ff b933 	b.w	8675c <_svfprintf_r+0x1c4>
   874f6:	9b07      	ldr	r3, [sp, #28]
   874f8:	9308      	str	r3, [sp, #32]
   874fa:	f7ff bae0 	b.w	86abe <_svfprintf_r+0x526>
   874fe:	4b8d      	ldr	r3, [pc, #564]	; (87734 <_svfprintf_r+0x119c>)
   87500:	9319      	str	r3, [sp, #100]	; 0x64
   87502:	9b07      	ldr	r3, [sp, #28]
   87504:	0699      	lsls	r1, r3, #26
   87506:	f140 80fe 	bpl.w	87706 <_svfprintf_r+0x116e>
   8750a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8750c:	3307      	adds	r3, #7
   8750e:	f023 0307 	bic.w	r3, r3, #7
   87512:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87516:	930e      	str	r3, [sp, #56]	; 0x38
   87518:	9a07      	ldr	r2, [sp, #28]
   8751a:	07d7      	lsls	r7, r2, #31
   8751c:	d50a      	bpl.n	87534 <_svfprintf_r+0xf9c>
   8751e:	ea54 0305 	orrs.w	r3, r4, r5
   87522:	d007      	beq.n	87534 <_svfprintf_r+0xf9c>
   87524:	2330      	movs	r3, #48	; 0x30
   87526:	f042 0202 	orr.w	r2, r2, #2
   8752a:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   8752e:	9207      	str	r2, [sp, #28]
   87530:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87534:	9a07      	ldr	r2, [sp, #28]
   87536:	2302      	movs	r3, #2
   87538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   8753c:	9208      	str	r2, [sp, #32]
   8753e:	f7ff b93c 	b.w	867ba <_svfprintf_r+0x222>
   87542:	4b7d      	ldr	r3, [pc, #500]	; (87738 <_svfprintf_r+0x11a0>)
   87544:	9319      	str	r3, [sp, #100]	; 0x64
   87546:	e7dc      	b.n	87502 <_svfprintf_r+0xf6a>
   87548:	f043 0320 	orr.w	r3, r3, #32
   8754c:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87550:	9307      	str	r3, [sp, #28]
   87552:	f10b 0b01 	add.w	fp, fp, #1
   87556:	f7ff b86a 	b.w	8662e <_svfprintf_r+0x96>
   8755a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8755e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87562:	9307      	str	r3, [sp, #28]
   87564:	f10b 0b01 	add.w	fp, fp, #1
   87568:	f7ff b861 	b.w	8662e <_svfprintf_r+0x96>
   8756c:	4651      	mov	r1, sl
   8756e:	4648      	mov	r0, r9
   87570:	aa2a      	add	r2, sp, #168	; 0xa8
   87572:	f004 fbf5 	bl	8bd60 <__ssprint_r>
   87576:	2800      	cmp	r0, #0
   87578:	f47f ac56 	bne.w	86e28 <_svfprintf_r+0x890>
   8757c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8757e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87582:	f7ff bbad 	b.w	86ce0 <_svfprintf_r+0x748>
   87586:	2140      	movs	r1, #64	; 0x40
   87588:	4648      	mov	r0, r9
   8758a:	f003 fa73 	bl	8aa74 <_malloc_r>
   8758e:	f8cb 0000 	str.w	r0, [fp]
   87592:	f8cb 0010 	str.w	r0, [fp, #16]
   87596:	2800      	cmp	r0, #0
   87598:	f000 858d 	beq.w	880b6 <_svfprintf_r+0x1b1e>
   8759c:	2340      	movs	r3, #64	; 0x40
   8759e:	f8cb 3014 	str.w	r3, [fp, #20]
   875a2:	f7ff b811 	b.w	865c8 <_svfprintf_r+0x30>
   875a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   875a8:	463a      	mov	r2, r7
   875aa:	2b06      	cmp	r3, #6
   875ac:	bf28      	it	cs
   875ae:	2306      	movcs	r3, #6
   875b0:	9709      	str	r7, [sp, #36]	; 0x24
   875b2:	9712      	str	r7, [sp, #72]	; 0x48
   875b4:	9716      	str	r7, [sp, #88]	; 0x58
   875b6:	9710      	str	r7, [sp, #64]	; 0x40
   875b8:	970d      	str	r7, [sp, #52]	; 0x34
   875ba:	9308      	str	r3, [sp, #32]
   875bc:	4f5f      	ldr	r7, [pc, #380]	; (8773c <_svfprintf_r+0x11a4>)
   875be:	940e      	str	r4, [sp, #56]	; 0x38
   875c0:	930c      	str	r3, [sp, #48]	; 0x30
   875c2:	f7ff ba0d 	b.w	869e0 <_svfprintf_r+0x448>
   875c6:	2b10      	cmp	r3, #16
   875c8:	f340 8558 	ble.w	8807c <_svfprintf_r+0x1ae4>
   875cc:	4651      	mov	r1, sl
   875ce:	4a5c      	ldr	r2, [pc, #368]	; (87740 <_svfprintf_r+0x11a8>)
   875d0:	46ca      	mov	sl, r9
   875d2:	9709      	str	r7, [sp, #36]	; 0x24
   875d4:	2610      	movs	r6, #16
   875d6:	4617      	mov	r7, r2
   875d8:	4689      	mov	r9, r1
   875da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   875dc:	920f      	str	r2, [sp, #60]	; 0x3c
   875de:	e005      	b.n	875ec <_svfprintf_r+0x1054>
   875e0:	f108 0808 	add.w	r8, r8, #8
   875e4:	3d10      	subs	r5, #16
   875e6:	2d10      	cmp	r5, #16
   875e8:	f340 81fa 	ble.w	879e0 <_svfprintf_r+0x1448>
   875ec:	3301      	adds	r3, #1
   875ee:	3410      	adds	r4, #16
   875f0:	2b07      	cmp	r3, #7
   875f2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   875f6:	e9c8 7600 	strd	r7, r6, [r8]
   875fa:	ddf1      	ble.n	875e0 <_svfprintf_r+0x1048>
   875fc:	4649      	mov	r1, r9
   875fe:	4650      	mov	r0, sl
   87600:	aa2a      	add	r2, sp, #168	; 0xa8
   87602:	f004 fbad 	bl	8bd60 <__ssprint_r>
   87606:	2800      	cmp	r0, #0
   87608:	f040 83fd 	bne.w	87e06 <_svfprintf_r+0x186e>
   8760c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87610:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87614:	e7e6      	b.n	875e4 <_svfprintf_r+0x104c>
   87616:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87618:	4642      	mov	r2, r8
   8761a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   8761e:	18fb      	adds	r3, r7, r3
   87620:	9309      	str	r3, [sp, #36]	; 0x24
   87622:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   87626:	970f      	str	r7, [sp, #60]	; 0x3c
   87628:	4620      	mov	r0, r4
   8762a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   8762e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   87630:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87632:	f1b8 0f00 	cmp.w	r8, #0
   87636:	d02d      	beq.n	87694 <_svfprintf_r+0x10fc>
   87638:	bb7b      	cbnz	r3, 8769a <_svfprintf_r+0x1102>
   8763a:	3f01      	subs	r7, #1
   8763c:	f108 38ff 	add.w	r8, r8, #4294967295
   87640:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87642:	991c      	ldr	r1, [sp, #112]	; 0x70
   87644:	3301      	adds	r3, #1
   87646:	4458      	add	r0, fp
   87648:	2b07      	cmp	r3, #7
   8764a:	e9c2 1b00 	strd	r1, fp, [r2]
   8764e:	902c      	str	r0, [sp, #176]	; 0xb0
   87650:	932b      	str	r3, [sp, #172]	; 0xac
   87652:	dc62      	bgt.n	8771a <_svfprintf_r+0x1182>
   87654:	3208      	adds	r2, #8
   87656:	9909      	ldr	r1, [sp, #36]	; 0x24
   87658:	783b      	ldrb	r3, [r7, #0]
   8765a:	1b8d      	subs	r5, r1, r6
   8765c:	429d      	cmp	r5, r3
   8765e:	bfa8      	it	ge
   87660:	461d      	movge	r5, r3
   87662:	2d00      	cmp	r5, #0
   87664:	dd0b      	ble.n	8767e <_svfprintf_r+0x10e6>
   87666:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87668:	4428      	add	r0, r5
   8766a:	3301      	adds	r3, #1
   8766c:	2b07      	cmp	r3, #7
   8766e:	e9c2 6500 	strd	r6, r5, [r2]
   87672:	902c      	str	r0, [sp, #176]	; 0xb0
   87674:	932b      	str	r3, [sp, #172]	; 0xac
   87676:	f300 8111 	bgt.w	8789c <_svfprintf_r+0x1304>
   8767a:	783b      	ldrb	r3, [r7, #0]
   8767c:	3208      	adds	r2, #8
   8767e:	2d00      	cmp	r5, #0
   87680:	bfb4      	ite	lt
   87682:	461d      	movlt	r5, r3
   87684:	1b5d      	subge	r5, r3, r5
   87686:	2d00      	cmp	r5, #0
   87688:	dc0b      	bgt.n	876a2 <_svfprintf_r+0x110a>
   8768a:	441e      	add	r6, r3
   8768c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8768e:	f1b8 0f00 	cmp.w	r8, #0
   87692:	d1d1      	bne.n	87638 <_svfprintf_r+0x10a0>
   87694:	2b00      	cmp	r3, #0
   87696:	f000 81f9 	beq.w	87a8c <_svfprintf_r+0x14f4>
   8769a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8769c:	3b01      	subs	r3, #1
   8769e:	9312      	str	r3, [sp, #72]	; 0x48
   876a0:	e7ce      	b.n	87640 <_svfprintf_r+0x10a8>
   876a2:	2d10      	cmp	r5, #16
   876a4:	f340 84c5 	ble.w	88032 <_svfprintf_r+0x1a9a>
   876a8:	992b      	ldr	r1, [sp, #172]	; 0xac
   876aa:	2410      	movs	r4, #16
   876ac:	460b      	mov	r3, r1
   876ae:	e004      	b.n	876ba <_svfprintf_r+0x1122>
   876b0:	3d10      	subs	r5, #16
   876b2:	2d10      	cmp	r5, #16
   876b4:	f102 0208 	add.w	r2, r2, #8
   876b8:	dd16      	ble.n	876e8 <_svfprintf_r+0x1150>
   876ba:	3301      	adds	r3, #1
   876bc:	4920      	ldr	r1, [pc, #128]	; (87740 <_svfprintf_r+0x11a8>)
   876be:	3010      	adds	r0, #16
   876c0:	2b07      	cmp	r3, #7
   876c2:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   876c6:	e9c2 1400 	strd	r1, r4, [r2]
   876ca:	ddf1      	ble.n	876b0 <_svfprintf_r+0x1118>
   876cc:	4651      	mov	r1, sl
   876ce:	4648      	mov	r0, r9
   876d0:	aa2a      	add	r2, sp, #168	; 0xa8
   876d2:	f004 fb45 	bl	8bd60 <__ssprint_r>
   876d6:	2800      	cmp	r0, #0
   876d8:	f47f aba6 	bne.w	86e28 <_svfprintf_r+0x890>
   876dc:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   876e0:	3d10      	subs	r5, #16
   876e2:	2d10      	cmp	r5, #16
   876e4:	aa2d      	add	r2, sp, #180	; 0xb4
   876e6:	dce8      	bgt.n	876ba <_svfprintf_r+0x1122>
   876e8:	4619      	mov	r1, r3
   876ea:	1c4b      	adds	r3, r1, #1
   876ec:	4914      	ldr	r1, [pc, #80]	; (87740 <_svfprintf_r+0x11a8>)
   876ee:	4428      	add	r0, r5
   876f0:	2b07      	cmp	r3, #7
   876f2:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   876f6:	e9c2 1500 	strd	r1, r5, [r2]
   876fa:	f300 8215 	bgt.w	87b28 <_svfprintf_r+0x1590>
   876fe:	783b      	ldrb	r3, [r7, #0]
   87700:	3208      	adds	r2, #8
   87702:	441e      	add	r6, r3
   87704:	e7c2      	b.n	8768c <_svfprintf_r+0x10f4>
   87706:	9b07      	ldr	r3, [sp, #28]
   87708:	06da      	lsls	r2, r3, #27
   8770a:	f140 8084 	bpl.w	87816 <_svfprintf_r+0x127e>
   8770e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87710:	2500      	movs	r5, #0
   87712:	f853 4b04 	ldr.w	r4, [r3], #4
   87716:	930e      	str	r3, [sp, #56]	; 0x38
   87718:	e6fe      	b.n	87518 <_svfprintf_r+0xf80>
   8771a:	4651      	mov	r1, sl
   8771c:	4648      	mov	r0, r9
   8771e:	aa2a      	add	r2, sp, #168	; 0xa8
   87720:	f004 fb1e 	bl	8bd60 <__ssprint_r>
   87724:	2800      	cmp	r0, #0
   87726:	f47f ab7f 	bne.w	86e28 <_svfprintf_r+0x890>
   8772a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   8772c:	aa2d      	add	r2, sp, #180	; 0xb4
   8772e:	e792      	b.n	87656 <_svfprintf_r+0x10be>
   87730:	66666667 	.word	0x66666667
   87734:	0008cfd4 	.word	0x0008cfd4
   87738:	0008cfe8 	.word	0x0008cfe8
   8773c:	0008cffc 	.word	0x0008cffc
   87740:	0008d018 	.word	0x0008d018
   87744:	2200      	movs	r2, #0
   87746:	9b08      	ldr	r3, [sp, #32]
   87748:	f8cd b01c 	str.w	fp, [sp, #28]
   8774c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   87750:	960c      	str	r6, [sp, #48]	; 0x30
   87752:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   87756:	4693      	mov	fp, r2
   87758:	46ca      	mov	sl, r9
   8775a:	461e      	mov	r6, r3
   8775c:	46c1      	mov	r9, r8
   8775e:	af56      	add	r7, sp, #344	; 0x158
   87760:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   87764:	e00b      	b.n	8777e <_svfprintf_r+0x11e6>
   87766:	220a      	movs	r2, #10
   87768:	2300      	movs	r3, #0
   8776a:	4620      	mov	r0, r4
   8776c:	4629      	mov	r1, r5
   8776e:	f005 fa69 	bl	8cc44 <__aeabi_uldivmod>
   87772:	2d00      	cmp	r5, #0
   87774:	bf08      	it	eq
   87776:	2c0a      	cmpeq	r4, #10
   87778:	d31b      	bcc.n	877b2 <_svfprintf_r+0x121a>
   8777a:	4604      	mov	r4, r0
   8777c:	460d      	mov	r5, r1
   8777e:	220a      	movs	r2, #10
   87780:	2300      	movs	r3, #0
   87782:	4620      	mov	r0, r4
   87784:	4629      	mov	r1, r5
   87786:	f005 fa5d 	bl	8cc44 <__aeabi_uldivmod>
   8778a:	3230      	adds	r2, #48	; 0x30
   8778c:	f807 2c01 	strb.w	r2, [r7, #-1]
   87790:	f10b 0b01 	add.w	fp, fp, #1
   87794:	3f01      	subs	r7, #1
   87796:	2e00      	cmp	r6, #0
   87798:	d0e5      	beq.n	87766 <_svfprintf_r+0x11ce>
   8779a:	f898 3000 	ldrb.w	r3, [r8]
   8779e:	459b      	cmp	fp, r3
   877a0:	d1e1      	bne.n	87766 <_svfprintf_r+0x11ce>
   877a2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   877a6:	d0de      	beq.n	87766 <_svfprintf_r+0x11ce>
   877a8:	2d00      	cmp	r5, #0
   877aa:	bf08      	it	eq
   877ac:	2c0a      	cmpeq	r4, #10
   877ae:	f080 8128 	bcs.w	87a02 <_svfprintf_r+0x146a>
   877b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   877b6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   877ba:	46c8      	mov	r8, r9
   877bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   877be:	46d1      	mov	r9, sl
   877c0:	f8dd b01c 	ldr.w	fp, [sp, #28]
   877c4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   877c8:	f7ff bb9f 	b.w	86f0a <_svfprintf_r+0x972>
   877cc:	4651      	mov	r1, sl
   877ce:	4648      	mov	r0, r9
   877d0:	aa2a      	add	r2, sp, #168	; 0xa8
   877d2:	931e      	str	r3, [sp, #120]	; 0x78
   877d4:	f004 fac4 	bl	8bd60 <__ssprint_r>
   877d8:	2800      	cmp	r0, #0
   877da:	f47f ab25 	bne.w	86e28 <_svfprintf_r+0x890>
   877de:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   877e2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   877e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   877e6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   877ea:	f7ff b84a 	b.w	86882 <_svfprintf_r+0x2ea>
   877ee:	2001      	movs	r0, #1
   877f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   877f2:	49c5      	ldr	r1, [pc, #788]	; (87b08 <_svfprintf_r+0x1570>)
   877f4:	4403      	add	r3, r0
   877f6:	4404      	add	r4, r0
   877f8:	2b07      	cmp	r3, #7
   877fa:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   877fe:	e9c8 1000 	strd	r1, r0, [r8]
   87802:	f73f abdf 	bgt.w	86fc4 <_svfprintf_r+0xa2c>
   87806:	f108 0808 	add.w	r8, r8, #8
   8780a:	f7ff bbe7 	b.w	86fdc <_svfprintf_r+0xa44>
   8780e:	46d1      	mov	r9, sl
   87810:	46b3      	mov	fp, r6
   87812:	f7ff bb0a 	b.w	86e2a <_svfprintf_r+0x892>
   87816:	9b07      	ldr	r3, [sp, #28]
   87818:	065b      	lsls	r3, r3, #25
   8781a:	f140 80cb 	bpl.w	879b4 <_svfprintf_r+0x141c>
   8781e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87820:	2500      	movs	r5, #0
   87822:	f853 4b04 	ldr.w	r4, [r3], #4
   87826:	930e      	str	r3, [sp, #56]	; 0x38
   87828:	b2a4      	uxth	r4, r4
   8782a:	e675      	b.n	87518 <_svfprintf_r+0xf80>
   8782c:	4651      	mov	r1, sl
   8782e:	4648      	mov	r0, r9
   87830:	aa2a      	add	r2, sp, #168	; 0xa8
   87832:	f004 fa95 	bl	8bd60 <__ssprint_r>
   87836:	2800      	cmp	r0, #0
   87838:	f47f aaf6 	bne.w	86e28 <_svfprintf_r+0x890>
   8783c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8783e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87842:	f7ff ba3a 	b.w	86cba <_svfprintf_r+0x722>
   87846:	46d1      	mov	r9, sl
   87848:	46da      	mov	sl, fp
   8784a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8784e:	3501      	adds	r5, #1
   87850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87852:	4434      	add	r4, r6
   87854:	2d07      	cmp	r5, #7
   87856:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8785a:	e9c8 3600 	strd	r3, r6, [r8]
   8785e:	f77f ab24 	ble.w	86eaa <_svfprintf_r+0x912>
   87862:	4651      	mov	r1, sl
   87864:	4648      	mov	r0, r9
   87866:	aa2a      	add	r2, sp, #168	; 0xa8
   87868:	f004 fa7a 	bl	8bd60 <__ssprint_r>
   8786c:	2800      	cmp	r0, #0
   8786e:	f47f aadb 	bne.w	86e28 <_svfprintf_r+0x890>
   87872:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87876:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8787a:	f7ff bb18 	b.w	86eae <_svfprintf_r+0x916>
   8787e:	4aa3      	ldr	r2, [pc, #652]	; (87b0c <_svfprintf_r+0x1574>)
   87880:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87882:	920f      	str	r2, [sp, #60]	; 0x3c
   87884:	3301      	adds	r3, #1
   87886:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87888:	442c      	add	r4, r5
   8788a:	2b07      	cmp	r3, #7
   8788c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87890:	e9c8 2500 	strd	r2, r5, [r8]
   87894:	f77f a82d 	ble.w	868f2 <_svfprintf_r+0x35a>
   87898:	f7ff bbc2 	b.w	87020 <_svfprintf_r+0xa88>
   8789c:	4651      	mov	r1, sl
   8789e:	4648      	mov	r0, r9
   878a0:	aa2a      	add	r2, sp, #168	; 0xa8
   878a2:	f004 fa5d 	bl	8bd60 <__ssprint_r>
   878a6:	2800      	cmp	r0, #0
   878a8:	f47f aabe 	bne.w	86e28 <_svfprintf_r+0x890>
   878ac:	783b      	ldrb	r3, [r7, #0]
   878ae:	982c      	ldr	r0, [sp, #176]	; 0xb0
   878b0:	aa2d      	add	r2, sp, #180	; 0xb4
   878b2:	e6e4      	b.n	8767e <_svfprintf_r+0x10e6>
   878b4:	4651      	mov	r1, sl
   878b6:	4648      	mov	r0, r9
   878b8:	aa2a      	add	r2, sp, #168	; 0xa8
   878ba:	f004 fa51 	bl	8bd60 <__ssprint_r>
   878be:	2800      	cmp	r0, #0
   878c0:	f47f aab2 	bne.w	86e28 <_svfprintf_r+0x890>
   878c4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   878c6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   878ca:	f7fe bffd 	b.w	868c8 <_svfprintf_r+0x330>
   878ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   878d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   878d2:	f853 2b04 	ldr.w	r2, [r3], #4
   878d6:	465f      	mov	r7, fp
   878d8:	6011      	str	r1, [r2, #0]
   878da:	930e      	str	r3, [sp, #56]	; 0x38
   878dc:	f7ff b82a 	b.w	86934 <_svfprintf_r+0x39c>
   878e0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   878e2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   878e4:	3301      	adds	r3, #1
   878e6:	9818      	ldr	r0, [sp, #96]	; 0x60
   878e8:	440c      	add	r4, r1
   878ea:	2b07      	cmp	r3, #7
   878ec:	e9c8 0100 	strd	r0, r1, [r8]
   878f0:	942c      	str	r4, [sp, #176]	; 0xb0
   878f2:	932b      	str	r3, [sp, #172]	; 0xac
   878f4:	f300 80ac 	bgt.w	87a50 <_svfprintf_r+0x14b8>
   878f8:	f108 0808 	add.w	r8, r8, #8
   878fc:	2a00      	cmp	r2, #0
   878fe:	f6bf ab85 	bge.w	8700c <_svfprintf_r+0xa74>
   87902:	4255      	negs	r5, r2
   87904:	3210      	adds	r2, #16
   87906:	f280 83d3 	bge.w	880b0 <_svfprintf_r+0x1b18>
   8790a:	4651      	mov	r1, sl
   8790c:	4a7f      	ldr	r2, [pc, #508]	; (87b0c <_svfprintf_r+0x1574>)
   8790e:	46ca      	mov	sl, r9
   87910:	9709      	str	r7, [sp, #36]	; 0x24
   87912:	2610      	movs	r6, #16
   87914:	4617      	mov	r7, r2
   87916:	4689      	mov	r9, r1
   87918:	920f      	str	r2, [sp, #60]	; 0x3c
   8791a:	e005      	b.n	87928 <_svfprintf_r+0x1390>
   8791c:	f108 0808 	add.w	r8, r8, #8
   87920:	3d10      	subs	r5, #16
   87922:	2d10      	cmp	r5, #16
   87924:	f340 82aa 	ble.w	87e7c <_svfprintf_r+0x18e4>
   87928:	3301      	adds	r3, #1
   8792a:	3410      	adds	r4, #16
   8792c:	2b07      	cmp	r3, #7
   8792e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87932:	e9c8 7600 	strd	r7, r6, [r8]
   87936:	ddf1      	ble.n	8791c <_svfprintf_r+0x1384>
   87938:	4649      	mov	r1, r9
   8793a:	4650      	mov	r0, sl
   8793c:	aa2a      	add	r2, sp, #168	; 0xa8
   8793e:	f004 fa0f 	bl	8bd60 <__ssprint_r>
   87942:	2800      	cmp	r0, #0
   87944:	f040 825f 	bne.w	87e06 <_svfprintf_r+0x186e>
   87948:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8794c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87950:	e7e6      	b.n	87920 <_svfprintf_r+0x1388>
   87952:	4638      	mov	r0, r7
   87954:	f7fe fdbe 	bl	864d4 <strlen>
   87958:	462b      	mov	r3, r5
   8795a:	4602      	mov	r2, r0
   8795c:	9509      	str	r5, [sp, #36]	; 0x24
   8795e:	f7ff b894 	b.w	86a8a <_svfprintf_r+0x4f2>
   87962:	9b07      	ldr	r3, [sp, #28]
   87964:	2500      	movs	r5, #0
   87966:	f413 7f00 	tst.w	r3, #512	; 0x200
   8796a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8796c:	f853 4b04 	ldr.w	r4, [r3], #4
   87970:	930e      	str	r3, [sp, #56]	; 0x38
   87972:	bf18      	it	ne
   87974:	b2e4      	uxtbne	r4, r4
   87976:	f7fe bf1b 	b.w	867b0 <_svfprintf_r+0x218>
   8797a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8797c:	9b08      	ldr	r3, [sp, #32]
   8797e:	f852 4b04 	ldr.w	r4, [r2], #4
   87982:	f413 7f00 	tst.w	r3, #512	; 0x200
   87986:	f04f 0500 	mov.w	r5, #0
   8798a:	f04f 0301 	mov.w	r3, #1
   8798e:	920e      	str	r2, [sp, #56]	; 0x38
   87990:	bf18      	it	ne
   87992:	b2e4      	uxtbne	r4, r4
   87994:	f7fe bf11 	b.w	867ba <_svfprintf_r+0x222>
   87998:	9b07      	ldr	r3, [sp, #28]
   8799a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8799e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   879a0:	f853 4b04 	ldr.w	r4, [r3], #4
   879a4:	bf18      	it	ne
   879a6:	b264      	sxtbne	r4, r4
   879a8:	17e5      	asrs	r5, r4, #31
   879aa:	930e      	str	r3, [sp, #56]	; 0x38
   879ac:	4622      	mov	r2, r4
   879ae:	462b      	mov	r3, r5
   879b0:	f7fe bed4 	b.w	8675c <_svfprintf_r+0x1c4>
   879b4:	9b07      	ldr	r3, [sp, #28]
   879b6:	2500      	movs	r5, #0
   879b8:	f413 7f00 	tst.w	r3, #512	; 0x200
   879bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   879be:	f853 4b04 	ldr.w	r4, [r3], #4
   879c2:	930e      	str	r3, [sp, #56]	; 0x38
   879c4:	bf18      	it	ne
   879c6:	b2e4      	uxtbne	r4, r4
   879c8:	e5a6      	b.n	87518 <_svfprintf_r+0xf80>
   879ca:	4b50      	ldr	r3, [pc, #320]	; (87b0c <_svfprintf_r+0x1574>)
   879cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   879ce:	930f      	str	r3, [sp, #60]	; 0x3c
   879d0:	f7ff ba15 	b.w	86dfe <_svfprintf_r+0x866>
   879d4:	232d      	movs	r3, #45	; 0x2d
   879d6:	461a      	mov	r2, r3
   879d8:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   879dc:	f7fe bfee 	b.w	869bc <_svfprintf_r+0x424>
   879e0:	464a      	mov	r2, r9
   879e2:	46d1      	mov	r9, sl
   879e4:	4692      	mov	sl, r2
   879e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   879e8:	3301      	adds	r3, #1
   879ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   879ec:	442c      	add	r4, r5
   879ee:	2b07      	cmp	r3, #7
   879f0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   879f4:	e9c8 2500 	strd	r2, r5, [r8]
   879f8:	dc3b      	bgt.n	87a72 <_svfprintf_r+0x14da>
   879fa:	f108 0808 	add.w	r8, r8, #8
   879fe:	f7ff bb8c 	b.w	8711a <_svfprintf_r+0xb82>
   87a02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87a04:	991c      	ldr	r1, [sp, #112]	; 0x70
   87a06:	1aff      	subs	r7, r7, r3
   87a08:	461a      	mov	r2, r3
   87a0a:	4638      	mov	r0, r7
   87a0c:	f7fe fd90 	bl	86530 <strncpy>
   87a10:	f898 3001 	ldrb.w	r3, [r8, #1]
   87a14:	b10b      	cbz	r3, 87a1a <_svfprintf_r+0x1482>
   87a16:	f108 0801 	add.w	r8, r8, #1
   87a1a:	220a      	movs	r2, #10
   87a1c:	2300      	movs	r3, #0
   87a1e:	4620      	mov	r0, r4
   87a20:	4629      	mov	r1, r5
   87a22:	f005 f90f 	bl	8cc44 <__aeabi_uldivmod>
   87a26:	f04f 0b00 	mov.w	fp, #0
   87a2a:	e6a6      	b.n	8777a <_svfprintf_r+0x11e2>
   87a2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87a2e:	18bd      	adds	r5, r7, r2
   87a30:	1bad      	subs	r5, r5, r6
   87a32:	1ad3      	subs	r3, r2, r3
   87a34:	429d      	cmp	r5, r3
   87a36:	bfa8      	it	ge
   87a38:	461d      	movge	r5, r3
   87a3a:	f7ff bba0 	b.w	8717e <_svfprintf_r+0xbe6>
   87a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87a40:	990a      	ldr	r1, [sp, #40]	; 0x28
   87a42:	f853 2b04 	ldr.w	r2, [r3], #4
   87a46:	465f      	mov	r7, fp
   87a48:	8011      	strh	r1, [r2, #0]
   87a4a:	930e      	str	r3, [sp, #56]	; 0x38
   87a4c:	f7fe bf72 	b.w	86934 <_svfprintf_r+0x39c>
   87a50:	4651      	mov	r1, sl
   87a52:	4648      	mov	r0, r9
   87a54:	aa2a      	add	r2, sp, #168	; 0xa8
   87a56:	f004 f983 	bl	8bd60 <__ssprint_r>
   87a5a:	2800      	cmp	r0, #0
   87a5c:	f47f a9e4 	bne.w	86e28 <_svfprintf_r+0x890>
   87a60:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87a64:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87a66:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a6a:	e747      	b.n	878fc <_svfprintf_r+0x1364>
   87a6c:	2306      	movs	r3, #6
   87a6e:	9309      	str	r3, [sp, #36]	; 0x24
   87a70:	e482      	b.n	87378 <_svfprintf_r+0xde0>
   87a72:	4651      	mov	r1, sl
   87a74:	4648      	mov	r0, r9
   87a76:	aa2a      	add	r2, sp, #168	; 0xa8
   87a78:	f004 f972 	bl	8bd60 <__ssprint_r>
   87a7c:	2800      	cmp	r0, #0
   87a7e:	f47f a9d3 	bne.w	86e28 <_svfprintf_r+0x890>
   87a82:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87a84:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a88:	f7ff bb47 	b.w	8711a <_svfprintf_r+0xb82>
   87a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87a8e:	971a      	str	r7, [sp, #104]	; 0x68
   87a90:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87a92:	4690      	mov	r8, r2
   87a94:	18fb      	adds	r3, r7, r3
   87a96:	429e      	cmp	r6, r3
   87a98:	4632      	mov	r2, r6
   87a9a:	bf28      	it	cs
   87a9c:	461a      	movcs	r2, r3
   87a9e:	4604      	mov	r4, r0
   87aa0:	4616      	mov	r6, r2
   87aa2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87aa6:	f7ff bb3f 	b.w	87128 <_svfprintf_r+0xb90>
   87aaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87aac:	1cd8      	adds	r0, r3, #3
   87aae:	9310      	str	r3, [sp, #64]	; 0x40
   87ab0:	db02      	blt.n	87ab8 <_svfprintf_r+0x1520>
   87ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87ab4:	4293      	cmp	r3, r2
   87ab6:	dd04      	ble.n	87ac2 <_svfprintf_r+0x152a>
   87ab8:	3e02      	subs	r6, #2
   87aba:	f026 0320 	bic.w	r3, r6, #32
   87abe:	9308      	str	r3, [sp, #32]
   87ac0:	e49b      	b.n	873fa <_svfprintf_r+0xe62>
   87ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87ac4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87ac6:	428b      	cmp	r3, r1
   87ac8:	f2c0 817a 	blt.w	87dc0 <_svfprintf_r+0x1828>
   87acc:	07ea      	lsls	r2, r5, #31
   87ace:	f140 8283 	bpl.w	87fd8 <_svfprintf_r+0x1a40>
   87ad2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87ad4:	4413      	add	r3, r2
   87ad6:	930c      	str	r3, [sp, #48]	; 0x30
   87ad8:	056e      	lsls	r6, r5, #21
   87ada:	f140 8277 	bpl.w	87fcc <_svfprintf_r+0x1a34>
   87ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87ae0:	2b00      	cmp	r3, #0
   87ae2:	f300 8210 	bgt.w	87f06 <_svfprintf_r+0x196e>
   87ae6:	2667      	movs	r6, #103	; 0x67
   87ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87aea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87aee:	9308      	str	r3, [sp, #32]
   87af0:	2300      	movs	r3, #0
   87af2:	9312      	str	r3, [sp, #72]	; 0x48
   87af4:	9316      	str	r3, [sp, #88]	; 0x58
   87af6:	e4e4      	b.n	874c2 <_svfprintf_r+0xf2a>
   87af8:	222d      	movs	r2, #45	; 0x2d
   87afa:	2300      	movs	r3, #0
   87afc:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   87b00:	9309      	str	r3, [sp, #36]	; 0x24
   87b02:	f7fe bf70 	b.w	869e6 <_svfprintf_r+0x44e>
   87b06:	bf00      	nop
   87b08:	0008d004 	.word	0x0008d004
   87b0c:	0008d018 	.word	0x0008d018
   87b10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87b12:	42a3      	cmp	r3, r4
   87b14:	f4bf ac65 	bcs.w	873e2 <_svfprintf_r+0xe4a>
   87b18:	2130      	movs	r1, #48	; 0x30
   87b1a:	1c5a      	adds	r2, r3, #1
   87b1c:	9228      	str	r2, [sp, #160]	; 0xa0
   87b1e:	7019      	strb	r1, [r3, #0]
   87b20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87b22:	429c      	cmp	r4, r3
   87b24:	d8f9      	bhi.n	87b1a <_svfprintf_r+0x1582>
   87b26:	e45c      	b.n	873e2 <_svfprintf_r+0xe4a>
   87b28:	4651      	mov	r1, sl
   87b2a:	4648      	mov	r0, r9
   87b2c:	aa2a      	add	r2, sp, #168	; 0xa8
   87b2e:	f004 f917 	bl	8bd60 <__ssprint_r>
   87b32:	2800      	cmp	r0, #0
   87b34:	f47f a978 	bne.w	86e28 <_svfprintf_r+0x890>
   87b38:	783b      	ldrb	r3, [r7, #0]
   87b3a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87b3c:	aa2d      	add	r2, sp, #180	; 0xb4
   87b3e:	441e      	add	r6, r3
   87b40:	e5a4      	b.n	8768c <_svfprintf_r+0x10f4>
   87b42:	4651      	mov	r1, sl
   87b44:	4648      	mov	r0, r9
   87b46:	aa2a      	add	r2, sp, #168	; 0xa8
   87b48:	f004 f90a 	bl	8bd60 <__ssprint_r>
   87b4c:	2800      	cmp	r0, #0
   87b4e:	f47f a96b 	bne.w	86e28 <_svfprintf_r+0x890>
   87b52:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87b54:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87b58:	f7ff bad7 	b.w	8710a <_svfprintf_r+0xb72>
   87b5c:	4651      	mov	r1, sl
   87b5e:	4648      	mov	r0, r9
   87b60:	aa2a      	add	r2, sp, #168	; 0xa8
   87b62:	f004 f8fd 	bl	8bd60 <__ssprint_r>
   87b66:	2800      	cmp	r0, #0
   87b68:	f47f a95e 	bne.w	86e28 <_svfprintf_r+0x890>
   87b6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87b6e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87b70:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87b74:	f7ff baee 	b.w	87154 <_svfprintf_r+0xbbc>
   87b78:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87b7a:	a928      	add	r1, sp, #160	; 0xa0
   87b7c:	e9cd 0400 	strd	r0, r4, [sp]
   87b80:	9104      	str	r1, [sp, #16]
   87b82:	a825      	add	r0, sp, #148	; 0x94
   87b84:	a924      	add	r1, sp, #144	; 0x90
   87b86:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87b8a:	4648      	mov	r0, r9
   87b8c:	f001 facc 	bl	89128 <_dtoa_r>
   87b90:	2d47      	cmp	r5, #71	; 0x47
   87b92:	4607      	mov	r7, r0
   87b94:	d119      	bne.n	87bca <_svfprintf_r+0x1632>
   87b96:	9d07      	ldr	r5, [sp, #28]
   87b98:	462b      	mov	r3, r5
   87b9a:	07db      	lsls	r3, r3, #31
   87b9c:	f100 812a 	bmi.w	87df4 <_svfprintf_r+0x185c>
   87ba0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87ba2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87ba4:	9207      	str	r2, [sp, #28]
   87ba6:	2247      	movs	r2, #71	; 0x47
   87ba8:	9208      	str	r2, [sp, #32]
   87baa:	e41a      	b.n	873e2 <_svfprintf_r+0xe4a>
   87bac:	2003      	movs	r0, #3
   87bae:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87bb0:	a928      	add	r1, sp, #160	; 0xa0
   87bb2:	e9cd 0400 	strd	r0, r4, [sp]
   87bb6:	9104      	str	r1, [sp, #16]
   87bb8:	a825      	add	r0, sp, #148	; 0x94
   87bba:	a924      	add	r1, sp, #144	; 0x90
   87bbc:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87bc2:	4648      	mov	r0, r9
   87bc4:	f001 fab0 	bl	89128 <_dtoa_r>
   87bc8:	4607      	mov	r7, r0
   87bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87bcc:	2d46      	cmp	r5, #70	; 0x46
   87bce:	eb07 0403 	add.w	r4, r7, r3
   87bd2:	f47f abf9 	bne.w	873c8 <_svfprintf_r+0xe30>
   87bd6:	783b      	ldrb	r3, [r7, #0]
   87bd8:	2b30      	cmp	r3, #48	; 0x30
   87bda:	f000 821c 	beq.w	88016 <_svfprintf_r+0x1a7e>
   87bde:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87be2:	9d07      	ldr	r5, [sp, #28]
   87be4:	441c      	add	r4, r3
   87be6:	9207      	str	r2, [sp, #28]
   87be8:	f7ff bbf1 	b.w	873ce <_svfprintf_r+0xe36>
   87bec:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87bf0:	f7ff b9c3 	b.w	86f7a <_svfprintf_r+0x9e2>
   87bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87bf6:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87bfa:	9308      	str	r3, [sp, #32]
   87bfc:	930c      	str	r3, [sp, #48]	; 0x30
   87bfe:	9009      	str	r0, [sp, #36]	; 0x24
   87c00:	940e      	str	r4, [sp, #56]	; 0x38
   87c02:	9012      	str	r0, [sp, #72]	; 0x48
   87c04:	9016      	str	r0, [sp, #88]	; 0x58
   87c06:	9010      	str	r0, [sp, #64]	; 0x40
   87c08:	f7fe beea 	b.w	869e0 <_svfprintf_r+0x448>
   87c0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87c0e:	2a00      	cmp	r2, #0
   87c10:	9210      	str	r2, [sp, #64]	; 0x40
   87c12:	f340 821b 	ble.w	8804c <_svfprintf_r+0x1ab4>
   87c16:	9909      	ldr	r1, [sp, #36]	; 0x24
   87c18:	f005 0301 	and.w	r3, r5, #1
   87c1c:	430b      	orrs	r3, r1
   87c1e:	f040 819a 	bne.w	87f56 <_svfprintf_r+0x19be>
   87c22:	2666      	movs	r6, #102	; 0x66
   87c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87c26:	930c      	str	r3, [sp, #48]	; 0x30
   87c28:	056a      	lsls	r2, r5, #21
   87c2a:	f100 816d 	bmi.w	87f08 <_svfprintf_r+0x1970>
   87c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87c30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87c34:	9308      	str	r3, [sp, #32]
   87c36:	e75b      	b.n	87af0 <_svfprintf_r+0x1558>
   87c38:	4651      	mov	r1, sl
   87c3a:	4648      	mov	r0, r9
   87c3c:	aa2a      	add	r2, sp, #168	; 0xa8
   87c3e:	f004 f88f 	bl	8bd60 <__ssprint_r>
   87c42:	2800      	cmp	r0, #0
   87c44:	f47f a8f0 	bne.w	86e28 <_svfprintf_r+0x890>
   87c48:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87c4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87c4c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87c4e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c52:	1ad3      	subs	r3, r2, r3
   87c54:	f7ff ba93 	b.w	8717e <_svfprintf_r+0xbe6>
   87c58:	2330      	movs	r3, #48	; 0x30
   87c5a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87c5e:	2358      	movs	r3, #88	; 0x58
   87c60:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   87c64:	9b07      	ldr	r3, [sp, #28]
   87c66:	f043 0402 	orr.w	r4, r3, #2
   87c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87c6c:	2b63      	cmp	r3, #99	; 0x63
   87c6e:	f300 80f2 	bgt.w	87e56 <_svfprintf_r+0x18be>
   87c72:	2300      	movs	r3, #0
   87c74:	af3d      	add	r7, sp, #244	; 0xf4
   87c76:	930d      	str	r3, [sp, #52]	; 0x34
   87c78:	9b07      	ldr	r3, [sp, #28]
   87c7a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87c7e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   87c82:	9312      	str	r3, [sp, #72]	; 0x48
   87c84:	4613      	mov	r3, r2
   87c86:	2b00      	cmp	r3, #0
   87c88:	f026 0520 	bic.w	r5, r6, #32
   87c8c:	9407      	str	r4, [sp, #28]
   87c8e:	f2c0 808d 	blt.w	87dac <_svfprintf_r+0x1814>
   87c92:	930f      	str	r3, [sp, #60]	; 0x3c
   87c94:	2300      	movs	r3, #0
   87c96:	9508      	str	r5, [sp, #32]
   87c98:	910c      	str	r1, [sp, #48]	; 0x30
   87c9a:	931e      	str	r3, [sp, #120]	; 0x78
   87c9c:	2e61      	cmp	r6, #97	; 0x61
   87c9e:	f000 817d 	beq.w	87f9c <_svfprintf_r+0x1a04>
   87ca2:	2e41      	cmp	r6, #65	; 0x41
   87ca4:	f47f ab77 	bne.w	87396 <_svfprintf_r+0xdfe>
   87ca8:	aa24      	add	r2, sp, #144	; 0x90
   87caa:	980c      	ldr	r0, [sp, #48]	; 0x30
   87cac:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87cae:	f003 ffc7 	bl	8bc40 <frexp>
   87cb2:	2200      	movs	r2, #0
   87cb4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87cb8:	f004 fcec 	bl	8c694 <__aeabi_dmul>
   87cbc:	4604      	mov	r4, r0
   87cbe:	460d      	mov	r5, r1
   87cc0:	2200      	movs	r2, #0
   87cc2:	2300      	movs	r3, #0
   87cc4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87cc8:	f004 ff4c 	bl	8cb64 <__aeabi_dcmpeq>
   87ccc:	b108      	cbz	r0, 87cd2 <_svfprintf_r+0x173a>
   87cce:	2301      	movs	r3, #1
   87cd0:	9324      	str	r3, [sp, #144]	; 0x90
   87cd2:	4bae      	ldr	r3, [pc, #696]	; (87f8c <_svfprintf_r+0x19f4>)
   87cd4:	930c      	str	r3, [sp, #48]	; 0x30
   87cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87cd8:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   87cdc:	3b01      	subs	r3, #1
   87cde:	9613      	str	r6, [sp, #76]	; 0x4c
   87ce0:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   87ce4:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   87ce8:	9721      	str	r7, [sp, #132]	; 0x84
   87cea:	46ba      	mov	sl, r7
   87cec:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   87cf0:	4699      	mov	r9, r3
   87cf2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87cf6:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   87cfa:	e006      	b.n	87d0a <_svfprintf_r+0x1772>
   87cfc:	2200      	movs	r2, #0
   87cfe:	2300      	movs	r3, #0
   87d00:	f004 ff30 	bl	8cb64 <__aeabi_dcmpeq>
   87d04:	f109 39ff 	add.w	r9, r9, #4294967295
   87d08:	b9e8      	cbnz	r0, 87d46 <_svfprintf_r+0x17ae>
   87d0a:	2200      	movs	r2, #0
   87d0c:	4ba0      	ldr	r3, [pc, #640]	; (87f90 <_svfprintf_r+0x19f8>)
   87d0e:	4630      	mov	r0, r6
   87d10:	4639      	mov	r1, r7
   87d12:	f004 fcbf 	bl	8c694 <__aeabi_dmul>
   87d16:	460d      	mov	r5, r1
   87d18:	4604      	mov	r4, r0
   87d1a:	f004 ff6b 	bl	8cbf4 <__aeabi_d2iz>
   87d1e:	4680      	mov	r8, r0
   87d20:	f004 fc4e 	bl	8c5c0 <__aeabi_i2d>
   87d24:	460b      	mov	r3, r1
   87d26:	4602      	mov	r2, r0
   87d28:	4629      	mov	r1, r5
   87d2a:	4620      	mov	r0, r4
   87d2c:	f004 fafa 	bl	8c324 <__aeabi_dsub>
   87d30:	f81b 3008 	ldrb.w	r3, [fp, r8]
   87d34:	f1b9 3fff 	cmp.w	r9, #4294967295
   87d38:	4655      	mov	r5, sl
   87d3a:	4606      	mov	r6, r0
   87d3c:	460f      	mov	r7, r1
   87d3e:	464c      	mov	r4, r9
   87d40:	f80a 3b01 	strb.w	r3, [sl], #1
   87d44:	d1da      	bne.n	87cfc <_svfprintf_r+0x1764>
   87d46:	4630      	mov	r0, r6
   87d48:	4639      	mov	r1, r7
   87d4a:	2200      	movs	r2, #0
   87d4c:	4b91      	ldr	r3, [pc, #580]	; (87f94 <_svfprintf_r+0x19fc>)
   87d4e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   87d52:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   87d54:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   87d58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   87d5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87d60:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   87d64:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   87d68:	9f21      	ldr	r7, [sp, #132]	; 0x84
   87d6a:	f004 ff23 	bl	8cbb4 <__aeabi_dcmpgt>
   87d6e:	2800      	cmp	r0, #0
   87d70:	d155      	bne.n	87e1e <_svfprintf_r+0x1886>
   87d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87d76:	2200      	movs	r2, #0
   87d78:	4b86      	ldr	r3, [pc, #536]	; (87f94 <_svfprintf_r+0x19fc>)
   87d7a:	f004 fef3 	bl	8cb64 <__aeabi_dcmpeq>
   87d7e:	b110      	cbz	r0, 87d86 <_svfprintf_r+0x17ee>
   87d80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87d82:	07db      	lsls	r3, r3, #31
   87d84:	d44b      	bmi.n	87e1e <_svfprintf_r+0x1886>
   87d86:	2c00      	cmp	r4, #0
   87d88:	db08      	blt.n	87d9c <_svfprintf_r+0x1804>
   87d8a:	2230      	movs	r2, #48	; 0x30
   87d8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87d8e:	1c63      	adds	r3, r4, #1
   87d90:	440b      	add	r3, r1
   87d92:	f801 2b01 	strb.w	r2, [r1], #1
   87d96:	428b      	cmp	r3, r1
   87d98:	d1fb      	bne.n	87d92 <_svfprintf_r+0x17fa>
   87d9a:	910f      	str	r1, [sp, #60]	; 0x3c
   87d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87d9e:	9d07      	ldr	r5, [sp, #28]
   87da0:	1bdb      	subs	r3, r3, r7
   87da2:	9313      	str	r3, [sp, #76]	; 0x4c
   87da4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87da6:	9307      	str	r3, [sp, #28]
   87da8:	f7ff bb1d 	b.w	873e6 <_svfprintf_r+0xe4e>
   87dac:	9508      	str	r5, [sp, #32]
   87dae:	232d      	movs	r3, #45	; 0x2d
   87db0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87db4:	931e      	str	r3, [sp, #120]	; 0x78
   87db6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   87dba:	910c      	str	r1, [sp, #48]	; 0x30
   87dbc:	930f      	str	r3, [sp, #60]	; 0x3c
   87dbe:	e76d      	b.n	87c9c <_svfprintf_r+0x1704>
   87dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87dc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87dc4:	189a      	adds	r2, r3, r2
   87dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87dc8:	920c      	str	r2, [sp, #48]	; 0x30
   87dca:	2b00      	cmp	r3, #0
   87dcc:	f340 811a 	ble.w	88004 <_svfprintf_r+0x1a6c>
   87dd0:	2667      	movs	r6, #103	; 0x67
   87dd2:	e729      	b.n	87c28 <_svfprintf_r+0x1690>
   87dd4:	2300      	movs	r3, #0
   87dd6:	9309      	str	r3, [sp, #36]	; 0x24
   87dd8:	f7fe bc2b 	b.w	86632 <_svfprintf_r+0x9a>
   87ddc:	4648      	mov	r0, r9
   87dde:	4651      	mov	r1, sl
   87de0:	aa2a      	add	r2, sp, #168	; 0xa8
   87de2:	f003 ffbd 	bl	8bd60 <__ssprint_r>
   87de6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87dea:	f7fe bdae 	b.w	8694a <_svfprintf_r+0x3b2>
   87dee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87df0:	f7ff b95f 	b.w	870b2 <_svfprintf_r+0xb1a>
   87df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87df6:	9d07      	ldr	r5, [sp, #28]
   87df8:	18fc      	adds	r4, r7, r3
   87dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87dfc:	9307      	str	r3, [sp, #28]
   87dfe:	2347      	movs	r3, #71	; 0x47
   87e00:	9308      	str	r3, [sp, #32]
   87e02:	f7ff bae4 	b.w	873ce <_svfprintf_r+0xe36>
   87e06:	46cb      	mov	fp, r9
   87e08:	46d1      	mov	r9, sl
   87e0a:	f7ff b80e 	b.w	86e2a <_svfprintf_r+0x892>
   87e0e:	46d1      	mov	r9, sl
   87e10:	f7ff b80b 	b.w	86e2a <_svfprintf_r+0x892>
   87e14:	4b60      	ldr	r3, [pc, #384]	; (87f98 <_svfprintf_r+0x1a00>)
   87e16:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87e18:	930f      	str	r3, [sp, #60]	; 0x3c
   87e1a:	f7fe bfb7 	b.w	86d8c <_svfprintf_r+0x7f4>
   87e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87e20:	990c      	ldr	r1, [sp, #48]	; 0x30
   87e22:	9528      	str	r5, [sp, #160]	; 0xa0
   87e24:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87e28:	7bc9      	ldrb	r1, [r1, #15]
   87e2a:	428a      	cmp	r2, r1
   87e2c:	f040 812a 	bne.w	88084 <_svfprintf_r+0x1aec>
   87e30:	2030      	movs	r0, #48	; 0x30
   87e32:	f803 0c01 	strb.w	r0, [r3, #-1]
   87e36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87e38:	1e5a      	subs	r2, r3, #1
   87e3a:	9228      	str	r2, [sp, #160]	; 0xa0
   87e3c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87e40:	4291      	cmp	r1, r2
   87e42:	d0f6      	beq.n	87e32 <_svfprintf_r+0x189a>
   87e44:	2a39      	cmp	r2, #57	; 0x39
   87e46:	bf0b      	itete	eq
   87e48:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   87e4a:	3201      	addne	r2, #1
   87e4c:	7a92      	ldrbeq	r2, [r2, #10]
   87e4e:	b2d2      	uxtbne	r2, r2
   87e50:	f803 2c01 	strb.w	r2, [r3, #-1]
   87e54:	e7a2      	b.n	87d9c <_svfprintf_r+0x1804>
   87e56:	4648      	mov	r0, r9
   87e58:	1c59      	adds	r1, r3, #1
   87e5a:	f002 fe0b 	bl	8aa74 <_malloc_r>
   87e5e:	4607      	mov	r7, r0
   87e60:	2800      	cmp	r0, #0
   87e62:	f000 811d 	beq.w	880a0 <_svfprintf_r+0x1b08>
   87e66:	900d      	str	r0, [sp, #52]	; 0x34
   87e68:	e706      	b.n	87c78 <_svfprintf_r+0x16e0>
   87e6a:	2330      	movs	r3, #48	; 0x30
   87e6c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87e70:	2378      	movs	r3, #120	; 0x78
   87e72:	e6f5      	b.n	87c60 <_svfprintf_r+0x16c8>
   87e74:	9b07      	ldr	r3, [sp, #28]
   87e76:	9308      	str	r3, [sp, #32]
   87e78:	f7ff b894 	b.w	86fa4 <_svfprintf_r+0xa0c>
   87e7c:	464a      	mov	r2, r9
   87e7e:	46d1      	mov	r9, sl
   87e80:	4692      	mov	sl, r2
   87e82:	9f09      	ldr	r7, [sp, #36]	; 0x24
   87e84:	3301      	adds	r3, #1
   87e86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87e88:	442c      	add	r4, r5
   87e8a:	2b07      	cmp	r3, #7
   87e8c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87e90:	e9c8 2500 	strd	r2, r5, [r8]
   87e94:	f77f a8b8 	ble.w	87008 <_svfprintf_r+0xa70>
   87e98:	4651      	mov	r1, sl
   87e9a:	4648      	mov	r0, r9
   87e9c:	aa2a      	add	r2, sp, #168	; 0xa8
   87e9e:	f003 ff5f 	bl	8bd60 <__ssprint_r>
   87ea2:	2800      	cmp	r0, #0
   87ea4:	f47e afc0 	bne.w	86e28 <_svfprintf_r+0x890>
   87ea8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87eac:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87eb0:	f7ff b8ac 	b.w	8700c <_svfprintf_r+0xa74>
   87eb4:	2b00      	cmp	r3, #0
   87eb6:	bf08      	it	eq
   87eb8:	2301      	moveq	r3, #1
   87eba:	9309      	str	r3, [sp, #36]	; 0x24
   87ebc:	9b07      	ldr	r3, [sp, #28]
   87ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87ec2:	9312      	str	r3, [sp, #72]	; 0x48
   87ec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87ec6:	2b00      	cmp	r3, #0
   87ec8:	930c      	str	r3, [sp, #48]	; 0x30
   87eca:	f2c0 80bd 	blt.w	88048 <_svfprintf_r+0x1ab0>
   87ece:	2402      	movs	r4, #2
   87ed0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87ed2:	a828      	add	r0, sp, #160	; 0xa0
   87ed4:	aa25      	add	r2, sp, #148	; 0x94
   87ed6:	ab24      	add	r3, sp, #144	; 0x90
   87ed8:	e9cd 2003 	strd	r2, r0, [sp, #12]
   87edc:	e9cd 4500 	strd	r4, r5, [sp]
   87ee0:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   87ee4:	9302      	str	r3, [sp, #8]
   87ee6:	4622      	mov	r2, r4
   87ee8:	462b      	mov	r3, r5
   87eea:	4648      	mov	r0, r9
   87eec:	911e      	str	r1, [sp, #120]	; 0x78
   87eee:	f001 f91b 	bl	89128 <_dtoa_r>
   87ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87ef4:	4607      	mov	r7, r0
   87ef6:	930f      	str	r3, [sp, #60]	; 0x3c
   87ef8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87efa:	940c      	str	r4, [sp, #48]	; 0x30
   87efc:	930d      	str	r3, [sp, #52]	; 0x34
   87efe:	e64a      	b.n	87b96 <_svfprintf_r+0x15fe>
   87f00:	2300      	movs	r3, #0
   87f02:	930d      	str	r3, [sp, #52]	; 0x34
   87f04:	e753      	b.n	87dae <_svfprintf_r+0x1816>
   87f06:	2667      	movs	r6, #103	; 0x67
   87f08:	991a      	ldr	r1, [sp, #104]	; 0x68
   87f0a:	780b      	ldrb	r3, [r1, #0]
   87f0c:	2bff      	cmp	r3, #255	; 0xff
   87f0e:	f000 80de 	beq.w	880ce <_svfprintf_r+0x1b36>
   87f12:	2400      	movs	r4, #0
   87f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87f16:	4620      	mov	r0, r4
   87f18:	e003      	b.n	87f22 <_svfprintf_r+0x198a>
   87f1a:	3001      	adds	r0, #1
   87f1c:	3101      	adds	r1, #1
   87f1e:	2bff      	cmp	r3, #255	; 0xff
   87f20:	d008      	beq.n	87f34 <_svfprintf_r+0x199c>
   87f22:	4293      	cmp	r3, r2
   87f24:	da06      	bge.n	87f34 <_svfprintf_r+0x199c>
   87f26:	1ad2      	subs	r2, r2, r3
   87f28:	784b      	ldrb	r3, [r1, #1]
   87f2a:	2b00      	cmp	r3, #0
   87f2c:	d1f5      	bne.n	87f1a <_svfprintf_r+0x1982>
   87f2e:	780b      	ldrb	r3, [r1, #0]
   87f30:	3401      	adds	r4, #1
   87f32:	e7f4      	b.n	87f1e <_svfprintf_r+0x1986>
   87f34:	911a      	str	r1, [sp, #104]	; 0x68
   87f36:	9210      	str	r2, [sp, #64]	; 0x40
   87f38:	9016      	str	r0, [sp, #88]	; 0x58
   87f3a:	9412      	str	r4, [sp, #72]	; 0x48
   87f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87f3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87f40:	990c      	ldr	r1, [sp, #48]	; 0x30
   87f42:	4413      	add	r3, r2
   87f44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   87f46:	fb02 1303 	mla	r3, r2, r3, r1
   87f4a:	930c      	str	r3, [sp, #48]	; 0x30
   87f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87f50:	9308      	str	r3, [sp, #32]
   87f52:	f7ff bab6 	b.w	874c2 <_svfprintf_r+0xf2a>
   87f56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87f58:	2666      	movs	r6, #102	; 0x66
   87f5a:	18d3      	adds	r3, r2, r3
   87f5c:	4419      	add	r1, r3
   87f5e:	910c      	str	r1, [sp, #48]	; 0x30
   87f60:	e662      	b.n	87c28 <_svfprintf_r+0x1690>
   87f62:	f106 020f 	add.w	r2, r6, #15
   87f66:	2101      	movs	r1, #1
   87f68:	b2d2      	uxtb	r2, r2
   87f6a:	f7ff ba4f 	b.w	8740c <_svfprintf_r+0xe74>
   87f6e:	2900      	cmp	r1, #0
   87f70:	d167      	bne.n	88042 <_svfprintf_r+0x1aaa>
   87f72:	2230      	movs	r2, #48	; 0x30
   87f74:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   87f78:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   87f7c:	3330      	adds	r3, #48	; 0x30
   87f7e:	f802 3b01 	strb.w	r3, [r2], #1
   87f82:	ab26      	add	r3, sp, #152	; 0x98
   87f84:	1ad3      	subs	r3, r2, r3
   87f86:	931b      	str	r3, [sp, #108]	; 0x6c
   87f88:	f7ff ba83 	b.w	87492 <_svfprintf_r+0xefa>
   87f8c:	0008cfe8 	.word	0x0008cfe8
   87f90:	40300000 	.word	0x40300000
   87f94:	3fe00000 	.word	0x3fe00000
   87f98:	0008d018 	.word	0x0008d018
   87f9c:	aa24      	add	r2, sp, #144	; 0x90
   87f9e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87fa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87fa2:	f003 fe4d 	bl	8bc40 <frexp>
   87fa6:	2200      	movs	r2, #0
   87fa8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87fac:	f004 fb72 	bl	8c694 <__aeabi_dmul>
   87fb0:	4604      	mov	r4, r0
   87fb2:	460d      	mov	r5, r1
   87fb4:	2200      	movs	r2, #0
   87fb6:	2300      	movs	r3, #0
   87fb8:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87fbc:	f004 fdd2 	bl	8cb64 <__aeabi_dcmpeq>
   87fc0:	b108      	cbz	r0, 87fc6 <_svfprintf_r+0x1a2e>
   87fc2:	2301      	movs	r3, #1
   87fc4:	9324      	str	r3, [sp, #144]	; 0x90
   87fc6:	4b44      	ldr	r3, [pc, #272]	; (880d8 <_svfprintf_r+0x1b40>)
   87fc8:	930c      	str	r3, [sp, #48]	; 0x30
   87fca:	e684      	b.n	87cd6 <_svfprintf_r+0x173e>
   87fcc:	2667      	movs	r6, #103	; 0x67
   87fce:	e62e      	b.n	87c2e <_svfprintf_r+0x1696>
   87fd0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87fd4:	f7fe bcb9 	b.w	8694a <_svfprintf_r+0x3b2>
   87fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87fda:	930c      	str	r3, [sp, #48]	; 0x30
   87fdc:	e57c      	b.n	87ad8 <_svfprintf_r+0x1540>
   87fde:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87fe0:	2003      	movs	r0, #3
   87fe2:	2b00      	cmp	r3, #0
   87fe4:	bfb8      	it	lt
   87fe6:	232d      	movlt	r3, #45	; 0x2d
   87fe8:	f04f 0100 	mov.w	r1, #0
   87fec:	bfba      	itte	lt
   87fee:	461a      	movlt	r2, r3
   87ff0:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   87ff4:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   87ff8:	4f38      	ldr	r7, [pc, #224]	; (880dc <_svfprintf_r+0x1b44>)
   87ffa:	4b39      	ldr	r3, [pc, #228]	; (880e0 <_svfprintf_r+0x1b48>)
   87ffc:	9008      	str	r0, [sp, #32]
   87ffe:	910d      	str	r1, [sp, #52]	; 0x34
   88000:	f7fe bce2 	b.w	869c8 <_svfprintf_r+0x430>
   88004:	f1c3 0301 	rsb	r3, r3, #1
   88008:	441a      	add	r2, r3
   8800a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8800e:	2667      	movs	r6, #103	; 0x67
   88010:	920c      	str	r2, [sp, #48]	; 0x30
   88012:	9308      	str	r3, [sp, #32]
   88014:	e56c      	b.n	87af0 <_svfprintf_r+0x1558>
   88016:	2200      	movs	r2, #0
   88018:	2300      	movs	r3, #0
   8801a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8801c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8801e:	f004 fda1 	bl	8cb64 <__aeabi_dcmpeq>
   88022:	2800      	cmp	r0, #0
   88024:	f47f addb 	bne.w	87bde <_svfprintf_r+0x1646>
   88028:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8802a:	f1c3 0301 	rsb	r3, r3, #1
   8802e:	9324      	str	r3, [sp, #144]	; 0x90
   88030:	e5d6      	b.n	87be0 <_svfprintf_r+0x1648>
   88032:	992b      	ldr	r1, [sp, #172]	; 0xac
   88034:	f7ff bb59 	b.w	876ea <_svfprintf_r+0x1152>
   88038:	07e9      	lsls	r1, r5, #31
   8803a:	f57f aa35 	bpl.w	874a8 <_svfprintf_r+0xf10>
   8803e:	f7ff ba2f 	b.w	874a0 <_svfprintf_r+0xf08>
   88042:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88046:	e799      	b.n	87f7c <_svfprintf_r+0x19e4>
   88048:	900d      	str	r0, [sp, #52]	; 0x34
   8804a:	e6b0      	b.n	87dae <_svfprintf_r+0x1816>
   8804c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8804e:	f005 0501 	and.w	r5, r5, #1
   88052:	4613      	mov	r3, r2
   88054:	432b      	orrs	r3, r5
   88056:	d104      	bne.n	88062 <_svfprintf_r+0x1aca>
   88058:	2301      	movs	r3, #1
   8805a:	2666      	movs	r6, #102	; 0x66
   8805c:	9308      	str	r3, [sp, #32]
   8805e:	930c      	str	r3, [sp, #48]	; 0x30
   88060:	e546      	b.n	87af0 <_svfprintf_r+0x1558>
   88062:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88064:	2666      	movs	r6, #102	; 0x66
   88066:	3301      	adds	r3, #1
   88068:	441a      	add	r2, r3
   8806a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8806e:	920c      	str	r2, [sp, #48]	; 0x30
   88070:	9308      	str	r3, [sp, #32]
   88072:	e53d      	b.n	87af0 <_svfprintf_r+0x1558>
   88074:	4b1b      	ldr	r3, [pc, #108]	; (880e4 <_svfprintf_r+0x1b4c>)
   88076:	930f      	str	r3, [sp, #60]	; 0x3c
   88078:	f7ff bbe9 	b.w	8784e <_svfprintf_r+0x12b6>
   8807c:	4a19      	ldr	r2, [pc, #100]	; (880e4 <_svfprintf_r+0x1b4c>)
   8807e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88080:	920f      	str	r2, [sp, #60]	; 0x3c
   88082:	e4b1      	b.n	879e8 <_svfprintf_r+0x1450>
   88084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88086:	e6dd      	b.n	87e44 <_svfprintf_r+0x18ac>
   88088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8808a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   8808e:	f853 0b04 	ldr.w	r0, [r3], #4
   88092:	4693      	mov	fp, r2
   88094:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   88098:	9009      	str	r0, [sp, #36]	; 0x24
   8809a:	930e      	str	r3, [sp, #56]	; 0x38
   8809c:	f7fe bac7 	b.w	8662e <_svfprintf_r+0x96>
   880a0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   880a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   880a8:	f8aa 300c 	strh.w	r3, [sl, #12]
   880ac:	f7fe bc4d 	b.w	8694a <_svfprintf_r+0x3b2>
   880b0:	4a0c      	ldr	r2, [pc, #48]	; (880e4 <_svfprintf_r+0x1b4c>)
   880b2:	920f      	str	r2, [sp, #60]	; 0x3c
   880b4:	e6e6      	b.n	87e84 <_svfprintf_r+0x18ec>
   880b6:	230c      	movs	r3, #12
   880b8:	f04f 32ff 	mov.w	r2, #4294967295
   880bc:	f8c9 3000 	str.w	r3, [r9]
   880c0:	920a      	str	r2, [sp, #40]	; 0x28
   880c2:	f7fe bc49 	b.w	86958 <_svfprintf_r+0x3c0>
   880c6:	2302      	movs	r3, #2
   880c8:	931b      	str	r3, [sp, #108]	; 0x6c
   880ca:	f7ff b9e2 	b.w	87492 <_svfprintf_r+0xefa>
   880ce:	2300      	movs	r3, #0
   880d0:	9312      	str	r3, [sp, #72]	; 0x48
   880d2:	9316      	str	r3, [sp, #88]	; 0x58
   880d4:	e732      	b.n	87f3c <_svfprintf_r+0x19a4>
   880d6:	bf00      	nop
   880d8:	0008cfd4 	.word	0x0008cfd4
   880dc:	0008cfcc 	.word	0x0008cfcc
   880e0:	0008cfd0 	.word	0x0008cfd0
   880e4:	0008d018 	.word	0x0008d018

000880e8 <__sprint_r.part.0>:
   880e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   880ec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   880ee:	4690      	mov	r8, r2
   880f0:	049c      	lsls	r4, r3, #18
   880f2:	d52d      	bpl.n	88150 <__sprint_r.part.0+0x68>
   880f4:	6893      	ldr	r3, [r2, #8]
   880f6:	6812      	ldr	r2, [r2, #0]
   880f8:	b343      	cbz	r3, 8814c <__sprint_r.part.0+0x64>
   880fa:	468b      	mov	fp, r1
   880fc:	4606      	mov	r6, r0
   880fe:	f102 0908 	add.w	r9, r2, #8
   88102:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   88106:	ea5f 079a 	movs.w	r7, sl, lsr #2
   8810a:	d015      	beq.n	88138 <__sprint_r.part.0+0x50>
   8810c:	2400      	movs	r4, #0
   8810e:	3d04      	subs	r5, #4
   88110:	e001      	b.n	88116 <__sprint_r.part.0+0x2e>
   88112:	42a7      	cmp	r7, r4
   88114:	d00e      	beq.n	88134 <__sprint_r.part.0+0x4c>
   88116:	465a      	mov	r2, fp
   88118:	4630      	mov	r0, r6
   8811a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8811e:	f002 f8fb 	bl	8a318 <_fputwc_r>
   88122:	1c43      	adds	r3, r0, #1
   88124:	f104 0401 	add.w	r4, r4, #1
   88128:	d1f3      	bne.n	88112 <__sprint_r.part.0+0x2a>
   8812a:	2300      	movs	r3, #0
   8812c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88134:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88138:	f02a 0a03 	bic.w	sl, sl, #3
   8813c:	eba3 030a 	sub.w	r3, r3, sl
   88140:	f8c8 3008 	str.w	r3, [r8, #8]
   88144:	f109 0908 	add.w	r9, r9, #8
   88148:	2b00      	cmp	r3, #0
   8814a:	d1da      	bne.n	88102 <__sprint_r.part.0+0x1a>
   8814c:	2000      	movs	r0, #0
   8814e:	e7ec      	b.n	8812a <__sprint_r.part.0+0x42>
   88150:	f002 fa6c 	bl	8a62c <__sfvwrite_r>
   88154:	2300      	movs	r3, #0
   88156:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8815a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8815e:	bf00      	nop

00088160 <_vfiprintf_r>:
   88160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88164:	b0bb      	sub	sp, #236	; 0xec
   88166:	461c      	mov	r4, r3
   88168:	4689      	mov	r9, r1
   8816a:	4690      	mov	r8, r2
   8816c:	e9cd 3004 	strd	r3, r0, [sp, #16]
   88170:	b118      	cbz	r0, 8817a <_vfiprintf_r+0x1a>
   88172:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88174:	2b00      	cmp	r3, #0
   88176:	f000 827a 	beq.w	8866e <_vfiprintf_r+0x50e>
   8817a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8817e:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   88182:	07de      	lsls	r6, r3, #31
   88184:	b28a      	uxth	r2, r1
   88186:	d402      	bmi.n	8818e <_vfiprintf_r+0x2e>
   88188:	058d      	lsls	r5, r1, #22
   8818a:	f140 851a 	bpl.w	88bc2 <_vfiprintf_r+0xa62>
   8818e:	0490      	lsls	r0, r2, #18
   88190:	d40a      	bmi.n	881a8 <_vfiprintf_r+0x48>
   88192:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88196:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8819a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8819e:	f8a9 200c 	strh.w	r2, [r9, #12]
   881a2:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   881a6:	b292      	uxth	r2, r2
   881a8:	0711      	lsls	r1, r2, #28
   881aa:	f140 80f6 	bpl.w	8839a <_vfiprintf_r+0x23a>
   881ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
   881b2:	2b00      	cmp	r3, #0
   881b4:	f000 80f1 	beq.w	8839a <_vfiprintf_r+0x23a>
   881b8:	f002 031a 	and.w	r3, r2, #26
   881bc:	2b0a      	cmp	r3, #10
   881be:	f000 80fa 	beq.w	883b6 <_vfiprintf_r+0x256>
   881c2:	2300      	movs	r3, #0
   881c4:	46cb      	mov	fp, r9
   881c6:	e9cd 3308 	strd	r3, r3, [sp, #32]
   881ca:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   881ce:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   881d2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   881d6:	9303      	str	r3, [sp, #12]
   881d8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   881dc:	f898 3000 	ldrb.w	r3, [r8]
   881e0:	2b00      	cmp	r3, #0
   881e2:	f000 81ed 	beq.w	885c0 <_vfiprintf_r+0x460>
   881e6:	4644      	mov	r4, r8
   881e8:	e004      	b.n	881f4 <_vfiprintf_r+0x94>
   881ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   881ee:	2b00      	cmp	r3, #0
   881f0:	f000 8127 	beq.w	88442 <_vfiprintf_r+0x2e2>
   881f4:	2b25      	cmp	r3, #37	; 0x25
   881f6:	d1f8      	bne.n	881ea <_vfiprintf_r+0x8a>
   881f8:	ebb4 0508 	subs.w	r5, r4, r8
   881fc:	f040 8125 	bne.w	8844a <_vfiprintf_r+0x2ea>
   88200:	7823      	ldrb	r3, [r4, #0]
   88202:	2b00      	cmp	r3, #0
   88204:	f000 81dc 	beq.w	885c0 <_vfiprintf_r+0x460>
   88208:	f04f 0200 	mov.w	r2, #0
   8820c:	2300      	movs	r3, #0
   8820e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88212:	f04f 32ff 	mov.w	r2, #4294967295
   88216:	252b      	movs	r5, #43	; 0x2b
   88218:	461f      	mov	r7, r3
   8821a:	9302      	str	r3, [sp, #8]
   8821c:	7863      	ldrb	r3, [r4, #1]
   8821e:	f104 0801 	add.w	r8, r4, #1
   88222:	9200      	str	r2, [sp, #0]
   88224:	f108 0801 	add.w	r8, r8, #1
   88228:	f1a3 0220 	sub.w	r2, r3, #32
   8822c:	2a5a      	cmp	r2, #90	; 0x5a
   8822e:	f200 8141 	bhi.w	884b4 <_vfiprintf_r+0x354>
   88232:	e8df f012 	tbh	[pc, r2, lsl #1]
   88236:	0272      	.short	0x0272
   88238:	013f013f 	.word	0x013f013f
   8823c:	013f026d 	.word	0x013f026d
   88240:	013f013f 	.word	0x013f013f
   88244:	013f024b 	.word	0x013f024b
   88248:	006a013f 	.word	0x006a013f
   8824c:	013f0227 	.word	0x013f0227
   88250:	02310222 	.word	0x02310222
   88254:	022c013f 	.word	0x022c013f
   88258:	005b005b 	.word	0x005b005b
   8825c:	005b005b 	.word	0x005b005b
   88260:	005b005b 	.word	0x005b005b
   88264:	005b005b 	.word	0x005b005b
   88268:	013f005b 	.word	0x013f005b
   8826c:	013f013f 	.word	0x013f013f
   88270:	013f013f 	.word	0x013f013f
   88274:	013f013f 	.word	0x013f013f
   88278:	013f013f 	.word	0x013f013f
   8827c:	007a020e 	.word	0x007a020e
   88280:	013f013f 	.word	0x013f013f
   88284:	013f013f 	.word	0x013f013f
   88288:	013f013f 	.word	0x013f013f
   8828c:	013f013f 	.word	0x013f013f
   88290:	013f013f 	.word	0x013f013f
   88294:	013f00d7 	.word	0x013f00d7
   88298:	013f013f 	.word	0x013f013f
   8829c:	013f01f2 	.word	0x013f01f2
   882a0:	013f0297 	.word	0x013f0297
   882a4:	0500013f 	.word	0x0500013f
   882a8:	013f013f 	.word	0x013f013f
   882ac:	013f013f 	.word	0x013f013f
   882b0:	013f013f 	.word	0x013f013f
   882b4:	013f013f 	.word	0x013f013f
   882b8:	013f013f 	.word	0x013f013f
   882bc:	007c020e 	.word	0x007c020e
   882c0:	013f013f 	.word	0x013f013f
   882c4:	028a013f 	.word	0x028a013f
   882c8:	0075007c 	.word	0x0075007c
   882cc:	027d013f 	.word	0x027d013f
   882d0:	02b6013f 	.word	0x02b6013f
   882d4:	02a600d9 	.word	0x02a600d9
   882d8:	013f0075 	.word	0x013f0075
   882dc:	007201f2 	.word	0x007201f2
   882e0:	013f04fe 	.word	0x013f04fe
   882e4:	051c013f 	.word	0x051c013f
   882e8:	0072013f 	.word	0x0072013f
   882ec:	2100      	movs	r1, #0
   882ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   882f2:	f818 3b01 	ldrb.w	r3, [r8], #1
   882f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   882fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   882fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88302:	2a09      	cmp	r2, #9
   88304:	d9f5      	bls.n	882f2 <_vfiprintf_r+0x192>
   88306:	9102      	str	r1, [sp, #8]
   88308:	e78e      	b.n	88228 <_vfiprintf_r+0xc8>
   8830a:	9b04      	ldr	r3, [sp, #16]
   8830c:	f853 2b04 	ldr.w	r2, [r3], #4
   88310:	2a00      	cmp	r2, #0
   88312:	9202      	str	r2, [sp, #8]
   88314:	9304      	str	r3, [sp, #16]
   88316:	f2c0 81ad 	blt.w	88674 <_vfiprintf_r+0x514>
   8831a:	f898 3000 	ldrb.w	r3, [r8]
   8831e:	e781      	b.n	88224 <_vfiprintf_r+0xc4>
   88320:	f898 3000 	ldrb.w	r3, [r8]
   88324:	f047 0720 	orr.w	r7, r7, #32
   88328:	e77c      	b.n	88224 <_vfiprintf_r+0xc4>
   8832a:	f047 0710 	orr.w	r7, r7, #16
   8832e:	06bc      	lsls	r4, r7, #26
   88330:	f140 8158 	bpl.w	885e4 <_vfiprintf_r+0x484>
   88334:	9c04      	ldr	r4, [sp, #16]
   88336:	3407      	adds	r4, #7
   88338:	f024 0307 	bic.w	r3, r4, #7
   8833c:	4619      	mov	r1, r3
   8833e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88342:	4614      	mov	r4, r2
   88344:	461d      	mov	r5, r3
   88346:	9104      	str	r1, [sp, #16]
   88348:	2a00      	cmp	r2, #0
   8834a:	f173 0300 	sbcs.w	r3, r3, #0
   8834e:	f2c0 841e 	blt.w	88b8e <_vfiprintf_r+0xa2e>
   88352:	9b00      	ldr	r3, [sp, #0]
   88354:	3301      	adds	r3, #1
   88356:	f000 84f0 	beq.w	88d3a <_vfiprintf_r+0xbda>
   8835a:	ea54 0305 	orrs.w	r3, r4, r5
   8835e:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   88362:	f000 83fc 	beq.w	88b5e <_vfiprintf_r+0x9fe>
   88366:	2d00      	cmp	r5, #0
   88368:	bf08      	it	eq
   8836a:	2c0a      	cmpeq	r4, #10
   8836c:	f080 84a9 	bcs.w	88cc2 <_vfiprintf_r+0xb62>
   88370:	2301      	movs	r3, #1
   88372:	464f      	mov	r7, r9
   88374:	3430      	adds	r4, #48	; 0x30
   88376:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   8837a:	9301      	str	r3, [sp, #4]
   8837c:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   88380:	e9dd 2100 	ldrd	r2, r1, [sp]
   88384:	428a      	cmp	r2, r1
   88386:	bfb8      	it	lt
   88388:	460a      	movlt	r2, r1
   8838a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8838e:	4615      	mov	r5, r2
   88390:	2b00      	cmp	r3, #0
   88392:	f000 809d 	beq.w	884d0 <_vfiprintf_r+0x370>
   88396:	3501      	adds	r5, #1
   88398:	e09a      	b.n	884d0 <_vfiprintf_r+0x370>
   8839a:	4649      	mov	r1, r9
   8839c:	9805      	ldr	r0, [sp, #20]
   8839e:	f000 fdb9 	bl	88f14 <__swsetup_r>
   883a2:	2800      	cmp	r0, #0
   883a4:	f040 854a 	bne.w	88e3c <_vfiprintf_r+0xcdc>
   883a8:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   883ac:	f002 031a 	and.w	r3, r2, #26
   883b0:	2b0a      	cmp	r3, #10
   883b2:	f47f af06 	bne.w	881c2 <_vfiprintf_r+0x62>
   883b6:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   883ba:	2b00      	cmp	r3, #0
   883bc:	f6ff af01 	blt.w	881c2 <_vfiprintf_r+0x62>
   883c0:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   883c4:	07de      	lsls	r6, r3, #31
   883c6:	d402      	bmi.n	883ce <_vfiprintf_r+0x26e>
   883c8:	0595      	lsls	r5, r2, #22
   883ca:	f140 850e 	bpl.w	88dea <_vfiprintf_r+0xc8a>
   883ce:	4623      	mov	r3, r4
   883d0:	4642      	mov	r2, r8
   883d2:	4649      	mov	r1, r9
   883d4:	9805      	ldr	r0, [sp, #20]
   883d6:	f000 fd59 	bl	88e8c <__sbprintf>
   883da:	9003      	str	r0, [sp, #12]
   883dc:	9803      	ldr	r0, [sp, #12]
   883de:	b03b      	add	sp, #236	; 0xec
   883e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   883e4:	f047 0710 	orr.w	r7, r7, #16
   883e8:	06b8      	lsls	r0, r7, #26
   883ea:	9c04      	ldr	r4, [sp, #16]
   883ec:	f140 8109 	bpl.w	88602 <_vfiprintf_r+0x4a2>
   883f0:	3407      	adds	r4, #7
   883f2:	f024 0307 	bic.w	r3, r4, #7
   883f6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   883fa:	9304      	str	r3, [sp, #16]
   883fc:	2300      	movs	r3, #0
   883fe:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88402:	f04f 0200 	mov.w	r2, #0
   88406:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8840a:	9a00      	ldr	r2, [sp, #0]
   8840c:	4611      	mov	r1, r2
   8840e:	3101      	adds	r1, #1
   88410:	f000 81db 	beq.w	887ca <_vfiprintf_r+0x66a>
   88414:	ea54 0105 	orrs.w	r1, r4, r5
   88418:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   8841c:	f040 81d4 	bne.w	887c8 <_vfiprintf_r+0x668>
   88420:	2a00      	cmp	r2, #0
   88422:	f040 848d 	bne.w	88d40 <_vfiprintf_r+0xbe0>
   88426:	2b00      	cmp	r3, #0
   88428:	f040 839e 	bne.w	88b68 <_vfiprintf_r+0xa08>
   8842c:	f019 0301 	ands.w	r3, r9, #1
   88430:	9301      	str	r3, [sp, #4]
   88432:	f000 83c3 	beq.w	88bbc <_vfiprintf_r+0xa5c>
   88436:	2330      	movs	r3, #48	; 0x30
   88438:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   8843c:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   88440:	e79e      	b.n	88380 <_vfiprintf_r+0x220>
   88442:	ebb4 0508 	subs.w	r5, r4, r8
   88446:	f000 80bb 	beq.w	885c0 <_vfiprintf_r+0x460>
   8844a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8844e:	3301      	adds	r3, #1
   88450:	442a      	add	r2, r5
   88452:	2b07      	cmp	r3, #7
   88454:	e9ca 8500 	strd	r8, r5, [sl]
   88458:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   8845c:	dc06      	bgt.n	8846c <_vfiprintf_r+0x30c>
   8845e:	f10a 0a08 	add.w	sl, sl, #8
   88462:	9a03      	ldr	r2, [sp, #12]
   88464:	7823      	ldrb	r3, [r4, #0]
   88466:	442a      	add	r2, r5
   88468:	9203      	str	r2, [sp, #12]
   8846a:	e6ca      	b.n	88202 <_vfiprintf_r+0xa2>
   8846c:	2a00      	cmp	r2, #0
   8846e:	f000 8372 	beq.w	88b56 <_vfiprintf_r+0x9f6>
   88472:	4659      	mov	r1, fp
   88474:	9805      	ldr	r0, [sp, #20]
   88476:	aa0e      	add	r2, sp, #56	; 0x38
   88478:	f7ff fe36 	bl	880e8 <__sprint_r.part.0>
   8847c:	b950      	cbnz	r0, 88494 <_vfiprintf_r+0x334>
   8847e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88482:	e7ee      	b.n	88462 <_vfiprintf_r+0x302>
   88484:	4659      	mov	r1, fp
   88486:	9805      	ldr	r0, [sp, #20]
   88488:	aa0e      	add	r2, sp, #56	; 0x38
   8848a:	f7ff fe2d 	bl	880e8 <__sprint_r.part.0>
   8848e:	2800      	cmp	r0, #0
   88490:	f000 808d 	beq.w	885ae <_vfiprintf_r+0x44e>
   88494:	46d9      	mov	r9, fp
   88496:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8849a:	f013 0f01 	tst.w	r3, #1
   8849e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   884a2:	f000 8095 	beq.w	885d0 <_vfiprintf_r+0x470>
   884a6:	065b      	lsls	r3, r3, #25
   884a8:	f100 84d4 	bmi.w	88e54 <_vfiprintf_r+0xcf4>
   884ac:	9803      	ldr	r0, [sp, #12]
   884ae:	b03b      	add	sp, #236	; 0xec
   884b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   884b4:	2b00      	cmp	r3, #0
   884b6:	f000 8083 	beq.w	885c0 <_vfiprintf_r+0x460>
   884ba:	2501      	movs	r5, #1
   884bc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   884c0:	f04f 0300 	mov.w	r3, #0
   884c4:	9501      	str	r5, [sp, #4]
   884c6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   884ca:	ae21      	add	r6, sp, #132	; 0x84
   884cc:	2300      	movs	r3, #0
   884ce:	9300      	str	r3, [sp, #0]
   884d0:	f017 0302 	ands.w	r3, r7, #2
   884d4:	9307      	str	r3, [sp, #28]
   884d6:	bf18      	it	ne
   884d8:	3502      	addne	r5, #2
   884da:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   884de:	9306      	str	r3, [sp, #24]
   884e0:	d104      	bne.n	884ec <_vfiprintf_r+0x38c>
   884e2:	9b02      	ldr	r3, [sp, #8]
   884e4:	1b5c      	subs	r4, r3, r5
   884e6:	2c00      	cmp	r4, #0
   884e8:	f300 8274 	bgt.w	889d4 <_vfiprintf_r+0x874>
   884ec:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   884f0:	1c48      	adds	r0, r1, #1
   884f2:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   884f6:	b174      	cbz	r4, 88516 <_vfiprintf_r+0x3b6>
   884f8:	2101      	movs	r1, #1
   884fa:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   884fe:	440a      	add	r2, r1
   88500:	2807      	cmp	r0, #7
   88502:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88506:	e9ca 4100 	strd	r4, r1, [sl]
   8850a:	f300 8246 	bgt.w	8899a <_vfiprintf_r+0x83a>
   8850e:	4601      	mov	r1, r0
   88510:	f10a 0a08 	add.w	sl, sl, #8
   88514:	3001      	adds	r0, #1
   88516:	9b07      	ldr	r3, [sp, #28]
   88518:	b1c3      	cbz	r3, 8854c <_vfiprintf_r+0x3ec>
   8851a:	2102      	movs	r1, #2
   8851c:	ab0d      	add	r3, sp, #52	; 0x34
   8851e:	440a      	add	r2, r1
   88520:	2807      	cmp	r0, #7
   88522:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88526:	e9ca 3100 	strd	r3, r1, [sl]
   8852a:	f340 824e 	ble.w	889ca <_vfiprintf_r+0x86a>
   8852e:	2a00      	cmp	r2, #0
   88530:	f000 830c 	beq.w	88b4c <_vfiprintf_r+0x9ec>
   88534:	4659      	mov	r1, fp
   88536:	9805      	ldr	r0, [sp, #20]
   88538:	aa0e      	add	r2, sp, #56	; 0x38
   8853a:	f7ff fdd5 	bl	880e8 <__sprint_r.part.0>
   8853e:	2800      	cmp	r0, #0
   88540:	d1a8      	bne.n	88494 <_vfiprintf_r+0x334>
   88542:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88546:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8854a:	1c48      	adds	r0, r1, #1
   8854c:	9b06      	ldr	r3, [sp, #24]
   8854e:	2b80      	cmp	r3, #128	; 0x80
   88550:	f000 817e 	beq.w	88850 <_vfiprintf_r+0x6f0>
   88554:	e9dd 3400 	ldrd	r3, r4, [sp]
   88558:	1b1c      	subs	r4, r3, r4
   8855a:	2c00      	cmp	r4, #0
   8855c:	f300 81d3 	bgt.w	88906 <_vfiprintf_r+0x7a6>
   88560:	9b01      	ldr	r3, [sp, #4]
   88562:	2807      	cmp	r0, #7
   88564:	441a      	add	r2, r3
   88566:	e9ca 6300 	strd	r6, r3, [sl]
   8856a:	9210      	str	r2, [sp, #64]	; 0x40
   8856c:	900f      	str	r0, [sp, #60]	; 0x3c
   8856e:	f340 816c 	ble.w	8884a <_vfiprintf_r+0x6ea>
   88572:	2a00      	cmp	r2, #0
   88574:	f000 8276 	beq.w	88a64 <_vfiprintf_r+0x904>
   88578:	4659      	mov	r1, fp
   8857a:	9805      	ldr	r0, [sp, #20]
   8857c:	aa0e      	add	r2, sp, #56	; 0x38
   8857e:	f7ff fdb3 	bl	880e8 <__sprint_r.part.0>
   88582:	2800      	cmp	r0, #0
   88584:	d186      	bne.n	88494 <_vfiprintf_r+0x334>
   88586:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88588:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8858c:	0779      	lsls	r1, r7, #29
   8858e:	d504      	bpl.n	8859a <_vfiprintf_r+0x43a>
   88590:	9b02      	ldr	r3, [sp, #8]
   88592:	1b5c      	subs	r4, r3, r5
   88594:	2c00      	cmp	r4, #0
   88596:	f300 826e 	bgt.w	88a76 <_vfiprintf_r+0x916>
   8859a:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   8859e:	42a9      	cmp	r1, r5
   885a0:	bfac      	ite	ge
   885a2:	185b      	addge	r3, r3, r1
   885a4:	195b      	addlt	r3, r3, r5
   885a6:	9303      	str	r3, [sp, #12]
   885a8:	2a00      	cmp	r2, #0
   885aa:	f47f af6b 	bne.w	88484 <_vfiprintf_r+0x324>
   885ae:	2300      	movs	r3, #0
   885b0:	930f      	str	r3, [sp, #60]	; 0x3c
   885b2:	f898 3000 	ldrb.w	r3, [r8]
   885b6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   885ba:	2b00      	cmp	r3, #0
   885bc:	f47f ae13 	bne.w	881e6 <_vfiprintf_r+0x86>
   885c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   885c2:	46d9      	mov	r9, fp
   885c4:	2b00      	cmp	r3, #0
   885c6:	f040 8426 	bne.w	88e16 <_vfiprintf_r+0xcb6>
   885ca:	2300      	movs	r3, #0
   885cc:	930f      	str	r3, [sp, #60]	; 0x3c
   885ce:	e762      	b.n	88496 <_vfiprintf_r+0x336>
   885d0:	059a      	lsls	r2, r3, #22
   885d2:	f53f af68 	bmi.w	884a6 <_vfiprintf_r+0x346>
   885d6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   885da:	f002 f9d1 	bl	8a980 <__retarget_lock_release_recursive>
   885de:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   885e2:	e760      	b.n	884a6 <_vfiprintf_r+0x346>
   885e4:	9b04      	ldr	r3, [sp, #16]
   885e6:	06f8      	lsls	r0, r7, #27
   885e8:	f853 4b04 	ldr.w	r4, [r3], #4
   885ec:	f100 8308 	bmi.w	88c00 <_vfiprintf_r+0xaa0>
   885f0:	0679      	lsls	r1, r7, #25
   885f2:	f140 8302 	bpl.w	88bfa <_vfiprintf_r+0xa9a>
   885f6:	b224      	sxth	r4, r4
   885f8:	17e5      	asrs	r5, r4, #31
   885fa:	9304      	str	r3, [sp, #16]
   885fc:	4622      	mov	r2, r4
   885fe:	462b      	mov	r3, r5
   88600:	e6a2      	b.n	88348 <_vfiprintf_r+0x1e8>
   88602:	f854 3b04 	ldr.w	r3, [r4], #4
   88606:	06f9      	lsls	r1, r7, #27
   88608:	9404      	str	r4, [sp, #16]
   8860a:	f100 82f3 	bmi.w	88bf4 <_vfiprintf_r+0xa94>
   8860e:	067a      	lsls	r2, r7, #25
   88610:	f140 82ed 	bpl.w	88bee <_vfiprintf_r+0xa8e>
   88614:	2500      	movs	r5, #0
   88616:	b29c      	uxth	r4, r3
   88618:	e6f0      	b.n	883fc <_vfiprintf_r+0x29c>
   8861a:	f04f 0300 	mov.w	r3, #0
   8861e:	9c04      	ldr	r4, [sp, #16]
   88620:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88624:	f854 6b04 	ldr.w	r6, [r4], #4
   88628:	2e00      	cmp	r6, #0
   8862a:	f000 8397 	beq.w	88d5c <_vfiprintf_r+0xbfc>
   8862e:	9a00      	ldr	r2, [sp, #0]
   88630:	4613      	mov	r3, r2
   88632:	3301      	adds	r3, #1
   88634:	f000 831e 	beq.w	88c74 <_vfiprintf_r+0xb14>
   88638:	2100      	movs	r1, #0
   8863a:	4630      	mov	r0, r6
   8863c:	f002 fcde 	bl	8affc <memchr>
   88640:	2800      	cmp	r0, #0
   88642:	f000 83d8 	beq.w	88df6 <_vfiprintf_r+0xc96>
   88646:	1b83      	subs	r3, r0, r6
   88648:	9301      	str	r3, [sp, #4]
   8864a:	2300      	movs	r3, #0
   8864c:	9404      	str	r4, [sp, #16]
   8864e:	9300      	str	r3, [sp, #0]
   88650:	e696      	b.n	88380 <_vfiprintf_r+0x220>
   88652:	2501      	movs	r5, #1
   88654:	f04f 0200 	mov.w	r2, #0
   88658:	9c04      	ldr	r4, [sp, #16]
   8865a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8865e:	f854 3b04 	ldr.w	r3, [r4], #4
   88662:	9501      	str	r5, [sp, #4]
   88664:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88668:	9404      	str	r4, [sp, #16]
   8866a:	ae21      	add	r6, sp, #132	; 0x84
   8866c:	e72e      	b.n	884cc <_vfiprintf_r+0x36c>
   8866e:	f001 fdb3 	bl	8a1d8 <__sinit>
   88672:	e582      	b.n	8817a <_vfiprintf_r+0x1a>
   88674:	9b02      	ldr	r3, [sp, #8]
   88676:	425b      	negs	r3, r3
   88678:	9302      	str	r3, [sp, #8]
   8867a:	f898 3000 	ldrb.w	r3, [r8]
   8867e:	f047 0704 	orr.w	r7, r7, #4
   88682:	e5cf      	b.n	88224 <_vfiprintf_r+0xc4>
   88684:	f898 3000 	ldrb.w	r3, [r8]
   88688:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   8868c:	e5ca      	b.n	88224 <_vfiprintf_r+0xc4>
   8868e:	f898 3000 	ldrb.w	r3, [r8]
   88692:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   88696:	e5c5      	b.n	88224 <_vfiprintf_r+0xc4>
   88698:	4641      	mov	r1, r8
   8869a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8869e:	2b2a      	cmp	r3, #42	; 0x2a
   886a0:	f000 83dd 	beq.w	88e5e <_vfiprintf_r+0xcfe>
   886a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   886a8:	2a09      	cmp	r2, #9
   886aa:	4688      	mov	r8, r1
   886ac:	bf98      	it	ls
   886ae:	2100      	movls	r1, #0
   886b0:	f200 83ad 	bhi.w	88e0e <_vfiprintf_r+0xcae>
   886b4:	f818 3b01 	ldrb.w	r3, [r8], #1
   886b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   886bc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   886c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   886c4:	2a09      	cmp	r2, #9
   886c6:	d9f5      	bls.n	886b4 <_vfiprintf_r+0x554>
   886c8:	9100      	str	r1, [sp, #0]
   886ca:	e5ad      	b.n	88228 <_vfiprintf_r+0xc8>
   886cc:	9c05      	ldr	r4, [sp, #20]
   886ce:	4620      	mov	r0, r4
   886d0:	f002 f94c 	bl	8a96c <_localeconv_r>
   886d4:	6843      	ldr	r3, [r0, #4]
   886d6:	4618      	mov	r0, r3
   886d8:	930a      	str	r3, [sp, #40]	; 0x28
   886da:	f7fd fefb 	bl	864d4 <strlen>
   886de:	4603      	mov	r3, r0
   886e0:	4620      	mov	r0, r4
   886e2:	930b      	str	r3, [sp, #44]	; 0x2c
   886e4:	461c      	mov	r4, r3
   886e6:	f002 f941 	bl	8a96c <_localeconv_r>
   886ea:	6882      	ldr	r2, [r0, #8]
   886ec:	9209      	str	r2, [sp, #36]	; 0x24
   886ee:	2c00      	cmp	r4, #0
   886f0:	f43f ae13 	beq.w	8831a <_vfiprintf_r+0x1ba>
   886f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   886f6:	2b00      	cmp	r3, #0
   886f8:	f43f ae0f 	beq.w	8831a <_vfiprintf_r+0x1ba>
   886fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   886fe:	781b      	ldrb	r3, [r3, #0]
   88700:	2b00      	cmp	r3, #0
   88702:	f43f ae0a 	beq.w	8831a <_vfiprintf_r+0x1ba>
   88706:	f898 3000 	ldrb.w	r3, [r8]
   8870a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   8870e:	e589      	b.n	88224 <_vfiprintf_r+0xc4>
   88710:	f898 3000 	ldrb.w	r3, [r8]
   88714:	f047 0701 	orr.w	r7, r7, #1
   88718:	e584      	b.n	88224 <_vfiprintf_r+0xc4>
   8871a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8871e:	2b00      	cmp	r3, #0
   88720:	f47f adfb 	bne.w	8831a <_vfiprintf_r+0x1ba>
   88724:	2320      	movs	r3, #32
   88726:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8872a:	f898 3000 	ldrb.w	r3, [r8]
   8872e:	e579      	b.n	88224 <_vfiprintf_r+0xc4>
   88730:	f898 3000 	ldrb.w	r3, [r8]
   88734:	2b6c      	cmp	r3, #108	; 0x6c
   88736:	bf03      	ittte	eq
   88738:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   8873c:	f047 0720 	orreq.w	r7, r7, #32
   88740:	f108 0801 	addeq.w	r8, r8, #1
   88744:	f047 0710 	orrne.w	r7, r7, #16
   88748:	e56c      	b.n	88224 <_vfiprintf_r+0xc4>
   8874a:	f898 3000 	ldrb.w	r3, [r8]
   8874e:	2b68      	cmp	r3, #104	; 0x68
   88750:	bf03      	ittte	eq
   88752:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88756:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   8875a:	f108 0801 	addeq.w	r8, r8, #1
   8875e:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   88762:	e55f      	b.n	88224 <_vfiprintf_r+0xc4>
   88764:	f047 0910 	orr.w	r9, r7, #16
   88768:	f019 0f20 	tst.w	r9, #32
   8876c:	9c04      	ldr	r4, [sp, #16]
   8876e:	f000 8200 	beq.w	88b72 <_vfiprintf_r+0xa12>
   88772:	3407      	adds	r4, #7
   88774:	f024 0307 	bic.w	r3, r4, #7
   88778:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8877c:	9304      	str	r3, [sp, #16]
   8877e:	2301      	movs	r3, #1
   88780:	e63f      	b.n	88402 <_vfiprintf_r+0x2a2>
   88782:	f647 0330 	movw	r3, #30768	; 0x7830
   88786:	9c04      	ldr	r4, [sp, #16]
   88788:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   8878c:	f854 2b04 	ldr.w	r2, [r4], #4
   88790:	4bbf      	ldr	r3, [pc, #764]	; (88a90 <_vfiprintf_r+0x930>)
   88792:	9404      	str	r4, [sp, #16]
   88794:	9308      	str	r3, [sp, #32]
   88796:	4614      	mov	r4, r2
   88798:	2500      	movs	r5, #0
   8879a:	2302      	movs	r3, #2
   8879c:	f047 0902 	orr.w	r9, r7, #2
   887a0:	e62f      	b.n	88402 <_vfiprintf_r+0x2a2>
   887a2:	06bb      	lsls	r3, r7, #26
   887a4:	f100 8232 	bmi.w	88c0c <_vfiprintf_r+0xaac>
   887a8:	06fe      	lsls	r6, r7, #27
   887aa:	f100 82cf 	bmi.w	88d4c <_vfiprintf_r+0xbec>
   887ae:	067d      	lsls	r5, r7, #25
   887b0:	f100 8301 	bmi.w	88db6 <_vfiprintf_r+0xc56>
   887b4:	05bc      	lsls	r4, r7, #22
   887b6:	f140 82c9 	bpl.w	88d4c <_vfiprintf_r+0xbec>
   887ba:	9c04      	ldr	r4, [sp, #16]
   887bc:	9a03      	ldr	r2, [sp, #12]
   887be:	f854 3b04 	ldr.w	r3, [r4], #4
   887c2:	701a      	strb	r2, [r3, #0]
   887c4:	9404      	str	r4, [sp, #16]
   887c6:	e509      	b.n	881dc <_vfiprintf_r+0x7c>
   887c8:	46b9      	mov	r9, r7
   887ca:	2b01      	cmp	r3, #1
   887cc:	f43f adcb 	beq.w	88366 <_vfiprintf_r+0x206>
   887d0:	2b02      	cmp	r3, #2
   887d2:	ae3a      	add	r6, sp, #232	; 0xe8
   887d4:	d113      	bne.n	887fe <_vfiprintf_r+0x69e>
   887d6:	9808      	ldr	r0, [sp, #32]
   887d8:	0923      	lsrs	r3, r4, #4
   887da:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   887de:	0929      	lsrs	r1, r5, #4
   887e0:	f004 020f 	and.w	r2, r4, #15
   887e4:	460d      	mov	r5, r1
   887e6:	461c      	mov	r4, r3
   887e8:	5c83      	ldrb	r3, [r0, r2]
   887ea:	f806 3d01 	strb.w	r3, [r6, #-1]!
   887ee:	ea54 0305 	orrs.w	r3, r4, r5
   887f2:	d1f1      	bne.n	887d8 <_vfiprintf_r+0x678>
   887f4:	ab3a      	add	r3, sp, #232	; 0xe8
   887f6:	1b9b      	subs	r3, r3, r6
   887f8:	464f      	mov	r7, r9
   887fa:	9301      	str	r3, [sp, #4]
   887fc:	e5c0      	b.n	88380 <_vfiprintf_r+0x220>
   887fe:	08e2      	lsrs	r2, r4, #3
   88800:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88804:	08e9      	lsrs	r1, r5, #3
   88806:	f004 0307 	and.w	r3, r4, #7
   8880a:	460d      	mov	r5, r1
   8880c:	4614      	mov	r4, r2
   8880e:	3330      	adds	r3, #48	; 0x30
   88810:	ea54 0105 	orrs.w	r1, r4, r5
   88814:	4632      	mov	r2, r6
   88816:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8881a:	d1f0      	bne.n	887fe <_vfiprintf_r+0x69e>
   8881c:	f019 0f01 	tst.w	r9, #1
   88820:	d0e8      	beq.n	887f4 <_vfiprintf_r+0x694>
   88822:	2b30      	cmp	r3, #48	; 0x30
   88824:	d0e6      	beq.n	887f4 <_vfiprintf_r+0x694>
   88826:	2330      	movs	r3, #48	; 0x30
   88828:	3a02      	subs	r2, #2
   8882a:	f806 3c01 	strb.w	r3, [r6, #-1]
   8882e:	ab3a      	add	r3, sp, #232	; 0xe8
   88830:	1a9b      	subs	r3, r3, r2
   88832:	464f      	mov	r7, r9
   88834:	4616      	mov	r6, r2
   88836:	9301      	str	r3, [sp, #4]
   88838:	e5a2      	b.n	88380 <_vfiprintf_r+0x220>
   8883a:	2301      	movs	r3, #1
   8883c:	9a01      	ldr	r2, [sp, #4]
   8883e:	930f      	str	r3, [sp, #60]	; 0x3c
   88840:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   88844:	9212      	str	r2, [sp, #72]	; 0x48
   88846:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8884a:	f10a 0a08 	add.w	sl, sl, #8
   8884e:	e69d      	b.n	8858c <_vfiprintf_r+0x42c>
   88850:	9b02      	ldr	r3, [sp, #8]
   88852:	1b5c      	subs	r4, r3, r5
   88854:	2c00      	cmp	r4, #0
   88856:	f77f ae7d 	ble.w	88554 <_vfiprintf_r+0x3f4>
   8885a:	2c10      	cmp	r4, #16
   8885c:	f340 82ea 	ble.w	88e34 <_vfiprintf_r+0xcd4>
   88860:	f8df 9230 	ldr.w	r9, [pc, #560]	; 88a94 <_vfiprintf_r+0x934>
   88864:	4650      	mov	r0, sl
   88866:	9706      	str	r7, [sp, #24]
   88868:	46b2      	mov	sl, r6
   8886a:	464e      	mov	r6, r9
   8886c:	46c1      	mov	r9, r8
   8886e:	46a8      	mov	r8, r5
   88870:	9d05      	ldr	r5, [sp, #20]
   88872:	e006      	b.n	88882 <_vfiprintf_r+0x722>
   88874:	f101 0c02 	add.w	ip, r1, #2
   88878:	4619      	mov	r1, r3
   8887a:	3008      	adds	r0, #8
   8887c:	3c10      	subs	r4, #16
   8887e:	2c10      	cmp	r4, #16
   88880:	dd1a      	ble.n	888b8 <_vfiprintf_r+0x758>
   88882:	2710      	movs	r7, #16
   88884:	1c4b      	adds	r3, r1, #1
   88886:	3210      	adds	r2, #16
   88888:	2b07      	cmp	r3, #7
   8888a:	9210      	str	r2, [sp, #64]	; 0x40
   8888c:	6006      	str	r6, [r0, #0]
   8888e:	6047      	str	r7, [r0, #4]
   88890:	930f      	str	r3, [sp, #60]	; 0x3c
   88892:	ddef      	ble.n	88874 <_vfiprintf_r+0x714>
   88894:	2a00      	cmp	r2, #0
   88896:	d07b      	beq.n	88990 <_vfiprintf_r+0x830>
   88898:	4659      	mov	r1, fp
   8889a:	4628      	mov	r0, r5
   8889c:	aa0e      	add	r2, sp, #56	; 0x38
   8889e:	f7ff fc23 	bl	880e8 <__sprint_r.part.0>
   888a2:	2800      	cmp	r0, #0
   888a4:	f47f adf6 	bne.w	88494 <_vfiprintf_r+0x334>
   888a8:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   888ac:	3c10      	subs	r4, #16
   888ae:	2c10      	cmp	r4, #16
   888b0:	a811      	add	r0, sp, #68	; 0x44
   888b2:	f101 0c01 	add.w	ip, r1, #1
   888b6:	dce4      	bgt.n	88882 <_vfiprintf_r+0x722>
   888b8:	4645      	mov	r5, r8
   888ba:	46c8      	mov	r8, r9
   888bc:	46b1      	mov	r9, r6
   888be:	4656      	mov	r6, sl
   888c0:	4682      	mov	sl, r0
   888c2:	9f06      	ldr	r7, [sp, #24]
   888c4:	4422      	add	r2, r4
   888c6:	f1bc 0f07 	cmp.w	ip, #7
   888ca:	e9ca 9400 	strd	r9, r4, [sl]
   888ce:	9210      	str	r2, [sp, #64]	; 0x40
   888d0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   888d4:	f340 817e 	ble.w	88bd4 <_vfiprintf_r+0xa74>
   888d8:	2a00      	cmp	r2, #0
   888da:	f000 825c 	beq.w	88d96 <_vfiprintf_r+0xc36>
   888de:	4659      	mov	r1, fp
   888e0:	9805      	ldr	r0, [sp, #20]
   888e2:	aa0e      	add	r2, sp, #56	; 0x38
   888e4:	f7ff fc00 	bl	880e8 <__sprint_r.part.0>
   888e8:	2800      	cmp	r0, #0
   888ea:	f47f add3 	bne.w	88494 <_vfiprintf_r+0x334>
   888ee:	e9dd 3400 	ldrd	r3, r4, [sp]
   888f2:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   888f6:	1b1c      	subs	r4, r3, r4
   888f8:	2c00      	cmp	r4, #0
   888fa:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888fe:	f101 0001 	add.w	r0, r1, #1
   88902:	f77f ae2d 	ble.w	88560 <_vfiprintf_r+0x400>
   88906:	2c10      	cmp	r4, #16
   88908:	f8df 9188 	ldr.w	r9, [pc, #392]	; 88a94 <_vfiprintf_r+0x934>
   8890c:	dd2f      	ble.n	8896e <_vfiprintf_r+0x80e>
   8890e:	46d4      	mov	ip, sl
   88910:	46b2      	mov	sl, r6
   88912:	464e      	mov	r6, r9
   88914:	46c1      	mov	r9, r8
   88916:	46a8      	mov	r8, r5
   88918:	9d05      	ldr	r5, [sp, #20]
   8891a:	e006      	b.n	8892a <_vfiprintf_r+0x7ca>
   8891c:	1c88      	adds	r0, r1, #2
   8891e:	4619      	mov	r1, r3
   88920:	f10c 0c08 	add.w	ip, ip, #8
   88924:	3c10      	subs	r4, #16
   88926:	2c10      	cmp	r4, #16
   88928:	dd1c      	ble.n	88964 <_vfiprintf_r+0x804>
   8892a:	2010      	movs	r0, #16
   8892c:	1c4b      	adds	r3, r1, #1
   8892e:	3210      	adds	r2, #16
   88930:	2b07      	cmp	r3, #7
   88932:	9210      	str	r2, [sp, #64]	; 0x40
   88934:	f8cc 6000 	str.w	r6, [ip]
   88938:	f8cc 0004 	str.w	r0, [ip, #4]
   8893c:	930f      	str	r3, [sp, #60]	; 0x3c
   8893e:	dded      	ble.n	8891c <_vfiprintf_r+0x7bc>
   88940:	b30a      	cbz	r2, 88986 <_vfiprintf_r+0x826>
   88942:	4659      	mov	r1, fp
   88944:	4628      	mov	r0, r5
   88946:	aa0e      	add	r2, sp, #56	; 0x38
   88948:	f7ff fbce 	bl	880e8 <__sprint_r.part.0>
   8894c:	2800      	cmp	r0, #0
   8894e:	f47f ada1 	bne.w	88494 <_vfiprintf_r+0x334>
   88952:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88956:	3c10      	subs	r4, #16
   88958:	2c10      	cmp	r4, #16
   8895a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8895e:	f101 0001 	add.w	r0, r1, #1
   88962:	dce2      	bgt.n	8892a <_vfiprintf_r+0x7ca>
   88964:	4645      	mov	r5, r8
   88966:	46c8      	mov	r8, r9
   88968:	46b1      	mov	r9, r6
   8896a:	4656      	mov	r6, sl
   8896c:	46e2      	mov	sl, ip
   8896e:	4422      	add	r2, r4
   88970:	2807      	cmp	r0, #7
   88972:	e9ca 9400 	strd	r9, r4, [sl]
   88976:	9210      	str	r2, [sp, #64]	; 0x40
   88978:	900f      	str	r0, [sp, #60]	; 0x3c
   8897a:	f300 80d3 	bgt.w	88b24 <_vfiprintf_r+0x9c4>
   8897e:	f10a 0a08 	add.w	sl, sl, #8
   88982:	3001      	adds	r0, #1
   88984:	e5ec      	b.n	88560 <_vfiprintf_r+0x400>
   88986:	2001      	movs	r0, #1
   88988:	4611      	mov	r1, r2
   8898a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8898e:	e7c9      	b.n	88924 <_vfiprintf_r+0x7c4>
   88990:	f04f 0c01 	mov.w	ip, #1
   88994:	4611      	mov	r1, r2
   88996:	a811      	add	r0, sp, #68	; 0x44
   88998:	e770      	b.n	8887c <_vfiprintf_r+0x71c>
   8899a:	2a00      	cmp	r2, #0
   8899c:	f000 80d3 	beq.w	88b46 <_vfiprintf_r+0x9e6>
   889a0:	4659      	mov	r1, fp
   889a2:	9805      	ldr	r0, [sp, #20]
   889a4:	aa0e      	add	r2, sp, #56	; 0x38
   889a6:	f7ff fb9f 	bl	880e8 <__sprint_r.part.0>
   889aa:	2800      	cmp	r0, #0
   889ac:	f47f ad72 	bne.w	88494 <_vfiprintf_r+0x334>
   889b0:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   889b4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   889b8:	1c48      	adds	r0, r1, #1
   889ba:	e5ac      	b.n	88516 <_vfiprintf_r+0x3b6>
   889bc:	2202      	movs	r2, #2
   889be:	2001      	movs	r0, #1
   889c0:	ab0d      	add	r3, sp, #52	; 0x34
   889c2:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   889c6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   889ca:	4601      	mov	r1, r0
   889cc:	f10a 0a08 	add.w	sl, sl, #8
   889d0:	1c48      	adds	r0, r1, #1
   889d2:	e5bb      	b.n	8854c <_vfiprintf_r+0x3ec>
   889d4:	2c10      	cmp	r4, #16
   889d6:	f340 8214 	ble.w	88e02 <_vfiprintf_r+0xca2>
   889da:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   889de:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 88a98 <_vfiprintf_r+0x938>
   889e2:	46d4      	mov	ip, sl
   889e4:	46b2      	mov	sl, r6
   889e6:	464e      	mov	r6, r9
   889e8:	46c1      	mov	r9, r8
   889ea:	46a8      	mov	r8, r5
   889ec:	9d05      	ldr	r5, [sp, #20]
   889ee:	e006      	b.n	889fe <_vfiprintf_r+0x89e>
   889f0:	1c99      	adds	r1, r3, #2
   889f2:	4603      	mov	r3, r0
   889f4:	f10c 0c08 	add.w	ip, ip, #8
   889f8:	3c10      	subs	r4, #16
   889fa:	2c10      	cmp	r4, #16
   889fc:	dd1c      	ble.n	88a38 <_vfiprintf_r+0x8d8>
   889fe:	2110      	movs	r1, #16
   88a00:	1c58      	adds	r0, r3, #1
   88a02:	3210      	adds	r2, #16
   88a04:	2807      	cmp	r0, #7
   88a06:	9210      	str	r2, [sp, #64]	; 0x40
   88a08:	f8cc 6000 	str.w	r6, [ip]
   88a0c:	f8cc 1004 	str.w	r1, [ip, #4]
   88a10:	900f      	str	r0, [sp, #60]	; 0x3c
   88a12:	dded      	ble.n	889f0 <_vfiprintf_r+0x890>
   88a14:	b30a      	cbz	r2, 88a5a <_vfiprintf_r+0x8fa>
   88a16:	4659      	mov	r1, fp
   88a18:	4628      	mov	r0, r5
   88a1a:	aa0e      	add	r2, sp, #56	; 0x38
   88a1c:	f7ff fb64 	bl	880e8 <__sprint_r.part.0>
   88a20:	2800      	cmp	r0, #0
   88a22:	f47f ad37 	bne.w	88494 <_vfiprintf_r+0x334>
   88a26:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   88a2a:	3c10      	subs	r4, #16
   88a2c:	2c10      	cmp	r4, #16
   88a2e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88a32:	f103 0101 	add.w	r1, r3, #1
   88a36:	dce2      	bgt.n	889fe <_vfiprintf_r+0x89e>
   88a38:	4645      	mov	r5, r8
   88a3a:	46c8      	mov	r8, r9
   88a3c:	46b1      	mov	r9, r6
   88a3e:	4656      	mov	r6, sl
   88a40:	46e2      	mov	sl, ip
   88a42:	4422      	add	r2, r4
   88a44:	2907      	cmp	r1, #7
   88a46:	e9ca 9400 	strd	r9, r4, [sl]
   88a4a:	9210      	str	r2, [sp, #64]	; 0x40
   88a4c:	910f      	str	r1, [sp, #60]	; 0x3c
   88a4e:	f300 80a8 	bgt.w	88ba2 <_vfiprintf_r+0xa42>
   88a52:	f10a 0a08 	add.w	sl, sl, #8
   88a56:	1c48      	adds	r0, r1, #1
   88a58:	e54b      	b.n	884f2 <_vfiprintf_r+0x392>
   88a5a:	4613      	mov	r3, r2
   88a5c:	2101      	movs	r1, #1
   88a5e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88a62:	e7c9      	b.n	889f8 <_vfiprintf_r+0x898>
   88a64:	0778      	lsls	r0, r7, #29
   88a66:	920f      	str	r2, [sp, #60]	; 0x3c
   88a68:	d554      	bpl.n	88b14 <_vfiprintf_r+0x9b4>
   88a6a:	9b02      	ldr	r3, [sp, #8]
   88a6c:	1b5c      	subs	r4, r3, r5
   88a6e:	2c00      	cmp	r4, #0
   88a70:	dd50      	ble.n	88b14 <_vfiprintf_r+0x9b4>
   88a72:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88a76:	2c10      	cmp	r4, #16
   88a78:	f340 81d7 	ble.w	88e2a <_vfiprintf_r+0xcca>
   88a7c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 88a98 <_vfiprintf_r+0x938>
   88a80:	2610      	movs	r6, #16
   88a82:	464b      	mov	r3, r9
   88a84:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88a86:	46a9      	mov	r9, r5
   88a88:	9f05      	ldr	r7, [sp, #20]
   88a8a:	461d      	mov	r5, r3
   88a8c:	e00d      	b.n	88aaa <_vfiprintf_r+0x94a>
   88a8e:	bf00      	nop
   88a90:	0008cfd4 	.word	0x0008cfd4
   88a94:	0008d038 	.word	0x0008d038
   88a98:	0008d028 	.word	0x0008d028
   88a9c:	1c88      	adds	r0, r1, #2
   88a9e:	4619      	mov	r1, r3
   88aa0:	f10a 0a08 	add.w	sl, sl, #8
   88aa4:	3c10      	subs	r4, #16
   88aa6:	2c10      	cmp	r4, #16
   88aa8:	dd19      	ble.n	88ade <_vfiprintf_r+0x97e>
   88aaa:	1c4b      	adds	r3, r1, #1
   88aac:	3210      	adds	r2, #16
   88aae:	2b07      	cmp	r3, #7
   88ab0:	e9ca 5600 	strd	r5, r6, [sl]
   88ab4:	9210      	str	r2, [sp, #64]	; 0x40
   88ab6:	930f      	str	r3, [sp, #60]	; 0x3c
   88ab8:	ddf0      	ble.n	88a9c <_vfiprintf_r+0x93c>
   88aba:	b332      	cbz	r2, 88b0a <_vfiprintf_r+0x9aa>
   88abc:	4659      	mov	r1, fp
   88abe:	4638      	mov	r0, r7
   88ac0:	aa0e      	add	r2, sp, #56	; 0x38
   88ac2:	f7ff fb11 	bl	880e8 <__sprint_r.part.0>
   88ac6:	2800      	cmp	r0, #0
   88ac8:	f47f ace4 	bne.w	88494 <_vfiprintf_r+0x334>
   88acc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88ad0:	3c10      	subs	r4, #16
   88ad2:	2c10      	cmp	r4, #16
   88ad4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88ad8:	f101 0001 	add.w	r0, r1, #1
   88adc:	dce5      	bgt.n	88aaa <_vfiprintf_r+0x94a>
   88ade:	462b      	mov	r3, r5
   88ae0:	464d      	mov	r5, r9
   88ae2:	4699      	mov	r9, r3
   88ae4:	4422      	add	r2, r4
   88ae6:	2807      	cmp	r0, #7
   88ae8:	e9ca 9400 	strd	r9, r4, [sl]
   88aec:	9210      	str	r2, [sp, #64]	; 0x40
   88aee:	900f      	str	r0, [sp, #60]	; 0x3c
   88af0:	f77f ad53 	ble.w	8859a <_vfiprintf_r+0x43a>
   88af4:	b172      	cbz	r2, 88b14 <_vfiprintf_r+0x9b4>
   88af6:	4659      	mov	r1, fp
   88af8:	9805      	ldr	r0, [sp, #20]
   88afa:	aa0e      	add	r2, sp, #56	; 0x38
   88afc:	f7ff faf4 	bl	880e8 <__sprint_r.part.0>
   88b00:	2800      	cmp	r0, #0
   88b02:	f47f acc7 	bne.w	88494 <_vfiprintf_r+0x334>
   88b06:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88b08:	e547      	b.n	8859a <_vfiprintf_r+0x43a>
   88b0a:	2001      	movs	r0, #1
   88b0c:	4611      	mov	r1, r2
   88b0e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b12:	e7c7      	b.n	88aa4 <_vfiprintf_r+0x944>
   88b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88b18:	42aa      	cmp	r2, r5
   88b1a:	bfac      	ite	ge
   88b1c:	189b      	addge	r3, r3, r2
   88b1e:	195b      	addlt	r3, r3, r5
   88b20:	9303      	str	r3, [sp, #12]
   88b22:	e544      	b.n	885ae <_vfiprintf_r+0x44e>
   88b24:	2a00      	cmp	r2, #0
   88b26:	f43f ae88 	beq.w	8883a <_vfiprintf_r+0x6da>
   88b2a:	4659      	mov	r1, fp
   88b2c:	9805      	ldr	r0, [sp, #20]
   88b2e:	aa0e      	add	r2, sp, #56	; 0x38
   88b30:	f7ff fada 	bl	880e8 <__sprint_r.part.0>
   88b34:	2800      	cmp	r0, #0
   88b36:	f47f acad 	bne.w	88494 <_vfiprintf_r+0x334>
   88b3a:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   88b3e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b42:	3001      	adds	r0, #1
   88b44:	e50c      	b.n	88560 <_vfiprintf_r+0x400>
   88b46:	9b07      	ldr	r3, [sp, #28]
   88b48:	2b00      	cmp	r3, #0
   88b4a:	d16b      	bne.n	88c24 <_vfiprintf_r+0xac4>
   88b4c:	2001      	movs	r0, #1
   88b4e:	4611      	mov	r1, r2
   88b50:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b54:	e4fa      	b.n	8854c <_vfiprintf_r+0x3ec>
   88b56:	920f      	str	r2, [sp, #60]	; 0x3c
   88b58:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b5c:	e481      	b.n	88462 <_vfiprintf_r+0x302>
   88b5e:	9b00      	ldr	r3, [sp, #0]
   88b60:	2b00      	cmp	r3, #0
   88b62:	f47f ac05 	bne.w	88370 <_vfiprintf_r+0x210>
   88b66:	464f      	mov	r7, r9
   88b68:	2300      	movs	r3, #0
   88b6a:	ae3a      	add	r6, sp, #232	; 0xe8
   88b6c:	9300      	str	r3, [sp, #0]
   88b6e:	9301      	str	r3, [sp, #4]
   88b70:	e406      	b.n	88380 <_vfiprintf_r+0x220>
   88b72:	f854 2b04 	ldr.w	r2, [r4], #4
   88b76:	f019 0f10 	tst.w	r9, #16
   88b7a:	f04f 0301 	mov.w	r3, #1
   88b7e:	9404      	str	r4, [sp, #16]
   88b80:	d132      	bne.n	88be8 <_vfiprintf_r+0xa88>
   88b82:	f019 0f40 	tst.w	r9, #64	; 0x40
   88b86:	d02b      	beq.n	88be0 <_vfiprintf_r+0xa80>
   88b88:	2500      	movs	r5, #0
   88b8a:	b294      	uxth	r4, r2
   88b8c:	e439      	b.n	88402 <_vfiprintf_r+0x2a2>
   88b8e:	232d      	movs	r3, #45	; 0x2d
   88b90:	4264      	negs	r4, r4
   88b92:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88b96:	46b9      	mov	r9, r7
   88b98:	f04f 0301 	mov.w	r3, #1
   88b9c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   88ba0:	e433      	b.n	8840a <_vfiprintf_r+0x2aa>
   88ba2:	2a00      	cmp	r2, #0
   88ba4:	d06f      	beq.n	88c86 <_vfiprintf_r+0xb26>
   88ba6:	4659      	mov	r1, fp
   88ba8:	9805      	ldr	r0, [sp, #20]
   88baa:	aa0e      	add	r2, sp, #56	; 0x38
   88bac:	f7ff fa9c 	bl	880e8 <__sprint_r.part.0>
   88bb0:	2800      	cmp	r0, #0
   88bb2:	f47f ac6f 	bne.w	88494 <_vfiprintf_r+0x334>
   88bb6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88bba:	e497      	b.n	884ec <_vfiprintf_r+0x38c>
   88bbc:	ae3a      	add	r6, sp, #232	; 0xe8
   88bbe:	f7ff bbdf 	b.w	88380 <_vfiprintf_r+0x220>
   88bc2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88bc6:	f001 fed9 	bl	8a97c <__retarget_lock_acquire_recursive>
   88bca:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   88bce:	b28a      	uxth	r2, r1
   88bd0:	f7ff badd 	b.w	8818e <_vfiprintf_r+0x2e>
   88bd4:	4661      	mov	r1, ip
   88bd6:	f10a 0a08 	add.w	sl, sl, #8
   88bda:	f10c 0001 	add.w	r0, ip, #1
   88bde:	e4b9      	b.n	88554 <_vfiprintf_r+0x3f4>
   88be0:	f419 7f00 	tst.w	r9, #512	; 0x200
   88be4:	f040 80ef 	bne.w	88dc6 <_vfiprintf_r+0xc66>
   88be8:	4614      	mov	r4, r2
   88bea:	2500      	movs	r5, #0
   88bec:	e409      	b.n	88402 <_vfiprintf_r+0x2a2>
   88bee:	05be      	lsls	r6, r7, #22
   88bf0:	f100 80f7 	bmi.w	88de2 <_vfiprintf_r+0xc82>
   88bf4:	461c      	mov	r4, r3
   88bf6:	2500      	movs	r5, #0
   88bf8:	e400      	b.n	883fc <_vfiprintf_r+0x29c>
   88bfa:	05ba      	lsls	r2, r7, #22
   88bfc:	f100 80ea 	bmi.w	88dd4 <_vfiprintf_r+0xc74>
   88c00:	17e5      	asrs	r5, r4, #31
   88c02:	9304      	str	r3, [sp, #16]
   88c04:	4622      	mov	r2, r4
   88c06:	462b      	mov	r3, r5
   88c08:	f7ff bb9e 	b.w	88348 <_vfiprintf_r+0x1e8>
   88c0c:	9b03      	ldr	r3, [sp, #12]
   88c0e:	9c04      	ldr	r4, [sp, #16]
   88c10:	17dd      	asrs	r5, r3, #31
   88c12:	461a      	mov	r2, r3
   88c14:	462b      	mov	r3, r5
   88c16:	f854 1b04 	ldr.w	r1, [r4], #4
   88c1a:	e9c1 2300 	strd	r2, r3, [r1]
   88c1e:	9404      	str	r4, [sp, #16]
   88c20:	f7ff badc 	b.w	881dc <_vfiprintf_r+0x7c>
   88c24:	2202      	movs	r2, #2
   88c26:	ab0d      	add	r3, sp, #52	; 0x34
   88c28:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   88c2c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88c30:	e6cc      	b.n	889cc <_vfiprintf_r+0x86c>
   88c32:	46b9      	mov	r9, r7
   88c34:	e598      	b.n	88768 <_vfiprintf_r+0x608>
   88c36:	4a90      	ldr	r2, [pc, #576]	; (88e78 <_vfiprintf_r+0xd18>)
   88c38:	9208      	str	r2, [sp, #32]
   88c3a:	06bd      	lsls	r5, r7, #26
   88c3c:	9c04      	ldr	r4, [sp, #16]
   88c3e:	d530      	bpl.n	88ca2 <_vfiprintf_r+0xb42>
   88c40:	3407      	adds	r4, #7
   88c42:	f024 0207 	bic.w	r2, r4, #7
   88c46:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   88c4a:	9204      	str	r2, [sp, #16]
   88c4c:	07fe      	lsls	r6, r7, #31
   88c4e:	d509      	bpl.n	88c64 <_vfiprintf_r+0xb04>
   88c50:	ea54 0205 	orrs.w	r2, r4, r5
   88c54:	d006      	beq.n	88c64 <_vfiprintf_r+0xb04>
   88c56:	2230      	movs	r2, #48	; 0x30
   88c58:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   88c5c:	f047 0702 	orr.w	r7, r7, #2
   88c60:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   88c64:	2302      	movs	r3, #2
   88c66:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88c6a:	f7ff bbca 	b.w	88402 <_vfiprintf_r+0x2a2>
   88c6e:	4a83      	ldr	r2, [pc, #524]	; (88e7c <_vfiprintf_r+0xd1c>)
   88c70:	9208      	str	r2, [sp, #32]
   88c72:	e7e2      	b.n	88c3a <_vfiprintf_r+0xada>
   88c74:	4630      	mov	r0, r6
   88c76:	f7fd fc2d 	bl	864d4 <strlen>
   88c7a:	2300      	movs	r3, #0
   88c7c:	9404      	str	r4, [sp, #16]
   88c7e:	9001      	str	r0, [sp, #4]
   88c80:	9300      	str	r3, [sp, #0]
   88c82:	f7ff bb7d 	b.w	88380 <_vfiprintf_r+0x220>
   88c86:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   88c8a:	2900      	cmp	r1, #0
   88c8c:	f040 8089 	bne.w	88da2 <_vfiprintf_r+0xc42>
   88c90:	9b07      	ldr	r3, [sp, #28]
   88c92:	2b00      	cmp	r3, #0
   88c94:	f47f ae92 	bne.w	889bc <_vfiprintf_r+0x85c>
   88c98:	4611      	mov	r1, r2
   88c9a:	2001      	movs	r0, #1
   88c9c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88ca0:	e458      	b.n	88554 <_vfiprintf_r+0x3f4>
   88ca2:	f854 2b04 	ldr.w	r2, [r4], #4
   88ca6:	9404      	str	r4, [sp, #16]
   88ca8:	06fc      	lsls	r4, r7, #27
   88caa:	d407      	bmi.n	88cbc <_vfiprintf_r+0xb5c>
   88cac:	0678      	lsls	r0, r7, #25
   88cae:	d502      	bpl.n	88cb6 <_vfiprintf_r+0xb56>
   88cb0:	2500      	movs	r5, #0
   88cb2:	b294      	uxth	r4, r2
   88cb4:	e7ca      	b.n	88c4c <_vfiprintf_r+0xaec>
   88cb6:	05b9      	lsls	r1, r7, #22
   88cb8:	f100 8089 	bmi.w	88dce <_vfiprintf_r+0xc6e>
   88cbc:	4614      	mov	r4, r2
   88cbe:	2500      	movs	r5, #0
   88cc0:	e7c4      	b.n	88c4c <_vfiprintf_r+0xaec>
   88cc2:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   88cc6:	f8cd 9004 	str.w	r9, [sp, #4]
   88cca:	f8cd 8018 	str.w	r8, [sp, #24]
   88cce:	2700      	movs	r7, #0
   88cd0:	4698      	mov	r8, r3
   88cd2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   88cd6:	ae3a      	add	r6, sp, #232	; 0xe8
   88cd8:	e00b      	b.n	88cf2 <_vfiprintf_r+0xb92>
   88cda:	220a      	movs	r2, #10
   88cdc:	2300      	movs	r3, #0
   88cde:	4620      	mov	r0, r4
   88ce0:	4629      	mov	r1, r5
   88ce2:	f003 ffaf 	bl	8cc44 <__aeabi_uldivmod>
   88ce6:	2d00      	cmp	r5, #0
   88ce8:	bf08      	it	eq
   88cea:	2c0a      	cmpeq	r4, #10
   88cec:	d319      	bcc.n	88d22 <_vfiprintf_r+0xbc2>
   88cee:	4604      	mov	r4, r0
   88cf0:	460d      	mov	r5, r1
   88cf2:	220a      	movs	r2, #10
   88cf4:	2300      	movs	r3, #0
   88cf6:	4620      	mov	r0, r4
   88cf8:	4629      	mov	r1, r5
   88cfa:	f003 ffa3 	bl	8cc44 <__aeabi_uldivmod>
   88cfe:	3230      	adds	r2, #48	; 0x30
   88d00:	f806 2c01 	strb.w	r2, [r6, #-1]
   88d04:	3701      	adds	r7, #1
   88d06:	3e01      	subs	r6, #1
   88d08:	f1b8 0f00 	cmp.w	r8, #0
   88d0c:	d0e5      	beq.n	88cda <_vfiprintf_r+0xb7a>
   88d0e:	f899 3000 	ldrb.w	r3, [r9]
   88d12:	42bb      	cmp	r3, r7
   88d14:	d1e1      	bne.n	88cda <_vfiprintf_r+0xb7a>
   88d16:	2fff      	cmp	r7, #255	; 0xff
   88d18:	d0df      	beq.n	88cda <_vfiprintf_r+0xb7a>
   88d1a:	2d00      	cmp	r5, #0
   88d1c:	bf08      	it	eq
   88d1e:	2c0a      	cmpeq	r4, #10
   88d20:	d225      	bcs.n	88d6e <_vfiprintf_r+0xc0e>
   88d22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   88d26:	ab3a      	add	r3, sp, #232	; 0xe8
   88d28:	f8dd 9004 	ldr.w	r9, [sp, #4]
   88d2c:	1b9b      	subs	r3, r3, r6
   88d2e:	464f      	mov	r7, r9
   88d30:	f8dd 8018 	ldr.w	r8, [sp, #24]
   88d34:	9301      	str	r3, [sp, #4]
   88d36:	f7ff bb23 	b.w	88380 <_vfiprintf_r+0x220>
   88d3a:	46b9      	mov	r9, r7
   88d3c:	f7ff bb13 	b.w	88366 <_vfiprintf_r+0x206>
   88d40:	2b01      	cmp	r3, #1
   88d42:	46b9      	mov	r9, r7
   88d44:	f47f ad44 	bne.w	887d0 <_vfiprintf_r+0x670>
   88d48:	f7ff bb12 	b.w	88370 <_vfiprintf_r+0x210>
   88d4c:	9c04      	ldr	r4, [sp, #16]
   88d4e:	9a03      	ldr	r2, [sp, #12]
   88d50:	f854 3b04 	ldr.w	r3, [r4], #4
   88d54:	601a      	str	r2, [r3, #0]
   88d56:	9404      	str	r4, [sp, #16]
   88d58:	f7ff ba40 	b.w	881dc <_vfiprintf_r+0x7c>
   88d5c:	9d00      	ldr	r5, [sp, #0]
   88d5e:	4e48      	ldr	r6, [pc, #288]	; (88e80 <_vfiprintf_r+0xd20>)
   88d60:	2d06      	cmp	r5, #6
   88d62:	bf28      	it	cs
   88d64:	2506      	movcs	r5, #6
   88d66:	9404      	str	r4, [sp, #16]
   88d68:	9501      	str	r5, [sp, #4]
   88d6a:	f7ff bbaf 	b.w	884cc <_vfiprintf_r+0x36c>
   88d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88d70:	990a      	ldr	r1, [sp, #40]	; 0x28
   88d72:	1af6      	subs	r6, r6, r3
   88d74:	461a      	mov	r2, r3
   88d76:	4630      	mov	r0, r6
   88d78:	f7fd fbda 	bl	86530 <strncpy>
   88d7c:	f899 3001 	ldrb.w	r3, [r9, #1]
   88d80:	b10b      	cbz	r3, 88d86 <_vfiprintf_r+0xc26>
   88d82:	f109 0901 	add.w	r9, r9, #1
   88d86:	220a      	movs	r2, #10
   88d88:	2300      	movs	r3, #0
   88d8a:	4620      	mov	r0, r4
   88d8c:	4629      	mov	r1, r5
   88d8e:	f003 ff59 	bl	8cc44 <__aeabi_uldivmod>
   88d92:	2700      	movs	r7, #0
   88d94:	e7ab      	b.n	88cee <_vfiprintf_r+0xb8e>
   88d96:	2001      	movs	r0, #1
   88d98:	4611      	mov	r1, r2
   88d9a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88d9e:	f7ff bbd9 	b.w	88554 <_vfiprintf_r+0x3f4>
   88da2:	2201      	movs	r2, #1
   88da4:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   88da8:	4610      	mov	r0, r2
   88daa:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   88dae:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88db2:	f7ff bbac 	b.w	8850e <_vfiprintf_r+0x3ae>
   88db6:	9c04      	ldr	r4, [sp, #16]
   88db8:	9a03      	ldr	r2, [sp, #12]
   88dba:	f854 3b04 	ldr.w	r3, [r4], #4
   88dbe:	801a      	strh	r2, [r3, #0]
   88dc0:	9404      	str	r4, [sp, #16]
   88dc2:	f7ff ba0b 	b.w	881dc <_vfiprintf_r+0x7c>
   88dc6:	2500      	movs	r5, #0
   88dc8:	b2d4      	uxtb	r4, r2
   88dca:	f7ff bb1a 	b.w	88402 <_vfiprintf_r+0x2a2>
   88dce:	2500      	movs	r5, #0
   88dd0:	b2d4      	uxtb	r4, r2
   88dd2:	e73b      	b.n	88c4c <_vfiprintf_r+0xaec>
   88dd4:	b264      	sxtb	r4, r4
   88dd6:	17e5      	asrs	r5, r4, #31
   88dd8:	9304      	str	r3, [sp, #16]
   88dda:	4622      	mov	r2, r4
   88ddc:	462b      	mov	r3, r5
   88dde:	f7ff bab3 	b.w	88348 <_vfiprintf_r+0x1e8>
   88de2:	2500      	movs	r5, #0
   88de4:	b2dc      	uxtb	r4, r3
   88de6:	f7ff bb09 	b.w	883fc <_vfiprintf_r+0x29c>
   88dea:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88dee:	f001 fdc7 	bl	8a980 <__retarget_lock_release_recursive>
   88df2:	f7ff baec 	b.w	883ce <_vfiprintf_r+0x26e>
   88df6:	9b00      	ldr	r3, [sp, #0]
   88df8:	9404      	str	r4, [sp, #16]
   88dfa:	9301      	str	r3, [sp, #4]
   88dfc:	9000      	str	r0, [sp, #0]
   88dfe:	f7ff babf 	b.w	88380 <_vfiprintf_r+0x220>
   88e02:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88e06:	f8df 907c 	ldr.w	r9, [pc, #124]	; 88e84 <_vfiprintf_r+0xd24>
   88e0a:	3101      	adds	r1, #1
   88e0c:	e619      	b.n	88a42 <_vfiprintf_r+0x8e2>
   88e0e:	2200      	movs	r2, #0
   88e10:	9200      	str	r2, [sp, #0]
   88e12:	f7ff ba09 	b.w	88228 <_vfiprintf_r+0xc8>
   88e16:	4659      	mov	r1, fp
   88e18:	9805      	ldr	r0, [sp, #20]
   88e1a:	aa0e      	add	r2, sp, #56	; 0x38
   88e1c:	f7ff f964 	bl	880e8 <__sprint_r.part.0>
   88e20:	2800      	cmp	r0, #0
   88e22:	f43f abd2 	beq.w	885ca <_vfiprintf_r+0x46a>
   88e26:	f7ff bb36 	b.w	88496 <_vfiprintf_r+0x336>
   88e2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   88e2c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 88e84 <_vfiprintf_r+0xd24>
   88e30:	3001      	adds	r0, #1
   88e32:	e657      	b.n	88ae4 <_vfiprintf_r+0x984>
   88e34:	4684      	mov	ip, r0
   88e36:	f8df 9050 	ldr.w	r9, [pc, #80]	; 88e88 <_vfiprintf_r+0xd28>
   88e3a:	e543      	b.n	888c4 <_vfiprintf_r+0x764>
   88e3c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88e40:	07db      	lsls	r3, r3, #31
   88e42:	d407      	bmi.n	88e54 <_vfiprintf_r+0xcf4>
   88e44:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88e48:	059f      	lsls	r7, r3, #22
   88e4a:	d403      	bmi.n	88e54 <_vfiprintf_r+0xcf4>
   88e4c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88e50:	f001 fd96 	bl	8a980 <__retarget_lock_release_recursive>
   88e54:	f04f 33ff 	mov.w	r3, #4294967295
   88e58:	9303      	str	r3, [sp, #12]
   88e5a:	f7ff bb27 	b.w	884ac <_vfiprintf_r+0x34c>
   88e5e:	9a04      	ldr	r2, [sp, #16]
   88e60:	f898 3001 	ldrb.w	r3, [r8, #1]
   88e64:	f852 0b04 	ldr.w	r0, [r2], #4
   88e68:	4688      	mov	r8, r1
   88e6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   88e6e:	9000      	str	r0, [sp, #0]
   88e70:	9204      	str	r2, [sp, #16]
   88e72:	f7ff b9d7 	b.w	88224 <_vfiprintf_r+0xc4>
   88e76:	bf00      	nop
   88e78:	0008cfe8 	.word	0x0008cfe8
   88e7c:	0008cfd4 	.word	0x0008cfd4
   88e80:	0008cffc 	.word	0x0008cffc
   88e84:	0008d028 	.word	0x0008d028
   88e88:	0008d038 	.word	0x0008d038

00088e8c <__sbprintf>:
   88e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   88e8e:	460c      	mov	r4, r1
   88e90:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   88e94:	f04f 0e00 	mov.w	lr, #0
   88e98:	4615      	mov	r5, r2
   88e9a:	4606      	mov	r6, r0
   88e9c:	461f      	mov	r7, r3
   88e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88ea0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   88ea4:	89e2      	ldrh	r2, [r4, #14]
   88ea6:	8989      	ldrh	r1, [r1, #12]
   88ea8:	9319      	str	r3, [sp, #100]	; 0x64
   88eaa:	69e3      	ldr	r3, [r4, #28]
   88eac:	f8ad 200e 	strh.w	r2, [sp, #14]
   88eb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   88eb2:	f021 0102 	bic.w	r1, r1, #2
   88eb6:	9307      	str	r3, [sp, #28]
   88eb8:	a816      	add	r0, sp, #88	; 0x58
   88eba:	ab1a      	add	r3, sp, #104	; 0x68
   88ebc:	f8ad 100c 	strh.w	r1, [sp, #12]
   88ec0:	f8cd e018 	str.w	lr, [sp, #24]
   88ec4:	9209      	str	r2, [sp, #36]	; 0x24
   88ec6:	9300      	str	r3, [sp, #0]
   88ec8:	9304      	str	r3, [sp, #16]
   88eca:	f8cd c008 	str.w	ip, [sp, #8]
   88ece:	f8cd c014 	str.w	ip, [sp, #20]
   88ed2:	f001 fd4f 	bl	8a974 <__retarget_lock_init_recursive>
   88ed6:	462a      	mov	r2, r5
   88ed8:	463b      	mov	r3, r7
   88eda:	4669      	mov	r1, sp
   88edc:	4630      	mov	r0, r6
   88ede:	f7ff f93f 	bl	88160 <_vfiprintf_r>
   88ee2:	1e05      	subs	r5, r0, #0
   88ee4:	db07      	blt.n	88ef6 <__sbprintf+0x6a>
   88ee6:	4630      	mov	r0, r6
   88ee8:	4669      	mov	r1, sp
   88eea:	f001 f919 	bl	8a120 <_fflush_r>
   88eee:	2800      	cmp	r0, #0
   88ef0:	bf18      	it	ne
   88ef2:	f04f 35ff 	movne.w	r5, #4294967295
   88ef6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   88efa:	065b      	lsls	r3, r3, #25
   88efc:	d503      	bpl.n	88f06 <__sbprintf+0x7a>
   88efe:	89a3      	ldrh	r3, [r4, #12]
   88f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88f04:	81a3      	strh	r3, [r4, #12]
   88f06:	9816      	ldr	r0, [sp, #88]	; 0x58
   88f08:	f001 fd36 	bl	8a978 <__retarget_lock_close_recursive>
   88f0c:	4628      	mov	r0, r5
   88f0e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   88f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00088f14 <__swsetup_r>:
   88f14:	b538      	push	{r3, r4, r5, lr}
   88f16:	4b32      	ldr	r3, [pc, #200]	; (88fe0 <__swsetup_r+0xcc>)
   88f18:	4605      	mov	r5, r0
   88f1a:	6818      	ldr	r0, [r3, #0]
   88f1c:	460c      	mov	r4, r1
   88f1e:	b110      	cbz	r0, 88f26 <__swsetup_r+0x12>
   88f20:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88f22:	2b00      	cmp	r3, #0
   88f24:	d03c      	beq.n	88fa0 <__swsetup_r+0x8c>
   88f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88f2a:	0718      	lsls	r0, r3, #28
   88f2c:	b29a      	uxth	r2, r3
   88f2e:	d50c      	bpl.n	88f4a <__swsetup_r+0x36>
   88f30:	6921      	ldr	r1, [r4, #16]
   88f32:	b1a9      	cbz	r1, 88f60 <__swsetup_r+0x4c>
   88f34:	f012 0001 	ands.w	r0, r2, #1
   88f38:	d022      	beq.n	88f80 <__swsetup_r+0x6c>
   88f3a:	2500      	movs	r5, #0
   88f3c:	6960      	ldr	r0, [r4, #20]
   88f3e:	60a5      	str	r5, [r4, #8]
   88f40:	4240      	negs	r0, r0
   88f42:	61a0      	str	r0, [r4, #24]
   88f44:	b311      	cbz	r1, 88f8c <__swsetup_r+0x78>
   88f46:	2000      	movs	r0, #0
   88f48:	bd38      	pop	{r3, r4, r5, pc}
   88f4a:	06d1      	lsls	r1, r2, #27
   88f4c:	d53f      	bpl.n	88fce <__swsetup_r+0xba>
   88f4e:	0752      	lsls	r2, r2, #29
   88f50:	d429      	bmi.n	88fa6 <__swsetup_r+0x92>
   88f52:	6921      	ldr	r1, [r4, #16]
   88f54:	f043 0308 	orr.w	r3, r3, #8
   88f58:	81a3      	strh	r3, [r4, #12]
   88f5a:	b29a      	uxth	r2, r3
   88f5c:	2900      	cmp	r1, #0
   88f5e:	d1e9      	bne.n	88f34 <__swsetup_r+0x20>
   88f60:	f402 7020 	and.w	r0, r2, #640	; 0x280
   88f64:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   88f68:	d0e4      	beq.n	88f34 <__swsetup_r+0x20>
   88f6a:	4628      	mov	r0, r5
   88f6c:	4621      	mov	r1, r4
   88f6e:	f001 fd37 	bl	8a9e0 <__smakebuf_r>
   88f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88f76:	6921      	ldr	r1, [r4, #16]
   88f78:	b29a      	uxth	r2, r3
   88f7a:	f012 0001 	ands.w	r0, r2, #1
   88f7e:	d1dc      	bne.n	88f3a <__swsetup_r+0x26>
   88f80:	0795      	lsls	r5, r2, #30
   88f82:	bf58      	it	pl
   88f84:	6960      	ldrpl	r0, [r4, #20]
   88f86:	60a0      	str	r0, [r4, #8]
   88f88:	2900      	cmp	r1, #0
   88f8a:	d1dc      	bne.n	88f46 <__swsetup_r+0x32>
   88f8c:	0612      	lsls	r2, r2, #24
   88f8e:	bf58      	it	pl
   88f90:	4608      	movpl	r0, r1
   88f92:	d5d9      	bpl.n	88f48 <__swsetup_r+0x34>
   88f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88f98:	f04f 30ff 	mov.w	r0, #4294967295
   88f9c:	81a3      	strh	r3, [r4, #12]
   88f9e:	bd38      	pop	{r3, r4, r5, pc}
   88fa0:	f001 f91a 	bl	8a1d8 <__sinit>
   88fa4:	e7bf      	b.n	88f26 <__swsetup_r+0x12>
   88fa6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88fa8:	b151      	cbz	r1, 88fc0 <__swsetup_r+0xac>
   88faa:	f104 0240 	add.w	r2, r4, #64	; 0x40
   88fae:	4291      	cmp	r1, r2
   88fb0:	d004      	beq.n	88fbc <__swsetup_r+0xa8>
   88fb2:	4628      	mov	r0, r5
   88fb4:	f001 fa34 	bl	8a420 <_free_r>
   88fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88fbc:	2200      	movs	r2, #0
   88fbe:	6322      	str	r2, [r4, #48]	; 0x30
   88fc0:	2200      	movs	r2, #0
   88fc2:	6921      	ldr	r1, [r4, #16]
   88fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   88fc8:	e9c4 1200 	strd	r1, r2, [r4]
   88fcc:	e7c2      	b.n	88f54 <__swsetup_r+0x40>
   88fce:	2209      	movs	r2, #9
   88fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88fd4:	602a      	str	r2, [r5, #0]
   88fd6:	f04f 30ff 	mov.w	r0, #4294967295
   88fda:	81a3      	strh	r3, [r4, #12]
   88fdc:	bd38      	pop	{r3, r4, r5, pc}
   88fde:	bf00      	nop
   88fe0:	20000470 	.word	0x20000470

00088fe4 <register_fini>:
   88fe4:	4b02      	ldr	r3, [pc, #8]	; (88ff0 <register_fini+0xc>)
   88fe6:	b113      	cbz	r3, 88fee <register_fini+0xa>
   88fe8:	4802      	ldr	r0, [pc, #8]	; (88ff4 <register_fini+0x10>)
   88fea:	f000 b805 	b.w	88ff8 <atexit>
   88fee:	4770      	bx	lr
   88ff0:	00000000 	.word	0x00000000
   88ff4:	0008a24d 	.word	0x0008a24d

00088ff8 <atexit>:
   88ff8:	2300      	movs	r3, #0
   88ffa:	4601      	mov	r1, r0
   88ffc:	461a      	mov	r2, r3
   88ffe:	4618      	mov	r0, r3
   89000:	f002 bfc4 	b.w	8bf8c <__register_exitproc>

00089004 <quorem>:
   89004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89008:	6903      	ldr	r3, [r0, #16]
   8900a:	690d      	ldr	r5, [r1, #16]
   8900c:	b083      	sub	sp, #12
   8900e:	42ab      	cmp	r3, r5
   89010:	f2c0 8084 	blt.w	8911c <quorem+0x118>
   89014:	3d01      	subs	r5, #1
   89016:	f101 0614 	add.w	r6, r1, #20
   8901a:	f100 0914 	add.w	r9, r0, #20
   8901e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   89022:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89026:	3301      	adds	r3, #1
   89028:	468e      	mov	lr, r1
   8902a:	00a9      	lsls	r1, r5, #2
   8902c:	9100      	str	r1, [sp, #0]
   8902e:	429a      	cmp	r2, r3
   89030:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   89034:	4682      	mov	sl, r0
   89036:	fbb2 f7f3 	udiv	r7, r2, r3
   8903a:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   8903e:	9101      	str	r1, [sp, #4]
   89040:	d337      	bcc.n	890b2 <quorem+0xae>
   89042:	2200      	movs	r2, #0
   89044:	46b4      	mov	ip, r6
   89046:	4614      	mov	r4, r2
   89048:	4648      	mov	r0, r9
   8904a:	f85c 3b04 	ldr.w	r3, [ip], #4
   8904e:	6801      	ldr	r1, [r0, #0]
   89050:	fa1f fb83 	uxth.w	fp, r3
   89054:	fb07 220b 	mla	r2, r7, fp, r2
   89058:	0c1b      	lsrs	r3, r3, #16
   8905a:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   8905e:	fb07 bb03 	mla	fp, r7, r3, fp
   89062:	b293      	uxth	r3, r2
   89064:	1ae3      	subs	r3, r4, r3
   89066:	b28a      	uxth	r2, r1
   89068:	fa1f f48b 	uxth.w	r4, fp
   8906c:	4413      	add	r3, r2
   8906e:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   89072:	eb04 4423 	add.w	r4, r4, r3, asr #16
   89076:	b29b      	uxth	r3, r3
   89078:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   8907c:	45e0      	cmp	r8, ip
   8907e:	f840 3b04 	str.w	r3, [r0], #4
   89082:	ea4f 4424 	mov.w	r4, r4, asr #16
   89086:	ea4f 421b 	mov.w	r2, fp, lsr #16
   8908a:	d2de      	bcs.n	8904a <quorem+0x46>
   8908c:	9b00      	ldr	r3, [sp, #0]
   8908e:	f859 3003 	ldr.w	r3, [r9, r3]
   89092:	b973      	cbnz	r3, 890b2 <quorem+0xae>
   89094:	9b01      	ldr	r3, [sp, #4]
   89096:	3b04      	subs	r3, #4
   89098:	4599      	cmp	r9, r3
   8909a:	d304      	bcc.n	890a6 <quorem+0xa2>
   8909c:	e007      	b.n	890ae <quorem+0xaa>
   8909e:	4599      	cmp	r9, r3
   890a0:	f105 35ff 	add.w	r5, r5, #4294967295
   890a4:	d203      	bcs.n	890ae <quorem+0xaa>
   890a6:	f853 2904 	ldr.w	r2, [r3], #-4
   890aa:	2a00      	cmp	r2, #0
   890ac:	d0f7      	beq.n	8909e <quorem+0x9a>
   890ae:	f8ca 5010 	str.w	r5, [sl, #16]
   890b2:	4671      	mov	r1, lr
   890b4:	4650      	mov	r0, sl
   890b6:	f002 faab 	bl	8b610 <__mcmp>
   890ba:	2800      	cmp	r0, #0
   890bc:	db2a      	blt.n	89114 <quorem+0x110>
   890be:	4648      	mov	r0, r9
   890c0:	2300      	movs	r3, #0
   890c2:	3701      	adds	r7, #1
   890c4:	f856 1b04 	ldr.w	r1, [r6], #4
   890c8:	6804      	ldr	r4, [r0, #0]
   890ca:	b28a      	uxth	r2, r1
   890cc:	1a9a      	subs	r2, r3, r2
   890ce:	0c0b      	lsrs	r3, r1, #16
   890d0:	b2a1      	uxth	r1, r4
   890d2:	440a      	add	r2, r1
   890d4:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   890d8:	eb03 4322 	add.w	r3, r3, r2, asr #16
   890dc:	b292      	uxth	r2, r2
   890de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   890e2:	45b0      	cmp	r8, r6
   890e4:	f840 2b04 	str.w	r2, [r0], #4
   890e8:	ea4f 4323 	mov.w	r3, r3, asr #16
   890ec:	d2ea      	bcs.n	890c4 <quorem+0xc0>
   890ee:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   890f2:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   890f6:	b96a      	cbnz	r2, 89114 <quorem+0x110>
   890f8:	3b04      	subs	r3, #4
   890fa:	4599      	cmp	r9, r3
   890fc:	d304      	bcc.n	89108 <quorem+0x104>
   890fe:	e007      	b.n	89110 <quorem+0x10c>
   89100:	4599      	cmp	r9, r3
   89102:	f105 35ff 	add.w	r5, r5, #4294967295
   89106:	d203      	bcs.n	89110 <quorem+0x10c>
   89108:	f853 2904 	ldr.w	r2, [r3], #-4
   8910c:	2a00      	cmp	r2, #0
   8910e:	d0f7      	beq.n	89100 <quorem+0xfc>
   89110:	f8ca 5010 	str.w	r5, [sl, #16]
   89114:	4638      	mov	r0, r7
   89116:	b003      	add	sp, #12
   89118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8911c:	2000      	movs	r0, #0
   8911e:	b003      	add	sp, #12
   89120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89124:	0000      	movs	r0, r0
   89126:	0000      	movs	r0, r0

00089128 <_dtoa_r>:
   89128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8912c:	4616      	mov	r6, r2
   8912e:	461f      	mov	r7, r3
   89130:	6c01      	ldr	r1, [r0, #64]	; 0x40
   89132:	b09b      	sub	sp, #108	; 0x6c
   89134:	4604      	mov	r4, r0
   89136:	e9cd 6704 	strd	r6, r7, [sp, #16]
   8913a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   8913c:	b141      	cbz	r1, 89150 <_dtoa_r+0x28>
   8913e:	2301      	movs	r3, #1
   89140:	6c42      	ldr	r2, [r0, #68]	; 0x44
   89142:	4093      	lsls	r3, r2
   89144:	e9c1 2301 	strd	r2, r3, [r1, #4]
   89148:	f002 f834 	bl	8b1b4 <_Bfree>
   8914c:	2300      	movs	r3, #0
   8914e:	6423      	str	r3, [r4, #64]	; 0x40
   89150:	f1b7 0900 	subs.w	r9, r7, #0
   89154:	bfb4      	ite	lt
   89156:	2301      	movlt	r3, #1
   89158:	2300      	movge	r3, #0
   8915a:	602b      	str	r3, [r5, #0]
   8915c:	4b76      	ldr	r3, [pc, #472]	; (89338 <_dtoa_r+0x210>)
   8915e:	bfbc      	itt	lt
   89160:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   89164:	f8cd 9014 	strlt.w	r9, [sp, #20]
   89168:	ea33 0309 	bics.w	r3, r3, r9
   8916c:	f000 80ab 	beq.w	892c6 <_dtoa_r+0x19e>
   89170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89174:	4610      	mov	r0, r2
   89176:	4619      	mov	r1, r3
   89178:	2200      	movs	r2, #0
   8917a:	2300      	movs	r3, #0
   8917c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   89180:	f003 fcf0 	bl	8cb64 <__aeabi_dcmpeq>
   89184:	4680      	mov	r8, r0
   89186:	b170      	cbz	r0, 891a6 <_dtoa_r+0x7e>
   89188:	2301      	movs	r3, #1
   8918a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8918c:	6013      	str	r3, [r2, #0]
   8918e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89190:	2b00      	cmp	r3, #0
   89192:	f000 82c2 	beq.w	8971a <_dtoa_r+0x5f2>
   89196:	4869      	ldr	r0, [pc, #420]	; (8933c <_dtoa_r+0x214>)
   89198:	6018      	str	r0, [r3, #0]
   8919a:	1e43      	subs	r3, r0, #1
   8919c:	9303      	str	r3, [sp, #12]
   8919e:	9803      	ldr	r0, [sp, #12]
   891a0:	b01b      	add	sp, #108	; 0x6c
   891a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   891a6:	aa18      	add	r2, sp, #96	; 0x60
   891a8:	ab19      	add	r3, sp, #100	; 0x64
   891aa:	e9cd 3200 	strd	r3, r2, [sp]
   891ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   891b2:	4620      	mov	r0, r4
   891b4:	f002 faf2 	bl	8b79c <__d2b>
   891b8:	ea5f 5519 	movs.w	r5, r9, lsr #20
   891bc:	4682      	mov	sl, r0
   891be:	f040 8098 	bne.w	892f2 <_dtoa_r+0x1ca>
   891c2:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   891c6:	4445      	add	r5, r8
   891c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
   891cc:	2820      	cmp	r0, #32
   891ce:	f340 8390 	ble.w	898f2 <_dtoa_r+0x7ca>
   891d2:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   891d6:	f205 4012 	addw	r0, r5, #1042	; 0x412
   891da:	fa09 f903 	lsl.w	r9, r9, r3
   891de:	fa26 f000 	lsr.w	r0, r6, r0
   891e2:	ea49 0000 	orr.w	r0, r9, r0
   891e6:	f003 f9db 	bl	8c5a0 <__aeabi_ui2d>
   891ea:	2201      	movs	r2, #1
   891ec:	3d01      	subs	r5, #1
   891ee:	920f      	str	r2, [sp, #60]	; 0x3c
   891f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   891f4:	2200      	movs	r2, #0
   891f6:	4b52      	ldr	r3, [pc, #328]	; (89340 <_dtoa_r+0x218>)
   891f8:	f003 f894 	bl	8c324 <__aeabi_dsub>
   891fc:	a348      	add	r3, pc, #288	; (adr r3, 89320 <_dtoa_r+0x1f8>)
   891fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   89202:	f003 fa47 	bl	8c694 <__aeabi_dmul>
   89206:	a348      	add	r3, pc, #288	; (adr r3, 89328 <_dtoa_r+0x200>)
   89208:	e9d3 2300 	ldrd	r2, r3, [r3]
   8920c:	f003 f88c 	bl	8c328 <__adddf3>
   89210:	4606      	mov	r6, r0
   89212:	4628      	mov	r0, r5
   89214:	460f      	mov	r7, r1
   89216:	f003 f9d3 	bl	8c5c0 <__aeabi_i2d>
   8921a:	a345      	add	r3, pc, #276	; (adr r3, 89330 <_dtoa_r+0x208>)
   8921c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89220:	f003 fa38 	bl	8c694 <__aeabi_dmul>
   89224:	4602      	mov	r2, r0
   89226:	460b      	mov	r3, r1
   89228:	4630      	mov	r0, r6
   8922a:	4639      	mov	r1, r7
   8922c:	f003 f87c 	bl	8c328 <__adddf3>
   89230:	4606      	mov	r6, r0
   89232:	460f      	mov	r7, r1
   89234:	f003 fcde 	bl	8cbf4 <__aeabi_d2iz>
   89238:	2200      	movs	r2, #0
   8923a:	4683      	mov	fp, r0
   8923c:	2300      	movs	r3, #0
   8923e:	4630      	mov	r0, r6
   89240:	4639      	mov	r1, r7
   89242:	f003 fc99 	bl	8cb78 <__aeabi_dcmplt>
   89246:	2800      	cmp	r0, #0
   89248:	f040 825a 	bne.w	89700 <_dtoa_r+0x5d8>
   8924c:	f1bb 0f16 	cmp.w	fp, #22
   89250:	f200 8248 	bhi.w	896e4 <_dtoa_r+0x5bc>
   89254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89258:	4b3a      	ldr	r3, [pc, #232]	; (89344 <_dtoa_r+0x21c>)
   8925a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   8925e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89262:	f003 fc89 	bl	8cb78 <__aeabi_dcmplt>
   89266:	2800      	cmp	r0, #0
   89268:	d072      	beq.n	89350 <_dtoa_r+0x228>
   8926a:	2300      	movs	r3, #0
   8926c:	eba8 0505 	sub.w	r5, r8, r5
   89270:	930e      	str	r3, [sp, #56]	; 0x38
   89272:	1e6b      	subs	r3, r5, #1
   89274:	f10b 3bff 	add.w	fp, fp, #4294967295
   89278:	9306      	str	r3, [sp, #24]
   8927a:	f100 823b 	bmi.w	896f4 <_dtoa_r+0x5cc>
   8927e:	2300      	movs	r3, #0
   89280:	930b      	str	r3, [sp, #44]	; 0x2c
   89282:	f1bb 0f00 	cmp.w	fp, #0
   89286:	da6b      	bge.n	89360 <_dtoa_r+0x238>
   89288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8928a:	f8cd b01c 	str.w	fp, [sp, #28]
   8928e:	eba3 030b 	sub.w	r3, r3, fp
   89292:	930b      	str	r3, [sp, #44]	; 0x2c
   89294:	f1cb 0300 	rsb	r3, fp, #0
   89298:	930d      	str	r3, [sp, #52]	; 0x34
   8929a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8929c:	f04f 0b00 	mov.w	fp, #0
   892a0:	2b09      	cmp	r3, #9
   892a2:	d866      	bhi.n	89372 <_dtoa_r+0x24a>
   892a4:	2b05      	cmp	r3, #5
   892a6:	f340 8322 	ble.w	898ee <_dtoa_r+0x7c6>
   892aa:	2500      	movs	r5, #0
   892ac:	3b04      	subs	r3, #4
   892ae:	9324      	str	r3, [sp, #144]	; 0x90
   892b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   892b2:	3b02      	subs	r3, #2
   892b4:	2b03      	cmp	r3, #3
   892b6:	f200 866e 	bhi.w	89f96 <_dtoa_r+0xe6e>
   892ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   892be:	043b      	.short	0x043b
   892c0:	042f0438 	.word	0x042f0438
   892c4:	0412      	.short	0x0412
   892c6:	f242 730f 	movw	r3, #9999	; 0x270f
   892ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
   892cc:	f3c9 0913 	ubfx	r9, r9, #0, #20
   892d0:	6013      	str	r3, [r2, #0]
   892d2:	ea59 0306 	orrs.w	r3, r9, r6
   892d6:	d11c      	bne.n	89312 <_dtoa_r+0x1ea>
   892d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   892da:	2b00      	cmp	r3, #0
   892dc:	f000 8657 	beq.w	89f8e <_dtoa_r+0xe66>
   892e0:	4b19      	ldr	r3, [pc, #100]	; (89348 <_dtoa_r+0x220>)
   892e2:	9303      	str	r3, [sp, #12]
   892e4:	3308      	adds	r3, #8
   892e6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   892e8:	9803      	ldr	r0, [sp, #12]
   892ea:	6013      	str	r3, [r2, #0]
   892ec:	b01b      	add	sp, #108	; 0x6c
   892ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   892f2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   892f6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   892fa:	4608      	mov	r0, r1
   892fc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89300:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   89304:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   89308:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   8930c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89310:	e770      	b.n	891f4 <_dtoa_r+0xcc>
   89312:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89314:	2b00      	cmp	r3, #0
   89316:	f040 83c8 	bne.w	89aaa <_dtoa_r+0x982>
   8931a:	4b0c      	ldr	r3, [pc, #48]	; (8934c <_dtoa_r+0x224>)
   8931c:	9303      	str	r3, [sp, #12]
   8931e:	e73e      	b.n	8919e <_dtoa_r+0x76>
   89320:	636f4361 	.word	0x636f4361
   89324:	3fd287a7 	.word	0x3fd287a7
   89328:	8b60c8b3 	.word	0x8b60c8b3
   8932c:	3fc68a28 	.word	0x3fc68a28
   89330:	509f79fb 	.word	0x509f79fb
   89334:	3fd34413 	.word	0x3fd34413
   89338:	7ff00000 	.word	0x7ff00000
   8933c:	0008d005 	.word	0x0008d005
   89340:	3ff80000 	.word	0x3ff80000
   89344:	0008d1a0 	.word	0x0008d1a0
   89348:	0008d04c 	.word	0x0008d04c
   8934c:	0008d048 	.word	0x0008d048
   89350:	eba8 0505 	sub.w	r5, r8, r5
   89354:	1e6b      	subs	r3, r5, #1
   89356:	9306      	str	r3, [sp, #24]
   89358:	f100 84a9 	bmi.w	89cae <_dtoa_r+0xb86>
   8935c:	900e      	str	r0, [sp, #56]	; 0x38
   8935e:	900b      	str	r0, [sp, #44]	; 0x2c
   89360:	9b06      	ldr	r3, [sp, #24]
   89362:	445b      	add	r3, fp
   89364:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89368:	2300      	movs	r3, #0
   8936a:	930d      	str	r3, [sp, #52]	; 0x34
   8936c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8936e:	2b09      	cmp	r3, #9
   89370:	d998      	bls.n	892a4 <_dtoa_r+0x17c>
   89372:	2300      	movs	r3, #0
   89374:	2501      	movs	r5, #1
   89376:	9324      	str	r3, [sp, #144]	; 0x90
   89378:	9325      	str	r3, [sp, #148]	; 0x94
   8937a:	f04f 33ff 	mov.w	r3, #4294967295
   8937e:	950c      	str	r5, [sp, #48]	; 0x30
   89380:	930a      	str	r3, [sp, #40]	; 0x28
   89382:	2100      	movs	r1, #0
   89384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89386:	6461      	str	r1, [r4, #68]	; 0x44
   89388:	9312      	str	r3, [sp, #72]	; 0x48
   8938a:	4620      	mov	r0, r4
   8938c:	f001 feec 	bl	8b168 <_Balloc>
   89390:	9003      	str	r0, [sp, #12]
   89392:	2800      	cmp	r0, #0
   89394:	f000 8607 	beq.w	89fa6 <_dtoa_r+0xe7e>
   89398:	9b03      	ldr	r3, [sp, #12]
   8939a:	6423      	str	r3, [r4, #64]	; 0x40
   8939c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8939e:	2b0e      	cmp	r3, #14
   893a0:	f200 80e9 	bhi.w	89576 <_dtoa_r+0x44e>
   893a4:	2d00      	cmp	r5, #0
   893a6:	f000 80e6 	beq.w	89576 <_dtoa_r+0x44e>
   893aa:	9907      	ldr	r1, [sp, #28]
   893ac:	2900      	cmp	r1, #0
   893ae:	f340 8452 	ble.w	89c56 <_dtoa_r+0xb2e>
   893b2:	4bb5      	ldr	r3, [pc, #724]	; (89688 <_dtoa_r+0x560>)
   893b4:	f001 020f 	and.w	r2, r1, #15
   893b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   893bc:	05c8      	lsls	r0, r1, #23
   893be:	ea4f 1521 	mov.w	r5, r1, asr #4
   893c2:	e9d3 6700 	ldrd	r6, r7, [r3]
   893c6:	f140 83ee 	bpl.w	89ba6 <_dtoa_r+0xa7e>
   893ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   893ce:	4baf      	ldr	r3, [pc, #700]	; (8968c <_dtoa_r+0x564>)
   893d0:	f04f 0903 	mov.w	r9, #3
   893d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   893d8:	f003 fa86 	bl	8c8e8 <__aeabi_ddiv>
   893dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   893e0:	f005 050f 	and.w	r5, r5, #15
   893e4:	b18d      	cbz	r5, 8940a <_dtoa_r+0x2e2>
   893e6:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8968c <_dtoa_r+0x564>
   893ea:	07e9      	lsls	r1, r5, #31
   893ec:	d509      	bpl.n	89402 <_dtoa_r+0x2da>
   893ee:	e9d8 2300 	ldrd	r2, r3, [r8]
   893f2:	4630      	mov	r0, r6
   893f4:	4639      	mov	r1, r7
   893f6:	f003 f94d 	bl	8c694 <__aeabi_dmul>
   893fa:	4606      	mov	r6, r0
   893fc:	460f      	mov	r7, r1
   893fe:	f109 0901 	add.w	r9, r9, #1
   89402:	106d      	asrs	r5, r5, #1
   89404:	f108 0808 	add.w	r8, r8, #8
   89408:	d1ef      	bne.n	893ea <_dtoa_r+0x2c2>
   8940a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8940e:	4632      	mov	r2, r6
   89410:	463b      	mov	r3, r7
   89412:	f003 fa69 	bl	8c8e8 <__aeabi_ddiv>
   89416:	4606      	mov	r6, r0
   89418:	460f      	mov	r7, r1
   8941a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8941c:	b143      	cbz	r3, 89430 <_dtoa_r+0x308>
   8941e:	2200      	movs	r2, #0
   89420:	4630      	mov	r0, r6
   89422:	4639      	mov	r1, r7
   89424:	4b9a      	ldr	r3, [pc, #616]	; (89690 <_dtoa_r+0x568>)
   89426:	f003 fba7 	bl	8cb78 <__aeabi_dcmplt>
   8942a:	2800      	cmp	r0, #0
   8942c:	f040 853b 	bne.w	89ea6 <_dtoa_r+0xd7e>
   89430:	4648      	mov	r0, r9
   89432:	f003 f8c5 	bl	8c5c0 <__aeabi_i2d>
   89436:	4632      	mov	r2, r6
   89438:	463b      	mov	r3, r7
   8943a:	f003 f92b 	bl	8c694 <__aeabi_dmul>
   8943e:	4b95      	ldr	r3, [pc, #596]	; (89694 <_dtoa_r+0x56c>)
   89440:	2200      	movs	r2, #0
   89442:	f002 ff71 	bl	8c328 <__adddf3>
   89446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89448:	4680      	mov	r8, r0
   8944a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8944e:	2b00      	cmp	r3, #0
   89450:	f000 83ce 	beq.w	89bf0 <_dtoa_r+0xac8>
   89454:	9b07      	ldr	r3, [sp, #28]
   89456:	9313      	str	r3, [sp, #76]	; 0x4c
   89458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8945a:	9310      	str	r3, [sp, #64]	; 0x40
   8945c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8945e:	2b00      	cmp	r3, #0
   89460:	f000 84b7 	beq.w	89dd2 <_dtoa_r+0xcaa>
   89464:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89466:	4b88      	ldr	r3, [pc, #544]	; (89688 <_dtoa_r+0x560>)
   89468:	2000      	movs	r0, #0
   8946a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8946e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89472:	4989      	ldr	r1, [pc, #548]	; (89698 <_dtoa_r+0x570>)
   89474:	f003 fa38 	bl	8c8e8 <__aeabi_ddiv>
   89478:	4642      	mov	r2, r8
   8947a:	464b      	mov	r3, r9
   8947c:	f002 ff52 	bl	8c324 <__aeabi_dsub>
   89480:	4602      	mov	r2, r0
   89482:	460b      	mov	r3, r1
   89484:	4630      	mov	r0, r6
   89486:	4639      	mov	r1, r7
   89488:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8948c:	f003 fbb2 	bl	8cbf4 <__aeabi_d2iz>
   89490:	4680      	mov	r8, r0
   89492:	f003 f895 	bl	8c5c0 <__aeabi_i2d>
   89496:	4602      	mov	r2, r0
   89498:	460b      	mov	r3, r1
   8949a:	4630      	mov	r0, r6
   8949c:	4639      	mov	r1, r7
   8949e:	f002 ff41 	bl	8c324 <__aeabi_dsub>
   894a2:	9d03      	ldr	r5, [sp, #12]
   894a4:	f108 0330 	add.w	r3, r8, #48	; 0x30
   894a8:	4606      	mov	r6, r0
   894aa:	460f      	mov	r7, r1
   894ac:	4602      	mov	r2, r0
   894ae:	f805 3b01 	strb.w	r3, [r5], #1
   894b2:	460b      	mov	r3, r1
   894b4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   894b8:	f003 fb7c 	bl	8cbb4 <__aeabi_dcmpgt>
   894bc:	2800      	cmp	r0, #0
   894be:	f040 853b 	bne.w	89f38 <_dtoa_r+0xe10>
   894c2:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   894c6:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   894ca:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   894ce:	f04f 0900 	mov.w	r9, #0
   894d2:	9410      	str	r4, [sp, #64]	; 0x40
   894d4:	e02a      	b.n	8952c <_dtoa_r+0x404>
   894d6:	f109 0901 	add.w	r9, r9, #1
   894da:	45c1      	cmp	r9, r8
   894dc:	da48      	bge.n	89570 <_dtoa_r+0x448>
   894de:	4650      	mov	r0, sl
   894e0:	4659      	mov	r1, fp
   894e2:	2200      	movs	r2, #0
   894e4:	4b6d      	ldr	r3, [pc, #436]	; (8969c <_dtoa_r+0x574>)
   894e6:	f003 f8d5 	bl	8c694 <__aeabi_dmul>
   894ea:	2200      	movs	r2, #0
   894ec:	4b6b      	ldr	r3, [pc, #428]	; (8969c <_dtoa_r+0x574>)
   894ee:	4682      	mov	sl, r0
   894f0:	468b      	mov	fp, r1
   894f2:	4630      	mov	r0, r6
   894f4:	4639      	mov	r1, r7
   894f6:	f003 f8cd 	bl	8c694 <__aeabi_dmul>
   894fa:	460f      	mov	r7, r1
   894fc:	4606      	mov	r6, r0
   894fe:	f003 fb79 	bl	8cbf4 <__aeabi_d2iz>
   89502:	4604      	mov	r4, r0
   89504:	f003 f85c 	bl	8c5c0 <__aeabi_i2d>
   89508:	4602      	mov	r2, r0
   8950a:	460b      	mov	r3, r1
   8950c:	4630      	mov	r0, r6
   8950e:	4639      	mov	r1, r7
   89510:	f002 ff08 	bl	8c324 <__aeabi_dsub>
   89514:	3430      	adds	r4, #48	; 0x30
   89516:	4652      	mov	r2, sl
   89518:	465b      	mov	r3, fp
   8951a:	f805 4b01 	strb.w	r4, [r5], #1
   8951e:	4606      	mov	r6, r0
   89520:	460f      	mov	r7, r1
   89522:	f003 fb29 	bl	8cb78 <__aeabi_dcmplt>
   89526:	2800      	cmp	r0, #0
   89528:	f040 8503 	bne.w	89f32 <_dtoa_r+0xe0a>
   8952c:	4632      	mov	r2, r6
   8952e:	463b      	mov	r3, r7
   89530:	2000      	movs	r0, #0
   89532:	4957      	ldr	r1, [pc, #348]	; (89690 <_dtoa_r+0x568>)
   89534:	f002 fef6 	bl	8c324 <__aeabi_dsub>
   89538:	4652      	mov	r2, sl
   8953a:	465b      	mov	r3, fp
   8953c:	f003 fb1c 	bl	8cb78 <__aeabi_dcmplt>
   89540:	2800      	cmp	r0, #0
   89542:	d0c8      	beq.n	894d6 <_dtoa_r+0x3ae>
   89544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89546:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8954a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8954c:	9a03      	ldr	r2, [sp, #12]
   8954e:	9307      	str	r3, [sp, #28]
   89550:	e002      	b.n	89558 <_dtoa_r+0x430>
   89552:	4295      	cmp	r5, r2
   89554:	f000 84d2 	beq.w	89efc <_dtoa_r+0xdd4>
   89558:	46a9      	mov	r9, r5
   8955a:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8955e:	2b39      	cmp	r3, #57	; 0x39
   89560:	d0f7      	beq.n	89552 <_dtoa_r+0x42a>
   89562:	3301      	adds	r3, #1
   89564:	b2db      	uxtb	r3, r3
   89566:	702b      	strb	r3, [r5, #0]
   89568:	9b07      	ldr	r3, [sp, #28]
   8956a:	3301      	adds	r3, #1
   8956c:	9307      	str	r3, [sp, #28]
   8956e:	e1a0      	b.n	898b2 <_dtoa_r+0x78a>
   89570:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89572:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   89576:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89578:	2b00      	cmp	r3, #0
   8957a:	f2c0 8093 	blt.w	896a4 <_dtoa_r+0x57c>
   8957e:	9a07      	ldr	r2, [sp, #28]
   89580:	2a0e      	cmp	r2, #14
   89582:	f300 808f 	bgt.w	896a4 <_dtoa_r+0x57c>
   89586:	4b40      	ldr	r3, [pc, #256]	; (89688 <_dtoa_r+0x560>)
   89588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8958c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89590:	e9cd 2304 	strd	r2, r3, [sp, #16]
   89594:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89596:	2b00      	cmp	r3, #0
   89598:	da1a      	bge.n	895d0 <_dtoa_r+0x4a8>
   8959a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8959c:	2b00      	cmp	r3, #0
   8959e:	dc17      	bgt.n	895d0 <_dtoa_r+0x4a8>
   895a0:	f040 833f 	bne.w	89c22 <_dtoa_r+0xafa>
   895a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   895a8:	2200      	movs	r2, #0
   895aa:	4b3d      	ldr	r3, [pc, #244]	; (896a0 <_dtoa_r+0x578>)
   895ac:	f003 f872 	bl	8c694 <__aeabi_dmul>
   895b0:	4602      	mov	r2, r0
   895b2:	460b      	mov	r3, r1
   895b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   895b8:	f003 fae8 	bl	8cb8c <__aeabi_dcmple>
   895bc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   895c0:	4645      	mov	r5, r8
   895c2:	2800      	cmp	r0, #0
   895c4:	f000 82cd 	beq.w	89b62 <_dtoa_r+0xa3a>
   895c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   895ca:	9f03      	ldr	r7, [sp, #12]
   895cc:	43de      	mvns	r6, r3
   895ce:	e2d0      	b.n	89b72 <_dtoa_r+0xa4a>
   895d0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   895d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   895d8:	4632      	mov	r2, r6
   895da:	463b      	mov	r3, r7
   895dc:	f003 f984 	bl	8c8e8 <__aeabi_ddiv>
   895e0:	f003 fb08 	bl	8cbf4 <__aeabi_d2iz>
   895e4:	4680      	mov	r8, r0
   895e6:	f002 ffeb 	bl	8c5c0 <__aeabi_i2d>
   895ea:	4632      	mov	r2, r6
   895ec:	463b      	mov	r3, r7
   895ee:	f003 f851 	bl	8c694 <__aeabi_dmul>
   895f2:	460b      	mov	r3, r1
   895f4:	4602      	mov	r2, r0
   895f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   895fa:	f002 fe93 	bl	8c324 <__aeabi_dsub>
   895fe:	9d03      	ldr	r5, [sp, #12]
   89600:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89604:	f805 3b01 	strb.w	r3, [r5], #1
   89608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8960a:	2b01      	cmp	r3, #1
   8960c:	f000 837f 	beq.w	89d0e <_dtoa_r+0xbe6>
   89610:	f8cd a018 	str.w	sl, [sp, #24]
   89614:	f04f 0901 	mov.w	r9, #1
   89618:	469b      	mov	fp, r3
   8961a:	46aa      	mov	sl, r5
   8961c:	9408      	str	r4, [sp, #32]
   8961e:	e01d      	b.n	8965c <_dtoa_r+0x534>
   89620:	4632      	mov	r2, r6
   89622:	463b      	mov	r3, r7
   89624:	4620      	mov	r0, r4
   89626:	4629      	mov	r1, r5
   89628:	f003 f95e 	bl	8c8e8 <__aeabi_ddiv>
   8962c:	f003 fae2 	bl	8cbf4 <__aeabi_d2iz>
   89630:	4680      	mov	r8, r0
   89632:	f002 ffc5 	bl	8c5c0 <__aeabi_i2d>
   89636:	4632      	mov	r2, r6
   89638:	463b      	mov	r3, r7
   8963a:	f003 f82b 	bl	8c694 <__aeabi_dmul>
   8963e:	f109 0901 	add.w	r9, r9, #1
   89642:	460b      	mov	r3, r1
   89644:	4602      	mov	r2, r0
   89646:	4629      	mov	r1, r5
   89648:	4620      	mov	r0, r4
   8964a:	f002 fe6b 	bl	8c324 <__aeabi_dsub>
   8964e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89652:	45cb      	cmp	fp, r9
   89654:	f80a 3b01 	strb.w	r3, [sl], #1
   89658:	f000 8355 	beq.w	89d06 <_dtoa_r+0xbde>
   8965c:	2200      	movs	r2, #0
   8965e:	4b0f      	ldr	r3, [pc, #60]	; (8969c <_dtoa_r+0x574>)
   89660:	f003 f818 	bl	8c694 <__aeabi_dmul>
   89664:	2200      	movs	r2, #0
   89666:	2300      	movs	r3, #0
   89668:	4604      	mov	r4, r0
   8966a:	460d      	mov	r5, r1
   8966c:	f003 fa7a 	bl	8cb64 <__aeabi_dcmpeq>
   89670:	2800      	cmp	r0, #0
   89672:	d0d5      	beq.n	89620 <_dtoa_r+0x4f8>
   89674:	4655      	mov	r5, sl
   89676:	9c08      	ldr	r4, [sp, #32]
   89678:	f8dd a018 	ldr.w	sl, [sp, #24]
   8967c:	9b07      	ldr	r3, [sp, #28]
   8967e:	46a9      	mov	r9, r5
   89680:	3301      	adds	r3, #1
   89682:	9307      	str	r3, [sp, #28]
   89684:	e115      	b.n	898b2 <_dtoa_r+0x78a>
   89686:	bf00      	nop
   89688:	0008d1a0 	.word	0x0008d1a0
   8968c:	0008d178 	.word	0x0008d178
   89690:	3ff00000 	.word	0x3ff00000
   89694:	401c0000 	.word	0x401c0000
   89698:	3fe00000 	.word	0x3fe00000
   8969c:	40240000 	.word	0x40240000
   896a0:	40140000 	.word	0x40140000
   896a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   896a6:	2a00      	cmp	r2, #0
   896a8:	d03d      	beq.n	89726 <_dtoa_r+0x5fe>
   896aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   896ac:	2a01      	cmp	r2, #1
   896ae:	f340 82bc 	ble.w	89c2a <_dtoa_r+0xb02>
   896b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   896b4:	1e5f      	subs	r7, r3, #1
   896b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   896b8:	42bb      	cmp	r3, r7
   896ba:	f2c0 826e 	blt.w	89b9a <_dtoa_r+0xa72>
   896be:	1bdf      	subs	r7, r3, r7
   896c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   896c2:	2b00      	cmp	r3, #0
   896c4:	f2c0 8354 	blt.w	89d70 <_dtoa_r+0xc48>
   896c8:	9a06      	ldr	r2, [sp, #24]
   896ca:	4611      	mov	r1, r2
   896cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   896ce:	4419      	add	r1, r3
   896d0:	4616      	mov	r6, r2
   896d2:	441a      	add	r2, r3
   896d4:	9106      	str	r1, [sp, #24]
   896d6:	920b      	str	r2, [sp, #44]	; 0x2c
   896d8:	2101      	movs	r1, #1
   896da:	4620      	mov	r0, r4
   896dc:	f001 fe12 	bl	8b304 <__i2b>
   896e0:	4605      	mov	r5, r0
   896e2:	e023      	b.n	8972c <_dtoa_r+0x604>
   896e4:	2301      	movs	r3, #1
   896e6:	eba8 0505 	sub.w	r5, r8, r5
   896ea:	930e      	str	r3, [sp, #56]	; 0x38
   896ec:	1e6b      	subs	r3, r5, #1
   896ee:	9306      	str	r3, [sp, #24]
   896f0:	f57f adc5 	bpl.w	8927e <_dtoa_r+0x156>
   896f4:	f1c5 0301 	rsb	r3, r5, #1
   896f8:	930b      	str	r3, [sp, #44]	; 0x2c
   896fa:	2300      	movs	r3, #0
   896fc:	9306      	str	r3, [sp, #24]
   896fe:	e5c0      	b.n	89282 <_dtoa_r+0x15a>
   89700:	4658      	mov	r0, fp
   89702:	f002 ff5d 	bl	8c5c0 <__aeabi_i2d>
   89706:	4632      	mov	r2, r6
   89708:	463b      	mov	r3, r7
   8970a:	f003 fa2b 	bl	8cb64 <__aeabi_dcmpeq>
   8970e:	2800      	cmp	r0, #0
   89710:	f47f ad9c 	bne.w	8924c <_dtoa_r+0x124>
   89714:	f10b 3bff 	add.w	fp, fp, #4294967295
   89718:	e598      	b.n	8924c <_dtoa_r+0x124>
   8971a:	4bc7      	ldr	r3, [pc, #796]	; (89a38 <_dtoa_r+0x910>)
   8971c:	9303      	str	r3, [sp, #12]
   8971e:	9803      	ldr	r0, [sp, #12]
   89720:	b01b      	add	sp, #108	; 0x6c
   89722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89726:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89728:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   8972c:	2e00      	cmp	r6, #0
   8972e:	dd0c      	ble.n	8974a <_dtoa_r+0x622>
   89730:	9a06      	ldr	r2, [sp, #24]
   89732:	2a00      	cmp	r2, #0
   89734:	dd09      	ble.n	8974a <_dtoa_r+0x622>
   89736:	42b2      	cmp	r2, r6
   89738:	4613      	mov	r3, r2
   8973a:	bfa8      	it	ge
   8973c:	4633      	movge	r3, r6
   8973e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89740:	1af6      	subs	r6, r6, r3
   89742:	1ac9      	subs	r1, r1, r3
   89744:	1ad3      	subs	r3, r2, r3
   89746:	910b      	str	r1, [sp, #44]	; 0x2c
   89748:	9306      	str	r3, [sp, #24]
   8974a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8974c:	b1d3      	cbz	r3, 89784 <_dtoa_r+0x65c>
   8974e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89750:	2b00      	cmp	r3, #0
   89752:	f000 81a3 	beq.w	89a9c <_dtoa_r+0x974>
   89756:	2f00      	cmp	r7, #0
   89758:	dd10      	ble.n	8977c <_dtoa_r+0x654>
   8975a:	4629      	mov	r1, r5
   8975c:	463a      	mov	r2, r7
   8975e:	4620      	mov	r0, r4
   89760:	f001 fe96 	bl	8b490 <__pow5mult>
   89764:	4652      	mov	r2, sl
   89766:	4601      	mov	r1, r0
   89768:	4605      	mov	r5, r0
   8976a:	4620      	mov	r0, r4
   8976c:	f001 fde0 	bl	8b330 <__multiply>
   89770:	4603      	mov	r3, r0
   89772:	4651      	mov	r1, sl
   89774:	4620      	mov	r0, r4
   89776:	469a      	mov	sl, r3
   89778:	f001 fd1c 	bl	8b1b4 <_Bfree>
   8977c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8977e:	1bda      	subs	r2, r3, r7
   89780:	f040 818d 	bne.w	89a9e <_dtoa_r+0x976>
   89784:	2101      	movs	r1, #1
   89786:	4620      	mov	r0, r4
   89788:	f001 fdbc 	bl	8b304 <__i2b>
   8978c:	f1bb 0f00 	cmp.w	fp, #0
   89790:	4680      	mov	r8, r0
   89792:	f300 80b3 	bgt.w	898fc <_dtoa_r+0x7d4>
   89796:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89798:	2b01      	cmp	r3, #1
   8979a:	f340 818a 	ble.w	89ab2 <_dtoa_r+0x98a>
   8979e:	f04f 0900 	mov.w	r9, #0
   897a2:	2001      	movs	r0, #1
   897a4:	f1bb 0f00 	cmp.w	fp, #0
   897a8:	f040 80b4 	bne.w	89914 <_dtoa_r+0x7ec>
   897ac:	9a06      	ldr	r2, [sp, #24]
   897ae:	4410      	add	r0, r2
   897b0:	f010 001f 	ands.w	r0, r0, #31
   897b4:	f000 8092 	beq.w	898dc <_dtoa_r+0x7b4>
   897b8:	f1c0 0320 	rsb	r3, r0, #32
   897bc:	2b04      	cmp	r3, #4
   897be:	f340 83f9 	ble.w	89fb4 <_dtoa_r+0xe8c>
   897c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   897c4:	f1c0 001c 	rsb	r0, r0, #28
   897c8:	4403      	add	r3, r0
   897ca:	4402      	add	r2, r0
   897cc:	930b      	str	r3, [sp, #44]	; 0x2c
   897ce:	4406      	add	r6, r0
   897d0:	9206      	str	r2, [sp, #24]
   897d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   897d4:	2b00      	cmp	r3, #0
   897d6:	dd05      	ble.n	897e4 <_dtoa_r+0x6bc>
   897d8:	4651      	mov	r1, sl
   897da:	461a      	mov	r2, r3
   897dc:	4620      	mov	r0, r4
   897de:	f001 fea3 	bl	8b528 <__lshift>
   897e2:	4682      	mov	sl, r0
   897e4:	9b06      	ldr	r3, [sp, #24]
   897e6:	2b00      	cmp	r3, #0
   897e8:	dd05      	ble.n	897f6 <_dtoa_r+0x6ce>
   897ea:	4641      	mov	r1, r8
   897ec:	461a      	mov	r2, r3
   897ee:	4620      	mov	r0, r4
   897f0:	f001 fe9a 	bl	8b528 <__lshift>
   897f4:	4680      	mov	r8, r0
   897f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   897f8:	2b00      	cmp	r3, #0
   897fa:	f040 8135 	bne.w	89a68 <_dtoa_r+0x940>
   897fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89800:	2b00      	cmp	r3, #0
   89802:	f340 811b 	ble.w	89a3c <_dtoa_r+0x914>
   89806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89808:	2b00      	cmp	r3, #0
   8980a:	f040 809a 	bne.w	89942 <_dtoa_r+0x81a>
   8980e:	9b07      	ldr	r3, [sp, #28]
   89810:	3301      	adds	r3, #1
   89812:	9307      	str	r3, [sp, #28]
   89814:	2601      	movs	r6, #1
   89816:	9f03      	ldr	r7, [sp, #12]
   89818:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8981c:	e007      	b.n	8982e <_dtoa_r+0x706>
   8981e:	4651      	mov	r1, sl
   89820:	2300      	movs	r3, #0
   89822:	220a      	movs	r2, #10
   89824:	4620      	mov	r0, r4
   89826:	f001 fccf 	bl	8b1c8 <__multadd>
   8982a:	4682      	mov	sl, r0
   8982c:	3601      	adds	r6, #1
   8982e:	4641      	mov	r1, r8
   89830:	4650      	mov	r0, sl
   89832:	f7ff fbe7 	bl	89004 <quorem>
   89836:	454e      	cmp	r6, r9
   89838:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8983c:	f807 3b01 	strb.w	r3, [r7], #1
   89840:	dbed      	blt.n	8981e <_dtoa_r+0x6f6>
   89842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89844:	2600      	movs	r6, #0
   89846:	2a00      	cmp	r2, #0
   89848:	bfcc      	ite	gt
   8984a:	4693      	movgt	fp, r2
   8984c:	f04f 0b01 	movle.w	fp, #1
   89850:	9a03      	ldr	r2, [sp, #12]
   89852:	4493      	add	fp, r2
   89854:	4651      	mov	r1, sl
   89856:	2201      	movs	r2, #1
   89858:	4620      	mov	r0, r4
   8985a:	9304      	str	r3, [sp, #16]
   8985c:	f001 fe64 	bl	8b528 <__lshift>
   89860:	4641      	mov	r1, r8
   89862:	4682      	mov	sl, r0
   89864:	f001 fed4 	bl	8b610 <__mcmp>
   89868:	2800      	cmp	r0, #0
   8986a:	f340 81a8 	ble.w	89bbe <_dtoa_r+0xa96>
   8986e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   89872:	9a03      	ldr	r2, [sp, #12]
   89874:	f10b 3bff 	add.w	fp, fp, #4294967295
   89878:	e004      	b.n	89884 <_dtoa_r+0x75c>
   8987a:	455a      	cmp	r2, fp
   8987c:	f000 81e4 	beq.w	89c48 <_dtoa_r+0xb20>
   89880:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89884:	2b39      	cmp	r3, #57	; 0x39
   89886:	f10b 0901 	add.w	r9, fp, #1
   8988a:	d0f6      	beq.n	8987a <_dtoa_r+0x752>
   8988c:	3301      	adds	r3, #1
   8988e:	f88b 3000 	strb.w	r3, [fp]
   89892:	4641      	mov	r1, r8
   89894:	4620      	mov	r0, r4
   89896:	f001 fc8d 	bl	8b1b4 <_Bfree>
   8989a:	b155      	cbz	r5, 898b2 <_dtoa_r+0x78a>
   8989c:	b12e      	cbz	r6, 898aa <_dtoa_r+0x782>
   8989e:	42ae      	cmp	r6, r5
   898a0:	d003      	beq.n	898aa <_dtoa_r+0x782>
   898a2:	4631      	mov	r1, r6
   898a4:	4620      	mov	r0, r4
   898a6:	f001 fc85 	bl	8b1b4 <_Bfree>
   898aa:	4629      	mov	r1, r5
   898ac:	4620      	mov	r0, r4
   898ae:	f001 fc81 	bl	8b1b4 <_Bfree>
   898b2:	4651      	mov	r1, sl
   898b4:	4620      	mov	r0, r4
   898b6:	f001 fc7d 	bl	8b1b4 <_Bfree>
   898ba:	2300      	movs	r3, #0
   898bc:	f889 3000 	strb.w	r3, [r9]
   898c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   898c2:	461a      	mov	r2, r3
   898c4:	9b07      	ldr	r3, [sp, #28]
   898c6:	6013      	str	r3, [r2, #0]
   898c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   898ca:	2b00      	cmp	r3, #0
   898cc:	f43f ac67 	beq.w	8919e <_dtoa_r+0x76>
   898d0:	9803      	ldr	r0, [sp, #12]
   898d2:	f8c3 9000 	str.w	r9, [r3]
   898d6:	b01b      	add	sp, #108	; 0x6c
   898d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   898dc:	201c      	movs	r0, #28
   898de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   898e0:	4406      	add	r6, r0
   898e2:	4403      	add	r3, r0
   898e4:	930b      	str	r3, [sp, #44]	; 0x2c
   898e6:	9b06      	ldr	r3, [sp, #24]
   898e8:	4403      	add	r3, r0
   898ea:	9306      	str	r3, [sp, #24]
   898ec:	e771      	b.n	897d2 <_dtoa_r+0x6aa>
   898ee:	2501      	movs	r5, #1
   898f0:	e4de      	b.n	892b0 <_dtoa_r+0x188>
   898f2:	f1c0 0020 	rsb	r0, r0, #32
   898f6:	fa06 f000 	lsl.w	r0, r6, r0
   898fa:	e474      	b.n	891e6 <_dtoa_r+0xbe>
   898fc:	4601      	mov	r1, r0
   898fe:	465a      	mov	r2, fp
   89900:	4620      	mov	r0, r4
   89902:	f001 fdc5 	bl	8b490 <__pow5mult>
   89906:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89908:	4680      	mov	r8, r0
   8990a:	2b01      	cmp	r3, #1
   8990c:	f340 81d1 	ble.w	89cb2 <_dtoa_r+0xb8a>
   89910:	f04f 0900 	mov.w	r9, #0
   89914:	f8d8 3010 	ldr.w	r3, [r8, #16]
   89918:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8991c:	6918      	ldr	r0, [r3, #16]
   8991e:	f001 fca1 	bl	8b264 <__hi0bits>
   89922:	f1c0 0020 	rsb	r0, r0, #32
   89926:	e741      	b.n	897ac <_dtoa_r+0x684>
   89928:	4629      	mov	r1, r5
   8992a:	2300      	movs	r3, #0
   8992c:	220a      	movs	r2, #10
   8992e:	4620      	mov	r0, r4
   89930:	f001 fc4a 	bl	8b1c8 <__multadd>
   89934:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89936:	4605      	mov	r5, r0
   89938:	2b00      	cmp	r3, #0
   8993a:	f340 8315 	ble.w	89f68 <_dtoa_r+0xe40>
   8993e:	9707      	str	r7, [sp, #28]
   89940:	930a      	str	r3, [sp, #40]	; 0x28
   89942:	2e00      	cmp	r6, #0
   89944:	f300 8122 	bgt.w	89b8c <_dtoa_r+0xa64>
   89948:	f1b9 0f00 	cmp.w	r9, #0
   8994c:	f040 81f9 	bne.w	89d42 <_dtoa_r+0xc1a>
   89950:	462f      	mov	r7, r5
   89952:	9903      	ldr	r1, [sp, #12]
   89954:	9b04      	ldr	r3, [sp, #16]
   89956:	460e      	mov	r6, r1
   89958:	f003 0201 	and.w	r2, r3, #1
   8995c:	1e4b      	subs	r3, r1, #1
   8995e:	9924      	ldr	r1, [sp, #144]	; 0x90
   89960:	920c      	str	r2, [sp, #48]	; 0x30
   89962:	430a      	orrs	r2, r1
   89964:	920b      	str	r2, [sp, #44]	; 0x2c
   89966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89968:	441a      	add	r2, r3
   8996a:	920a      	str	r2, [sp, #40]	; 0x28
   8996c:	4641      	mov	r1, r8
   8996e:	4650      	mov	r0, sl
   89970:	f7ff fb48 	bl	89004 <quorem>
   89974:	4629      	mov	r1, r5
   89976:	4683      	mov	fp, r0
   89978:	4650      	mov	r0, sl
   8997a:	f001 fe49 	bl	8b610 <__mcmp>
   8997e:	463a      	mov	r2, r7
   89980:	4641      	mov	r1, r8
   89982:	4681      	mov	r9, r0
   89984:	4620      	mov	r0, r4
   89986:	f001 fe61 	bl	8b64c <__mdiff>
   8998a:	68c2      	ldr	r2, [r0, #12]
   8998c:	4601      	mov	r1, r0
   8998e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   89992:	2a00      	cmp	r2, #0
   89994:	d142      	bne.n	89a1c <_dtoa_r+0x8f4>
   89996:	9006      	str	r0, [sp, #24]
   89998:	4650      	mov	r0, sl
   8999a:	9308      	str	r3, [sp, #32]
   8999c:	f001 fe38 	bl	8b610 <__mcmp>
   899a0:	9906      	ldr	r1, [sp, #24]
   899a2:	9004      	str	r0, [sp, #16]
   899a4:	4620      	mov	r0, r4
   899a6:	f001 fc05 	bl	8b1b4 <_Bfree>
   899aa:	9a04      	ldr	r2, [sp, #16]
   899ac:	9b08      	ldr	r3, [sp, #32]
   899ae:	b91a      	cbnz	r2, 899b8 <_dtoa_r+0x890>
   899b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   899b2:	2900      	cmp	r1, #0
   899b4:	f000 82cb 	beq.w	89f4e <_dtoa_r+0xe26>
   899b8:	f1b9 0f00 	cmp.w	r9, #0
   899bc:	f2c0 8185 	blt.w	89cca <_dtoa_r+0xba2>
   899c0:	9924      	ldr	r1, [sp, #144]	; 0x90
   899c2:	ea41 0909 	orr.w	r9, r1, r9
   899c6:	990c      	ldr	r1, [sp, #48]	; 0x30
   899c8:	ea51 0109 	orrs.w	r1, r1, r9
   899cc:	f000 817d 	beq.w	89cca <_dtoa_r+0xba2>
   899d0:	2a00      	cmp	r2, #0
   899d2:	f300 81d1 	bgt.w	89d78 <_dtoa_r+0xc50>
   899d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   899d8:	f106 0901 	add.w	r9, r6, #1
   899dc:	4296      	cmp	r6, r2
   899de:	46cb      	mov	fp, r9
   899e0:	7033      	strb	r3, [r6, #0]
   899e2:	f000 81e3 	beq.w	89dac <_dtoa_r+0xc84>
   899e6:	4651      	mov	r1, sl
   899e8:	2300      	movs	r3, #0
   899ea:	220a      	movs	r2, #10
   899ec:	4620      	mov	r0, r4
   899ee:	f001 fbeb 	bl	8b1c8 <__multadd>
   899f2:	42bd      	cmp	r5, r7
   899f4:	4682      	mov	sl, r0
   899f6:	4629      	mov	r1, r5
   899f8:	f04f 0300 	mov.w	r3, #0
   899fc:	f04f 020a 	mov.w	r2, #10
   89a00:	4620      	mov	r0, r4
   89a02:	d012      	beq.n	89a2a <_dtoa_r+0x902>
   89a04:	f001 fbe0 	bl	8b1c8 <__multadd>
   89a08:	4639      	mov	r1, r7
   89a0a:	4605      	mov	r5, r0
   89a0c:	2300      	movs	r3, #0
   89a0e:	220a      	movs	r2, #10
   89a10:	4620      	mov	r0, r4
   89a12:	f001 fbd9 	bl	8b1c8 <__multadd>
   89a16:	464e      	mov	r6, r9
   89a18:	4607      	mov	r7, r0
   89a1a:	e7a7      	b.n	8996c <_dtoa_r+0x844>
   89a1c:	4620      	mov	r0, r4
   89a1e:	9304      	str	r3, [sp, #16]
   89a20:	f001 fbc8 	bl	8b1b4 <_Bfree>
   89a24:	2201      	movs	r2, #1
   89a26:	9b04      	ldr	r3, [sp, #16]
   89a28:	e7c6      	b.n	899b8 <_dtoa_r+0x890>
   89a2a:	f001 fbcd 	bl	8b1c8 <__multadd>
   89a2e:	464e      	mov	r6, r9
   89a30:	4605      	mov	r5, r0
   89a32:	4607      	mov	r7, r0
   89a34:	e79a      	b.n	8996c <_dtoa_r+0x844>
   89a36:	bf00      	nop
   89a38:	0008d004 	.word	0x0008d004
   89a3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89a3e:	2b02      	cmp	r3, #2
   89a40:	dc7e      	bgt.n	89b40 <_dtoa_r+0xa18>
   89a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89a44:	2b00      	cmp	r3, #0
   89a46:	f47f af7c 	bne.w	89942 <_dtoa_r+0x81a>
   89a4a:	4641      	mov	r1, r8
   89a4c:	4650      	mov	r0, sl
   89a4e:	f7ff fad9 	bl	89004 <quorem>
   89a52:	9a07      	ldr	r2, [sp, #28]
   89a54:	f8dd b00c 	ldr.w	fp, [sp, #12]
   89a58:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89a5c:	3201      	adds	r2, #1
   89a5e:	2600      	movs	r6, #0
   89a60:	9207      	str	r2, [sp, #28]
   89a62:	f80b 3b01 	strb.w	r3, [fp], #1
   89a66:	e6f5      	b.n	89854 <_dtoa_r+0x72c>
   89a68:	4641      	mov	r1, r8
   89a6a:	4650      	mov	r0, sl
   89a6c:	f001 fdd0 	bl	8b610 <__mcmp>
   89a70:	2800      	cmp	r0, #0
   89a72:	f6bf aec4 	bge.w	897fe <_dtoa_r+0x6d6>
   89a76:	4651      	mov	r1, sl
   89a78:	2300      	movs	r3, #0
   89a7a:	220a      	movs	r2, #10
   89a7c:	4620      	mov	r0, r4
   89a7e:	f001 fba3 	bl	8b1c8 <__multadd>
   89a82:	9b07      	ldr	r3, [sp, #28]
   89a84:	4682      	mov	sl, r0
   89a86:	1e5f      	subs	r7, r3, #1
   89a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89a8a:	2b00      	cmp	r3, #0
   89a8c:	f47f af4c 	bne.w	89928 <_dtoa_r+0x800>
   89a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89a92:	2b00      	cmp	r3, #0
   89a94:	f340 8262 	ble.w	89f5c <_dtoa_r+0xe34>
   89a98:	930a      	str	r3, [sp, #40]	; 0x28
   89a9a:	e6bb      	b.n	89814 <_dtoa_r+0x6ec>
   89a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89a9e:	4651      	mov	r1, sl
   89aa0:	4620      	mov	r0, r4
   89aa2:	f001 fcf5 	bl	8b490 <__pow5mult>
   89aa6:	4682      	mov	sl, r0
   89aa8:	e66c      	b.n	89784 <_dtoa_r+0x65c>
   89aaa:	4bba      	ldr	r3, [pc, #744]	; (89d94 <_dtoa_r+0xc6c>)
   89aac:	9303      	str	r3, [sp, #12]
   89aae:	3303      	adds	r3, #3
   89ab0:	e419      	b.n	892e6 <_dtoa_r+0x1be>
   89ab2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89ab6:	2900      	cmp	r1, #0
   89ab8:	f47f ae71 	bne.w	8979e <_dtoa_r+0x676>
   89abc:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89ac0:	2b00      	cmp	r3, #0
   89ac2:	f47f ae6c 	bne.w	8979e <_dtoa_r+0x676>
   89ac6:	4bb4      	ldr	r3, [pc, #720]	; (89d98 <_dtoa_r+0xc70>)
   89ac8:	4013      	ands	r3, r2
   89aca:	2b00      	cmp	r3, #0
   89acc:	f000 822a 	beq.w	89f24 <_dtoa_r+0xdfc>
   89ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89ad2:	f04f 0901 	mov.w	r9, #1
   89ad6:	3301      	adds	r3, #1
   89ad8:	930b      	str	r3, [sp, #44]	; 0x2c
   89ada:	9b06      	ldr	r3, [sp, #24]
   89adc:	3301      	adds	r3, #1
   89ade:	9306      	str	r3, [sp, #24]
   89ae0:	e65f      	b.n	897a2 <_dtoa_r+0x67a>
   89ae2:	2301      	movs	r3, #1
   89ae4:	930c      	str	r3, [sp, #48]	; 0x30
   89ae6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89ae8:	9a07      	ldr	r2, [sp, #28]
   89aea:	4413      	add	r3, r2
   89aec:	9312      	str	r3, [sp, #72]	; 0x48
   89aee:	3301      	adds	r3, #1
   89af0:	2b01      	cmp	r3, #1
   89af2:	461e      	mov	r6, r3
   89af4:	bfb8      	it	lt
   89af6:	2601      	movlt	r6, #1
   89af8:	930a      	str	r3, [sp, #40]	; 0x28
   89afa:	2100      	movs	r1, #0
   89afc:	2e17      	cmp	r6, #23
   89afe:	6461      	str	r1, [r4, #68]	; 0x44
   89b00:	f77f ac43 	ble.w	8938a <_dtoa_r+0x262>
   89b04:	2201      	movs	r2, #1
   89b06:	2304      	movs	r3, #4
   89b08:	005b      	lsls	r3, r3, #1
   89b0a:	f103 0014 	add.w	r0, r3, #20
   89b0e:	42b0      	cmp	r0, r6
   89b10:	4611      	mov	r1, r2
   89b12:	f102 0201 	add.w	r2, r2, #1
   89b16:	d9f7      	bls.n	89b08 <_dtoa_r+0x9e0>
   89b18:	6461      	str	r1, [r4, #68]	; 0x44
   89b1a:	e436      	b.n	8938a <_dtoa_r+0x262>
   89b1c:	2301      	movs	r3, #1
   89b1e:	930c      	str	r3, [sp, #48]	; 0x30
   89b20:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89b22:	2b00      	cmp	r3, #0
   89b24:	dd46      	ble.n	89bb4 <_dtoa_r+0xa8c>
   89b26:	461e      	mov	r6, r3
   89b28:	9312      	str	r3, [sp, #72]	; 0x48
   89b2a:	930a      	str	r3, [sp, #40]	; 0x28
   89b2c:	e7e5      	b.n	89afa <_dtoa_r+0x9d2>
   89b2e:	2300      	movs	r3, #0
   89b30:	930c      	str	r3, [sp, #48]	; 0x30
   89b32:	e7d8      	b.n	89ae6 <_dtoa_r+0x9be>
   89b34:	2300      	movs	r3, #0
   89b36:	930c      	str	r3, [sp, #48]	; 0x30
   89b38:	e7f2      	b.n	89b20 <_dtoa_r+0x9f8>
   89b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89b3c:	9707      	str	r7, [sp, #28]
   89b3e:	930a      	str	r3, [sp, #40]	; 0x28
   89b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89b42:	2b00      	cmp	r3, #0
   89b44:	f47f ad40 	bne.w	895c8 <_dtoa_r+0x4a0>
   89b48:	4641      	mov	r1, r8
   89b4a:	2205      	movs	r2, #5
   89b4c:	4620      	mov	r0, r4
   89b4e:	f001 fb3b 	bl	8b1c8 <__multadd>
   89b52:	4680      	mov	r8, r0
   89b54:	4650      	mov	r0, sl
   89b56:	4641      	mov	r1, r8
   89b58:	f001 fd5a 	bl	8b610 <__mcmp>
   89b5c:	2800      	cmp	r0, #0
   89b5e:	f77f ad33 	ble.w	895c8 <_dtoa_r+0x4a0>
   89b62:	9f03      	ldr	r7, [sp, #12]
   89b64:	2231      	movs	r2, #49	; 0x31
   89b66:	463b      	mov	r3, r7
   89b68:	9e07      	ldr	r6, [sp, #28]
   89b6a:	f803 2b01 	strb.w	r2, [r3], #1
   89b6e:	3601      	adds	r6, #1
   89b70:	9303      	str	r3, [sp, #12]
   89b72:	4641      	mov	r1, r8
   89b74:	4620      	mov	r0, r4
   89b76:	f001 fb1d 	bl	8b1b4 <_Bfree>
   89b7a:	1c73      	adds	r3, r6, #1
   89b7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   89b80:	9307      	str	r3, [sp, #28]
   89b82:	9703      	str	r7, [sp, #12]
   89b84:	2d00      	cmp	r5, #0
   89b86:	f47f ae90 	bne.w	898aa <_dtoa_r+0x782>
   89b8a:	e692      	b.n	898b2 <_dtoa_r+0x78a>
   89b8c:	4629      	mov	r1, r5
   89b8e:	4632      	mov	r2, r6
   89b90:	4620      	mov	r0, r4
   89b92:	f001 fcc9 	bl	8b528 <__lshift>
   89b96:	4605      	mov	r5, r0
   89b98:	e6d6      	b.n	89948 <_dtoa_r+0x820>
   89b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89b9c:	970d      	str	r7, [sp, #52]	; 0x34
   89b9e:	1afb      	subs	r3, r7, r3
   89ba0:	449b      	add	fp, r3
   89ba2:	2700      	movs	r7, #0
   89ba4:	e58c      	b.n	896c0 <_dtoa_r+0x598>
   89ba6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89baa:	f04f 0902 	mov.w	r9, #2
   89bae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   89bb2:	e417      	b.n	893e4 <_dtoa_r+0x2bc>
   89bb4:	2301      	movs	r3, #1
   89bb6:	9325      	str	r3, [sp, #148]	; 0x94
   89bb8:	930a      	str	r3, [sp, #40]	; 0x28
   89bba:	f7ff bbe2 	b.w	89382 <_dtoa_r+0x25a>
   89bbe:	d103      	bne.n	89bc8 <_dtoa_r+0xaa0>
   89bc0:	9b04      	ldr	r3, [sp, #16]
   89bc2:	07db      	lsls	r3, r3, #31
   89bc4:	f53f ae53 	bmi.w	8986e <_dtoa_r+0x746>
   89bc8:	46d9      	mov	r9, fp
   89bca:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89bce:	2b30      	cmp	r3, #48	; 0x30
   89bd0:	d0fa      	beq.n	89bc8 <_dtoa_r+0xaa0>
   89bd2:	e65e      	b.n	89892 <_dtoa_r+0x76a>
   89bd4:	4648      	mov	r0, r9
   89bd6:	f002 fcf3 	bl	8c5c0 <__aeabi_i2d>
   89bda:	4632      	mov	r2, r6
   89bdc:	463b      	mov	r3, r7
   89bde:	f002 fd59 	bl	8c694 <__aeabi_dmul>
   89be2:	2200      	movs	r2, #0
   89be4:	4b6d      	ldr	r3, [pc, #436]	; (89d9c <_dtoa_r+0xc74>)
   89be6:	f002 fb9f 	bl	8c328 <__adddf3>
   89bea:	4680      	mov	r8, r0
   89bec:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89bf0:	4630      	mov	r0, r6
   89bf2:	4639      	mov	r1, r7
   89bf4:	2200      	movs	r2, #0
   89bf6:	4b6a      	ldr	r3, [pc, #424]	; (89da0 <_dtoa_r+0xc78>)
   89bf8:	f002 fb94 	bl	8c324 <__aeabi_dsub>
   89bfc:	4642      	mov	r2, r8
   89bfe:	464b      	mov	r3, r9
   89c00:	4606      	mov	r6, r0
   89c02:	460f      	mov	r7, r1
   89c04:	f002 ffd6 	bl	8cbb4 <__aeabi_dcmpgt>
   89c08:	2800      	cmp	r0, #0
   89c0a:	f040 8187 	bne.w	89f1c <_dtoa_r+0xdf4>
   89c0e:	4642      	mov	r2, r8
   89c10:	4630      	mov	r0, r6
   89c12:	4639      	mov	r1, r7
   89c14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   89c18:	f002 ffae 	bl	8cb78 <__aeabi_dcmplt>
   89c1c:	2800      	cmp	r0, #0
   89c1e:	f43f acaa 	beq.w	89576 <_dtoa_r+0x44e>
   89c22:	f04f 0800 	mov.w	r8, #0
   89c26:	4645      	mov	r5, r8
   89c28:	e4ce      	b.n	895c8 <_dtoa_r+0x4a0>
   89c2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   89c2c:	2a00      	cmp	r2, #0
   89c2e:	f000 80c3 	beq.w	89db8 <_dtoa_r+0xc90>
   89c32:	9a06      	ldr	r2, [sp, #24]
   89c34:	f203 4333 	addw	r3, r3, #1075	; 0x433
   89c38:	441a      	add	r2, r3
   89c3a:	9206      	str	r2, [sp, #24]
   89c3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89c3e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89c40:	4616      	mov	r6, r2
   89c42:	441a      	add	r2, r3
   89c44:	920b      	str	r2, [sp, #44]	; 0x2c
   89c46:	e547      	b.n	896d8 <_dtoa_r+0x5b0>
   89c48:	2331      	movs	r3, #49	; 0x31
   89c4a:	9a07      	ldr	r2, [sp, #28]
   89c4c:	3201      	adds	r2, #1
   89c4e:	9207      	str	r2, [sp, #28]
   89c50:	9a03      	ldr	r2, [sp, #12]
   89c52:	7013      	strb	r3, [r2, #0]
   89c54:	e61d      	b.n	89892 <_dtoa_r+0x76a>
   89c56:	f000 814b 	beq.w	89ef0 <_dtoa_r+0xdc8>
   89c5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89c5e:	9b07      	ldr	r3, [sp, #28]
   89c60:	425d      	negs	r5, r3
   89c62:	4b50      	ldr	r3, [pc, #320]	; (89da4 <_dtoa_r+0xc7c>)
   89c64:	f005 020f 	and.w	r2, r5, #15
   89c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c70:	f002 fd10 	bl	8c694 <__aeabi_dmul>
   89c74:	112d      	asrs	r5, r5, #4
   89c76:	4606      	mov	r6, r0
   89c78:	460f      	mov	r7, r1
   89c7a:	f000 817d 	beq.w	89f78 <_dtoa_r+0xe50>
   89c7e:	2300      	movs	r3, #0
   89c80:	f04f 0902 	mov.w	r9, #2
   89c84:	f8df 8120 	ldr.w	r8, [pc, #288]	; 89da8 <_dtoa_r+0xc80>
   89c88:	07ea      	lsls	r2, r5, #31
   89c8a:	d505      	bpl.n	89c98 <_dtoa_r+0xb70>
   89c8c:	e9d8 2300 	ldrd	r2, r3, [r8]
   89c90:	f002 fd00 	bl	8c694 <__aeabi_dmul>
   89c94:	2301      	movs	r3, #1
   89c96:	4499      	add	r9, r3
   89c98:	106d      	asrs	r5, r5, #1
   89c9a:	f108 0808 	add.w	r8, r8, #8
   89c9e:	d1f3      	bne.n	89c88 <_dtoa_r+0xb60>
   89ca0:	2b00      	cmp	r3, #0
   89ca2:	f43f abba 	beq.w	8941a <_dtoa_r+0x2f2>
   89ca6:	4606      	mov	r6, r0
   89ca8:	460f      	mov	r7, r1
   89caa:	f7ff bbb6 	b.w	8941a <_dtoa_r+0x2f2>
   89cae:	900e      	str	r0, [sp, #56]	; 0x38
   89cb0:	e520      	b.n	896f4 <_dtoa_r+0x5cc>
   89cb2:	9b04      	ldr	r3, [sp, #16]
   89cb4:	2b00      	cmp	r3, #0
   89cb6:	f47f ae2b 	bne.w	89910 <_dtoa_r+0x7e8>
   89cba:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89cbe:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89cc2:	2b00      	cmp	r3, #0
   89cc4:	f43f aeff 	beq.w	89ac6 <_dtoa_r+0x99e>
   89cc8:	e622      	b.n	89910 <_dtoa_r+0x7e8>
   89cca:	2a00      	cmp	r2, #0
   89ccc:	dd12      	ble.n	89cf4 <_dtoa_r+0xbcc>
   89cce:	4651      	mov	r1, sl
   89cd0:	2201      	movs	r2, #1
   89cd2:	4620      	mov	r0, r4
   89cd4:	9304      	str	r3, [sp, #16]
   89cd6:	f001 fc27 	bl	8b528 <__lshift>
   89cda:	4641      	mov	r1, r8
   89cdc:	4682      	mov	sl, r0
   89cde:	f001 fc97 	bl	8b610 <__mcmp>
   89ce2:	2800      	cmp	r0, #0
   89ce4:	9b04      	ldr	r3, [sp, #16]
   89ce6:	f340 812c 	ble.w	89f42 <_dtoa_r+0xe1a>
   89cea:	2b39      	cmp	r3, #57	; 0x39
   89cec:	f000 810c 	beq.w	89f08 <_dtoa_r+0xde0>
   89cf0:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   89cf4:	46b1      	mov	r9, r6
   89cf6:	f809 3b01 	strb.w	r3, [r9], #1
   89cfa:	9b07      	ldr	r3, [sp, #28]
   89cfc:	462e      	mov	r6, r5
   89cfe:	3301      	adds	r3, #1
   89d00:	463d      	mov	r5, r7
   89d02:	9307      	str	r3, [sp, #28]
   89d04:	e5c5      	b.n	89892 <_dtoa_r+0x76a>
   89d06:	4655      	mov	r5, sl
   89d08:	9c08      	ldr	r4, [sp, #32]
   89d0a:	f8dd a018 	ldr.w	sl, [sp, #24]
   89d0e:	4602      	mov	r2, r0
   89d10:	460b      	mov	r3, r1
   89d12:	f002 fb09 	bl	8c328 <__adddf3>
   89d16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89d1a:	4606      	mov	r6, r0
   89d1c:	460f      	mov	r7, r1
   89d1e:	f002 ff49 	bl	8cbb4 <__aeabi_dcmpgt>
   89d22:	b960      	cbnz	r0, 89d3e <_dtoa_r+0xc16>
   89d24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89d28:	4630      	mov	r0, r6
   89d2a:	4639      	mov	r1, r7
   89d2c:	f002 ff1a 	bl	8cb64 <__aeabi_dcmpeq>
   89d30:	2800      	cmp	r0, #0
   89d32:	f43f aca3 	beq.w	8967c <_dtoa_r+0x554>
   89d36:	f018 0f01 	tst.w	r8, #1
   89d3a:	f43f ac9f 	beq.w	8967c <_dtoa_r+0x554>
   89d3e:	9a03      	ldr	r2, [sp, #12]
   89d40:	e40a      	b.n	89558 <_dtoa_r+0x430>
   89d42:	4620      	mov	r0, r4
   89d44:	6869      	ldr	r1, [r5, #4]
   89d46:	f001 fa0f 	bl	8b168 <_Balloc>
   89d4a:	4606      	mov	r6, r0
   89d4c:	2800      	cmp	r0, #0
   89d4e:	f000 8117 	beq.w	89f80 <_dtoa_r+0xe58>
   89d52:	692b      	ldr	r3, [r5, #16]
   89d54:	f105 010c 	add.w	r1, r5, #12
   89d58:	3302      	adds	r3, #2
   89d5a:	009a      	lsls	r2, r3, #2
   89d5c:	300c      	adds	r0, #12
   89d5e:	f7fc fad1 	bl	86304 <memcpy>
   89d62:	4631      	mov	r1, r6
   89d64:	2201      	movs	r2, #1
   89d66:	4620      	mov	r0, r4
   89d68:	f001 fbde 	bl	8b528 <__lshift>
   89d6c:	4607      	mov	r7, r0
   89d6e:	e5f0      	b.n	89952 <_dtoa_r+0x82a>
   89d70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   89d74:	1a9e      	subs	r6, r3, r2
   89d76:	e4af      	b.n	896d8 <_dtoa_r+0x5b0>
   89d78:	2b39      	cmp	r3, #57	; 0x39
   89d7a:	f000 80c5 	beq.w	89f08 <_dtoa_r+0xde0>
   89d7e:	46b1      	mov	r9, r6
   89d80:	3301      	adds	r3, #1
   89d82:	f809 3b01 	strb.w	r3, [r9], #1
   89d86:	9b07      	ldr	r3, [sp, #28]
   89d88:	462e      	mov	r6, r5
   89d8a:	3301      	adds	r3, #1
   89d8c:	463d      	mov	r5, r7
   89d8e:	9307      	str	r3, [sp, #28]
   89d90:	e57f      	b.n	89892 <_dtoa_r+0x76a>
   89d92:	bf00      	nop
   89d94:	0008d048 	.word	0x0008d048
   89d98:	7ff00000 	.word	0x7ff00000
   89d9c:	401c0000 	.word	0x401c0000
   89da0:	40140000 	.word	0x40140000
   89da4:	0008d1a0 	.word	0x0008d1a0
   89da8:	0008d178 	.word	0x0008d178
   89dac:	9a07      	ldr	r2, [sp, #28]
   89dae:	462e      	mov	r6, r5
   89db0:	3201      	adds	r2, #1
   89db2:	463d      	mov	r5, r7
   89db4:	9207      	str	r2, [sp, #28]
   89db6:	e54d      	b.n	89854 <_dtoa_r+0x72c>
   89db8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   89dba:	9a06      	ldr	r2, [sp, #24]
   89dbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89dbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   89dc2:	441a      	add	r2, r3
   89dc4:	9206      	str	r2, [sp, #24]
   89dc6:	460a      	mov	r2, r1
   89dc8:	441a      	add	r2, r3
   89dca:	460e      	mov	r6, r1
   89dcc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89dce:	920b      	str	r2, [sp, #44]	; 0x2c
   89dd0:	e482      	b.n	896d8 <_dtoa_r+0x5b0>
   89dd2:	9810      	ldr	r0, [sp, #64]	; 0x40
   89dd4:	497f      	ldr	r1, [pc, #508]	; (89fd4 <_dtoa_r+0xeac>)
   89dd6:	4642      	mov	r2, r8
   89dd8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   89ddc:	464b      	mov	r3, r9
   89dde:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   89de2:	f002 fc57 	bl	8c694 <__aeabi_dmul>
   89de6:	4602      	mov	r2, r0
   89de8:	460b      	mov	r3, r1
   89dea:	4630      	mov	r0, r6
   89dec:	4639      	mov	r1, r7
   89dee:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   89df2:	f002 feff 	bl	8cbf4 <__aeabi_d2iz>
   89df6:	4680      	mov	r8, r0
   89df8:	f002 fbe2 	bl	8c5c0 <__aeabi_i2d>
   89dfc:	460b      	mov	r3, r1
   89dfe:	4602      	mov	r2, r0
   89e00:	4639      	mov	r1, r7
   89e02:	4630      	mov	r0, r6
   89e04:	f002 fa8e 	bl	8c324 <__aeabi_dsub>
   89e08:	4606      	mov	r6, r0
   89e0a:	9810      	ldr	r0, [sp, #64]	; 0x40
   89e0c:	9d03      	ldr	r5, [sp, #12]
   89e0e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89e12:	2801      	cmp	r0, #1
   89e14:	460f      	mov	r7, r1
   89e16:	f805 3b01 	strb.w	r3, [r5], #1
   89e1a:	d01e      	beq.n	89e5a <_dtoa_r+0xd32>
   89e1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89e1e:	9a03      	ldr	r2, [sp, #12]
   89e20:	4413      	add	r3, r2
   89e22:	4698      	mov	r8, r3
   89e24:	2200      	movs	r2, #0
   89e26:	4b6c      	ldr	r3, [pc, #432]	; (89fd8 <_dtoa_r+0xeb0>)
   89e28:	4630      	mov	r0, r6
   89e2a:	4639      	mov	r1, r7
   89e2c:	f002 fc32 	bl	8c694 <__aeabi_dmul>
   89e30:	460f      	mov	r7, r1
   89e32:	4606      	mov	r6, r0
   89e34:	f002 fede 	bl	8cbf4 <__aeabi_d2iz>
   89e38:	4681      	mov	r9, r0
   89e3a:	f002 fbc1 	bl	8c5c0 <__aeabi_i2d>
   89e3e:	4602      	mov	r2, r0
   89e40:	460b      	mov	r3, r1
   89e42:	4630      	mov	r0, r6
   89e44:	4639      	mov	r1, r7
   89e46:	f002 fa6d 	bl	8c324 <__aeabi_dsub>
   89e4a:	f109 0930 	add.w	r9, r9, #48	; 0x30
   89e4e:	f805 9b01 	strb.w	r9, [r5], #1
   89e52:	4545      	cmp	r5, r8
   89e54:	4606      	mov	r6, r0
   89e56:	460f      	mov	r7, r1
   89e58:	d1e4      	bne.n	89e24 <_dtoa_r+0xcfc>
   89e5a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   89e5e:	2200      	movs	r2, #0
   89e60:	4b5e      	ldr	r3, [pc, #376]	; (89fdc <_dtoa_r+0xeb4>)
   89e62:	4640      	mov	r0, r8
   89e64:	4649      	mov	r1, r9
   89e66:	f002 fa5f 	bl	8c328 <__adddf3>
   89e6a:	4632      	mov	r2, r6
   89e6c:	463b      	mov	r3, r7
   89e6e:	f002 fe83 	bl	8cb78 <__aeabi_dcmplt>
   89e72:	2800      	cmp	r0, #0
   89e74:	d158      	bne.n	89f28 <_dtoa_r+0xe00>
   89e76:	4642      	mov	r2, r8
   89e78:	464b      	mov	r3, r9
   89e7a:	2000      	movs	r0, #0
   89e7c:	4957      	ldr	r1, [pc, #348]	; (89fdc <_dtoa_r+0xeb4>)
   89e7e:	f002 fa51 	bl	8c324 <__aeabi_dsub>
   89e82:	4632      	mov	r2, r6
   89e84:	463b      	mov	r3, r7
   89e86:	f002 fe95 	bl	8cbb4 <__aeabi_dcmpgt>
   89e8a:	2800      	cmp	r0, #0
   89e8c:	f43f ab73 	beq.w	89576 <_dtoa_r+0x44e>
   89e90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89e94:	46a9      	mov	r9, r5
   89e96:	2b30      	cmp	r3, #48	; 0x30
   89e98:	f105 35ff 	add.w	r5, r5, #4294967295
   89e9c:	d0f8      	beq.n	89e90 <_dtoa_r+0xd68>
   89e9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89ea0:	3301      	adds	r3, #1
   89ea2:	9307      	str	r3, [sp, #28]
   89ea4:	e505      	b.n	898b2 <_dtoa_r+0x78a>
   89ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89ea8:	2b00      	cmp	r3, #0
   89eaa:	f43f ae93 	beq.w	89bd4 <_dtoa_r+0xaac>
   89eae:	9d12      	ldr	r5, [sp, #72]	; 0x48
   89eb0:	2d00      	cmp	r5, #0
   89eb2:	f77f ab60 	ble.w	89576 <_dtoa_r+0x44e>
   89eb6:	2200      	movs	r2, #0
   89eb8:	4b47      	ldr	r3, [pc, #284]	; (89fd8 <_dtoa_r+0xeb0>)
   89eba:	4630      	mov	r0, r6
   89ebc:	4639      	mov	r1, r7
   89ebe:	f002 fbe9 	bl	8c694 <__aeabi_dmul>
   89ec2:	4606      	mov	r6, r0
   89ec4:	460f      	mov	r7, r1
   89ec6:	f109 0001 	add.w	r0, r9, #1
   89eca:	f002 fb79 	bl	8c5c0 <__aeabi_i2d>
   89ece:	4632      	mov	r2, r6
   89ed0:	463b      	mov	r3, r7
   89ed2:	f002 fbdf 	bl	8c694 <__aeabi_dmul>
   89ed6:	2200      	movs	r2, #0
   89ed8:	4b41      	ldr	r3, [pc, #260]	; (89fe0 <_dtoa_r+0xeb8>)
   89eda:	f002 fa25 	bl	8c328 <__adddf3>
   89ede:	9a07      	ldr	r2, [sp, #28]
   89ee0:	4680      	mov	r8, r0
   89ee2:	3a01      	subs	r2, #1
   89ee4:	9213      	str	r2, [sp, #76]	; 0x4c
   89ee6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89eea:	9510      	str	r5, [sp, #64]	; 0x40
   89eec:	f7ff bab6 	b.w	8945c <_dtoa_r+0x334>
   89ef0:	f04f 0902 	mov.w	r9, #2
   89ef4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   89ef8:	f7ff ba8f 	b.w	8941a <_dtoa_r+0x2f2>
   89efc:	9b07      	ldr	r3, [sp, #28]
   89efe:	3301      	adds	r3, #1
   89f00:	9307      	str	r3, [sp, #28]
   89f02:	2331      	movs	r3, #49	; 0x31
   89f04:	f7ff bb2f 	b.w	89566 <_dtoa_r+0x43e>
   89f08:	46b3      	mov	fp, r6
   89f0a:	2339      	movs	r3, #57	; 0x39
   89f0c:	9a07      	ldr	r2, [sp, #28]
   89f0e:	462e      	mov	r6, r5
   89f10:	3201      	adds	r2, #1
   89f12:	463d      	mov	r5, r7
   89f14:	9207      	str	r2, [sp, #28]
   89f16:	f80b 3b01 	strb.w	r3, [fp], #1
   89f1a:	e4aa      	b.n	89872 <_dtoa_r+0x74a>
   89f1c:	f04f 0800 	mov.w	r8, #0
   89f20:	4645      	mov	r5, r8
   89f22:	e61e      	b.n	89b62 <_dtoa_r+0xa3a>
   89f24:	4699      	mov	r9, r3
   89f26:	e43c      	b.n	897a2 <_dtoa_r+0x67a>
   89f28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89f2a:	9a03      	ldr	r2, [sp, #12]
   89f2c:	9307      	str	r3, [sp, #28]
   89f2e:	f7ff bb13 	b.w	89558 <_dtoa_r+0x430>
   89f32:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89f36:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89f3a:	46a9      	mov	r9, r5
   89f3c:	3301      	adds	r3, #1
   89f3e:	9307      	str	r3, [sp, #28]
   89f40:	e4b7      	b.n	898b2 <_dtoa_r+0x78a>
   89f42:	f47f aed7 	bne.w	89cf4 <_dtoa_r+0xbcc>
   89f46:	07da      	lsls	r2, r3, #31
   89f48:	f57f aed4 	bpl.w	89cf4 <_dtoa_r+0xbcc>
   89f4c:	e6cd      	b.n	89cea <_dtoa_r+0xbc2>
   89f4e:	2b39      	cmp	r3, #57	; 0x39
   89f50:	d0da      	beq.n	89f08 <_dtoa_r+0xde0>
   89f52:	f1b9 0f00 	cmp.w	r9, #0
   89f56:	f73f aecb 	bgt.w	89cf0 <_dtoa_r+0xbc8>
   89f5a:	e6cb      	b.n	89cf4 <_dtoa_r+0xbcc>
   89f5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f5e:	2b02      	cmp	r3, #2
   89f60:	f73f adeb 	bgt.w	89b3a <_dtoa_r+0xa12>
   89f64:	9707      	str	r7, [sp, #28]
   89f66:	e570      	b.n	89a4a <_dtoa_r+0x922>
   89f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f6a:	2b02      	cmp	r3, #2
   89f6c:	f73f ade5 	bgt.w	89b3a <_dtoa_r+0xa12>
   89f70:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89f72:	9707      	str	r7, [sp, #28]
   89f74:	930a      	str	r3, [sp, #40]	; 0x28
   89f76:	e4e4      	b.n	89942 <_dtoa_r+0x81a>
   89f78:	f04f 0902 	mov.w	r9, #2
   89f7c:	f7ff ba4d 	b.w	8941a <_dtoa_r+0x2f2>
   89f80:	4602      	mov	r2, r0
   89f82:	f240 21ea 	movw	r1, #746	; 0x2ea
   89f86:	4b17      	ldr	r3, [pc, #92]	; (89fe4 <_dtoa_r+0xebc>)
   89f88:	4817      	ldr	r0, [pc, #92]	; (89fe8 <_dtoa_r+0xec0>)
   89f8a:	f002 f845 	bl	8c018 <__assert_func>
   89f8e:	4b17      	ldr	r3, [pc, #92]	; (89fec <_dtoa_r+0xec4>)
   89f90:	9303      	str	r3, [sp, #12]
   89f92:	f7ff b904 	b.w	8919e <_dtoa_r+0x76>
   89f96:	2500      	movs	r5, #0
   89f98:	4620      	mov	r0, r4
   89f9a:	4629      	mov	r1, r5
   89f9c:	6465      	str	r5, [r4, #68]	; 0x44
   89f9e:	f001 f8e3 	bl	8b168 <_Balloc>
   89fa2:	9003      	str	r0, [sp, #12]
   89fa4:	b958      	cbnz	r0, 89fbe <_dtoa_r+0xe96>
   89fa6:	2200      	movs	r2, #0
   89fa8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   89fac:	4b0d      	ldr	r3, [pc, #52]	; (89fe4 <_dtoa_r+0xebc>)
   89fae:	480e      	ldr	r0, [pc, #56]	; (89fe8 <_dtoa_r+0xec0>)
   89fb0:	f002 f832 	bl	8c018 <__assert_func>
   89fb4:	f43f ac0d 	beq.w	897d2 <_dtoa_r+0x6aa>
   89fb8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   89fbc:	e48f      	b.n	898de <_dtoa_r+0x7b6>
   89fbe:	f04f 33ff 	mov.w	r3, #4294967295
   89fc2:	9312      	str	r3, [sp, #72]	; 0x48
   89fc4:	930a      	str	r3, [sp, #40]	; 0x28
   89fc6:	2301      	movs	r3, #1
   89fc8:	9a03      	ldr	r2, [sp, #12]
   89fca:	9525      	str	r5, [sp, #148]	; 0x94
   89fcc:	6422      	str	r2, [r4, #64]	; 0x40
   89fce:	930c      	str	r3, [sp, #48]	; 0x30
   89fd0:	f7ff bad1 	b.w	89576 <_dtoa_r+0x44e>
   89fd4:	0008d1a0 	.word	0x0008d1a0
   89fd8:	40240000 	.word	0x40240000
   89fdc:	3fe00000 	.word	0x3fe00000
   89fe0:	401c0000 	.word	0x401c0000
   89fe4:	0008d058 	.word	0x0008d058
   89fe8:	0008d06c 	.word	0x0008d06c
   89fec:	0008d04c 	.word	0x0008d04c

00089ff0 <__sflush_r>:
   89ff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   89ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89ff8:	460d      	mov	r5, r1
   89ffa:	0711      	lsls	r1, r2, #28
   89ffc:	4680      	mov	r8, r0
   89ffe:	d447      	bmi.n	8a090 <__sflush_r+0xa0>
   8a000:	686b      	ldr	r3, [r5, #4]
   8a002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8a006:	2b00      	cmp	r3, #0
   8a008:	81aa      	strh	r2, [r5, #12]
   8a00a:	dd5e      	ble.n	8a0ca <__sflush_r+0xda>
   8a00c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a00e:	2c00      	cmp	r4, #0
   8a010:	d058      	beq.n	8a0c4 <__sflush_r+0xd4>
   8a012:	2300      	movs	r3, #0
   8a014:	f8d8 6000 	ldr.w	r6, [r8]
   8a018:	f8c8 3000 	str.w	r3, [r8]
   8a01c:	b293      	uxth	r3, r2
   8a01e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8a022:	d156      	bne.n	8a0d2 <__sflush_r+0xe2>
   8a024:	2301      	movs	r3, #1
   8a026:	4640      	mov	r0, r8
   8a028:	69e9      	ldr	r1, [r5, #28]
   8a02a:	47a0      	blx	r4
   8a02c:	1c43      	adds	r3, r0, #1
   8a02e:	d067      	beq.n	8a100 <__sflush_r+0x110>
   8a030:	89ab      	ldrh	r3, [r5, #12]
   8a032:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a034:	075f      	lsls	r7, r3, #29
   8a036:	d505      	bpl.n	8a044 <__sflush_r+0x54>
   8a038:	686a      	ldr	r2, [r5, #4]
   8a03a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8a03c:	1a80      	subs	r0, r0, r2
   8a03e:	b10b      	cbz	r3, 8a044 <__sflush_r+0x54>
   8a040:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a042:	1ac0      	subs	r0, r0, r3
   8a044:	4602      	mov	r2, r0
   8a046:	69e9      	ldr	r1, [r5, #28]
   8a048:	2300      	movs	r3, #0
   8a04a:	4640      	mov	r0, r8
   8a04c:	47a0      	blx	r4
   8a04e:	1c41      	adds	r1, r0, #1
   8a050:	d141      	bne.n	8a0d6 <__sflush_r+0xe6>
   8a052:	f8d8 3000 	ldr.w	r3, [r8]
   8a056:	2b00      	cmp	r3, #0
   8a058:	d03d      	beq.n	8a0d6 <__sflush_r+0xe6>
   8a05a:	2b1d      	cmp	r3, #29
   8a05c:	d001      	beq.n	8a062 <__sflush_r+0x72>
   8a05e:	2b16      	cmp	r3, #22
   8a060:	d156      	bne.n	8a110 <__sflush_r+0x120>
   8a062:	2100      	movs	r1, #0
   8a064:	692a      	ldr	r2, [r5, #16]
   8a066:	89ab      	ldrh	r3, [r5, #12]
   8a068:	e9c5 2100 	strd	r2, r1, [r5]
   8a06c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a070:	81ab      	strh	r3, [r5, #12]
   8a072:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8a074:	f8c8 6000 	str.w	r6, [r8]
   8a078:	b321      	cbz	r1, 8a0c4 <__sflush_r+0xd4>
   8a07a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8a07e:	4299      	cmp	r1, r3
   8a080:	d002      	beq.n	8a088 <__sflush_r+0x98>
   8a082:	4640      	mov	r0, r8
   8a084:	f000 f9cc 	bl	8a420 <_free_r>
   8a088:	2000      	movs	r0, #0
   8a08a:	6328      	str	r0, [r5, #48]	; 0x30
   8a08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a090:	692f      	ldr	r7, [r5, #16]
   8a092:	b1bf      	cbz	r7, 8a0c4 <__sflush_r+0xd4>
   8a094:	b293      	uxth	r3, r2
   8a096:	079a      	lsls	r2, r3, #30
   8a098:	bf18      	it	ne
   8a09a:	2300      	movne	r3, #0
   8a09c:	682e      	ldr	r6, [r5, #0]
   8a09e:	bf08      	it	eq
   8a0a0:	696b      	ldreq	r3, [r5, #20]
   8a0a2:	602f      	str	r7, [r5, #0]
   8a0a4:	1bf6      	subs	r6, r6, r7
   8a0a6:	60ab      	str	r3, [r5, #8]
   8a0a8:	e00a      	b.n	8a0c0 <__sflush_r+0xd0>
   8a0aa:	4633      	mov	r3, r6
   8a0ac:	463a      	mov	r2, r7
   8a0ae:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8a0b0:	4640      	mov	r0, r8
   8a0b2:	69e9      	ldr	r1, [r5, #28]
   8a0b4:	47a0      	blx	r4
   8a0b6:	1e04      	subs	r4, r0, #0
   8a0b8:	eba6 0604 	sub.w	r6, r6, r4
   8a0bc:	4427      	add	r7, r4
   8a0be:	dd17      	ble.n	8a0f0 <__sflush_r+0x100>
   8a0c0:	2e00      	cmp	r6, #0
   8a0c2:	dcf2      	bgt.n	8a0aa <__sflush_r+0xba>
   8a0c4:	2000      	movs	r0, #0
   8a0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a0ca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a0cc:	2b00      	cmp	r3, #0
   8a0ce:	dc9d      	bgt.n	8a00c <__sflush_r+0x1c>
   8a0d0:	e7f8      	b.n	8a0c4 <__sflush_r+0xd4>
   8a0d2:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8a0d4:	e7ae      	b.n	8a034 <__sflush_r+0x44>
   8a0d6:	2100      	movs	r1, #0
   8a0d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8a0dc:	692a      	ldr	r2, [r5, #16]
   8a0de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a0e2:	81ab      	strh	r3, [r5, #12]
   8a0e4:	04db      	lsls	r3, r3, #19
   8a0e6:	e9c5 2100 	strd	r2, r1, [r5]
   8a0ea:	d5c2      	bpl.n	8a072 <__sflush_r+0x82>
   8a0ec:	6528      	str	r0, [r5, #80]	; 0x50
   8a0ee:	e7c0      	b.n	8a072 <__sflush_r+0x82>
   8a0f0:	89ab      	ldrh	r3, [r5, #12]
   8a0f2:	f04f 30ff 	mov.w	r0, #4294967295
   8a0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a0fa:	81ab      	strh	r3, [r5, #12]
   8a0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a100:	f8d8 3000 	ldr.w	r3, [r8]
   8a104:	2b00      	cmp	r3, #0
   8a106:	d093      	beq.n	8a030 <__sflush_r+0x40>
   8a108:	2b1d      	cmp	r3, #29
   8a10a:	d006      	beq.n	8a11a <__sflush_r+0x12a>
   8a10c:	2b16      	cmp	r3, #22
   8a10e:	d004      	beq.n	8a11a <__sflush_r+0x12a>
   8a110:	89ab      	ldrh	r3, [r5, #12]
   8a112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a116:	81ab      	strh	r3, [r5, #12]
   8a118:	e7d5      	b.n	8a0c6 <__sflush_r+0xd6>
   8a11a:	f8c8 6000 	str.w	r6, [r8]
   8a11e:	e7d1      	b.n	8a0c4 <__sflush_r+0xd4>

0008a120 <_fflush_r>:
   8a120:	b538      	push	{r3, r4, r5, lr}
   8a122:	460c      	mov	r4, r1
   8a124:	4605      	mov	r5, r0
   8a126:	b108      	cbz	r0, 8a12c <_fflush_r+0xc>
   8a128:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a12a:	b1a3      	cbz	r3, 8a156 <_fflush_r+0x36>
   8a12c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a130:	b1b8      	cbz	r0, 8a162 <_fflush_r+0x42>
   8a132:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a134:	07db      	lsls	r3, r3, #31
   8a136:	d401      	bmi.n	8a13c <_fflush_r+0x1c>
   8a138:	0581      	lsls	r1, r0, #22
   8a13a:	d515      	bpl.n	8a168 <_fflush_r+0x48>
   8a13c:	4628      	mov	r0, r5
   8a13e:	4621      	mov	r1, r4
   8a140:	f7ff ff56 	bl	89ff0 <__sflush_r>
   8a144:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a146:	4605      	mov	r5, r0
   8a148:	07da      	lsls	r2, r3, #31
   8a14a:	d402      	bmi.n	8a152 <_fflush_r+0x32>
   8a14c:	89a3      	ldrh	r3, [r4, #12]
   8a14e:	059b      	lsls	r3, r3, #22
   8a150:	d50e      	bpl.n	8a170 <_fflush_r+0x50>
   8a152:	4628      	mov	r0, r5
   8a154:	bd38      	pop	{r3, r4, r5, pc}
   8a156:	f000 f83f 	bl	8a1d8 <__sinit>
   8a15a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a15e:	2800      	cmp	r0, #0
   8a160:	d1e7      	bne.n	8a132 <_fflush_r+0x12>
   8a162:	4605      	mov	r5, r0
   8a164:	4628      	mov	r0, r5
   8a166:	bd38      	pop	{r3, r4, r5, pc}
   8a168:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a16a:	f000 fc07 	bl	8a97c <__retarget_lock_acquire_recursive>
   8a16e:	e7e5      	b.n	8a13c <_fflush_r+0x1c>
   8a170:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a172:	f000 fc05 	bl	8a980 <__retarget_lock_release_recursive>
   8a176:	4628      	mov	r0, r5
   8a178:	bd38      	pop	{r3, r4, r5, pc}
   8a17a:	bf00      	nop

0008a17c <std>:
   8a17c:	2300      	movs	r3, #0
   8a17e:	b510      	push	{r4, lr}
   8a180:	4604      	mov	r4, r0
   8a182:	e9c0 3300 	strd	r3, r3, [r0]
   8a186:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8a18a:	8181      	strh	r1, [r0, #12]
   8a18c:	81c2      	strh	r2, [r0, #14]
   8a18e:	4619      	mov	r1, r3
   8a190:	6083      	str	r3, [r0, #8]
   8a192:	6643      	str	r3, [r0, #100]	; 0x64
   8a194:	6183      	str	r3, [r0, #24]
   8a196:	2208      	movs	r2, #8
   8a198:	305c      	adds	r0, #92	; 0x5c
   8a19a:	f7fc f929 	bl	863f0 <memset>
   8a19e:	4807      	ldr	r0, [pc, #28]	; (8a1bc <std+0x40>)
   8a1a0:	4907      	ldr	r1, [pc, #28]	; (8a1c0 <std+0x44>)
   8a1a2:	4a08      	ldr	r2, [pc, #32]	; (8a1c4 <std+0x48>)
   8a1a4:	4b08      	ldr	r3, [pc, #32]	; (8a1c8 <std+0x4c>)
   8a1a6:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8a1aa:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8a1ae:	62e3      	str	r3, [r4, #44]	; 0x2c
   8a1b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8a1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a1b8:	f000 bbdc 	b.w	8a974 <__retarget_lock_init_recursive>
   8a1bc:	0008bcd5 	.word	0x0008bcd5
   8a1c0:	0008bcf9 	.word	0x0008bcf9
   8a1c4:	0008bd39 	.word	0x0008bd39
   8a1c8:	0008bd59 	.word	0x0008bd59

0008a1cc <_cleanup_r>:
   8a1cc:	4901      	ldr	r1, [pc, #4]	; (8a1d4 <_cleanup_r+0x8>)
   8a1ce:	f000 bba3 	b.w	8a918 <_fwalk_reent>
   8a1d2:	bf00      	nop
   8a1d4:	0008c0d9 	.word	0x0008c0d9

0008a1d8 <__sinit>:
   8a1d8:	b510      	push	{r4, lr}
   8a1da:	4604      	mov	r4, r0
   8a1dc:	4813      	ldr	r0, [pc, #76]	; (8a22c <__sinit+0x54>)
   8a1de:	f000 fbcd 	bl	8a97c <__retarget_lock_acquire_recursive>
   8a1e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8a1e4:	b9ea      	cbnz	r2, 8a222 <__sinit+0x4a>
   8a1e6:	2003      	movs	r0, #3
   8a1e8:	4911      	ldr	r1, [pc, #68]	; (8a230 <__sinit+0x58>)
   8a1ea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8a1ee:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8a1f2:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8a1f6:	63e1      	str	r1, [r4, #60]	; 0x3c
   8a1f8:	6860      	ldr	r0, [r4, #4]
   8a1fa:	2104      	movs	r1, #4
   8a1fc:	f7ff ffbe 	bl	8a17c <std>
   8a200:	68a0      	ldr	r0, [r4, #8]
   8a202:	2201      	movs	r2, #1
   8a204:	2109      	movs	r1, #9
   8a206:	f7ff ffb9 	bl	8a17c <std>
   8a20a:	68e0      	ldr	r0, [r4, #12]
   8a20c:	2202      	movs	r2, #2
   8a20e:	2112      	movs	r1, #18
   8a210:	f7ff ffb4 	bl	8a17c <std>
   8a214:	2301      	movs	r3, #1
   8a216:	4805      	ldr	r0, [pc, #20]	; (8a22c <__sinit+0x54>)
   8a218:	63a3      	str	r3, [r4, #56]	; 0x38
   8a21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a21e:	f000 bbaf 	b.w	8a980 <__retarget_lock_release_recursive>
   8a222:	4802      	ldr	r0, [pc, #8]	; (8a22c <__sinit+0x54>)
   8a224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a228:	f000 bbaa 	b.w	8a980 <__retarget_lock_release_recursive>
   8a22c:	20001494 	.word	0x20001494
   8a230:	0008a1cd 	.word	0x0008a1cd

0008a234 <__sfp_lock_acquire>:
   8a234:	4801      	ldr	r0, [pc, #4]	; (8a23c <__sfp_lock_acquire+0x8>)
   8a236:	f000 bba1 	b.w	8a97c <__retarget_lock_acquire_recursive>
   8a23a:	bf00      	nop
   8a23c:	200014a8 	.word	0x200014a8

0008a240 <__sfp_lock_release>:
   8a240:	4801      	ldr	r0, [pc, #4]	; (8a248 <__sfp_lock_release+0x8>)
   8a242:	f000 bb9d 	b.w	8a980 <__retarget_lock_release_recursive>
   8a246:	bf00      	nop
   8a248:	200014a8 	.word	0x200014a8

0008a24c <__libc_fini_array>:
   8a24c:	b538      	push	{r3, r4, r5, lr}
   8a24e:	4b08      	ldr	r3, [pc, #32]	; (8a270 <__libc_fini_array+0x24>)
   8a250:	4d08      	ldr	r5, [pc, #32]	; (8a274 <__libc_fini_array+0x28>)
   8a252:	1b5b      	subs	r3, r3, r5
   8a254:	109c      	asrs	r4, r3, #2
   8a256:	d007      	beq.n	8a268 <__libc_fini_array+0x1c>
   8a258:	3b04      	subs	r3, #4
   8a25a:	441d      	add	r5, r3
   8a25c:	3c01      	subs	r4, #1
   8a25e:	f855 3904 	ldr.w	r3, [r5], #-4
   8a262:	4798      	blx	r3
   8a264:	2c00      	cmp	r4, #0
   8a266:	d1f9      	bne.n	8a25c <__libc_fini_array+0x10>
   8a268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a26c:	f003 b8ae 	b.w	8d3cc <_fini>
   8a270:	0008d3dc 	.word	0x0008d3dc
   8a274:	0008d3d8 	.word	0x0008d3d8

0008a278 <__fputwc>:
   8a278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a27c:	b083      	sub	sp, #12
   8a27e:	4607      	mov	r7, r0
   8a280:	4688      	mov	r8, r1
   8a282:	4614      	mov	r4, r2
   8a284:	f000 fb6c 	bl	8a960 <__locale_mb_cur_max>
   8a288:	2801      	cmp	r0, #1
   8a28a:	d103      	bne.n	8a294 <__fputwc+0x1c>
   8a28c:	f108 33ff 	add.w	r3, r8, #4294967295
   8a290:	2bfe      	cmp	r3, #254	; 0xfe
   8a292:	d933      	bls.n	8a2fc <__fputwc+0x84>
   8a294:	4642      	mov	r2, r8
   8a296:	4638      	mov	r0, r7
   8a298:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a29c:	a901      	add	r1, sp, #4
   8a29e:	f001 fe33 	bl	8bf08 <_wcrtomb_r>
   8a2a2:	1c42      	adds	r2, r0, #1
   8a2a4:	4606      	mov	r6, r0
   8a2a6:	d02f      	beq.n	8a308 <__fputwc+0x90>
   8a2a8:	b318      	cbz	r0, 8a2f2 <__fputwc+0x7a>
   8a2aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a2ae:	2500      	movs	r5, #0
   8a2b0:	f10d 0904 	add.w	r9, sp, #4
   8a2b4:	e008      	b.n	8a2c8 <__fputwc+0x50>
   8a2b6:	6823      	ldr	r3, [r4, #0]
   8a2b8:	1c5a      	adds	r2, r3, #1
   8a2ba:	6022      	str	r2, [r4, #0]
   8a2bc:	7019      	strb	r1, [r3, #0]
   8a2be:	3501      	adds	r5, #1
   8a2c0:	42b5      	cmp	r5, r6
   8a2c2:	d216      	bcs.n	8a2f2 <__fputwc+0x7a>
   8a2c4:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a2c8:	68a3      	ldr	r3, [r4, #8]
   8a2ca:	3b01      	subs	r3, #1
   8a2cc:	2b00      	cmp	r3, #0
   8a2ce:	60a3      	str	r3, [r4, #8]
   8a2d0:	daf1      	bge.n	8a2b6 <__fputwc+0x3e>
   8a2d2:	69a2      	ldr	r2, [r4, #24]
   8a2d4:	4293      	cmp	r3, r2
   8a2d6:	db01      	blt.n	8a2dc <__fputwc+0x64>
   8a2d8:	290a      	cmp	r1, #10
   8a2da:	d1ec      	bne.n	8a2b6 <__fputwc+0x3e>
   8a2dc:	4622      	mov	r2, r4
   8a2de:	4638      	mov	r0, r7
   8a2e0:	f001 fdba 	bl	8be58 <__swbuf_r>
   8a2e4:	1c43      	adds	r3, r0, #1
   8a2e6:	d1ea      	bne.n	8a2be <__fputwc+0x46>
   8a2e8:	4606      	mov	r6, r0
   8a2ea:	4630      	mov	r0, r6
   8a2ec:	b003      	add	sp, #12
   8a2ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a2f2:	4646      	mov	r6, r8
   8a2f4:	4630      	mov	r0, r6
   8a2f6:	b003      	add	sp, #12
   8a2f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a2fc:	fa5f f188 	uxtb.w	r1, r8
   8a300:	4606      	mov	r6, r0
   8a302:	f88d 1004 	strb.w	r1, [sp, #4]
   8a306:	e7d2      	b.n	8a2ae <__fputwc+0x36>
   8a308:	4630      	mov	r0, r6
   8a30a:	89a3      	ldrh	r3, [r4, #12]
   8a30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a310:	81a3      	strh	r3, [r4, #12]
   8a312:	b003      	add	sp, #12
   8a314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a318 <_fputwc_r>:
   8a318:	b530      	push	{r4, r5, lr}
   8a31a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a31c:	4614      	mov	r4, r2
   8a31e:	f013 0f01 	tst.w	r3, #1
   8a322:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a326:	4605      	mov	r5, r0
   8a328:	b083      	sub	sp, #12
   8a32a:	b29a      	uxth	r2, r3
   8a32c:	d101      	bne.n	8a332 <_fputwc_r+0x1a>
   8a32e:	0598      	lsls	r0, r3, #22
   8a330:	d51c      	bpl.n	8a36c <_fputwc_r+0x54>
   8a332:	0490      	lsls	r0, r2, #18
   8a334:	d406      	bmi.n	8a344 <_fputwc_r+0x2c>
   8a336:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a33c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a340:	81a3      	strh	r3, [r4, #12]
   8a342:	6662      	str	r2, [r4, #100]	; 0x64
   8a344:	4628      	mov	r0, r5
   8a346:	4622      	mov	r2, r4
   8a348:	f7ff ff96 	bl	8a278 <__fputwc>
   8a34c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a34e:	4605      	mov	r5, r0
   8a350:	07da      	lsls	r2, r3, #31
   8a352:	d402      	bmi.n	8a35a <_fputwc_r+0x42>
   8a354:	89a3      	ldrh	r3, [r4, #12]
   8a356:	059b      	lsls	r3, r3, #22
   8a358:	d502      	bpl.n	8a360 <_fputwc_r+0x48>
   8a35a:	4628      	mov	r0, r5
   8a35c:	b003      	add	sp, #12
   8a35e:	bd30      	pop	{r4, r5, pc}
   8a360:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a362:	f000 fb0d 	bl	8a980 <__retarget_lock_release_recursive>
   8a366:	4628      	mov	r0, r5
   8a368:	b003      	add	sp, #12
   8a36a:	bd30      	pop	{r4, r5, pc}
   8a36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a36e:	9101      	str	r1, [sp, #4]
   8a370:	f000 fb04 	bl	8a97c <__retarget_lock_acquire_recursive>
   8a374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a378:	9901      	ldr	r1, [sp, #4]
   8a37a:	b29a      	uxth	r2, r3
   8a37c:	e7d9      	b.n	8a332 <_fputwc_r+0x1a>
   8a37e:	bf00      	nop

0008a380 <_malloc_trim_r>:
   8a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a382:	460c      	mov	r4, r1
   8a384:	4f23      	ldr	r7, [pc, #140]	; (8a414 <_malloc_trim_r+0x94>)
   8a386:	4606      	mov	r6, r0
   8a388:	f000 fee2 	bl	8b150 <__malloc_lock>
   8a38c:	68bb      	ldr	r3, [r7, #8]
   8a38e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a392:	685d      	ldr	r5, [r3, #4]
   8a394:	310f      	adds	r1, #15
   8a396:	f025 0503 	bic.w	r5, r5, #3
   8a39a:	194b      	adds	r3, r1, r5
   8a39c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8a3a0:	f023 030f 	bic.w	r3, r3, #15
   8a3a4:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8a3a8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a3ac:	db07      	blt.n	8a3be <_malloc_trim_r+0x3e>
   8a3ae:	2100      	movs	r1, #0
   8a3b0:	4630      	mov	r0, r6
   8a3b2:	f001 fc7d 	bl	8bcb0 <_sbrk_r>
   8a3b6:	68bb      	ldr	r3, [r7, #8]
   8a3b8:	442b      	add	r3, r5
   8a3ba:	4298      	cmp	r0, r3
   8a3bc:	d004      	beq.n	8a3c8 <_malloc_trim_r+0x48>
   8a3be:	4630      	mov	r0, r6
   8a3c0:	f000 fecc 	bl	8b15c <__malloc_unlock>
   8a3c4:	2000      	movs	r0, #0
   8a3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a3c8:	4630      	mov	r0, r6
   8a3ca:	4261      	negs	r1, r4
   8a3cc:	f001 fc70 	bl	8bcb0 <_sbrk_r>
   8a3d0:	3001      	adds	r0, #1
   8a3d2:	d00d      	beq.n	8a3f0 <_malloc_trim_r+0x70>
   8a3d4:	4a10      	ldr	r2, [pc, #64]	; (8a418 <_malloc_trim_r+0x98>)
   8a3d6:	68b9      	ldr	r1, [r7, #8]
   8a3d8:	6813      	ldr	r3, [r2, #0]
   8a3da:	1b2d      	subs	r5, r5, r4
   8a3dc:	f045 0501 	orr.w	r5, r5, #1
   8a3e0:	4630      	mov	r0, r6
   8a3e2:	1b1b      	subs	r3, r3, r4
   8a3e4:	604d      	str	r5, [r1, #4]
   8a3e6:	6013      	str	r3, [r2, #0]
   8a3e8:	f000 feb8 	bl	8b15c <__malloc_unlock>
   8a3ec:	2001      	movs	r0, #1
   8a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a3f0:	2100      	movs	r1, #0
   8a3f2:	4630      	mov	r0, r6
   8a3f4:	f001 fc5c 	bl	8bcb0 <_sbrk_r>
   8a3f8:	68ba      	ldr	r2, [r7, #8]
   8a3fa:	1a83      	subs	r3, r0, r2
   8a3fc:	2b0f      	cmp	r3, #15
   8a3fe:	ddde      	ble.n	8a3be <_malloc_trim_r+0x3e>
   8a400:	4906      	ldr	r1, [pc, #24]	; (8a41c <_malloc_trim_r+0x9c>)
   8a402:	f043 0301 	orr.w	r3, r3, #1
   8a406:	680c      	ldr	r4, [r1, #0]
   8a408:	4903      	ldr	r1, [pc, #12]	; (8a418 <_malloc_trim_r+0x98>)
   8a40a:	1b00      	subs	r0, r0, r4
   8a40c:	6053      	str	r3, [r2, #4]
   8a40e:	6008      	str	r0, [r1, #0]
   8a410:	e7d5      	b.n	8a3be <_malloc_trim_r+0x3e>
   8a412:	bf00      	nop
   8a414:	20000a10 	.word	0x20000a10
   8a418:	20000fa4 	.word	0x20000fa4
   8a41c:	20000e18 	.word	0x20000e18

0008a420 <_free_r>:
   8a420:	2900      	cmp	r1, #0
   8a422:	d05f      	beq.n	8a4e4 <_free_r+0xc4>
   8a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a426:	460c      	mov	r4, r1
   8a428:	4606      	mov	r6, r0
   8a42a:	f000 fe91 	bl	8b150 <__malloc_lock>
   8a42e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a432:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8a628 <_free_r+0x208>
   8a436:	f1a4 0008 	sub.w	r0, r4, #8
   8a43a:	f023 0101 	bic.w	r1, r3, #1
   8a43e:	1842      	adds	r2, r0, r1
   8a440:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8a444:	6855      	ldr	r5, [r2, #4]
   8a446:	4297      	cmp	r7, r2
   8a448:	f025 0503 	bic.w	r5, r5, #3
   8a44c:	f000 8089 	beq.w	8a562 <_free_r+0x142>
   8a450:	07df      	lsls	r7, r3, #31
   8a452:	6055      	str	r5, [r2, #4]
   8a454:	d434      	bmi.n	8a4c0 <_free_r+0xa0>
   8a456:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8a45a:	f10c 0408 	add.w	r4, ip, #8
   8a45e:	1bc0      	subs	r0, r0, r7
   8a460:	6883      	ldr	r3, [r0, #8]
   8a462:	4439      	add	r1, r7
   8a464:	42a3      	cmp	r3, r4
   8a466:	d06a      	beq.n	8a53e <_free_r+0x11e>
   8a468:	1957      	adds	r7, r2, r5
   8a46a:	687f      	ldr	r7, [r7, #4]
   8a46c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8a470:	f8c3 e00c 	str.w	lr, [r3, #12]
   8a474:	f8ce 3008 	str.w	r3, [lr, #8]
   8a478:	07fb      	lsls	r3, r7, #31
   8a47a:	f140 8097 	bpl.w	8a5ac <_free_r+0x18c>
   8a47e:	f041 0301 	orr.w	r3, r1, #1
   8a482:	6043      	str	r3, [r0, #4]
   8a484:	6011      	str	r1, [r2, #0]
   8a486:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a48a:	d234      	bcs.n	8a4f6 <_free_r+0xd6>
   8a48c:	2201      	movs	r2, #1
   8a48e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8a492:	08cb      	lsrs	r3, r1, #3
   8a494:	0949      	lsrs	r1, r1, #5
   8a496:	4413      	add	r3, r2
   8a498:	fa02 f101 	lsl.w	r1, r2, r1
   8a49c:	4321      	orrs	r1, r4
   8a49e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8a4a2:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8a4a6:	3a08      	subs	r2, #8
   8a4a8:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8a4ac:	f8cc 1004 	str.w	r1, [ip, #4]
   8a4b0:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8a4b4:	60e0      	str	r0, [r4, #12]
   8a4b6:	4630      	mov	r0, r6
   8a4b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a4bc:	f000 be4e 	b.w	8b15c <__malloc_unlock>
   8a4c0:	1953      	adds	r3, r2, r5
   8a4c2:	685b      	ldr	r3, [r3, #4]
   8a4c4:	07df      	lsls	r7, r3, #31
   8a4c6:	d40e      	bmi.n	8a4e6 <_free_r+0xc6>
   8a4c8:	4429      	add	r1, r5
   8a4ca:	f10c 0408 	add.w	r4, ip, #8
   8a4ce:	6893      	ldr	r3, [r2, #8]
   8a4d0:	42a3      	cmp	r3, r4
   8a4d2:	d073      	beq.n	8a5bc <_free_r+0x19c>
   8a4d4:	68d4      	ldr	r4, [r2, #12]
   8a4d6:	f041 0201 	orr.w	r2, r1, #1
   8a4da:	60dc      	str	r4, [r3, #12]
   8a4dc:	60a3      	str	r3, [r4, #8]
   8a4de:	6042      	str	r2, [r0, #4]
   8a4e0:	5041      	str	r1, [r0, r1]
   8a4e2:	e7d0      	b.n	8a486 <_free_r+0x66>
   8a4e4:	4770      	bx	lr
   8a4e6:	f041 0301 	orr.w	r3, r1, #1
   8a4ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a4ee:	f844 3c04 	str.w	r3, [r4, #-4]
   8a4f2:	6011      	str	r1, [r2, #0]
   8a4f4:	d3ca      	bcc.n	8a48c <_free_r+0x6c>
   8a4f6:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8a4fa:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8a4fe:	d24a      	bcs.n	8a596 <_free_r+0x176>
   8a500:	098b      	lsrs	r3, r1, #6
   8a502:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8a506:	00ed      	lsls	r5, r5, #3
   8a508:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8a50c:	f85c 3005 	ldr.w	r3, [ip, r5]
   8a510:	eb0c 0405 	add.w	r4, ip, r5
   8a514:	3c08      	subs	r4, #8
   8a516:	429c      	cmp	r4, r3
   8a518:	d059      	beq.n	8a5ce <_free_r+0x1ae>
   8a51a:	685a      	ldr	r2, [r3, #4]
   8a51c:	f022 0203 	bic.w	r2, r2, #3
   8a520:	428a      	cmp	r2, r1
   8a522:	d902      	bls.n	8a52a <_free_r+0x10a>
   8a524:	689b      	ldr	r3, [r3, #8]
   8a526:	429c      	cmp	r4, r3
   8a528:	d1f7      	bne.n	8a51a <_free_r+0xfa>
   8a52a:	68dc      	ldr	r4, [r3, #12]
   8a52c:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8a530:	60a0      	str	r0, [r4, #8]
   8a532:	60d8      	str	r0, [r3, #12]
   8a534:	4630      	mov	r0, r6
   8a536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a53a:	f000 be0f 	b.w	8b15c <__malloc_unlock>
   8a53e:	1953      	adds	r3, r2, r5
   8a540:	685b      	ldr	r3, [r3, #4]
   8a542:	07db      	lsls	r3, r3, #31
   8a544:	d466      	bmi.n	8a614 <_free_r+0x1f4>
   8a546:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8a54a:	4429      	add	r1, r5
   8a54c:	f041 0401 	orr.w	r4, r1, #1
   8a550:	60d3      	str	r3, [r2, #12]
   8a552:	609a      	str	r2, [r3, #8]
   8a554:	6044      	str	r4, [r0, #4]
   8a556:	5041      	str	r1, [r0, r1]
   8a558:	4630      	mov	r0, r6
   8a55a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a55e:	f000 bdfd 	b.w	8b15c <__malloc_unlock>
   8a562:	07db      	lsls	r3, r3, #31
   8a564:	4429      	add	r1, r5
   8a566:	d407      	bmi.n	8a578 <_free_r+0x158>
   8a568:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8a56c:	1b00      	subs	r0, r0, r4
   8a56e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a572:	4421      	add	r1, r4
   8a574:	60d3      	str	r3, [r2, #12]
   8a576:	609a      	str	r2, [r3, #8]
   8a578:	4b29      	ldr	r3, [pc, #164]	; (8a620 <_free_r+0x200>)
   8a57a:	f041 0201 	orr.w	r2, r1, #1
   8a57e:	681b      	ldr	r3, [r3, #0]
   8a580:	6042      	str	r2, [r0, #4]
   8a582:	428b      	cmp	r3, r1
   8a584:	f8cc 0008 	str.w	r0, [ip, #8]
   8a588:	d895      	bhi.n	8a4b6 <_free_r+0x96>
   8a58a:	4b26      	ldr	r3, [pc, #152]	; (8a624 <_free_r+0x204>)
   8a58c:	4630      	mov	r0, r6
   8a58e:	6819      	ldr	r1, [r3, #0]
   8a590:	f7ff fef6 	bl	8a380 <_malloc_trim_r>
   8a594:	e78f      	b.n	8a4b6 <_free_r+0x96>
   8a596:	2b14      	cmp	r3, #20
   8a598:	d90a      	bls.n	8a5b0 <_free_r+0x190>
   8a59a:	2b54      	cmp	r3, #84	; 0x54
   8a59c:	d821      	bhi.n	8a5e2 <_free_r+0x1c2>
   8a59e:	0b0b      	lsrs	r3, r1, #12
   8a5a0:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8a5a4:	00ed      	lsls	r5, r5, #3
   8a5a6:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8a5aa:	e7af      	b.n	8a50c <_free_r+0xec>
   8a5ac:	4429      	add	r1, r5
   8a5ae:	e78e      	b.n	8a4ce <_free_r+0xae>
   8a5b0:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8a5b4:	00ed      	lsls	r5, r5, #3
   8a5b6:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8a5ba:	e7a7      	b.n	8a50c <_free_r+0xec>
   8a5bc:	f041 0301 	orr.w	r3, r1, #1
   8a5c0:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8a5c4:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8a5c8:	6043      	str	r3, [r0, #4]
   8a5ca:	5041      	str	r1, [r0, r1]
   8a5cc:	e773      	b.n	8a4b6 <_free_r+0x96>
   8a5ce:	2501      	movs	r5, #1
   8a5d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8a5d4:	1092      	asrs	r2, r2, #2
   8a5d6:	fa05 f202 	lsl.w	r2, r5, r2
   8a5da:	430a      	orrs	r2, r1
   8a5dc:	f8cc 2004 	str.w	r2, [ip, #4]
   8a5e0:	e7a4      	b.n	8a52c <_free_r+0x10c>
   8a5e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a5e6:	d806      	bhi.n	8a5f6 <_free_r+0x1d6>
   8a5e8:	0bcb      	lsrs	r3, r1, #15
   8a5ea:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8a5ee:	00ed      	lsls	r5, r5, #3
   8a5f0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8a5f4:	e78a      	b.n	8a50c <_free_r+0xec>
   8a5f6:	f240 5254 	movw	r2, #1364	; 0x554
   8a5fa:	4293      	cmp	r3, r2
   8a5fc:	d806      	bhi.n	8a60c <_free_r+0x1ec>
   8a5fe:	0c8b      	lsrs	r3, r1, #18
   8a600:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8a604:	00ed      	lsls	r5, r5, #3
   8a606:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8a60a:	e77f      	b.n	8a50c <_free_r+0xec>
   8a60c:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8a610:	227e      	movs	r2, #126	; 0x7e
   8a612:	e77b      	b.n	8a50c <_free_r+0xec>
   8a614:	f041 0301 	orr.w	r3, r1, #1
   8a618:	6043      	str	r3, [r0, #4]
   8a61a:	6011      	str	r1, [r2, #0]
   8a61c:	e74b      	b.n	8a4b6 <_free_r+0x96>
   8a61e:	bf00      	nop
   8a620:	20000e1c 	.word	0x20000e1c
   8a624:	20000fd4 	.word	0x20000fd4
   8a628:	20000a10 	.word	0x20000a10

0008a62c <__sfvwrite_r>:
   8a62c:	6893      	ldr	r3, [r2, #8]
   8a62e:	2b00      	cmp	r3, #0
   8a630:	f000 80bd 	beq.w	8a7ae <__sfvwrite_r+0x182>
   8a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a638:	4690      	mov	r8, r2
   8a63a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a63e:	460c      	mov	r4, r1
   8a640:	0711      	lsls	r1, r2, #28
   8a642:	4681      	mov	r9, r0
   8a644:	b083      	sub	sp, #12
   8a646:	b293      	uxth	r3, r2
   8a648:	d527      	bpl.n	8a69a <__sfvwrite_r+0x6e>
   8a64a:	6922      	ldr	r2, [r4, #16]
   8a64c:	b32a      	cbz	r2, 8a69a <__sfvwrite_r+0x6e>
   8a64e:	f013 0702 	ands.w	r7, r3, #2
   8a652:	f8d8 5000 	ldr.w	r5, [r8]
   8a656:	d02f      	beq.n	8a6b8 <__sfvwrite_r+0x8c>
   8a658:	f04f 0b00 	mov.w	fp, #0
   8a65c:	465f      	mov	r7, fp
   8a65e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8a914 <__sfvwrite_r+0x2e8>
   8a662:	2f00      	cmp	r7, #0
   8a664:	f000 8089 	beq.w	8a77a <__sfvwrite_r+0x14e>
   8a668:	4557      	cmp	r7, sl
   8a66a:	463b      	mov	r3, r7
   8a66c:	465a      	mov	r2, fp
   8a66e:	bf28      	it	cs
   8a670:	4653      	movcs	r3, sl
   8a672:	4648      	mov	r0, r9
   8a674:	69e1      	ldr	r1, [r4, #28]
   8a676:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a678:	47b0      	blx	r6
   8a67a:	2800      	cmp	r0, #0
   8a67c:	f340 808d 	ble.w	8a79a <__sfvwrite_r+0x16e>
   8a680:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a684:	4483      	add	fp, r0
   8a686:	1a1b      	subs	r3, r3, r0
   8a688:	1a3f      	subs	r7, r7, r0
   8a68a:	f8c8 3008 	str.w	r3, [r8, #8]
   8a68e:	2b00      	cmp	r3, #0
   8a690:	d1e7      	bne.n	8a662 <__sfvwrite_r+0x36>
   8a692:	2000      	movs	r0, #0
   8a694:	b003      	add	sp, #12
   8a696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a69a:	4621      	mov	r1, r4
   8a69c:	4648      	mov	r0, r9
   8a69e:	f7fe fc39 	bl	88f14 <__swsetup_r>
   8a6a2:	2800      	cmp	r0, #0
   8a6a4:	f040 8132 	bne.w	8a90c <__sfvwrite_r+0x2e0>
   8a6a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a6ac:	f8d8 5000 	ldr.w	r5, [r8]
   8a6b0:	b293      	uxth	r3, r2
   8a6b2:	f013 0702 	ands.w	r7, r3, #2
   8a6b6:	d1cf      	bne.n	8a658 <__sfvwrite_r+0x2c>
   8a6b8:	f013 0a01 	ands.w	sl, r3, #1
   8a6bc:	d179      	bne.n	8a7b2 <__sfvwrite_r+0x186>
   8a6be:	4656      	mov	r6, sl
   8a6c0:	2e00      	cmp	r6, #0
   8a6c2:	d056      	beq.n	8a772 <__sfvwrite_r+0x146>
   8a6c4:	059a      	lsls	r2, r3, #22
   8a6c6:	68a7      	ldr	r7, [r4, #8]
   8a6c8:	f140 80bd 	bpl.w	8a846 <__sfvwrite_r+0x21a>
   8a6cc:	42b7      	cmp	r7, r6
   8a6ce:	46bb      	mov	fp, r7
   8a6d0:	f200 80d2 	bhi.w	8a878 <__sfvwrite_r+0x24c>
   8a6d4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8a6d8:	f000 80d0 	beq.w	8a87c <__sfvwrite_r+0x250>
   8a6dc:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8a6e0:	6822      	ldr	r2, [r4, #0]
   8a6e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8a6e6:	eba2 0b01 	sub.w	fp, r2, r1
   8a6ea:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8a6ee:	f10b 0001 	add.w	r0, fp, #1
   8a6f2:	107f      	asrs	r7, r7, #1
   8a6f4:	4430      	add	r0, r6
   8a6f6:	42b8      	cmp	r0, r7
   8a6f8:	463a      	mov	r2, r7
   8a6fa:	bf84      	itt	hi
   8a6fc:	4607      	movhi	r7, r0
   8a6fe:	463a      	movhi	r2, r7
   8a700:	055b      	lsls	r3, r3, #21
   8a702:	f140 80e7 	bpl.w	8a8d4 <__sfvwrite_r+0x2a8>
   8a706:	4611      	mov	r1, r2
   8a708:	4648      	mov	r0, r9
   8a70a:	f000 f9b3 	bl	8aa74 <_malloc_r>
   8a70e:	2800      	cmp	r0, #0
   8a710:	f000 80f6 	beq.w	8a900 <__sfvwrite_r+0x2d4>
   8a714:	465a      	mov	r2, fp
   8a716:	6921      	ldr	r1, [r4, #16]
   8a718:	9000      	str	r0, [sp, #0]
   8a71a:	f7fb fdf3 	bl	86304 <memcpy>
   8a71e:	89a2      	ldrh	r2, [r4, #12]
   8a720:	9b00      	ldr	r3, [sp, #0]
   8a722:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8a726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8a72a:	81a2      	strh	r2, [r4, #12]
   8a72c:	eba7 020b 	sub.w	r2, r7, fp
   8a730:	eb03 000b 	add.w	r0, r3, fp
   8a734:	6167      	str	r7, [r4, #20]
   8a736:	46b3      	mov	fp, r6
   8a738:	4637      	mov	r7, r6
   8a73a:	6123      	str	r3, [r4, #16]
   8a73c:	6020      	str	r0, [r4, #0]
   8a73e:	60a2      	str	r2, [r4, #8]
   8a740:	465a      	mov	r2, fp
   8a742:	4651      	mov	r1, sl
   8a744:	f000 fc9a 	bl	8b07c <memmove>
   8a748:	68a2      	ldr	r2, [r4, #8]
   8a74a:	6823      	ldr	r3, [r4, #0]
   8a74c:	1bd2      	subs	r2, r2, r7
   8a74e:	4637      	mov	r7, r6
   8a750:	2600      	movs	r6, #0
   8a752:	445b      	add	r3, fp
   8a754:	60a2      	str	r2, [r4, #8]
   8a756:	6023      	str	r3, [r4, #0]
   8a758:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8a75c:	44ba      	add	sl, r7
   8a75e:	1bd7      	subs	r7, r2, r7
   8a760:	f8c8 7008 	str.w	r7, [r8, #8]
   8a764:	2f00      	cmp	r7, #0
   8a766:	d094      	beq.n	8a692 <__sfvwrite_r+0x66>
   8a768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a76c:	b29b      	uxth	r3, r3
   8a76e:	2e00      	cmp	r6, #0
   8a770:	d1a8      	bne.n	8a6c4 <__sfvwrite_r+0x98>
   8a772:	e9d5 a600 	ldrd	sl, r6, [r5]
   8a776:	3508      	adds	r5, #8
   8a778:	e7a2      	b.n	8a6c0 <__sfvwrite_r+0x94>
   8a77a:	e9d5 b700 	ldrd	fp, r7, [r5]
   8a77e:	3508      	adds	r5, #8
   8a780:	e76f      	b.n	8a662 <__sfvwrite_r+0x36>
   8a782:	4629      	mov	r1, r5
   8a784:	465a      	mov	r2, fp
   8a786:	f000 fc79 	bl	8b07c <memmove>
   8a78a:	6823      	ldr	r3, [r4, #0]
   8a78c:	4621      	mov	r1, r4
   8a78e:	445b      	add	r3, fp
   8a790:	4648      	mov	r0, r9
   8a792:	6023      	str	r3, [r4, #0]
   8a794:	f7ff fcc4 	bl	8a120 <_fflush_r>
   8a798:	b358      	cbz	r0, 8a7f2 <__sfvwrite_r+0x1c6>
   8a79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a79e:	f04f 30ff 	mov.w	r0, #4294967295
   8a7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a7a6:	81a3      	strh	r3, [r4, #12]
   8a7a8:	b003      	add	sp, #12
   8a7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a7ae:	2000      	movs	r0, #0
   8a7b0:	4770      	bx	lr
   8a7b2:	463e      	mov	r6, r7
   8a7b4:	46aa      	mov	sl, r5
   8a7b6:	4638      	mov	r0, r7
   8a7b8:	463d      	mov	r5, r7
   8a7ba:	9700      	str	r7, [sp, #0]
   8a7bc:	b36e      	cbz	r6, 8a81a <__sfvwrite_r+0x1ee>
   8a7be:	2800      	cmp	r0, #0
   8a7c0:	d035      	beq.n	8a82e <__sfvwrite_r+0x202>
   8a7c2:	9a00      	ldr	r2, [sp, #0]
   8a7c4:	6820      	ldr	r0, [r4, #0]
   8a7c6:	6921      	ldr	r1, [r4, #16]
   8a7c8:	42b2      	cmp	r2, r6
   8a7ca:	bf28      	it	cs
   8a7cc:	4632      	movcs	r2, r6
   8a7ce:	4288      	cmp	r0, r1
   8a7d0:	6963      	ldr	r3, [r4, #20]
   8a7d2:	d904      	bls.n	8a7de <__sfvwrite_r+0x1b2>
   8a7d4:	68a1      	ldr	r1, [r4, #8]
   8a7d6:	eb03 0b01 	add.w	fp, r3, r1
   8a7da:	455a      	cmp	r2, fp
   8a7dc:	dcd1      	bgt.n	8a782 <__sfvwrite_r+0x156>
   8a7de:	4293      	cmp	r3, r2
   8a7e0:	dc6b      	bgt.n	8a8ba <__sfvwrite_r+0x28e>
   8a7e2:	462a      	mov	r2, r5
   8a7e4:	4648      	mov	r0, r9
   8a7e6:	69e1      	ldr	r1, [r4, #28]
   8a7e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a7ea:	47b8      	blx	r7
   8a7ec:	f1b0 0b00 	subs.w	fp, r0, #0
   8a7f0:	ddd3      	ble.n	8a79a <__sfvwrite_r+0x16e>
   8a7f2:	9b00      	ldr	r3, [sp, #0]
   8a7f4:	ebb3 030b 	subs.w	r3, r3, fp
   8a7f8:	9300      	str	r3, [sp, #0]
   8a7fa:	d057      	beq.n	8a8ac <__sfvwrite_r+0x280>
   8a7fc:	2001      	movs	r0, #1
   8a7fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a802:	445d      	add	r5, fp
   8a804:	eba3 030b 	sub.w	r3, r3, fp
   8a808:	eba6 060b 	sub.w	r6, r6, fp
   8a80c:	f8c8 3008 	str.w	r3, [r8, #8]
   8a810:	2b00      	cmp	r3, #0
   8a812:	f43f af3e 	beq.w	8a692 <__sfvwrite_r+0x66>
   8a816:	2e00      	cmp	r6, #0
   8a818:	d1d1      	bne.n	8a7be <__sfvwrite_r+0x192>
   8a81a:	f10a 0308 	add.w	r3, sl, #8
   8a81e:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8a822:	469a      	mov	sl, r3
   8a824:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8a828:	3308      	adds	r3, #8
   8a82a:	2e00      	cmp	r6, #0
   8a82c:	d0f7      	beq.n	8a81e <__sfvwrite_r+0x1f2>
   8a82e:	4632      	mov	r2, r6
   8a830:	210a      	movs	r1, #10
   8a832:	4628      	mov	r0, r5
   8a834:	f000 fbe2 	bl	8affc <memchr>
   8a838:	2800      	cmp	r0, #0
   8a83a:	d05e      	beq.n	8a8fa <__sfvwrite_r+0x2ce>
   8a83c:	3001      	adds	r0, #1
   8a83e:	1b43      	subs	r3, r0, r5
   8a840:	461a      	mov	r2, r3
   8a842:	9300      	str	r3, [sp, #0]
   8a844:	e7be      	b.n	8a7c4 <__sfvwrite_r+0x198>
   8a846:	6820      	ldr	r0, [r4, #0]
   8a848:	6923      	ldr	r3, [r4, #16]
   8a84a:	4298      	cmp	r0, r3
   8a84c:	d818      	bhi.n	8a880 <__sfvwrite_r+0x254>
   8a84e:	6962      	ldr	r2, [r4, #20]
   8a850:	42b2      	cmp	r2, r6
   8a852:	d815      	bhi.n	8a880 <__sfvwrite_r+0x254>
   8a854:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8a858:	42b3      	cmp	r3, r6
   8a85a:	bf28      	it	cs
   8a85c:	4633      	movcs	r3, r6
   8a85e:	fb93 f3f2 	sdiv	r3, r3, r2
   8a862:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a864:	fb02 f303 	mul.w	r3, r2, r3
   8a868:	4648      	mov	r0, r9
   8a86a:	4652      	mov	r2, sl
   8a86c:	69e1      	ldr	r1, [r4, #28]
   8a86e:	47b8      	blx	r7
   8a870:	1e07      	subs	r7, r0, #0
   8a872:	dd92      	ble.n	8a79a <__sfvwrite_r+0x16e>
   8a874:	1bf6      	subs	r6, r6, r7
   8a876:	e76f      	b.n	8a758 <__sfvwrite_r+0x12c>
   8a878:	4637      	mov	r7, r6
   8a87a:	46b3      	mov	fp, r6
   8a87c:	6820      	ldr	r0, [r4, #0]
   8a87e:	e75f      	b.n	8a740 <__sfvwrite_r+0x114>
   8a880:	42b7      	cmp	r7, r6
   8a882:	bf28      	it	cs
   8a884:	4637      	movcs	r7, r6
   8a886:	4651      	mov	r1, sl
   8a888:	463a      	mov	r2, r7
   8a88a:	f000 fbf7 	bl	8b07c <memmove>
   8a88e:	68a3      	ldr	r3, [r4, #8]
   8a890:	6822      	ldr	r2, [r4, #0]
   8a892:	1bdb      	subs	r3, r3, r7
   8a894:	443a      	add	r2, r7
   8a896:	60a3      	str	r3, [r4, #8]
   8a898:	6022      	str	r2, [r4, #0]
   8a89a:	2b00      	cmp	r3, #0
   8a89c:	d1ea      	bne.n	8a874 <__sfvwrite_r+0x248>
   8a89e:	4621      	mov	r1, r4
   8a8a0:	4648      	mov	r0, r9
   8a8a2:	f7ff fc3d 	bl	8a120 <_fflush_r>
   8a8a6:	2800      	cmp	r0, #0
   8a8a8:	d0e4      	beq.n	8a874 <__sfvwrite_r+0x248>
   8a8aa:	e776      	b.n	8a79a <__sfvwrite_r+0x16e>
   8a8ac:	4621      	mov	r1, r4
   8a8ae:	4648      	mov	r0, r9
   8a8b0:	f7ff fc36 	bl	8a120 <_fflush_r>
   8a8b4:	2800      	cmp	r0, #0
   8a8b6:	d0a2      	beq.n	8a7fe <__sfvwrite_r+0x1d2>
   8a8b8:	e76f      	b.n	8a79a <__sfvwrite_r+0x16e>
   8a8ba:	4629      	mov	r1, r5
   8a8bc:	4693      	mov	fp, r2
   8a8be:	9201      	str	r2, [sp, #4]
   8a8c0:	f000 fbdc 	bl	8b07c <memmove>
   8a8c4:	68a1      	ldr	r1, [r4, #8]
   8a8c6:	6823      	ldr	r3, [r4, #0]
   8a8c8:	9a01      	ldr	r2, [sp, #4]
   8a8ca:	1a89      	subs	r1, r1, r2
   8a8cc:	441a      	add	r2, r3
   8a8ce:	60a1      	str	r1, [r4, #8]
   8a8d0:	6022      	str	r2, [r4, #0]
   8a8d2:	e78e      	b.n	8a7f2 <__sfvwrite_r+0x1c6>
   8a8d4:	4648      	mov	r0, r9
   8a8d6:	f000 ffc3 	bl	8b860 <_realloc_r>
   8a8da:	4603      	mov	r3, r0
   8a8dc:	2800      	cmp	r0, #0
   8a8de:	f47f af25 	bne.w	8a72c <__sfvwrite_r+0x100>
   8a8e2:	4648      	mov	r0, r9
   8a8e4:	6921      	ldr	r1, [r4, #16]
   8a8e6:	f7ff fd9b 	bl	8a420 <_free_r>
   8a8ea:	220c      	movs	r2, #12
   8a8ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a8f0:	f8c9 2000 	str.w	r2, [r9]
   8a8f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8a8f8:	e751      	b.n	8a79e <__sfvwrite_r+0x172>
   8a8fa:	1c72      	adds	r2, r6, #1
   8a8fc:	9200      	str	r2, [sp, #0]
   8a8fe:	e761      	b.n	8a7c4 <__sfvwrite_r+0x198>
   8a900:	220c      	movs	r2, #12
   8a902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a906:	f8c9 2000 	str.w	r2, [r9]
   8a90a:	e748      	b.n	8a79e <__sfvwrite_r+0x172>
   8a90c:	f04f 30ff 	mov.w	r0, #4294967295
   8a910:	e6c0      	b.n	8a694 <__sfvwrite_r+0x68>
   8a912:	bf00      	nop
   8a914:	7ffffc00 	.word	0x7ffffc00

0008a918 <_fwalk_reent>:
   8a918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a91c:	4607      	mov	r7, r0
   8a91e:	4688      	mov	r8, r1
   8a920:	f04f 0900 	mov.w	r9, #0
   8a924:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8a928:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8a92c:	3d01      	subs	r5, #1
   8a92e:	d410      	bmi.n	8a952 <_fwalk_reent+0x3a>
   8a930:	89a3      	ldrh	r3, [r4, #12]
   8a932:	3d01      	subs	r5, #1
   8a934:	2b01      	cmp	r3, #1
   8a936:	d908      	bls.n	8a94a <_fwalk_reent+0x32>
   8a938:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8a93c:	3301      	adds	r3, #1
   8a93e:	d004      	beq.n	8a94a <_fwalk_reent+0x32>
   8a940:	4621      	mov	r1, r4
   8a942:	4638      	mov	r0, r7
   8a944:	47c0      	blx	r8
   8a946:	ea49 0900 	orr.w	r9, r9, r0
   8a94a:	1c6b      	adds	r3, r5, #1
   8a94c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8a950:	d1ee      	bne.n	8a930 <_fwalk_reent+0x18>
   8a952:	6836      	ldr	r6, [r6, #0]
   8a954:	2e00      	cmp	r6, #0
   8a956:	d1e7      	bne.n	8a928 <_fwalk_reent+0x10>
   8a958:	4648      	mov	r0, r9
   8a95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a95e:	bf00      	nop

0008a960 <__locale_mb_cur_max>:
   8a960:	4b01      	ldr	r3, [pc, #4]	; (8a968 <__locale_mb_cur_max+0x8>)
   8a962:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8a966:	4770      	bx	lr
   8a968:	200008a4 	.word	0x200008a4

0008a96c <_localeconv_r>:
   8a96c:	4800      	ldr	r0, [pc, #0]	; (8a970 <_localeconv_r+0x4>)
   8a96e:	4770      	bx	lr
   8a970:	20000994 	.word	0x20000994

0008a974 <__retarget_lock_init_recursive>:
   8a974:	4770      	bx	lr
   8a976:	bf00      	nop

0008a978 <__retarget_lock_close_recursive>:
   8a978:	4770      	bx	lr
   8a97a:	bf00      	nop

0008a97c <__retarget_lock_acquire_recursive>:
   8a97c:	4770      	bx	lr
   8a97e:	bf00      	nop

0008a980 <__retarget_lock_release_recursive>:
   8a980:	4770      	bx	lr
   8a982:	bf00      	nop

0008a984 <__swhatbuf_r>:
   8a984:	b570      	push	{r4, r5, r6, lr}
   8a986:	460c      	mov	r4, r1
   8a988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a98c:	4615      	mov	r5, r2
   8a98e:	2900      	cmp	r1, #0
   8a990:	461e      	mov	r6, r3
   8a992:	b096      	sub	sp, #88	; 0x58
   8a994:	db14      	blt.n	8a9c0 <__swhatbuf_r+0x3c>
   8a996:	466a      	mov	r2, sp
   8a998:	f001 fc18 	bl	8c1cc <_fstat_r>
   8a99c:	2800      	cmp	r0, #0
   8a99e:	db0f      	blt.n	8a9c0 <__swhatbuf_r+0x3c>
   8a9a0:	9a01      	ldr	r2, [sp, #4]
   8a9a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a9a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8a9aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8a9ae:	fab2 f282 	clz	r2, r2
   8a9b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8a9b6:	0952      	lsrs	r2, r2, #5
   8a9b8:	6032      	str	r2, [r6, #0]
   8a9ba:	602b      	str	r3, [r5, #0]
   8a9bc:	b016      	add	sp, #88	; 0x58
   8a9be:	bd70      	pop	{r4, r5, r6, pc}
   8a9c0:	2300      	movs	r3, #0
   8a9c2:	89a1      	ldrh	r1, [r4, #12]
   8a9c4:	6033      	str	r3, [r6, #0]
   8a9c6:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8a9ca:	d004      	beq.n	8a9d6 <__swhatbuf_r+0x52>
   8a9cc:	2240      	movs	r2, #64	; 0x40
   8a9ce:	4618      	mov	r0, r3
   8a9d0:	602a      	str	r2, [r5, #0]
   8a9d2:	b016      	add	sp, #88	; 0x58
   8a9d4:	bd70      	pop	{r4, r5, r6, pc}
   8a9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a9da:	602b      	str	r3, [r5, #0]
   8a9dc:	b016      	add	sp, #88	; 0x58
   8a9de:	bd70      	pop	{r4, r5, r6, pc}

0008a9e0 <__smakebuf_r>:
   8a9e0:	b570      	push	{r4, r5, r6, lr}
   8a9e2:	898b      	ldrh	r3, [r1, #12]
   8a9e4:	460c      	mov	r4, r1
   8a9e6:	079d      	lsls	r5, r3, #30
   8a9e8:	b082      	sub	sp, #8
   8a9ea:	d507      	bpl.n	8a9fc <__smakebuf_r+0x1c>
   8a9ec:	2201      	movs	r2, #1
   8a9ee:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8a9f2:	614a      	str	r2, [r1, #20]
   8a9f4:	600b      	str	r3, [r1, #0]
   8a9f6:	610b      	str	r3, [r1, #16]
   8a9f8:	b002      	add	sp, #8
   8a9fa:	bd70      	pop	{r4, r5, r6, pc}
   8a9fc:	ab01      	add	r3, sp, #4
   8a9fe:	466a      	mov	r2, sp
   8aa00:	4606      	mov	r6, r0
   8aa02:	f7ff ffbf 	bl	8a984 <__swhatbuf_r>
   8aa06:	9900      	ldr	r1, [sp, #0]
   8aa08:	4605      	mov	r5, r0
   8aa0a:	4630      	mov	r0, r6
   8aa0c:	f000 f832 	bl	8aa74 <_malloc_r>
   8aa10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aa14:	b170      	cbz	r0, 8aa34 <__smakebuf_r+0x54>
   8aa16:	4916      	ldr	r1, [pc, #88]	; (8aa70 <__smakebuf_r+0x90>)
   8aa18:	9a00      	ldr	r2, [sp, #0]
   8aa1a:	63f1      	str	r1, [r6, #60]	; 0x3c
   8aa1c:	9901      	ldr	r1, [sp, #4]
   8aa1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8aa22:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8aa26:	81a3      	strh	r3, [r4, #12]
   8aa28:	6020      	str	r0, [r4, #0]
   8aa2a:	b989      	cbnz	r1, 8aa50 <__smakebuf_r+0x70>
   8aa2c:	432b      	orrs	r3, r5
   8aa2e:	81a3      	strh	r3, [r4, #12]
   8aa30:	b002      	add	sp, #8
   8aa32:	bd70      	pop	{r4, r5, r6, pc}
   8aa34:	059a      	lsls	r2, r3, #22
   8aa36:	d4df      	bmi.n	8a9f8 <__smakebuf_r+0x18>
   8aa38:	2101      	movs	r1, #1
   8aa3a:	f023 0303 	bic.w	r3, r3, #3
   8aa3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8aa42:	f043 0302 	orr.w	r3, r3, #2
   8aa46:	81a3      	strh	r3, [r4, #12]
   8aa48:	6161      	str	r1, [r4, #20]
   8aa4a:	6022      	str	r2, [r4, #0]
   8aa4c:	6122      	str	r2, [r4, #16]
   8aa4e:	e7d3      	b.n	8a9f8 <__smakebuf_r+0x18>
   8aa50:	4630      	mov	r0, r6
   8aa52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8aa56:	f001 fbcf 	bl	8c1f8 <_isatty_r>
   8aa5a:	b910      	cbnz	r0, 8aa62 <__smakebuf_r+0x82>
   8aa5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aa60:	e7e4      	b.n	8aa2c <__smakebuf_r+0x4c>
   8aa62:	89a2      	ldrh	r2, [r4, #12]
   8aa64:	f022 0203 	bic.w	r2, r2, #3
   8aa68:	f042 0201 	orr.w	r2, r2, #1
   8aa6c:	b213      	sxth	r3, r2
   8aa6e:	e7dd      	b.n	8aa2c <__smakebuf_r+0x4c>
   8aa70:	0008a1cd 	.word	0x0008a1cd

0008aa74 <_malloc_r>:
   8aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aa78:	f101 050b 	add.w	r5, r1, #11
   8aa7c:	2d16      	cmp	r5, #22
   8aa7e:	4606      	mov	r6, r0
   8aa80:	b083      	sub	sp, #12
   8aa82:	d824      	bhi.n	8aace <_malloc_r+0x5a>
   8aa84:	2910      	cmp	r1, #16
   8aa86:	f200 80b6 	bhi.w	8abf6 <_malloc_r+0x182>
   8aa8a:	f000 fb61 	bl	8b150 <__malloc_lock>
   8aa8e:	2510      	movs	r5, #16
   8aa90:	2002      	movs	r0, #2
   8aa92:	2318      	movs	r3, #24
   8aa94:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8af80 <_malloc_r+0x50c>
   8aa98:	4443      	add	r3, r8
   8aa9a:	685c      	ldr	r4, [r3, #4]
   8aa9c:	f1a3 0208 	sub.w	r2, r3, #8
   8aaa0:	4294      	cmp	r4, r2
   8aaa2:	f000 80b4 	beq.w	8ac0e <_malloc_r+0x19a>
   8aaa6:	6863      	ldr	r3, [r4, #4]
   8aaa8:	68e1      	ldr	r1, [r4, #12]
   8aaaa:	f023 0303 	bic.w	r3, r3, #3
   8aaae:	4423      	add	r3, r4
   8aab0:	685a      	ldr	r2, [r3, #4]
   8aab2:	68a5      	ldr	r5, [r4, #8]
   8aab4:	f042 0201 	orr.w	r2, r2, #1
   8aab8:	60e9      	str	r1, [r5, #12]
   8aaba:	4630      	mov	r0, r6
   8aabc:	608d      	str	r5, [r1, #8]
   8aabe:	3408      	adds	r4, #8
   8aac0:	605a      	str	r2, [r3, #4]
   8aac2:	f000 fb4b 	bl	8b15c <__malloc_unlock>
   8aac6:	4620      	mov	r0, r4
   8aac8:	b003      	add	sp, #12
   8aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aace:	f035 0507 	bics.w	r5, r5, #7
   8aad2:	f100 8090 	bmi.w	8abf6 <_malloc_r+0x182>
   8aad6:	42a9      	cmp	r1, r5
   8aad8:	f200 808d 	bhi.w	8abf6 <_malloc_r+0x182>
   8aadc:	f000 fb38 	bl	8b150 <__malloc_lock>
   8aae0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8aae4:	f0c0 8185 	bcc.w	8adf2 <_malloc_r+0x37e>
   8aae8:	0a6b      	lsrs	r3, r5, #9
   8aaea:	f000 808b 	beq.w	8ac04 <_malloc_r+0x190>
   8aaee:	2b04      	cmp	r3, #4
   8aaf0:	f200 815b 	bhi.w	8adaa <_malloc_r+0x336>
   8aaf4:	09ab      	lsrs	r3, r5, #6
   8aaf6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8aafa:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8aafe:	00c1      	lsls	r1, r0, #3
   8ab00:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8af80 <_malloc_r+0x50c>
   8ab04:	4441      	add	r1, r8
   8ab06:	684c      	ldr	r4, [r1, #4]
   8ab08:	3908      	subs	r1, #8
   8ab0a:	42a1      	cmp	r1, r4
   8ab0c:	d106      	bne.n	8ab1c <_malloc_r+0xa8>
   8ab0e:	e00c      	b.n	8ab2a <_malloc_r+0xb6>
   8ab10:	2a00      	cmp	r2, #0
   8ab12:	f280 8122 	bge.w	8ad5a <_malloc_r+0x2e6>
   8ab16:	68e4      	ldr	r4, [r4, #12]
   8ab18:	42a1      	cmp	r1, r4
   8ab1a:	d006      	beq.n	8ab2a <_malloc_r+0xb6>
   8ab1c:	6863      	ldr	r3, [r4, #4]
   8ab1e:	f023 0303 	bic.w	r3, r3, #3
   8ab22:	1b5a      	subs	r2, r3, r5
   8ab24:	2a0f      	cmp	r2, #15
   8ab26:	ddf3      	ble.n	8ab10 <_malloc_r+0x9c>
   8ab28:	4638      	mov	r0, r7
   8ab2a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8ab2e:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8af84 <_malloc_r+0x510>
   8ab32:	4564      	cmp	r4, ip
   8ab34:	d077      	beq.n	8ac26 <_malloc_r+0x1b2>
   8ab36:	6862      	ldr	r2, [r4, #4]
   8ab38:	f022 0203 	bic.w	r2, r2, #3
   8ab3c:	1b53      	subs	r3, r2, r5
   8ab3e:	2b0f      	cmp	r3, #15
   8ab40:	f300 8165 	bgt.w	8ae0e <_malloc_r+0x39a>
   8ab44:	2b00      	cmp	r3, #0
   8ab46:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8ab4a:	f280 8156 	bge.w	8adfa <_malloc_r+0x386>
   8ab4e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8ab52:	f080 8106 	bcs.w	8ad62 <_malloc_r+0x2ee>
   8ab56:	2101      	movs	r1, #1
   8ab58:	08d3      	lsrs	r3, r2, #3
   8ab5a:	0952      	lsrs	r2, r2, #5
   8ab5c:	440b      	add	r3, r1
   8ab5e:	fa01 f202 	lsl.w	r2, r1, r2
   8ab62:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8ab66:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8ab6a:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8ab6e:	430a      	orrs	r2, r1
   8ab70:	f1ae 0108 	sub.w	r1, lr, #8
   8ab74:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8ab78:	f8c8 2004 	str.w	r2, [r8, #4]
   8ab7c:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8ab80:	60fc      	str	r4, [r7, #12]
   8ab82:	2101      	movs	r1, #1
   8ab84:	1083      	asrs	r3, r0, #2
   8ab86:	4099      	lsls	r1, r3
   8ab88:	4291      	cmp	r1, r2
   8ab8a:	d853      	bhi.n	8ac34 <_malloc_r+0x1c0>
   8ab8c:	4211      	tst	r1, r2
   8ab8e:	d106      	bne.n	8ab9e <_malloc_r+0x12a>
   8ab90:	f020 0003 	bic.w	r0, r0, #3
   8ab94:	0049      	lsls	r1, r1, #1
   8ab96:	4211      	tst	r1, r2
   8ab98:	f100 0004 	add.w	r0, r0, #4
   8ab9c:	d0fa      	beq.n	8ab94 <_malloc_r+0x120>
   8ab9e:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8aba2:	464c      	mov	r4, r9
   8aba4:	4686      	mov	lr, r0
   8aba6:	68e7      	ldr	r7, [r4, #12]
   8aba8:	42bc      	cmp	r4, r7
   8abaa:	d107      	bne.n	8abbc <_malloc_r+0x148>
   8abac:	e109      	b.n	8adc2 <_malloc_r+0x34e>
   8abae:	2b00      	cmp	r3, #0
   8abb0:	f280 8110 	bge.w	8add4 <_malloc_r+0x360>
   8abb4:	68ff      	ldr	r7, [r7, #12]
   8abb6:	42bc      	cmp	r4, r7
   8abb8:	f000 8103 	beq.w	8adc2 <_malloc_r+0x34e>
   8abbc:	687a      	ldr	r2, [r7, #4]
   8abbe:	f022 0203 	bic.w	r2, r2, #3
   8abc2:	1b53      	subs	r3, r2, r5
   8abc4:	2b0f      	cmp	r3, #15
   8abc6:	ddf2      	ble.n	8abae <_malloc_r+0x13a>
   8abc8:	f045 0e01 	orr.w	lr, r5, #1
   8abcc:	4630      	mov	r0, r6
   8abce:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8abd2:	443d      	add	r5, r7
   8abd4:	f043 0601 	orr.w	r6, r3, #1
   8abd8:	f8c7 e004 	str.w	lr, [r7, #4]
   8abdc:	60e1      	str	r1, [r4, #12]
   8abde:	608c      	str	r4, [r1, #8]
   8abe0:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8abe4:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8abe8:	606e      	str	r6, [r5, #4]
   8abea:	50bb      	str	r3, [r7, r2]
   8abec:	f000 fab6 	bl	8b15c <__malloc_unlock>
   8abf0:	f107 0408 	add.w	r4, r7, #8
   8abf4:	e002      	b.n	8abfc <_malloc_r+0x188>
   8abf6:	230c      	movs	r3, #12
   8abf8:	2400      	movs	r4, #0
   8abfa:	6033      	str	r3, [r6, #0]
   8abfc:	4620      	mov	r0, r4
   8abfe:	b003      	add	sp, #12
   8ac00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ac04:	f44f 7100 	mov.w	r1, #512	; 0x200
   8ac08:	2040      	movs	r0, #64	; 0x40
   8ac0a:	273f      	movs	r7, #63	; 0x3f
   8ac0c:	e778      	b.n	8ab00 <_malloc_r+0x8c>
   8ac0e:	68dc      	ldr	r4, [r3, #12]
   8ac10:	42a3      	cmp	r3, r4
   8ac12:	bf08      	it	eq
   8ac14:	3002      	addeq	r0, #2
   8ac16:	f47f af46 	bne.w	8aaa6 <_malloc_r+0x32>
   8ac1a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8ac1e:	f8df c364 	ldr.w	ip, [pc, #868]	; 8af84 <_malloc_r+0x510>
   8ac22:	4564      	cmp	r4, ip
   8ac24:	d187      	bne.n	8ab36 <_malloc_r+0xc2>
   8ac26:	2101      	movs	r1, #1
   8ac28:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8ac2c:	1083      	asrs	r3, r0, #2
   8ac2e:	4099      	lsls	r1, r3
   8ac30:	4291      	cmp	r1, r2
   8ac32:	d9ab      	bls.n	8ab8c <_malloc_r+0x118>
   8ac34:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8ac38:	6867      	ldr	r7, [r4, #4]
   8ac3a:	f027 0703 	bic.w	r7, r7, #3
   8ac3e:	42bd      	cmp	r5, r7
   8ac40:	d802      	bhi.n	8ac48 <_malloc_r+0x1d4>
   8ac42:	1b7b      	subs	r3, r7, r5
   8ac44:	2b0f      	cmp	r3, #15
   8ac46:	dc77      	bgt.n	8ad38 <_malloc_r+0x2c4>
   8ac48:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8af88 <_malloc_r+0x514>
   8ac4c:	4bc8      	ldr	r3, [pc, #800]	; (8af70 <_malloc_r+0x4fc>)
   8ac4e:	f8d9 2000 	ldr.w	r2, [r9]
   8ac52:	681b      	ldr	r3, [r3, #0]
   8ac54:	3201      	adds	r2, #1
   8ac56:	442b      	add	r3, r5
   8ac58:	eb04 0a07 	add.w	sl, r4, r7
   8ac5c:	f000 8124 	beq.w	8aea8 <_malloc_r+0x434>
   8ac60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8ac64:	330f      	adds	r3, #15
   8ac66:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8ac6a:	f02b 0b0f 	bic.w	fp, fp, #15
   8ac6e:	4659      	mov	r1, fp
   8ac70:	4630      	mov	r0, r6
   8ac72:	f001 f81d 	bl	8bcb0 <_sbrk_r>
   8ac76:	1c41      	adds	r1, r0, #1
   8ac78:	4602      	mov	r2, r0
   8ac7a:	f000 80e1 	beq.w	8ae40 <_malloc_r+0x3cc>
   8ac7e:	4582      	cmp	sl, r0
   8ac80:	f200 80dc 	bhi.w	8ae3c <_malloc_r+0x3c8>
   8ac84:	4bbb      	ldr	r3, [pc, #748]	; (8af74 <_malloc_r+0x500>)
   8ac86:	6819      	ldr	r1, [r3, #0]
   8ac88:	4459      	add	r1, fp
   8ac8a:	4608      	mov	r0, r1
   8ac8c:	6019      	str	r1, [r3, #0]
   8ac8e:	f000 8141 	beq.w	8af14 <_malloc_r+0x4a0>
   8ac92:	f8d9 1000 	ldr.w	r1, [r9]
   8ac96:	9301      	str	r3, [sp, #4]
   8ac98:	3101      	adds	r1, #1
   8ac9a:	bf1b      	ittet	ne
   8ac9c:	eba2 0a0a 	subne.w	sl, r2, sl
   8aca0:	4450      	addne	r0, sl
   8aca2:	f8c9 2000 	streq.w	r2, [r9]
   8aca6:	6018      	strne	r0, [r3, #0]
   8aca8:	f012 0a07 	ands.w	sl, r2, #7
   8acac:	f000 810a 	beq.w	8aec4 <_malloc_r+0x450>
   8acb0:	f1ca 0108 	rsb	r1, sl, #8
   8acb4:	440a      	add	r2, r1
   8acb6:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8acba:	4493      	add	fp, r2
   8acbc:	3108      	adds	r1, #8
   8acbe:	eba1 010b 	sub.w	r1, r1, fp
   8acc2:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8acc6:	4649      	mov	r1, r9
   8acc8:	4630      	mov	r0, r6
   8acca:	9200      	str	r2, [sp, #0]
   8accc:	f000 fff0 	bl	8bcb0 <_sbrk_r>
   8acd0:	1c42      	adds	r2, r0, #1
   8acd2:	e9dd 2300 	ldrd	r2, r3, [sp]
   8acd6:	f000 8143 	beq.w	8af60 <_malloc_r+0x4ec>
   8acda:	1a80      	subs	r0, r0, r2
   8acdc:	eb00 0b09 	add.w	fp, r0, r9
   8ace0:	6819      	ldr	r1, [r3, #0]
   8ace2:	f04b 0001 	orr.w	r0, fp, #1
   8ace6:	4449      	add	r1, r9
   8ace8:	4544      	cmp	r4, r8
   8acea:	f8c8 2008 	str.w	r2, [r8, #8]
   8acee:	6019      	str	r1, [r3, #0]
   8acf0:	6050      	str	r0, [r2, #4]
   8acf2:	f000 811c 	beq.w	8af2e <_malloc_r+0x4ba>
   8acf6:	2f0f      	cmp	r7, #15
   8acf8:	f240 811b 	bls.w	8af32 <_malloc_r+0x4be>
   8acfc:	f04f 0c05 	mov.w	ip, #5
   8ad00:	6860      	ldr	r0, [r4, #4]
   8ad02:	3f0c      	subs	r7, #12
   8ad04:	f027 0707 	bic.w	r7, r7, #7
   8ad08:	f000 0001 	and.w	r0, r0, #1
   8ad0c:	4338      	orrs	r0, r7
   8ad0e:	eb04 0e07 	add.w	lr, r4, r7
   8ad12:	2f0f      	cmp	r7, #15
   8ad14:	6060      	str	r0, [r4, #4]
   8ad16:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8ad1a:	f200 8137 	bhi.w	8af8c <_malloc_r+0x518>
   8ad1e:	4614      	mov	r4, r2
   8ad20:	6850      	ldr	r0, [r2, #4]
   8ad22:	4b95      	ldr	r3, [pc, #596]	; (8af78 <_malloc_r+0x504>)
   8ad24:	681a      	ldr	r2, [r3, #0]
   8ad26:	428a      	cmp	r2, r1
   8ad28:	bf38      	it	cc
   8ad2a:	6019      	strcc	r1, [r3, #0]
   8ad2c:	4b93      	ldr	r3, [pc, #588]	; (8af7c <_malloc_r+0x508>)
   8ad2e:	681a      	ldr	r2, [r3, #0]
   8ad30:	428a      	cmp	r2, r1
   8ad32:	bf38      	it	cc
   8ad34:	6019      	strcc	r1, [r3, #0]
   8ad36:	e086      	b.n	8ae46 <_malloc_r+0x3d2>
   8ad38:	f045 0201 	orr.w	r2, r5, #1
   8ad3c:	f043 0301 	orr.w	r3, r3, #1
   8ad40:	4425      	add	r5, r4
   8ad42:	6062      	str	r2, [r4, #4]
   8ad44:	4630      	mov	r0, r6
   8ad46:	f8c8 5008 	str.w	r5, [r8, #8]
   8ad4a:	3408      	adds	r4, #8
   8ad4c:	606b      	str	r3, [r5, #4]
   8ad4e:	f000 fa05 	bl	8b15c <__malloc_unlock>
   8ad52:	4620      	mov	r0, r4
   8ad54:	b003      	add	sp, #12
   8ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ad5a:	4423      	add	r3, r4
   8ad5c:	685a      	ldr	r2, [r3, #4]
   8ad5e:	68e1      	ldr	r1, [r4, #12]
   8ad60:	e6a7      	b.n	8aab2 <_malloc_r+0x3e>
   8ad62:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8ad66:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8ad6a:	d361      	bcc.n	8ae30 <_malloc_r+0x3bc>
   8ad6c:	2b14      	cmp	r3, #20
   8ad6e:	f200 80ba 	bhi.w	8aee6 <_malloc_r+0x472>
   8ad72:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8ad76:	00c9      	lsls	r1, r1, #3
   8ad78:	335b      	adds	r3, #91	; 0x5b
   8ad7a:	eb08 0701 	add.w	r7, r8, r1
   8ad7e:	f858 1001 	ldr.w	r1, [r8, r1]
   8ad82:	3f08      	subs	r7, #8
   8ad84:	428f      	cmp	r7, r1
   8ad86:	f000 8092 	beq.w	8aeae <_malloc_r+0x43a>
   8ad8a:	684b      	ldr	r3, [r1, #4]
   8ad8c:	f023 0303 	bic.w	r3, r3, #3
   8ad90:	4293      	cmp	r3, r2
   8ad92:	d902      	bls.n	8ad9a <_malloc_r+0x326>
   8ad94:	6889      	ldr	r1, [r1, #8]
   8ad96:	428f      	cmp	r7, r1
   8ad98:	d1f7      	bne.n	8ad8a <_malloc_r+0x316>
   8ad9a:	68cf      	ldr	r7, [r1, #12]
   8ad9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8ada0:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8ada4:	60bc      	str	r4, [r7, #8]
   8ada6:	60cc      	str	r4, [r1, #12]
   8ada8:	e6eb      	b.n	8ab82 <_malloc_r+0x10e>
   8adaa:	2b14      	cmp	r3, #20
   8adac:	d959      	bls.n	8ae62 <_malloc_r+0x3ee>
   8adae:	2b54      	cmp	r3, #84	; 0x54
   8adb0:	f200 80a1 	bhi.w	8aef6 <_malloc_r+0x482>
   8adb4:	0b2b      	lsrs	r3, r5, #12
   8adb6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8adba:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8adbe:	00c1      	lsls	r1, r0, #3
   8adc0:	e69e      	b.n	8ab00 <_malloc_r+0x8c>
   8adc2:	f10e 0e01 	add.w	lr, lr, #1
   8adc6:	f01e 0f03 	tst.w	lr, #3
   8adca:	f104 0408 	add.w	r4, r4, #8
   8adce:	f47f aeea 	bne.w	8aba6 <_malloc_r+0x132>
   8add2:	e051      	b.n	8ae78 <_malloc_r+0x404>
   8add4:	463c      	mov	r4, r7
   8add6:	443a      	add	r2, r7
   8add8:	6853      	ldr	r3, [r2, #4]
   8adda:	68f9      	ldr	r1, [r7, #12]
   8addc:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8ade0:	f043 0301 	orr.w	r3, r3, #1
   8ade4:	6053      	str	r3, [r2, #4]
   8ade6:	4630      	mov	r0, r6
   8ade8:	60e9      	str	r1, [r5, #12]
   8adea:	608d      	str	r5, [r1, #8]
   8adec:	f000 f9b6 	bl	8b15c <__malloc_unlock>
   8adf0:	e704      	b.n	8abfc <_malloc_r+0x188>
   8adf2:	08e8      	lsrs	r0, r5, #3
   8adf4:	f105 0308 	add.w	r3, r5, #8
   8adf8:	e64c      	b.n	8aa94 <_malloc_r+0x20>
   8adfa:	4422      	add	r2, r4
   8adfc:	6853      	ldr	r3, [r2, #4]
   8adfe:	4630      	mov	r0, r6
   8ae00:	f043 0301 	orr.w	r3, r3, #1
   8ae04:	6053      	str	r3, [r2, #4]
   8ae06:	3408      	adds	r4, #8
   8ae08:	f000 f9a8 	bl	8b15c <__malloc_unlock>
   8ae0c:	e6f6      	b.n	8abfc <_malloc_r+0x188>
   8ae0e:	f045 0701 	orr.w	r7, r5, #1
   8ae12:	f043 0101 	orr.w	r1, r3, #1
   8ae16:	4425      	add	r5, r4
   8ae18:	6067      	str	r7, [r4, #4]
   8ae1a:	4630      	mov	r0, r6
   8ae1c:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8ae20:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8ae24:	6069      	str	r1, [r5, #4]
   8ae26:	50a3      	str	r3, [r4, r2]
   8ae28:	f000 f998 	bl	8b15c <__malloc_unlock>
   8ae2c:	3408      	adds	r4, #8
   8ae2e:	e6e5      	b.n	8abfc <_malloc_r+0x188>
   8ae30:	0993      	lsrs	r3, r2, #6
   8ae32:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8ae36:	00c9      	lsls	r1, r1, #3
   8ae38:	3338      	adds	r3, #56	; 0x38
   8ae3a:	e79e      	b.n	8ad7a <_malloc_r+0x306>
   8ae3c:	4544      	cmp	r4, r8
   8ae3e:	d064      	beq.n	8af0a <_malloc_r+0x496>
   8ae40:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8ae44:	6860      	ldr	r0, [r4, #4]
   8ae46:	f020 0b03 	bic.w	fp, r0, #3
   8ae4a:	455d      	cmp	r5, fp
   8ae4c:	ebab 0305 	sub.w	r3, fp, r5
   8ae50:	d802      	bhi.n	8ae58 <_malloc_r+0x3e4>
   8ae52:	2b0f      	cmp	r3, #15
   8ae54:	f73f af70 	bgt.w	8ad38 <_malloc_r+0x2c4>
   8ae58:	4630      	mov	r0, r6
   8ae5a:	f000 f97f 	bl	8b15c <__malloc_unlock>
   8ae5e:	2400      	movs	r4, #0
   8ae60:	e6cc      	b.n	8abfc <_malloc_r+0x188>
   8ae62:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8ae66:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8ae6a:	00c1      	lsls	r1, r0, #3
   8ae6c:	e648      	b.n	8ab00 <_malloc_r+0x8c>
   8ae6e:	f859 3908 	ldr.w	r3, [r9], #-8
   8ae72:	454b      	cmp	r3, r9
   8ae74:	f040 80a9 	bne.w	8afca <_malloc_r+0x556>
   8ae78:	f010 0f03 	tst.w	r0, #3
   8ae7c:	f100 30ff 	add.w	r0, r0, #4294967295
   8ae80:	d1f5      	bne.n	8ae6e <_malloc_r+0x3fa>
   8ae82:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ae86:	ea23 0301 	bic.w	r3, r3, r1
   8ae8a:	f8c8 3004 	str.w	r3, [r8, #4]
   8ae8e:	0049      	lsls	r1, r1, #1
   8ae90:	4299      	cmp	r1, r3
   8ae92:	f63f aecf 	bhi.w	8ac34 <_malloc_r+0x1c0>
   8ae96:	b919      	cbnz	r1, 8aea0 <_malloc_r+0x42c>
   8ae98:	e6cc      	b.n	8ac34 <_malloc_r+0x1c0>
   8ae9a:	0049      	lsls	r1, r1, #1
   8ae9c:	f10e 0e04 	add.w	lr, lr, #4
   8aea0:	4219      	tst	r1, r3
   8aea2:	d0fa      	beq.n	8ae9a <_malloc_r+0x426>
   8aea4:	4670      	mov	r0, lr
   8aea6:	e67a      	b.n	8ab9e <_malloc_r+0x12a>
   8aea8:	f103 0b10 	add.w	fp, r3, #16
   8aeac:	e6df      	b.n	8ac6e <_malloc_r+0x1fa>
   8aeae:	f04f 0e01 	mov.w	lr, #1
   8aeb2:	109a      	asrs	r2, r3, #2
   8aeb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8aeb8:	fa0e f202 	lsl.w	r2, lr, r2
   8aebc:	431a      	orrs	r2, r3
   8aebe:	f8c8 2004 	str.w	r2, [r8, #4]
   8aec2:	e76d      	b.n	8ada0 <_malloc_r+0x32c>
   8aec4:	eb02 010b 	add.w	r1, r2, fp
   8aec8:	4249      	negs	r1, r1
   8aeca:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8aece:	4649      	mov	r1, r9
   8aed0:	4630      	mov	r0, r6
   8aed2:	9200      	str	r2, [sp, #0]
   8aed4:	f000 feec 	bl	8bcb0 <_sbrk_r>
   8aed8:	1c43      	adds	r3, r0, #1
   8aeda:	e9dd 2300 	ldrd	r2, r3, [sp]
   8aede:	f47f aefc 	bne.w	8acda <_malloc_r+0x266>
   8aee2:	46d1      	mov	r9, sl
   8aee4:	e6fc      	b.n	8ace0 <_malloc_r+0x26c>
   8aee6:	2b54      	cmp	r3, #84	; 0x54
   8aee8:	d826      	bhi.n	8af38 <_malloc_r+0x4c4>
   8aeea:	0b13      	lsrs	r3, r2, #12
   8aeec:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8aef0:	00c9      	lsls	r1, r1, #3
   8aef2:	336e      	adds	r3, #110	; 0x6e
   8aef4:	e741      	b.n	8ad7a <_malloc_r+0x306>
   8aef6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8aefa:	d826      	bhi.n	8af4a <_malloc_r+0x4d6>
   8aefc:	0beb      	lsrs	r3, r5, #15
   8aefe:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8af02:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8af06:	00c1      	lsls	r1, r0, #3
   8af08:	e5fa      	b.n	8ab00 <_malloc_r+0x8c>
   8af0a:	4b1a      	ldr	r3, [pc, #104]	; (8af74 <_malloc_r+0x500>)
   8af0c:	6818      	ldr	r0, [r3, #0]
   8af0e:	4458      	add	r0, fp
   8af10:	6018      	str	r0, [r3, #0]
   8af12:	e6be      	b.n	8ac92 <_malloc_r+0x21e>
   8af14:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8af18:	f1bc 0f00 	cmp.w	ip, #0
   8af1c:	f47f aeb9 	bne.w	8ac92 <_malloc_r+0x21e>
   8af20:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8af24:	44bb      	add	fp, r7
   8af26:	f04b 0001 	orr.w	r0, fp, #1
   8af2a:	6060      	str	r0, [r4, #4]
   8af2c:	e6f9      	b.n	8ad22 <_malloc_r+0x2ae>
   8af2e:	4614      	mov	r4, r2
   8af30:	e6f7      	b.n	8ad22 <_malloc_r+0x2ae>
   8af32:	2301      	movs	r3, #1
   8af34:	6053      	str	r3, [r2, #4]
   8af36:	e78f      	b.n	8ae58 <_malloc_r+0x3e4>
   8af38:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8af3c:	d832      	bhi.n	8afa4 <_malloc_r+0x530>
   8af3e:	0bd3      	lsrs	r3, r2, #15
   8af40:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8af44:	00c9      	lsls	r1, r1, #3
   8af46:	3377      	adds	r3, #119	; 0x77
   8af48:	e717      	b.n	8ad7a <_malloc_r+0x306>
   8af4a:	f240 5254 	movw	r2, #1364	; 0x554
   8af4e:	4293      	cmp	r3, r2
   8af50:	d832      	bhi.n	8afb8 <_malloc_r+0x544>
   8af52:	0cab      	lsrs	r3, r5, #18
   8af54:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8af58:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8af5c:	00c1      	lsls	r1, r0, #3
   8af5e:	e5cf      	b.n	8ab00 <_malloc_r+0x8c>
   8af60:	f1aa 0a08 	sub.w	sl, sl, #8
   8af64:	44d3      	add	fp, sl
   8af66:	f04f 0900 	mov.w	r9, #0
   8af6a:	ebab 0b02 	sub.w	fp, fp, r2
   8af6e:	e6b7      	b.n	8ace0 <_malloc_r+0x26c>
   8af70:	20000fd4 	.word	0x20000fd4
   8af74:	20000fa4 	.word	0x20000fa4
   8af78:	20000fcc 	.word	0x20000fcc
   8af7c:	20000fd0 	.word	0x20000fd0
   8af80:	20000a10 	.word	0x20000a10
   8af84:	20000a18 	.word	0x20000a18
   8af88:	20000e18 	.word	0x20000e18
   8af8c:	f104 0108 	add.w	r1, r4, #8
   8af90:	4630      	mov	r0, r6
   8af92:	9300      	str	r3, [sp, #0]
   8af94:	f7ff fa44 	bl	8a420 <_free_r>
   8af98:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8af9c:	9b00      	ldr	r3, [sp, #0]
   8af9e:	6860      	ldr	r0, [r4, #4]
   8afa0:	6819      	ldr	r1, [r3, #0]
   8afa2:	e6be      	b.n	8ad22 <_malloc_r+0x2ae>
   8afa4:	f240 5154 	movw	r1, #1364	; 0x554
   8afa8:	428b      	cmp	r3, r1
   8afaa:	d80a      	bhi.n	8afc2 <_malloc_r+0x54e>
   8afac:	0c93      	lsrs	r3, r2, #18
   8afae:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8afb2:	00c9      	lsls	r1, r1, #3
   8afb4:	337c      	adds	r3, #124	; 0x7c
   8afb6:	e6e0      	b.n	8ad7a <_malloc_r+0x306>
   8afb8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8afbc:	207f      	movs	r0, #127	; 0x7f
   8afbe:	277e      	movs	r7, #126	; 0x7e
   8afc0:	e59e      	b.n	8ab00 <_malloc_r+0x8c>
   8afc2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8afc6:	237e      	movs	r3, #126	; 0x7e
   8afc8:	e6d7      	b.n	8ad7a <_malloc_r+0x306>
   8afca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8afce:	e75e      	b.n	8ae8e <_malloc_r+0x41a>

0008afd0 <__ascii_mbtowc>:
   8afd0:	b082      	sub	sp, #8
   8afd2:	b149      	cbz	r1, 8afe8 <__ascii_mbtowc+0x18>
   8afd4:	b15a      	cbz	r2, 8afee <__ascii_mbtowc+0x1e>
   8afd6:	b16b      	cbz	r3, 8aff4 <__ascii_mbtowc+0x24>
   8afd8:	7813      	ldrb	r3, [r2, #0]
   8afda:	600b      	str	r3, [r1, #0]
   8afdc:	7812      	ldrb	r2, [r2, #0]
   8afde:	1e10      	subs	r0, r2, #0
   8afe0:	bf18      	it	ne
   8afe2:	2001      	movne	r0, #1
   8afe4:	b002      	add	sp, #8
   8afe6:	4770      	bx	lr
   8afe8:	a901      	add	r1, sp, #4
   8afea:	2a00      	cmp	r2, #0
   8afec:	d1f3      	bne.n	8afd6 <__ascii_mbtowc+0x6>
   8afee:	4610      	mov	r0, r2
   8aff0:	b002      	add	sp, #8
   8aff2:	4770      	bx	lr
   8aff4:	f06f 0001 	mvn.w	r0, #1
   8aff8:	e7f4      	b.n	8afe4 <__ascii_mbtowc+0x14>
   8affa:	bf00      	nop

0008affc <memchr>:
   8affc:	b470      	push	{r4, r5, r6}
   8affe:	0784      	lsls	r4, r0, #30
   8b000:	b2cd      	uxtb	r5, r1
   8b002:	d012      	beq.n	8b02a <memchr+0x2e>
   8b004:	4603      	mov	r3, r0
   8b006:	1e54      	subs	r4, r2, #1
   8b008:	b92a      	cbnz	r2, 8b016 <memchr+0x1a>
   8b00a:	e00b      	b.n	8b024 <memchr+0x28>
   8b00c:	079a      	lsls	r2, r3, #30
   8b00e:	4618      	mov	r0, r3
   8b010:	d00c      	beq.n	8b02c <memchr+0x30>
   8b012:	3c01      	subs	r4, #1
   8b014:	d306      	bcc.n	8b024 <memchr+0x28>
   8b016:	4618      	mov	r0, r3
   8b018:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b01c:	42aa      	cmp	r2, r5
   8b01e:	d1f5      	bne.n	8b00c <memchr+0x10>
   8b020:	bc70      	pop	{r4, r5, r6}
   8b022:	4770      	bx	lr
   8b024:	2000      	movs	r0, #0
   8b026:	bc70      	pop	{r4, r5, r6}
   8b028:	4770      	bx	lr
   8b02a:	4614      	mov	r4, r2
   8b02c:	2c03      	cmp	r4, #3
   8b02e:	d80d      	bhi.n	8b04c <memchr+0x50>
   8b030:	2c00      	cmp	r4, #0
   8b032:	d0f7      	beq.n	8b024 <memchr+0x28>
   8b034:	4602      	mov	r2, r0
   8b036:	1903      	adds	r3, r0, r4
   8b038:	e001      	b.n	8b03e <memchr+0x42>
   8b03a:	429a      	cmp	r2, r3
   8b03c:	d0f2      	beq.n	8b024 <memchr+0x28>
   8b03e:	4610      	mov	r0, r2
   8b040:	f812 1b01 	ldrb.w	r1, [r2], #1
   8b044:	42a9      	cmp	r1, r5
   8b046:	d1f8      	bne.n	8b03a <memchr+0x3e>
   8b048:	bc70      	pop	{r4, r5, r6}
   8b04a:	4770      	bx	lr
   8b04c:	4606      	mov	r6, r0
   8b04e:	020a      	lsls	r2, r1, #8
   8b050:	b292      	uxth	r2, r2
   8b052:	432a      	orrs	r2, r5
   8b054:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8b058:	6833      	ldr	r3, [r6, #0]
   8b05a:	4630      	mov	r0, r6
   8b05c:	4053      	eors	r3, r2
   8b05e:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8b062:	ea21 0303 	bic.w	r3, r1, r3
   8b066:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8b06a:	f106 0604 	add.w	r6, r6, #4
   8b06e:	d1e1      	bne.n	8b034 <memchr+0x38>
   8b070:	3c04      	subs	r4, #4
   8b072:	2c03      	cmp	r4, #3
   8b074:	4630      	mov	r0, r6
   8b076:	d8ef      	bhi.n	8b058 <memchr+0x5c>
   8b078:	e7da      	b.n	8b030 <memchr+0x34>
   8b07a:	bf00      	nop

0008b07c <memmove>:
   8b07c:	4288      	cmp	r0, r1
   8b07e:	b4f0      	push	{r4, r5, r6, r7}
   8b080:	d90d      	bls.n	8b09e <memmove+0x22>
   8b082:	188b      	adds	r3, r1, r2
   8b084:	4283      	cmp	r3, r0
   8b086:	d90a      	bls.n	8b09e <memmove+0x22>
   8b088:	1884      	adds	r4, r0, r2
   8b08a:	b132      	cbz	r2, 8b09a <memmove+0x1e>
   8b08c:	4622      	mov	r2, r4
   8b08e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8b092:	4299      	cmp	r1, r3
   8b094:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8b098:	d1f9      	bne.n	8b08e <memmove+0x12>
   8b09a:	bcf0      	pop	{r4, r5, r6, r7}
   8b09c:	4770      	bx	lr
   8b09e:	2a0f      	cmp	r2, #15
   8b0a0:	d80e      	bhi.n	8b0c0 <memmove+0x44>
   8b0a2:	4603      	mov	r3, r0
   8b0a4:	1e54      	subs	r4, r2, #1
   8b0a6:	2a00      	cmp	r2, #0
   8b0a8:	d0f7      	beq.n	8b09a <memmove+0x1e>
   8b0aa:	3401      	adds	r4, #1
   8b0ac:	440c      	add	r4, r1
   8b0ae:	3b01      	subs	r3, #1
   8b0b0:	f811 2b01 	ldrb.w	r2, [r1], #1
   8b0b4:	42a1      	cmp	r1, r4
   8b0b6:	f803 2f01 	strb.w	r2, [r3, #1]!
   8b0ba:	d1f9      	bne.n	8b0b0 <memmove+0x34>
   8b0bc:	bcf0      	pop	{r4, r5, r6, r7}
   8b0be:	4770      	bx	lr
   8b0c0:	ea40 0301 	orr.w	r3, r0, r1
   8b0c4:	079b      	lsls	r3, r3, #30
   8b0c6:	d13e      	bne.n	8b146 <memmove+0xca>
   8b0c8:	f1a2 0310 	sub.w	r3, r2, #16
   8b0cc:	f023 040f 	bic.w	r4, r3, #15
   8b0d0:	f101 0720 	add.w	r7, r1, #32
   8b0d4:	4427      	add	r7, r4
   8b0d6:	091b      	lsrs	r3, r3, #4
   8b0d8:	f101 0410 	add.w	r4, r1, #16
   8b0dc:	f100 0510 	add.w	r5, r0, #16
   8b0e0:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8b0e4:	3410      	adds	r4, #16
   8b0e6:	f845 6c10 	str.w	r6, [r5, #-16]
   8b0ea:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8b0ee:	3510      	adds	r5, #16
   8b0f0:	f845 6c1c 	str.w	r6, [r5, #-28]
   8b0f4:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8b0f8:	f845 6c18 	str.w	r6, [r5, #-24]
   8b0fc:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8b100:	42bc      	cmp	r4, r7
   8b102:	f845 6c14 	str.w	r6, [r5, #-20]
   8b106:	d1eb      	bne.n	8b0e0 <memmove+0x64>
   8b108:	3301      	adds	r3, #1
   8b10a:	f012 0f0c 	tst.w	r2, #12
   8b10e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8b112:	f002 040f 	and.w	r4, r2, #15
   8b116:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8b11a:	d017      	beq.n	8b14c <memmove+0xd0>
   8b11c:	460e      	mov	r6, r1
   8b11e:	3c04      	subs	r4, #4
   8b120:	f024 0c03 	bic.w	ip, r4, #3
   8b124:	08a5      	lsrs	r5, r4, #2
   8b126:	449c      	add	ip, r3
   8b128:	1f1c      	subs	r4, r3, #4
   8b12a:	f856 7b04 	ldr.w	r7, [r6], #4
   8b12e:	f844 7f04 	str.w	r7, [r4, #4]!
   8b132:	4564      	cmp	r4, ip
   8b134:	d1f9      	bne.n	8b12a <memmove+0xae>
   8b136:	1c6c      	adds	r4, r5, #1
   8b138:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8b13c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8b140:	f002 0203 	and.w	r2, r2, #3
   8b144:	e7ae      	b.n	8b0a4 <memmove+0x28>
   8b146:	4603      	mov	r3, r0
   8b148:	1e54      	subs	r4, r2, #1
   8b14a:	e7ae      	b.n	8b0aa <memmove+0x2e>
   8b14c:	4622      	mov	r2, r4
   8b14e:	e7a9      	b.n	8b0a4 <memmove+0x28>

0008b150 <__malloc_lock>:
   8b150:	4801      	ldr	r0, [pc, #4]	; (8b158 <__malloc_lock+0x8>)
   8b152:	f7ff bc13 	b.w	8a97c <__retarget_lock_acquire_recursive>
   8b156:	bf00      	nop
   8b158:	20001498 	.word	0x20001498

0008b15c <__malloc_unlock>:
   8b15c:	4801      	ldr	r0, [pc, #4]	; (8b164 <__malloc_unlock+0x8>)
   8b15e:	f7ff bc0f 	b.w	8a980 <__retarget_lock_release_recursive>
   8b162:	bf00      	nop
   8b164:	20001498 	.word	0x20001498

0008b168 <_Balloc>:
   8b168:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b16a:	b570      	push	{r4, r5, r6, lr}
   8b16c:	4605      	mov	r5, r0
   8b16e:	460c      	mov	r4, r1
   8b170:	b14b      	cbz	r3, 8b186 <_Balloc+0x1e>
   8b172:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8b176:	b180      	cbz	r0, 8b19a <_Balloc+0x32>
   8b178:	6802      	ldr	r2, [r0, #0]
   8b17a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8b17e:	2300      	movs	r3, #0
   8b180:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8b184:	bd70      	pop	{r4, r5, r6, pc}
   8b186:	2221      	movs	r2, #33	; 0x21
   8b188:	2104      	movs	r1, #4
   8b18a:	f000 ff63 	bl	8c054 <_calloc_r>
   8b18e:	4603      	mov	r3, r0
   8b190:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b192:	2800      	cmp	r0, #0
   8b194:	d1ed      	bne.n	8b172 <_Balloc+0xa>
   8b196:	2000      	movs	r0, #0
   8b198:	bd70      	pop	{r4, r5, r6, pc}
   8b19a:	2101      	movs	r1, #1
   8b19c:	fa01 f604 	lsl.w	r6, r1, r4
   8b1a0:	1d72      	adds	r2, r6, #5
   8b1a2:	4628      	mov	r0, r5
   8b1a4:	0092      	lsls	r2, r2, #2
   8b1a6:	f000 ff55 	bl	8c054 <_calloc_r>
   8b1aa:	2800      	cmp	r0, #0
   8b1ac:	d0f3      	beq.n	8b196 <_Balloc+0x2e>
   8b1ae:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8b1b2:	e7e4      	b.n	8b17e <_Balloc+0x16>

0008b1b4 <_Bfree>:
   8b1b4:	b131      	cbz	r1, 8b1c4 <_Bfree+0x10>
   8b1b6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b1b8:	684a      	ldr	r2, [r1, #4]
   8b1ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b1be:	6008      	str	r0, [r1, #0]
   8b1c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b1c4:	4770      	bx	lr
   8b1c6:	bf00      	nop

0008b1c8 <__multadd>:
   8b1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b1cc:	4680      	mov	r8, r0
   8b1ce:	461c      	mov	r4, r3
   8b1d0:	2000      	movs	r0, #0
   8b1d2:	460f      	mov	r7, r1
   8b1d4:	690e      	ldr	r6, [r1, #16]
   8b1d6:	3114      	adds	r1, #20
   8b1d8:	680d      	ldr	r5, [r1, #0]
   8b1da:	3001      	adds	r0, #1
   8b1dc:	b2ab      	uxth	r3, r5
   8b1de:	fb02 4303 	mla	r3, r2, r3, r4
   8b1e2:	0c2c      	lsrs	r4, r5, #16
   8b1e4:	0c1d      	lsrs	r5, r3, #16
   8b1e6:	fb02 5404 	mla	r4, r2, r4, r5
   8b1ea:	b29b      	uxth	r3, r3
   8b1ec:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8b1f0:	4286      	cmp	r6, r0
   8b1f2:	f841 3b04 	str.w	r3, [r1], #4
   8b1f6:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8b1fa:	dced      	bgt.n	8b1d8 <__multadd+0x10>
   8b1fc:	b13c      	cbz	r4, 8b20e <__multadd+0x46>
   8b1fe:	68bb      	ldr	r3, [r7, #8]
   8b200:	42b3      	cmp	r3, r6
   8b202:	dd07      	ble.n	8b214 <__multadd+0x4c>
   8b204:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b208:	3601      	adds	r6, #1
   8b20a:	615c      	str	r4, [r3, #20]
   8b20c:	613e      	str	r6, [r7, #16]
   8b20e:	4638      	mov	r0, r7
   8b210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b214:	6879      	ldr	r1, [r7, #4]
   8b216:	4640      	mov	r0, r8
   8b218:	3101      	adds	r1, #1
   8b21a:	f7ff ffa5 	bl	8b168 <_Balloc>
   8b21e:	4605      	mov	r5, r0
   8b220:	b1b0      	cbz	r0, 8b250 <__multadd+0x88>
   8b222:	693a      	ldr	r2, [r7, #16]
   8b224:	f107 010c 	add.w	r1, r7, #12
   8b228:	3202      	adds	r2, #2
   8b22a:	0092      	lsls	r2, r2, #2
   8b22c:	300c      	adds	r0, #12
   8b22e:	f7fb f869 	bl	86304 <memcpy>
   8b232:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b236:	687a      	ldr	r2, [r7, #4]
   8b238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b23c:	6039      	str	r1, [r7, #0]
   8b23e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8b242:	462f      	mov	r7, r5
   8b244:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b248:	3601      	adds	r6, #1
   8b24a:	615c      	str	r4, [r3, #20]
   8b24c:	613e      	str	r6, [r7, #16]
   8b24e:	e7de      	b.n	8b20e <__multadd+0x46>
   8b250:	4602      	mov	r2, r0
   8b252:	21b5      	movs	r1, #181	; 0xb5
   8b254:	4b01      	ldr	r3, [pc, #4]	; (8b25c <__multadd+0x94>)
   8b256:	4802      	ldr	r0, [pc, #8]	; (8b260 <__multadd+0x98>)
   8b258:	f000 fede 	bl	8c018 <__assert_func>
   8b25c:	0008d058 	.word	0x0008d058
   8b260:	0008d0f8 	.word	0x0008d0f8

0008b264 <__hi0bits>:
   8b264:	0c02      	lsrs	r2, r0, #16
   8b266:	0412      	lsls	r2, r2, #16
   8b268:	4603      	mov	r3, r0
   8b26a:	b9ca      	cbnz	r2, 8b2a0 <__hi0bits+0x3c>
   8b26c:	0403      	lsls	r3, r0, #16
   8b26e:	2010      	movs	r0, #16
   8b270:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b274:	bf04      	itt	eq
   8b276:	021b      	lsleq	r3, r3, #8
   8b278:	3008      	addeq	r0, #8
   8b27a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b27e:	bf04      	itt	eq
   8b280:	011b      	lsleq	r3, r3, #4
   8b282:	3004      	addeq	r0, #4
   8b284:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b288:	bf04      	itt	eq
   8b28a:	009b      	lsleq	r3, r3, #2
   8b28c:	3002      	addeq	r0, #2
   8b28e:	2b00      	cmp	r3, #0
   8b290:	db05      	blt.n	8b29e <__hi0bits+0x3a>
   8b292:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b296:	f100 0001 	add.w	r0, r0, #1
   8b29a:	bf08      	it	eq
   8b29c:	2020      	moveq	r0, #32
   8b29e:	4770      	bx	lr
   8b2a0:	2000      	movs	r0, #0
   8b2a2:	e7e5      	b.n	8b270 <__hi0bits+0xc>

0008b2a4 <__lo0bits>:
   8b2a4:	6803      	ldr	r3, [r0, #0]
   8b2a6:	4601      	mov	r1, r0
   8b2a8:	f013 0207 	ands.w	r2, r3, #7
   8b2ac:	d007      	beq.n	8b2be <__lo0bits+0x1a>
   8b2ae:	07da      	lsls	r2, r3, #31
   8b2b0:	d420      	bmi.n	8b2f4 <__lo0bits+0x50>
   8b2b2:	0798      	lsls	r0, r3, #30
   8b2b4:	d522      	bpl.n	8b2fc <__lo0bits+0x58>
   8b2b6:	085b      	lsrs	r3, r3, #1
   8b2b8:	2001      	movs	r0, #1
   8b2ba:	600b      	str	r3, [r1, #0]
   8b2bc:	4770      	bx	lr
   8b2be:	b298      	uxth	r0, r3
   8b2c0:	b1a8      	cbz	r0, 8b2ee <__lo0bits+0x4a>
   8b2c2:	4610      	mov	r0, r2
   8b2c4:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b2c8:	bf04      	itt	eq
   8b2ca:	0a1b      	lsreq	r3, r3, #8
   8b2cc:	3008      	addeq	r0, #8
   8b2ce:	071a      	lsls	r2, r3, #28
   8b2d0:	bf04      	itt	eq
   8b2d2:	091b      	lsreq	r3, r3, #4
   8b2d4:	3004      	addeq	r0, #4
   8b2d6:	079a      	lsls	r2, r3, #30
   8b2d8:	bf04      	itt	eq
   8b2da:	089b      	lsreq	r3, r3, #2
   8b2dc:	3002      	addeq	r0, #2
   8b2de:	07da      	lsls	r2, r3, #31
   8b2e0:	d403      	bmi.n	8b2ea <__lo0bits+0x46>
   8b2e2:	085b      	lsrs	r3, r3, #1
   8b2e4:	f100 0001 	add.w	r0, r0, #1
   8b2e8:	d006      	beq.n	8b2f8 <__lo0bits+0x54>
   8b2ea:	600b      	str	r3, [r1, #0]
   8b2ec:	4770      	bx	lr
   8b2ee:	2010      	movs	r0, #16
   8b2f0:	0c1b      	lsrs	r3, r3, #16
   8b2f2:	e7e7      	b.n	8b2c4 <__lo0bits+0x20>
   8b2f4:	2000      	movs	r0, #0
   8b2f6:	4770      	bx	lr
   8b2f8:	2020      	movs	r0, #32
   8b2fa:	4770      	bx	lr
   8b2fc:	089b      	lsrs	r3, r3, #2
   8b2fe:	2002      	movs	r0, #2
   8b300:	600b      	str	r3, [r1, #0]
   8b302:	4770      	bx	lr

0008b304 <__i2b>:
   8b304:	b510      	push	{r4, lr}
   8b306:	460c      	mov	r4, r1
   8b308:	2101      	movs	r1, #1
   8b30a:	f7ff ff2d 	bl	8b168 <_Balloc>
   8b30e:	4602      	mov	r2, r0
   8b310:	b118      	cbz	r0, 8b31a <__i2b+0x16>
   8b312:	2301      	movs	r3, #1
   8b314:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8b318:	bd10      	pop	{r4, pc}
   8b31a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b31e:	4b02      	ldr	r3, [pc, #8]	; (8b328 <__i2b+0x24>)
   8b320:	4802      	ldr	r0, [pc, #8]	; (8b32c <__i2b+0x28>)
   8b322:	f000 fe79 	bl	8c018 <__assert_func>
   8b326:	bf00      	nop
   8b328:	0008d058 	.word	0x0008d058
   8b32c:	0008d0f8 	.word	0x0008d0f8

0008b330 <__multiply>:
   8b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b334:	690d      	ldr	r5, [r1, #16]
   8b336:	6917      	ldr	r7, [r2, #16]
   8b338:	460e      	mov	r6, r1
   8b33a:	42bd      	cmp	r5, r7
   8b33c:	4614      	mov	r4, r2
   8b33e:	b085      	sub	sp, #20
   8b340:	db05      	blt.n	8b34e <__multiply+0x1e>
   8b342:	463a      	mov	r2, r7
   8b344:	4623      	mov	r3, r4
   8b346:	462f      	mov	r7, r5
   8b348:	460c      	mov	r4, r1
   8b34a:	4615      	mov	r5, r2
   8b34c:	461e      	mov	r6, r3
   8b34e:	68a3      	ldr	r3, [r4, #8]
   8b350:	6861      	ldr	r1, [r4, #4]
   8b352:	eb07 0805 	add.w	r8, r7, r5
   8b356:	4543      	cmp	r3, r8
   8b358:	bfb8      	it	lt
   8b35a:	3101      	addlt	r1, #1
   8b35c:	f7ff ff04 	bl	8b168 <_Balloc>
   8b360:	9001      	str	r0, [sp, #4]
   8b362:	2800      	cmp	r0, #0
   8b364:	f000 8088 	beq.w	8b478 <__multiply+0x148>
   8b368:	9b01      	ldr	r3, [sp, #4]
   8b36a:	f103 0914 	add.w	r9, r3, #20
   8b36e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b372:	45d1      	cmp	r9, sl
   8b374:	d205      	bcs.n	8b382 <__multiply+0x52>
   8b376:	464b      	mov	r3, r9
   8b378:	2200      	movs	r2, #0
   8b37a:	f843 2b04 	str.w	r2, [r3], #4
   8b37e:	459a      	cmp	sl, r3
   8b380:	d8fb      	bhi.n	8b37a <__multiply+0x4a>
   8b382:	f106 0e14 	add.w	lr, r6, #20
   8b386:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8b38a:	f104 0314 	add.w	r3, r4, #20
   8b38e:	45de      	cmp	lr, fp
   8b390:	461a      	mov	r2, r3
   8b392:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8b396:	d23e      	bcs.n	8b416 <__multiply+0xe6>
   8b398:	1b3b      	subs	r3, r7, r4
   8b39a:	3b15      	subs	r3, #21
   8b39c:	f023 0303 	bic.w	r3, r3, #3
   8b3a0:	3304      	adds	r3, #4
   8b3a2:	3415      	adds	r4, #21
   8b3a4:	42a7      	cmp	r7, r4
   8b3a6:	bf38      	it	cc
   8b3a8:	2304      	movcc	r3, #4
   8b3aa:	e9cd a802 	strd	sl, r8, [sp, #8]
   8b3ae:	4698      	mov	r8, r3
   8b3b0:	4692      	mov	sl, r2
   8b3b2:	e003      	b.n	8b3bc <__multiply+0x8c>
   8b3b4:	45f3      	cmp	fp, lr
   8b3b6:	f109 0904 	add.w	r9, r9, #4
   8b3ba:	d92a      	bls.n	8b412 <__multiply+0xe2>
   8b3bc:	f85e 0b04 	ldr.w	r0, [lr], #4
   8b3c0:	b286      	uxth	r6, r0
   8b3c2:	2e00      	cmp	r6, #0
   8b3c4:	d138      	bne.n	8b438 <__multiply+0x108>
   8b3c6:	0c00      	lsrs	r0, r0, #16
   8b3c8:	d0f4      	beq.n	8b3b4 <__multiply+0x84>
   8b3ca:	f8d9 3000 	ldr.w	r3, [r9]
   8b3ce:	4654      	mov	r4, sl
   8b3d0:	461e      	mov	r6, r3
   8b3d2:	464d      	mov	r5, r9
   8b3d4:	f04f 0c00 	mov.w	ip, #0
   8b3d8:	8822      	ldrh	r2, [r4, #0]
   8b3da:	0c36      	lsrs	r6, r6, #16
   8b3dc:	fb00 6602 	mla	r6, r0, r2, r6
   8b3e0:	b29b      	uxth	r3, r3
   8b3e2:	44b4      	add	ip, r6
   8b3e4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8b3e8:	f845 3b04 	str.w	r3, [r5], #4
   8b3ec:	f854 3b04 	ldr.w	r3, [r4], #4
   8b3f0:	682e      	ldr	r6, [r5, #0]
   8b3f2:	0c1b      	lsrs	r3, r3, #16
   8b3f4:	b2b2      	uxth	r2, r6
   8b3f6:	fb00 2303 	mla	r3, r0, r3, r2
   8b3fa:	42a7      	cmp	r7, r4
   8b3fc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8b400:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b404:	d8e8      	bhi.n	8b3d8 <__multiply+0xa8>
   8b406:	45f3      	cmp	fp, lr
   8b408:	f849 3008 	str.w	r3, [r9, r8]
   8b40c:	f109 0904 	add.w	r9, r9, #4
   8b410:	d8d4      	bhi.n	8b3bc <__multiply+0x8c>
   8b412:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8b416:	f1b8 0f00 	cmp.w	r8, #0
   8b41a:	dc03      	bgt.n	8b424 <__multiply+0xf4>
   8b41c:	e006      	b.n	8b42c <__multiply+0xfc>
   8b41e:	f1b8 0801 	subs.w	r8, r8, #1
   8b422:	d003      	beq.n	8b42c <__multiply+0xfc>
   8b424:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b428:	2b00      	cmp	r3, #0
   8b42a:	d0f8      	beq.n	8b41e <__multiply+0xee>
   8b42c:	9801      	ldr	r0, [sp, #4]
   8b42e:	f8c0 8010 	str.w	r8, [r0, #16]
   8b432:	b005      	add	sp, #20
   8b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b438:	4655      	mov	r5, sl
   8b43a:	464c      	mov	r4, r9
   8b43c:	2300      	movs	r3, #0
   8b43e:	f855 1b04 	ldr.w	r1, [r5], #4
   8b442:	6820      	ldr	r0, [r4, #0]
   8b444:	b28a      	uxth	r2, r1
   8b446:	fa1f fc80 	uxth.w	ip, r0
   8b44a:	fb06 c202 	mla	r2, r6, r2, ip
   8b44e:	0c09      	lsrs	r1, r1, #16
   8b450:	0c00      	lsrs	r0, r0, #16
   8b452:	fb06 0101 	mla	r1, r6, r1, r0
   8b456:	4413      	add	r3, r2
   8b458:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8b45c:	b29b      	uxth	r3, r3
   8b45e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b462:	42af      	cmp	r7, r5
   8b464:	f844 3b04 	str.w	r3, [r4], #4
   8b468:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8b46c:	d8e7      	bhi.n	8b43e <__multiply+0x10e>
   8b46e:	f849 3008 	str.w	r3, [r9, r8]
   8b472:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8b476:	e7a6      	b.n	8b3c6 <__multiply+0x96>
   8b478:	4602      	mov	r2, r0
   8b47a:	f240 115d 	movw	r1, #349	; 0x15d
   8b47e:	4b02      	ldr	r3, [pc, #8]	; (8b488 <__multiply+0x158>)
   8b480:	4802      	ldr	r0, [pc, #8]	; (8b48c <__multiply+0x15c>)
   8b482:	f000 fdc9 	bl	8c018 <__assert_func>
   8b486:	bf00      	nop
   8b488:	0008d058 	.word	0x0008d058
   8b48c:	0008d0f8 	.word	0x0008d0f8

0008b490 <__pow5mult>:
   8b490:	f012 0303 	ands.w	r3, r2, #3
   8b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b498:	4614      	mov	r4, r2
   8b49a:	4607      	mov	r7, r0
   8b49c:	d12e      	bne.n	8b4fc <__pow5mult+0x6c>
   8b49e:	460e      	mov	r6, r1
   8b4a0:	10a4      	asrs	r4, r4, #2
   8b4a2:	d01c      	beq.n	8b4de <__pow5mult+0x4e>
   8b4a4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8b4a6:	b395      	cbz	r5, 8b50e <__pow5mult+0x7e>
   8b4a8:	07e3      	lsls	r3, r4, #31
   8b4aa:	f04f 0800 	mov.w	r8, #0
   8b4ae:	d406      	bmi.n	8b4be <__pow5mult+0x2e>
   8b4b0:	1064      	asrs	r4, r4, #1
   8b4b2:	d014      	beq.n	8b4de <__pow5mult+0x4e>
   8b4b4:	6828      	ldr	r0, [r5, #0]
   8b4b6:	b1a8      	cbz	r0, 8b4e4 <__pow5mult+0x54>
   8b4b8:	4605      	mov	r5, r0
   8b4ba:	07e3      	lsls	r3, r4, #31
   8b4bc:	d5f8      	bpl.n	8b4b0 <__pow5mult+0x20>
   8b4be:	462a      	mov	r2, r5
   8b4c0:	4631      	mov	r1, r6
   8b4c2:	4638      	mov	r0, r7
   8b4c4:	f7ff ff34 	bl	8b330 <__multiply>
   8b4c8:	b1b6      	cbz	r6, 8b4f8 <__pow5mult+0x68>
   8b4ca:	6871      	ldr	r1, [r6, #4]
   8b4cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b4ce:	1064      	asrs	r4, r4, #1
   8b4d0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8b4d4:	6032      	str	r2, [r6, #0]
   8b4d6:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8b4da:	4606      	mov	r6, r0
   8b4dc:	d1ea      	bne.n	8b4b4 <__pow5mult+0x24>
   8b4de:	4630      	mov	r0, r6
   8b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b4e4:	462a      	mov	r2, r5
   8b4e6:	4629      	mov	r1, r5
   8b4e8:	4638      	mov	r0, r7
   8b4ea:	f7ff ff21 	bl	8b330 <__multiply>
   8b4ee:	6028      	str	r0, [r5, #0]
   8b4f0:	4605      	mov	r5, r0
   8b4f2:	f8c0 8000 	str.w	r8, [r0]
   8b4f6:	e7e0      	b.n	8b4ba <__pow5mult+0x2a>
   8b4f8:	4606      	mov	r6, r0
   8b4fa:	e7d9      	b.n	8b4b0 <__pow5mult+0x20>
   8b4fc:	4a09      	ldr	r2, [pc, #36]	; (8b524 <__pow5mult+0x94>)
   8b4fe:	3b01      	subs	r3, #1
   8b500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b504:	2300      	movs	r3, #0
   8b506:	f7ff fe5f 	bl	8b1c8 <__multadd>
   8b50a:	4606      	mov	r6, r0
   8b50c:	e7c8      	b.n	8b4a0 <__pow5mult+0x10>
   8b50e:	f240 2171 	movw	r1, #625	; 0x271
   8b512:	4638      	mov	r0, r7
   8b514:	f7ff fef6 	bl	8b304 <__i2b>
   8b518:	2300      	movs	r3, #0
   8b51a:	64b8      	str	r0, [r7, #72]	; 0x48
   8b51c:	4605      	mov	r5, r0
   8b51e:	6003      	str	r3, [r0, #0]
   8b520:	e7c2      	b.n	8b4a8 <__pow5mult+0x18>
   8b522:	bf00      	nop
   8b524:	0008d268 	.word	0x0008d268

0008b528 <__lshift>:
   8b528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b52c:	690f      	ldr	r7, [r1, #16]
   8b52e:	688b      	ldr	r3, [r1, #8]
   8b530:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8b534:	1c7e      	adds	r6, r7, #1
   8b536:	429e      	cmp	r6, r3
   8b538:	460d      	mov	r5, r1
   8b53a:	4691      	mov	r9, r2
   8b53c:	4680      	mov	r8, r0
   8b53e:	6849      	ldr	r1, [r1, #4]
   8b540:	ea4f 1462 	mov.w	r4, r2, asr #5
   8b544:	dd04      	ble.n	8b550 <__lshift+0x28>
   8b546:	005b      	lsls	r3, r3, #1
   8b548:	429e      	cmp	r6, r3
   8b54a:	f101 0101 	add.w	r1, r1, #1
   8b54e:	dcfa      	bgt.n	8b546 <__lshift+0x1e>
   8b550:	4640      	mov	r0, r8
   8b552:	f7ff fe09 	bl	8b168 <_Balloc>
   8b556:	2800      	cmp	r0, #0
   8b558:	d04f      	beq.n	8b5fa <__lshift+0xd2>
   8b55a:	2c00      	cmp	r4, #0
   8b55c:	f100 0114 	add.w	r1, r0, #20
   8b560:	dd0d      	ble.n	8b57e <__lshift+0x56>
   8b562:	460b      	mov	r3, r1
   8b564:	2200      	movs	r2, #0
   8b566:	3405      	adds	r4, #5
   8b568:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8b56c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8b570:	f843 2b04 	str.w	r2, [r3], #4
   8b574:	42a3      	cmp	r3, r4
   8b576:	d1fb      	bne.n	8b570 <__lshift+0x48>
   8b578:	f1ac 0314 	sub.w	r3, ip, #20
   8b57c:	4419      	add	r1, r3
   8b57e:	692c      	ldr	r4, [r5, #16]
   8b580:	f105 0314 	add.w	r3, r5, #20
   8b584:	f019 091f 	ands.w	r9, r9, #31
   8b588:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8b58c:	d02d      	beq.n	8b5ea <__lshift+0xc2>
   8b58e:	468e      	mov	lr, r1
   8b590:	f04f 0a00 	mov.w	sl, #0
   8b594:	f1c9 0220 	rsb	r2, r9, #32
   8b598:	681c      	ldr	r4, [r3, #0]
   8b59a:	fa04 f409 	lsl.w	r4, r4, r9
   8b59e:	ea44 040a 	orr.w	r4, r4, sl
   8b5a2:	f84e 4b04 	str.w	r4, [lr], #4
   8b5a6:	f853 4b04 	ldr.w	r4, [r3], #4
   8b5aa:	459c      	cmp	ip, r3
   8b5ac:	fa24 fa02 	lsr.w	sl, r4, r2
   8b5b0:	d8f2      	bhi.n	8b598 <__lshift+0x70>
   8b5b2:	ebac 0305 	sub.w	r3, ip, r5
   8b5b6:	3b15      	subs	r3, #21
   8b5b8:	f023 0303 	bic.w	r3, r3, #3
   8b5bc:	3304      	adds	r3, #4
   8b5be:	f105 0215 	add.w	r2, r5, #21
   8b5c2:	4594      	cmp	ip, r2
   8b5c4:	bf38      	it	cc
   8b5c6:	2304      	movcc	r3, #4
   8b5c8:	f1ba 0f00 	cmp.w	sl, #0
   8b5cc:	bf18      	it	ne
   8b5ce:	4637      	movne	r7, r6
   8b5d0:	f841 a003 	str.w	sl, [r1, r3]
   8b5d4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b5d8:	686a      	ldr	r2, [r5, #4]
   8b5da:	6107      	str	r7, [r0, #16]
   8b5dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b5e0:	6029      	str	r1, [r5, #0]
   8b5e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8b5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b5ea:	3904      	subs	r1, #4
   8b5ec:	f853 2b04 	ldr.w	r2, [r3], #4
   8b5f0:	459c      	cmp	ip, r3
   8b5f2:	f841 2f04 	str.w	r2, [r1, #4]!
   8b5f6:	d8f9      	bhi.n	8b5ec <__lshift+0xc4>
   8b5f8:	e7ec      	b.n	8b5d4 <__lshift+0xac>
   8b5fa:	4602      	mov	r2, r0
   8b5fc:	f240 11d9 	movw	r1, #473	; 0x1d9
   8b600:	4b01      	ldr	r3, [pc, #4]	; (8b608 <__lshift+0xe0>)
   8b602:	4802      	ldr	r0, [pc, #8]	; (8b60c <__lshift+0xe4>)
   8b604:	f000 fd08 	bl	8c018 <__assert_func>
   8b608:	0008d058 	.word	0x0008d058
   8b60c:	0008d0f8 	.word	0x0008d0f8

0008b610 <__mcmp>:
   8b610:	b430      	push	{r4, r5}
   8b612:	690b      	ldr	r3, [r1, #16]
   8b614:	4605      	mov	r5, r0
   8b616:	6900      	ldr	r0, [r0, #16]
   8b618:	1ac0      	subs	r0, r0, r3
   8b61a:	d111      	bne.n	8b640 <__mcmp+0x30>
   8b61c:	3514      	adds	r5, #20
   8b61e:	3114      	adds	r1, #20
   8b620:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8b624:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8b628:	e001      	b.n	8b62e <__mcmp+0x1e>
   8b62a:	429d      	cmp	r5, r3
   8b62c:	d208      	bcs.n	8b640 <__mcmp+0x30>
   8b62e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8b632:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b636:	428c      	cmp	r4, r1
   8b638:	d0f7      	beq.n	8b62a <__mcmp+0x1a>
   8b63a:	d203      	bcs.n	8b644 <__mcmp+0x34>
   8b63c:	f04f 30ff 	mov.w	r0, #4294967295
   8b640:	bc30      	pop	{r4, r5}
   8b642:	4770      	bx	lr
   8b644:	2001      	movs	r0, #1
   8b646:	bc30      	pop	{r4, r5}
   8b648:	4770      	bx	lr
   8b64a:	bf00      	nop

0008b64c <__mdiff>:
   8b64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b650:	690b      	ldr	r3, [r1, #16]
   8b652:	460c      	mov	r4, r1
   8b654:	6911      	ldr	r1, [r2, #16]
   8b656:	4690      	mov	r8, r2
   8b658:	eba3 0b01 	sub.w	fp, r3, r1
   8b65c:	f1bb 0f00 	cmp.w	fp, #0
   8b660:	d17c      	bne.n	8b75c <__mdiff+0x110>
   8b662:	f104 0614 	add.w	r6, r4, #20
   8b666:	3214      	adds	r2, #20
   8b668:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8b66c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8b670:	e001      	b.n	8b676 <__mdiff+0x2a>
   8b672:	429e      	cmp	r6, r3
   8b674:	d276      	bcs.n	8b764 <__mdiff+0x118>
   8b676:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b67a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b67e:	428d      	cmp	r5, r1
   8b680:	d0f7      	beq.n	8b672 <__mdiff+0x26>
   8b682:	d365      	bcc.n	8b750 <__mdiff+0x104>
   8b684:	6861      	ldr	r1, [r4, #4]
   8b686:	f7ff fd6f 	bl	8b168 <_Balloc>
   8b68a:	2800      	cmp	r0, #0
   8b68c:	d074      	beq.n	8b778 <__mdiff+0x12c>
   8b68e:	f100 0614 	add.w	r6, r0, #20
   8b692:	46b4      	mov	ip, r6
   8b694:	2300      	movs	r3, #0
   8b696:	6927      	ldr	r7, [r4, #16]
   8b698:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8b69c:	f104 0a14 	add.w	sl, r4, #20
   8b6a0:	f108 0514 	add.w	r5, r8, #20
   8b6a4:	f8c0 b00c 	str.w	fp, [r0, #12]
   8b6a8:	3410      	adds	r4, #16
   8b6aa:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8b6ae:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8b6b2:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8b6b6:	f855 bb04 	ldr.w	fp, [r5], #4
   8b6ba:	b291      	uxth	r1, r2
   8b6bc:	440b      	add	r3, r1
   8b6be:	fa1f f18b 	uxth.w	r1, fp
   8b6c2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8b6c6:	1a59      	subs	r1, r3, r1
   8b6c8:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8b6cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8b6d0:	b289      	uxth	r1, r1
   8b6d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b6d6:	45a9      	cmp	r9, r5
   8b6d8:	f84c 1b04 	str.w	r1, [ip], #4
   8b6dc:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b6e0:	d8e7      	bhi.n	8b6b2 <__mdiff+0x66>
   8b6e2:	eba9 0208 	sub.w	r2, r9, r8
   8b6e6:	3a15      	subs	r2, #21
   8b6e8:	f108 0815 	add.w	r8, r8, #21
   8b6ec:	45c1      	cmp	r9, r8
   8b6ee:	f022 0403 	bic.w	r4, r2, #3
   8b6f2:	f104 0404 	add.w	r4, r4, #4
   8b6f6:	bf38      	it	cc
   8b6f8:	2404      	movcc	r4, #4
   8b6fa:	f022 0203 	bic.w	r2, r2, #3
   8b6fe:	bf38      	it	cc
   8b700:	2200      	movcc	r2, #0
   8b702:	44a2      	add	sl, r4
   8b704:	45d6      	cmp	lr, sl
   8b706:	4434      	add	r4, r6
   8b708:	4416      	add	r6, r2
   8b70a:	d918      	bls.n	8b73e <__mdiff+0xf2>
   8b70c:	4625      	mov	r5, r4
   8b70e:	4652      	mov	r2, sl
   8b710:	f852 6b04 	ldr.w	r6, [r2], #4
   8b714:	b2b1      	uxth	r1, r6
   8b716:	4419      	add	r1, r3
   8b718:	140b      	asrs	r3, r1, #16
   8b71a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8b71e:	b289      	uxth	r1, r1
   8b720:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b724:	4596      	cmp	lr, r2
   8b726:	f845 1b04 	str.w	r1, [r5], #4
   8b72a:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b72e:	d8ef      	bhi.n	8b710 <__mdiff+0xc4>
   8b730:	f10e 36ff 	add.w	r6, lr, #4294967295
   8b734:	eba6 060a 	sub.w	r6, r6, sl
   8b738:	f026 0603 	bic.w	r6, r6, #3
   8b73c:	4426      	add	r6, r4
   8b73e:	b921      	cbnz	r1, 8b74a <__mdiff+0xfe>
   8b740:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8b744:	3f01      	subs	r7, #1
   8b746:	2b00      	cmp	r3, #0
   8b748:	d0fa      	beq.n	8b740 <__mdiff+0xf4>
   8b74a:	6107      	str	r7, [r0, #16]
   8b74c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b750:	4623      	mov	r3, r4
   8b752:	f04f 0b01 	mov.w	fp, #1
   8b756:	4644      	mov	r4, r8
   8b758:	4698      	mov	r8, r3
   8b75a:	e793      	b.n	8b684 <__mdiff+0x38>
   8b75c:	dbf8      	blt.n	8b750 <__mdiff+0x104>
   8b75e:	f04f 0b00 	mov.w	fp, #0
   8b762:	e78f      	b.n	8b684 <__mdiff+0x38>
   8b764:	2100      	movs	r1, #0
   8b766:	f7ff fcff 	bl	8b168 <_Balloc>
   8b76a:	b160      	cbz	r0, 8b786 <__mdiff+0x13a>
   8b76c:	2201      	movs	r2, #1
   8b76e:	2300      	movs	r3, #0
   8b770:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8b774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b778:	4602      	mov	r2, r0
   8b77a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8b77e:	4b05      	ldr	r3, [pc, #20]	; (8b794 <__mdiff+0x148>)
   8b780:	4805      	ldr	r0, [pc, #20]	; (8b798 <__mdiff+0x14c>)
   8b782:	f000 fc49 	bl	8c018 <__assert_func>
   8b786:	4602      	mov	r2, r0
   8b788:	f240 2132 	movw	r1, #562	; 0x232
   8b78c:	4b01      	ldr	r3, [pc, #4]	; (8b794 <__mdiff+0x148>)
   8b78e:	4802      	ldr	r0, [pc, #8]	; (8b798 <__mdiff+0x14c>)
   8b790:	f000 fc42 	bl	8c018 <__assert_func>
   8b794:	0008d058 	.word	0x0008d058
   8b798:	0008d0f8 	.word	0x0008d0f8

0008b79c <__d2b>:
   8b79c:	b570      	push	{r4, r5, r6, lr}
   8b79e:	2101      	movs	r1, #1
   8b7a0:	b082      	sub	sp, #8
   8b7a2:	4616      	mov	r6, r2
   8b7a4:	461d      	mov	r5, r3
   8b7a6:	f7ff fcdf 	bl	8b168 <_Balloc>
   8b7aa:	4604      	mov	r4, r0
   8b7ac:	2800      	cmp	r0, #0
   8b7ae:	d04c      	beq.n	8b84a <__d2b+0xae>
   8b7b0:	462b      	mov	r3, r5
   8b7b2:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8b7b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8b7ba:	b10d      	cbz	r5, 8b7c0 <__d2b+0x24>
   8b7bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b7c0:	2e00      	cmp	r6, #0
   8b7c2:	9301      	str	r3, [sp, #4]
   8b7c4:	d022      	beq.n	8b80c <__d2b+0x70>
   8b7c6:	4668      	mov	r0, sp
   8b7c8:	9600      	str	r6, [sp, #0]
   8b7ca:	f7ff fd6b 	bl	8b2a4 <__lo0bits>
   8b7ce:	2800      	cmp	r0, #0
   8b7d0:	d037      	beq.n	8b842 <__d2b+0xa6>
   8b7d2:	9b01      	ldr	r3, [sp, #4]
   8b7d4:	9900      	ldr	r1, [sp, #0]
   8b7d6:	f1c0 0220 	rsb	r2, r0, #32
   8b7da:	fa03 f202 	lsl.w	r2, r3, r2
   8b7de:	430a      	orrs	r2, r1
   8b7e0:	40c3      	lsrs	r3, r0
   8b7e2:	9301      	str	r3, [sp, #4]
   8b7e4:	6162      	str	r2, [r4, #20]
   8b7e6:	2b00      	cmp	r3, #0
   8b7e8:	bf14      	ite	ne
   8b7ea:	2102      	movne	r1, #2
   8b7ec:	2101      	moveq	r1, #1
   8b7ee:	61a3      	str	r3, [r4, #24]
   8b7f0:	6121      	str	r1, [r4, #16]
   8b7f2:	b1b5      	cbz	r5, 8b822 <__d2b+0x86>
   8b7f4:	9a06      	ldr	r2, [sp, #24]
   8b7f6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8b7fa:	4403      	add	r3, r0
   8b7fc:	6013      	str	r3, [r2, #0]
   8b7fe:	9b07      	ldr	r3, [sp, #28]
   8b800:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8b804:	6018      	str	r0, [r3, #0]
   8b806:	4620      	mov	r0, r4
   8b808:	b002      	add	sp, #8
   8b80a:	bd70      	pop	{r4, r5, r6, pc}
   8b80c:	a801      	add	r0, sp, #4
   8b80e:	f7ff fd49 	bl	8b2a4 <__lo0bits>
   8b812:	2301      	movs	r3, #1
   8b814:	9a01      	ldr	r2, [sp, #4]
   8b816:	4619      	mov	r1, r3
   8b818:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8b81c:	3020      	adds	r0, #32
   8b81e:	2d00      	cmp	r5, #0
   8b820:	d1e8      	bne.n	8b7f4 <__d2b+0x58>
   8b822:	9a06      	ldr	r2, [sp, #24]
   8b824:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8b828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8b82c:	6010      	str	r0, [r2, #0]
   8b82e:	6918      	ldr	r0, [r3, #16]
   8b830:	f7ff fd18 	bl	8b264 <__hi0bits>
   8b834:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8b838:	4620      	mov	r0, r4
   8b83a:	9b07      	ldr	r3, [sp, #28]
   8b83c:	6019      	str	r1, [r3, #0]
   8b83e:	b002      	add	sp, #8
   8b840:	bd70      	pop	{r4, r5, r6, pc}
   8b842:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b846:	6162      	str	r2, [r4, #20]
   8b848:	e7cd      	b.n	8b7e6 <__d2b+0x4a>
   8b84a:	4602      	mov	r2, r0
   8b84c:	f240 310a 	movw	r1, #778	; 0x30a
   8b850:	4b01      	ldr	r3, [pc, #4]	; (8b858 <__d2b+0xbc>)
   8b852:	4802      	ldr	r0, [pc, #8]	; (8b85c <__d2b+0xc0>)
   8b854:	f000 fbe0 	bl	8c018 <__assert_func>
   8b858:	0008d058 	.word	0x0008d058
   8b85c:	0008d0f8 	.word	0x0008d0f8

0008b860 <_realloc_r>:
   8b860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b864:	4616      	mov	r6, r2
   8b866:	2900      	cmp	r1, #0
   8b868:	f000 80bd 	beq.w	8b9e6 <_realloc_r+0x186>
   8b86c:	f106 050b 	add.w	r5, r6, #11
   8b870:	460c      	mov	r4, r1
   8b872:	4680      	mov	r8, r0
   8b874:	f7ff fc6c 	bl	8b150 <__malloc_lock>
   8b878:	2d16      	cmp	r5, #22
   8b87a:	d85f      	bhi.n	8b93c <_realloc_r+0xdc>
   8b87c:	2510      	movs	r5, #16
   8b87e:	462a      	mov	r2, r5
   8b880:	42ae      	cmp	r6, r5
   8b882:	d860      	bhi.n	8b946 <_realloc_r+0xe6>
   8b884:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8b888:	f1a4 0908 	sub.w	r9, r4, #8
   8b88c:	f021 0703 	bic.w	r7, r1, #3
   8b890:	4297      	cmp	r7, r2
   8b892:	f280 8086 	bge.w	8b9a2 <_realloc_r+0x142>
   8b896:	4bc9      	ldr	r3, [pc, #804]	; (8bbbc <_realloc_r+0x35c>)
   8b898:	eb09 0007 	add.w	r0, r9, r7
   8b89c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8b8a0:	4584      	cmp	ip, r0
   8b8a2:	f000 80b9 	beq.w	8ba18 <_realloc_r+0x1b8>
   8b8a6:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8b8aa:	f02c 0301 	bic.w	r3, ip, #1
   8b8ae:	4403      	add	r3, r0
   8b8b0:	685b      	ldr	r3, [r3, #4]
   8b8b2:	07db      	lsls	r3, r3, #31
   8b8b4:	f100 808c 	bmi.w	8b9d0 <_realloc_r+0x170>
   8b8b8:	f02c 0c03 	bic.w	ip, ip, #3
   8b8bc:	eb07 030c 	add.w	r3, r7, ip
   8b8c0:	4293      	cmp	r3, r2
   8b8c2:	f280 8115 	bge.w	8baf0 <_realloc_r+0x290>
   8b8c6:	07cb      	lsls	r3, r1, #31
   8b8c8:	d40f      	bmi.n	8b8ea <_realloc_r+0x8a>
   8b8ca:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b8ce:	eba9 0a03 	sub.w	sl, r9, r3
   8b8d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b8d6:	f023 0103 	bic.w	r1, r3, #3
   8b8da:	448c      	add	ip, r1
   8b8dc:	44bc      	add	ip, r7
   8b8de:	4594      	cmp	ip, r2
   8b8e0:	da38      	bge.n	8b954 <_realloc_r+0xf4>
   8b8e2:	187b      	adds	r3, r7, r1
   8b8e4:	4293      	cmp	r3, r2
   8b8e6:	f280 810f 	bge.w	8bb08 <_realloc_r+0x2a8>
   8b8ea:	4631      	mov	r1, r6
   8b8ec:	4640      	mov	r0, r8
   8b8ee:	f7ff f8c1 	bl	8aa74 <_malloc_r>
   8b8f2:	4606      	mov	r6, r0
   8b8f4:	b1e0      	cbz	r0, 8b930 <_realloc_r+0xd0>
   8b8f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b8fa:	f1a0 0208 	sub.w	r2, r0, #8
   8b8fe:	f023 0301 	bic.w	r3, r3, #1
   8b902:	444b      	add	r3, r9
   8b904:	4293      	cmp	r3, r2
   8b906:	f000 80f9 	beq.w	8bafc <_realloc_r+0x29c>
   8b90a:	1f3a      	subs	r2, r7, #4
   8b90c:	2a24      	cmp	r2, #36	; 0x24
   8b90e:	f200 811c 	bhi.w	8bb4a <_realloc_r+0x2ea>
   8b912:	2a13      	cmp	r2, #19
   8b914:	f200 80cd 	bhi.w	8bab2 <_realloc_r+0x252>
   8b918:	4603      	mov	r3, r0
   8b91a:	4622      	mov	r2, r4
   8b91c:	6811      	ldr	r1, [r2, #0]
   8b91e:	6019      	str	r1, [r3, #0]
   8b920:	6851      	ldr	r1, [r2, #4]
   8b922:	6059      	str	r1, [r3, #4]
   8b924:	6892      	ldr	r2, [r2, #8]
   8b926:	609a      	str	r2, [r3, #8]
   8b928:	4621      	mov	r1, r4
   8b92a:	4640      	mov	r0, r8
   8b92c:	f7fe fd78 	bl	8a420 <_free_r>
   8b930:	4640      	mov	r0, r8
   8b932:	f7ff fc13 	bl	8b15c <__malloc_unlock>
   8b936:	4630      	mov	r0, r6
   8b938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b93c:	f025 0507 	bic.w	r5, r5, #7
   8b940:	2d00      	cmp	r5, #0
   8b942:	462a      	mov	r2, r5
   8b944:	da9c      	bge.n	8b880 <_realloc_r+0x20>
   8b946:	230c      	movs	r3, #12
   8b948:	2600      	movs	r6, #0
   8b94a:	f8c8 3000 	str.w	r3, [r8]
   8b94e:	4630      	mov	r0, r6
   8b950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b954:	4656      	mov	r6, sl
   8b956:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8b95a:	60cb      	str	r3, [r1, #12]
   8b95c:	6099      	str	r1, [r3, #8]
   8b95e:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8b962:	f8da 300c 	ldr.w	r3, [sl, #12]
   8b966:	1f3a      	subs	r2, r7, #4
   8b968:	2a24      	cmp	r2, #36	; 0x24
   8b96a:	60cb      	str	r3, [r1, #12]
   8b96c:	6099      	str	r1, [r3, #8]
   8b96e:	f200 8107 	bhi.w	8bb80 <_realloc_r+0x320>
   8b972:	2a13      	cmp	r2, #19
   8b974:	f240 8102 	bls.w	8bb7c <_realloc_r+0x31c>
   8b978:	6823      	ldr	r3, [r4, #0]
   8b97a:	2a1b      	cmp	r2, #27
   8b97c:	f8ca 3008 	str.w	r3, [sl, #8]
   8b980:	6863      	ldr	r3, [r4, #4]
   8b982:	f8ca 300c 	str.w	r3, [sl, #12]
   8b986:	f200 811b 	bhi.w	8bbc0 <_realloc_r+0x360>
   8b98a:	3408      	adds	r4, #8
   8b98c:	f10a 0310 	add.w	r3, sl, #16
   8b990:	6822      	ldr	r2, [r4, #0]
   8b992:	4667      	mov	r7, ip
   8b994:	601a      	str	r2, [r3, #0]
   8b996:	6862      	ldr	r2, [r4, #4]
   8b998:	46d1      	mov	r9, sl
   8b99a:	605a      	str	r2, [r3, #4]
   8b99c:	68a2      	ldr	r2, [r4, #8]
   8b99e:	4634      	mov	r4, r6
   8b9a0:	609a      	str	r2, [r3, #8]
   8b9a2:	1b7b      	subs	r3, r7, r5
   8b9a4:	2b0f      	cmp	r3, #15
   8b9a6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8b9aa:	d821      	bhi.n	8b9f0 <_realloc_r+0x190>
   8b9ac:	f002 0201 	and.w	r2, r2, #1
   8b9b0:	433a      	orrs	r2, r7
   8b9b2:	eb09 0107 	add.w	r1, r9, r7
   8b9b6:	f8c9 2004 	str.w	r2, [r9, #4]
   8b9ba:	684b      	ldr	r3, [r1, #4]
   8b9bc:	f043 0301 	orr.w	r3, r3, #1
   8b9c0:	604b      	str	r3, [r1, #4]
   8b9c2:	4626      	mov	r6, r4
   8b9c4:	4640      	mov	r0, r8
   8b9c6:	f7ff fbc9 	bl	8b15c <__malloc_unlock>
   8b9ca:	4630      	mov	r0, r6
   8b9cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b9d0:	07c9      	lsls	r1, r1, #31
   8b9d2:	d48a      	bmi.n	8b8ea <_realloc_r+0x8a>
   8b9d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b9d8:	eba9 0a03 	sub.w	sl, r9, r3
   8b9dc:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b9e0:	f021 0103 	bic.w	r1, r1, #3
   8b9e4:	e77d      	b.n	8b8e2 <_realloc_r+0x82>
   8b9e6:	4611      	mov	r1, r2
   8b9e8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b9ec:	f7ff b842 	b.w	8aa74 <_malloc_r>
   8b9f0:	f002 0201 	and.w	r2, r2, #1
   8b9f4:	eb09 0105 	add.w	r1, r9, r5
   8b9f8:	f043 0301 	orr.w	r3, r3, #1
   8b9fc:	432a      	orrs	r2, r5
   8b9fe:	f8c9 2004 	str.w	r2, [r9, #4]
   8ba02:	444f      	add	r7, r9
   8ba04:	604b      	str	r3, [r1, #4]
   8ba06:	687b      	ldr	r3, [r7, #4]
   8ba08:	4640      	mov	r0, r8
   8ba0a:	f043 0301 	orr.w	r3, r3, #1
   8ba0e:	3108      	adds	r1, #8
   8ba10:	607b      	str	r3, [r7, #4]
   8ba12:	f7fe fd05 	bl	8a420 <_free_r>
   8ba16:	e7d4      	b.n	8b9c2 <_realloc_r+0x162>
   8ba18:	f8dc b004 	ldr.w	fp, [ip, #4]
   8ba1c:	f105 0010 	add.w	r0, r5, #16
   8ba20:	f02b 0b03 	bic.w	fp, fp, #3
   8ba24:	eb07 0c0b 	add.w	ip, r7, fp
   8ba28:	4584      	cmp	ip, r0
   8ba2a:	da4d      	bge.n	8bac8 <_realloc_r+0x268>
   8ba2c:	07c9      	lsls	r1, r1, #31
   8ba2e:	f53f af5c 	bmi.w	8b8ea <_realloc_r+0x8a>
   8ba32:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8ba36:	eba9 0a01 	sub.w	sl, r9, r1
   8ba3a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8ba3e:	f021 0103 	bic.w	r1, r1, #3
   8ba42:	448b      	add	fp, r1
   8ba44:	44bb      	add	fp, r7
   8ba46:	4558      	cmp	r0, fp
   8ba48:	f73f af4b 	bgt.w	8b8e2 <_realloc_r+0x82>
   8ba4c:	4656      	mov	r6, sl
   8ba4e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8ba52:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8ba56:	1f3a      	subs	r2, r7, #4
   8ba58:	2a24      	cmp	r2, #36	; 0x24
   8ba5a:	60c1      	str	r1, [r0, #12]
   8ba5c:	6088      	str	r0, [r1, #8]
   8ba5e:	f200 80bd 	bhi.w	8bbdc <_realloc_r+0x37c>
   8ba62:	2a13      	cmp	r2, #19
   8ba64:	f240 80b8 	bls.w	8bbd8 <_realloc_r+0x378>
   8ba68:	6821      	ldr	r1, [r4, #0]
   8ba6a:	2a1b      	cmp	r2, #27
   8ba6c:	f8ca 1008 	str.w	r1, [sl, #8]
   8ba70:	6861      	ldr	r1, [r4, #4]
   8ba72:	f8ca 100c 	str.w	r1, [sl, #12]
   8ba76:	f200 80c1 	bhi.w	8bbfc <_realloc_r+0x39c>
   8ba7a:	3408      	adds	r4, #8
   8ba7c:	f10a 0210 	add.w	r2, sl, #16
   8ba80:	6821      	ldr	r1, [r4, #0]
   8ba82:	6011      	str	r1, [r2, #0]
   8ba84:	6861      	ldr	r1, [r4, #4]
   8ba86:	6051      	str	r1, [r2, #4]
   8ba88:	68a1      	ldr	r1, [r4, #8]
   8ba8a:	6091      	str	r1, [r2, #8]
   8ba8c:	ebab 0205 	sub.w	r2, fp, r5
   8ba90:	eb0a 0105 	add.w	r1, sl, r5
   8ba94:	f042 0201 	orr.w	r2, r2, #1
   8ba98:	6099      	str	r1, [r3, #8]
   8ba9a:	604a      	str	r2, [r1, #4]
   8ba9c:	f8da 3004 	ldr.w	r3, [sl, #4]
   8baa0:	4640      	mov	r0, r8
   8baa2:	f003 0301 	and.w	r3, r3, #1
   8baa6:	431d      	orrs	r5, r3
   8baa8:	f8ca 5004 	str.w	r5, [sl, #4]
   8baac:	f7ff fb56 	bl	8b15c <__malloc_unlock>
   8bab0:	e74d      	b.n	8b94e <_realloc_r+0xee>
   8bab2:	6823      	ldr	r3, [r4, #0]
   8bab4:	2a1b      	cmp	r2, #27
   8bab6:	6003      	str	r3, [r0, #0]
   8bab8:	6863      	ldr	r3, [r4, #4]
   8baba:	6043      	str	r3, [r0, #4]
   8babc:	d849      	bhi.n	8bb52 <_realloc_r+0x2f2>
   8babe:	f104 0208 	add.w	r2, r4, #8
   8bac2:	f100 0308 	add.w	r3, r0, #8
   8bac6:	e729      	b.n	8b91c <_realloc_r+0xbc>
   8bac8:	ebac 0205 	sub.w	r2, ip, r5
   8bacc:	eb09 0105 	add.w	r1, r9, r5
   8bad0:	f042 0201 	orr.w	r2, r2, #1
   8bad4:	6099      	str	r1, [r3, #8]
   8bad6:	604a      	str	r2, [r1, #4]
   8bad8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8badc:	4640      	mov	r0, r8
   8bade:	f003 0301 	and.w	r3, r3, #1
   8bae2:	431d      	orrs	r5, r3
   8bae4:	f844 5c04 	str.w	r5, [r4, #-4]
   8bae8:	f7ff fb38 	bl	8b15c <__malloc_unlock>
   8baec:	4626      	mov	r6, r4
   8baee:	e72e      	b.n	8b94e <_realloc_r+0xee>
   8baf0:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8baf4:	461f      	mov	r7, r3
   8baf6:	60ca      	str	r2, [r1, #12]
   8baf8:	6091      	str	r1, [r2, #8]
   8bafa:	e752      	b.n	8b9a2 <_realloc_r+0x142>
   8bafc:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8bb00:	f023 0303 	bic.w	r3, r3, #3
   8bb04:	441f      	add	r7, r3
   8bb06:	e74c      	b.n	8b9a2 <_realloc_r+0x142>
   8bb08:	4656      	mov	r6, sl
   8bb0a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bb0e:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8bb12:	1f3a      	subs	r2, r7, #4
   8bb14:	2a24      	cmp	r2, #36	; 0x24
   8bb16:	60c1      	str	r1, [r0, #12]
   8bb18:	6088      	str	r0, [r1, #8]
   8bb1a:	d827      	bhi.n	8bb6c <_realloc_r+0x30c>
   8bb1c:	2a13      	cmp	r2, #19
   8bb1e:	d923      	bls.n	8bb68 <_realloc_r+0x308>
   8bb20:	6821      	ldr	r1, [r4, #0]
   8bb22:	2a1b      	cmp	r2, #27
   8bb24:	f8ca 1008 	str.w	r1, [sl, #8]
   8bb28:	6861      	ldr	r1, [r4, #4]
   8bb2a:	f8ca 100c 	str.w	r1, [sl, #12]
   8bb2e:	d82f      	bhi.n	8bb90 <_realloc_r+0x330>
   8bb30:	3408      	adds	r4, #8
   8bb32:	f10a 0210 	add.w	r2, sl, #16
   8bb36:	6821      	ldr	r1, [r4, #0]
   8bb38:	461f      	mov	r7, r3
   8bb3a:	6011      	str	r1, [r2, #0]
   8bb3c:	6863      	ldr	r3, [r4, #4]
   8bb3e:	46d1      	mov	r9, sl
   8bb40:	6053      	str	r3, [r2, #4]
   8bb42:	68a3      	ldr	r3, [r4, #8]
   8bb44:	4634      	mov	r4, r6
   8bb46:	6093      	str	r3, [r2, #8]
   8bb48:	e72b      	b.n	8b9a2 <_realloc_r+0x142>
   8bb4a:	4621      	mov	r1, r4
   8bb4c:	f7ff fa96 	bl	8b07c <memmove>
   8bb50:	e6ea      	b.n	8b928 <_realloc_r+0xc8>
   8bb52:	68a3      	ldr	r3, [r4, #8]
   8bb54:	2a24      	cmp	r2, #36	; 0x24
   8bb56:	6083      	str	r3, [r0, #8]
   8bb58:	68e3      	ldr	r3, [r4, #12]
   8bb5a:	60c3      	str	r3, [r0, #12]
   8bb5c:	d024      	beq.n	8bba8 <_realloc_r+0x348>
   8bb5e:	f104 0210 	add.w	r2, r4, #16
   8bb62:	f100 0310 	add.w	r3, r0, #16
   8bb66:	e6d9      	b.n	8b91c <_realloc_r+0xbc>
   8bb68:	4632      	mov	r2, r6
   8bb6a:	e7e4      	b.n	8bb36 <_realloc_r+0x2d6>
   8bb6c:	4621      	mov	r1, r4
   8bb6e:	4630      	mov	r0, r6
   8bb70:	461f      	mov	r7, r3
   8bb72:	46d1      	mov	r9, sl
   8bb74:	f7ff fa82 	bl	8b07c <memmove>
   8bb78:	4634      	mov	r4, r6
   8bb7a:	e712      	b.n	8b9a2 <_realloc_r+0x142>
   8bb7c:	4633      	mov	r3, r6
   8bb7e:	e707      	b.n	8b990 <_realloc_r+0x130>
   8bb80:	4621      	mov	r1, r4
   8bb82:	4630      	mov	r0, r6
   8bb84:	4667      	mov	r7, ip
   8bb86:	46d1      	mov	r9, sl
   8bb88:	f7ff fa78 	bl	8b07c <memmove>
   8bb8c:	4634      	mov	r4, r6
   8bb8e:	e708      	b.n	8b9a2 <_realloc_r+0x142>
   8bb90:	68a1      	ldr	r1, [r4, #8]
   8bb92:	2a24      	cmp	r2, #36	; 0x24
   8bb94:	f8ca 1010 	str.w	r1, [sl, #16]
   8bb98:	68e1      	ldr	r1, [r4, #12]
   8bb9a:	f8ca 1014 	str.w	r1, [sl, #20]
   8bb9e:	d023      	beq.n	8bbe8 <_realloc_r+0x388>
   8bba0:	3410      	adds	r4, #16
   8bba2:	f10a 0218 	add.w	r2, sl, #24
   8bba6:	e7c6      	b.n	8bb36 <_realloc_r+0x2d6>
   8bba8:	6923      	ldr	r3, [r4, #16]
   8bbaa:	f104 0218 	add.w	r2, r4, #24
   8bbae:	6103      	str	r3, [r0, #16]
   8bbb0:	6961      	ldr	r1, [r4, #20]
   8bbb2:	f100 0318 	add.w	r3, r0, #24
   8bbb6:	6141      	str	r1, [r0, #20]
   8bbb8:	e6b0      	b.n	8b91c <_realloc_r+0xbc>
   8bbba:	bf00      	nop
   8bbbc:	20000a10 	.word	0x20000a10
   8bbc0:	68a3      	ldr	r3, [r4, #8]
   8bbc2:	2a24      	cmp	r2, #36	; 0x24
   8bbc4:	f8ca 3010 	str.w	r3, [sl, #16]
   8bbc8:	68e3      	ldr	r3, [r4, #12]
   8bbca:	f8ca 3014 	str.w	r3, [sl, #20]
   8bbce:	d021      	beq.n	8bc14 <_realloc_r+0x3b4>
   8bbd0:	3410      	adds	r4, #16
   8bbd2:	f10a 0318 	add.w	r3, sl, #24
   8bbd6:	e6db      	b.n	8b990 <_realloc_r+0x130>
   8bbd8:	4632      	mov	r2, r6
   8bbda:	e751      	b.n	8ba80 <_realloc_r+0x220>
   8bbdc:	4621      	mov	r1, r4
   8bbde:	4630      	mov	r0, r6
   8bbe0:	f7ff fa4c 	bl	8b07c <memmove>
   8bbe4:	4b15      	ldr	r3, [pc, #84]	; (8bc3c <_realloc_r+0x3dc>)
   8bbe6:	e751      	b.n	8ba8c <_realloc_r+0x22c>
   8bbe8:	6921      	ldr	r1, [r4, #16]
   8bbea:	f10a 0220 	add.w	r2, sl, #32
   8bbee:	f8ca 1018 	str.w	r1, [sl, #24]
   8bbf2:	6961      	ldr	r1, [r4, #20]
   8bbf4:	3418      	adds	r4, #24
   8bbf6:	f8ca 101c 	str.w	r1, [sl, #28]
   8bbfa:	e79c      	b.n	8bb36 <_realloc_r+0x2d6>
   8bbfc:	68a1      	ldr	r1, [r4, #8]
   8bbfe:	2a24      	cmp	r2, #36	; 0x24
   8bc00:	f8ca 1010 	str.w	r1, [sl, #16]
   8bc04:	68e1      	ldr	r1, [r4, #12]
   8bc06:	f8ca 1014 	str.w	r1, [sl, #20]
   8bc0a:	d00d      	beq.n	8bc28 <_realloc_r+0x3c8>
   8bc0c:	3410      	adds	r4, #16
   8bc0e:	f10a 0218 	add.w	r2, sl, #24
   8bc12:	e735      	b.n	8ba80 <_realloc_r+0x220>
   8bc14:	6922      	ldr	r2, [r4, #16]
   8bc16:	f10a 0320 	add.w	r3, sl, #32
   8bc1a:	f8ca 2018 	str.w	r2, [sl, #24]
   8bc1e:	6962      	ldr	r2, [r4, #20]
   8bc20:	3418      	adds	r4, #24
   8bc22:	f8ca 201c 	str.w	r2, [sl, #28]
   8bc26:	e6b3      	b.n	8b990 <_realloc_r+0x130>
   8bc28:	6921      	ldr	r1, [r4, #16]
   8bc2a:	f10a 0220 	add.w	r2, sl, #32
   8bc2e:	f8ca 1018 	str.w	r1, [sl, #24]
   8bc32:	6961      	ldr	r1, [r4, #20]
   8bc34:	3418      	adds	r4, #24
   8bc36:	f8ca 101c 	str.w	r1, [sl, #28]
   8bc3a:	e721      	b.n	8ba80 <_realloc_r+0x220>
   8bc3c:	20000a10 	.word	0x20000a10

0008bc40 <frexp>:
   8bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc42:	4617      	mov	r7, r2
   8bc44:	2200      	movs	r2, #0
   8bc46:	f8df c060 	ldr.w	ip, [pc, #96]	; 8bca8 <frexp+0x68>
   8bc4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8bc4e:	4563      	cmp	r3, ip
   8bc50:	4604      	mov	r4, r0
   8bc52:	460d      	mov	r5, r1
   8bc54:	603a      	str	r2, [r7, #0]
   8bc56:	dc22      	bgt.n	8bc9e <frexp+0x5e>
   8bc58:	4684      	mov	ip, r0
   8bc5a:	ea53 0c0c 	orrs.w	ip, r3, ip
   8bc5e:	d01e      	beq.n	8bc9e <frexp+0x5e>
   8bc60:	f8df c048 	ldr.w	ip, [pc, #72]	; 8bcac <frexp+0x6c>
   8bc64:	460e      	mov	r6, r1
   8bc66:	ea01 0c0c 	and.w	ip, r1, ip
   8bc6a:	f1bc 0f00 	cmp.w	ip, #0
   8bc6e:	d109      	bne.n	8bc84 <frexp+0x44>
   8bc70:	2200      	movs	r2, #0
   8bc72:	4b0c      	ldr	r3, [pc, #48]	; (8bca4 <frexp+0x64>)
   8bc74:	f000 fd0e 	bl	8c694 <__aeabi_dmul>
   8bc78:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8bc7c:	4604      	mov	r4, r0
   8bc7e:	460e      	mov	r6, r1
   8bc80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8bc84:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8bc88:	151b      	asrs	r3, r3, #20
   8bc8a:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8bc8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8bc92:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8bc96:	4413      	add	r3, r2
   8bc98:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8bc9c:	603b      	str	r3, [r7, #0]
   8bc9e:	4620      	mov	r0, r4
   8bca0:	4629      	mov	r1, r5
   8bca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bca4:	43500000 	.word	0x43500000
   8bca8:	7fefffff 	.word	0x7fefffff
   8bcac:	7ff00000 	.word	0x7ff00000

0008bcb0 <_sbrk_r>:
   8bcb0:	2200      	movs	r2, #0
   8bcb2:	b538      	push	{r3, r4, r5, lr}
   8bcb4:	4d06      	ldr	r5, [pc, #24]	; (8bcd0 <_sbrk_r+0x20>)
   8bcb6:	4604      	mov	r4, r0
   8bcb8:	4608      	mov	r0, r1
   8bcba:	602a      	str	r2, [r5, #0]
   8bcbc:	f7f7 ff24 	bl	83b08 <_sbrk>
   8bcc0:	1c43      	adds	r3, r0, #1
   8bcc2:	d000      	beq.n	8bcc6 <_sbrk_r+0x16>
   8bcc4:	bd38      	pop	{r3, r4, r5, pc}
   8bcc6:	682b      	ldr	r3, [r5, #0]
   8bcc8:	2b00      	cmp	r3, #0
   8bcca:	d0fb      	beq.n	8bcc4 <_sbrk_r+0x14>
   8bccc:	6023      	str	r3, [r4, #0]
   8bcce:	bd38      	pop	{r3, r4, r5, pc}
   8bcd0:	200014ac 	.word	0x200014ac

0008bcd4 <__sread>:
   8bcd4:	b510      	push	{r4, lr}
   8bcd6:	460c      	mov	r4, r1
   8bcd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bcdc:	f000 fab4 	bl	8c248 <_read_r>
   8bce0:	2800      	cmp	r0, #0
   8bce2:	db03      	blt.n	8bcec <__sread+0x18>
   8bce4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8bce6:	4403      	add	r3, r0
   8bce8:	6523      	str	r3, [r4, #80]	; 0x50
   8bcea:	bd10      	pop	{r4, pc}
   8bcec:	89a3      	ldrh	r3, [r4, #12]
   8bcee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8bcf2:	81a3      	strh	r3, [r4, #12]
   8bcf4:	bd10      	pop	{r4, pc}
   8bcf6:	bf00      	nop

0008bcf8 <__swrite>:
   8bcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bcfc:	460c      	mov	r4, r1
   8bcfe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8bd02:	461f      	mov	r7, r3
   8bd04:	05cb      	lsls	r3, r1, #23
   8bd06:	4616      	mov	r6, r2
   8bd08:	4605      	mov	r5, r0
   8bd0a:	d40b      	bmi.n	8bd24 <__swrite+0x2c>
   8bd0c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8bd10:	81a1      	strh	r1, [r4, #12]
   8bd12:	463b      	mov	r3, r7
   8bd14:	4632      	mov	r2, r6
   8bd16:	4628      	mov	r0, r5
   8bd18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bd1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8bd20:	f000 b91e 	b.w	8bf60 <_write_r>
   8bd24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bd28:	2302      	movs	r3, #2
   8bd2a:	2200      	movs	r2, #0
   8bd2c:	f000 fa76 	bl	8c21c <_lseek_r>
   8bd30:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8bd34:	e7ea      	b.n	8bd0c <__swrite+0x14>
   8bd36:	bf00      	nop

0008bd38 <__sseek>:
   8bd38:	b510      	push	{r4, lr}
   8bd3a:	460c      	mov	r4, r1
   8bd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bd40:	f000 fa6c 	bl	8c21c <_lseek_r>
   8bd44:	89a3      	ldrh	r3, [r4, #12]
   8bd46:	1c42      	adds	r2, r0, #1
   8bd48:	bf0e      	itee	eq
   8bd4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8bd4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8bd52:	6520      	strne	r0, [r4, #80]	; 0x50
   8bd54:	81a3      	strh	r3, [r4, #12]
   8bd56:	bd10      	pop	{r4, pc}

0008bd58 <__sclose>:
   8bd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bd5c:	f000 b9aa 	b.w	8c0b4 <_close_r>

0008bd60 <__ssprint_r>:
   8bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bd64:	6893      	ldr	r3, [r2, #8]
   8bd66:	4691      	mov	r9, r2
   8bd68:	b083      	sub	sp, #12
   8bd6a:	2b00      	cmp	r3, #0
   8bd6c:	d06d      	beq.n	8be4a <__ssprint_r+0xea>
   8bd6e:	6817      	ldr	r7, [r2, #0]
   8bd70:	4680      	mov	r8, r0
   8bd72:	460c      	mov	r4, r1
   8bd74:	6808      	ldr	r0, [r1, #0]
   8bd76:	688d      	ldr	r5, [r1, #8]
   8bd78:	3708      	adds	r7, #8
   8bd7a:	e043      	b.n	8be04 <__ssprint_r+0xa4>
   8bd7c:	89a3      	ldrh	r3, [r4, #12]
   8bd7e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bd82:	d02e      	beq.n	8bde2 <__ssprint_r+0x82>
   8bd84:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8bd88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8bd8c:	eba0 0a01 	sub.w	sl, r0, r1
   8bd90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8bd94:	eb0a 0006 	add.w	r0, sl, r6
   8bd98:	106d      	asrs	r5, r5, #1
   8bd9a:	3001      	adds	r0, #1
   8bd9c:	42a8      	cmp	r0, r5
   8bd9e:	462a      	mov	r2, r5
   8bda0:	bf84      	itt	hi
   8bda2:	4605      	movhi	r5, r0
   8bda4:	462a      	movhi	r2, r5
   8bda6:	055b      	lsls	r3, r3, #21
   8bda8:	d536      	bpl.n	8be18 <__ssprint_r+0xb8>
   8bdaa:	4611      	mov	r1, r2
   8bdac:	4640      	mov	r0, r8
   8bdae:	f7fe fe61 	bl	8aa74 <_malloc_r>
   8bdb2:	2800      	cmp	r0, #0
   8bdb4:	d03a      	beq.n	8be2c <__ssprint_r+0xcc>
   8bdb6:	4652      	mov	r2, sl
   8bdb8:	6921      	ldr	r1, [r4, #16]
   8bdba:	9001      	str	r0, [sp, #4]
   8bdbc:	f7fa faa2 	bl	86304 <memcpy>
   8bdc0:	89a2      	ldrh	r2, [r4, #12]
   8bdc2:	9b01      	ldr	r3, [sp, #4]
   8bdc4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bdc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bdcc:	81a2      	strh	r2, [r4, #12]
   8bdce:	eba5 020a 	sub.w	r2, r5, sl
   8bdd2:	eb03 000a 	add.w	r0, r3, sl
   8bdd6:	6165      	str	r5, [r4, #20]
   8bdd8:	46b2      	mov	sl, r6
   8bdda:	4635      	mov	r5, r6
   8bddc:	6123      	str	r3, [r4, #16]
   8bdde:	6020      	str	r0, [r4, #0]
   8bde0:	60a2      	str	r2, [r4, #8]
   8bde2:	4659      	mov	r1, fp
   8bde4:	4652      	mov	r2, sl
   8bde6:	f7ff f949 	bl	8b07c <memmove>
   8bdea:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8bdee:	68a1      	ldr	r1, [r4, #8]
   8bdf0:	6820      	ldr	r0, [r4, #0]
   8bdf2:	1b4d      	subs	r5, r1, r5
   8bdf4:	4450      	add	r0, sl
   8bdf6:	1b9e      	subs	r6, r3, r6
   8bdf8:	60a5      	str	r5, [r4, #8]
   8bdfa:	6020      	str	r0, [r4, #0]
   8bdfc:	f8c9 6008 	str.w	r6, [r9, #8]
   8be00:	b31e      	cbz	r6, 8be4a <__ssprint_r+0xea>
   8be02:	3708      	adds	r7, #8
   8be04:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8be08:	2e00      	cmp	r6, #0
   8be0a:	d0fa      	beq.n	8be02 <__ssprint_r+0xa2>
   8be0c:	42b5      	cmp	r5, r6
   8be0e:	46aa      	mov	sl, r5
   8be10:	d9b4      	bls.n	8bd7c <__ssprint_r+0x1c>
   8be12:	4635      	mov	r5, r6
   8be14:	46b2      	mov	sl, r6
   8be16:	e7e4      	b.n	8bde2 <__ssprint_r+0x82>
   8be18:	4640      	mov	r0, r8
   8be1a:	f7ff fd21 	bl	8b860 <_realloc_r>
   8be1e:	4603      	mov	r3, r0
   8be20:	2800      	cmp	r0, #0
   8be22:	d1d4      	bne.n	8bdce <__ssprint_r+0x6e>
   8be24:	4640      	mov	r0, r8
   8be26:	6921      	ldr	r1, [r4, #16]
   8be28:	f7fe fafa 	bl	8a420 <_free_r>
   8be2c:	230c      	movs	r3, #12
   8be2e:	2200      	movs	r2, #0
   8be30:	f04f 30ff 	mov.w	r0, #4294967295
   8be34:	f8c8 3000 	str.w	r3, [r8]
   8be38:	89a3      	ldrh	r3, [r4, #12]
   8be3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8be3e:	81a3      	strh	r3, [r4, #12]
   8be40:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8be44:	b003      	add	sp, #12
   8be46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be4a:	2000      	movs	r0, #0
   8be4c:	f8c9 0004 	str.w	r0, [r9, #4]
   8be50:	b003      	add	sp, #12
   8be52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be56:	bf00      	nop

0008be58 <__swbuf_r>:
   8be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8be5a:	460d      	mov	r5, r1
   8be5c:	4614      	mov	r4, r2
   8be5e:	4606      	mov	r6, r0
   8be60:	b110      	cbz	r0, 8be68 <__swbuf_r+0x10>
   8be62:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8be64:	2b00      	cmp	r3, #0
   8be66:	d043      	beq.n	8bef0 <__swbuf_r+0x98>
   8be68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8be6c:	69a3      	ldr	r3, [r4, #24]
   8be6e:	0717      	lsls	r7, r2, #28
   8be70:	60a3      	str	r3, [r4, #8]
   8be72:	b290      	uxth	r0, r2
   8be74:	d51b      	bpl.n	8beae <__swbuf_r+0x56>
   8be76:	6923      	ldr	r3, [r4, #16]
   8be78:	b1cb      	cbz	r3, 8beae <__swbuf_r+0x56>
   8be7a:	b2ed      	uxtb	r5, r5
   8be7c:	0481      	lsls	r1, r0, #18
   8be7e:	462f      	mov	r7, r5
   8be80:	d522      	bpl.n	8bec8 <__swbuf_r+0x70>
   8be82:	6822      	ldr	r2, [r4, #0]
   8be84:	6961      	ldr	r1, [r4, #20]
   8be86:	1ad3      	subs	r3, r2, r3
   8be88:	4299      	cmp	r1, r3
   8be8a:	dd29      	ble.n	8bee0 <__swbuf_r+0x88>
   8be8c:	3301      	adds	r3, #1
   8be8e:	68a1      	ldr	r1, [r4, #8]
   8be90:	1c50      	adds	r0, r2, #1
   8be92:	3901      	subs	r1, #1
   8be94:	60a1      	str	r1, [r4, #8]
   8be96:	6020      	str	r0, [r4, #0]
   8be98:	7015      	strb	r5, [r2, #0]
   8be9a:	6962      	ldr	r2, [r4, #20]
   8be9c:	429a      	cmp	r2, r3
   8be9e:	d02a      	beq.n	8bef6 <__swbuf_r+0x9e>
   8bea0:	89a3      	ldrh	r3, [r4, #12]
   8bea2:	07db      	lsls	r3, r3, #31
   8bea4:	d501      	bpl.n	8beaa <__swbuf_r+0x52>
   8bea6:	2d0a      	cmp	r5, #10
   8bea8:	d025      	beq.n	8bef6 <__swbuf_r+0x9e>
   8beaa:	4638      	mov	r0, r7
   8beac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8beae:	4621      	mov	r1, r4
   8beb0:	4630      	mov	r0, r6
   8beb2:	f7fd f82f 	bl	88f14 <__swsetup_r>
   8beb6:	bb20      	cbnz	r0, 8bf02 <__swbuf_r+0xaa>
   8beb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bebc:	b2ed      	uxtb	r5, r5
   8bebe:	b290      	uxth	r0, r2
   8bec0:	0481      	lsls	r1, r0, #18
   8bec2:	462f      	mov	r7, r5
   8bec4:	6923      	ldr	r3, [r4, #16]
   8bec6:	d4dc      	bmi.n	8be82 <__swbuf_r+0x2a>
   8bec8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8beca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8bece:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8bed2:	81a2      	strh	r2, [r4, #12]
   8bed4:	6822      	ldr	r2, [r4, #0]
   8bed6:	6661      	str	r1, [r4, #100]	; 0x64
   8bed8:	6961      	ldr	r1, [r4, #20]
   8beda:	1ad3      	subs	r3, r2, r3
   8bedc:	4299      	cmp	r1, r3
   8bede:	dcd5      	bgt.n	8be8c <__swbuf_r+0x34>
   8bee0:	4621      	mov	r1, r4
   8bee2:	4630      	mov	r0, r6
   8bee4:	f7fe f91c 	bl	8a120 <_fflush_r>
   8bee8:	b958      	cbnz	r0, 8bf02 <__swbuf_r+0xaa>
   8beea:	2301      	movs	r3, #1
   8beec:	6822      	ldr	r2, [r4, #0]
   8beee:	e7ce      	b.n	8be8e <__swbuf_r+0x36>
   8bef0:	f7fe f972 	bl	8a1d8 <__sinit>
   8bef4:	e7b8      	b.n	8be68 <__swbuf_r+0x10>
   8bef6:	4621      	mov	r1, r4
   8bef8:	4630      	mov	r0, r6
   8befa:	f7fe f911 	bl	8a120 <_fflush_r>
   8befe:	2800      	cmp	r0, #0
   8bf00:	d0d3      	beq.n	8beaa <__swbuf_r+0x52>
   8bf02:	f04f 37ff 	mov.w	r7, #4294967295
   8bf06:	e7d0      	b.n	8beaa <__swbuf_r+0x52>

0008bf08 <_wcrtomb_r>:
   8bf08:	b570      	push	{r4, r5, r6, lr}
   8bf0a:	4606      	mov	r6, r0
   8bf0c:	461d      	mov	r5, r3
   8bf0e:	b084      	sub	sp, #16
   8bf10:	b139      	cbz	r1, 8bf22 <_wcrtomb_r+0x1a>
   8bf12:	4c0b      	ldr	r4, [pc, #44]	; (8bf40 <_wcrtomb_r+0x38>)
   8bf14:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8bf18:	47a0      	blx	r4
   8bf1a:	1c43      	adds	r3, r0, #1
   8bf1c:	d00a      	beq.n	8bf34 <_wcrtomb_r+0x2c>
   8bf1e:	b004      	add	sp, #16
   8bf20:	bd70      	pop	{r4, r5, r6, pc}
   8bf22:	460c      	mov	r4, r1
   8bf24:	4906      	ldr	r1, [pc, #24]	; (8bf40 <_wcrtomb_r+0x38>)
   8bf26:	4622      	mov	r2, r4
   8bf28:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8bf2c:	a901      	add	r1, sp, #4
   8bf2e:	47a0      	blx	r4
   8bf30:	1c43      	adds	r3, r0, #1
   8bf32:	d1f4      	bne.n	8bf1e <_wcrtomb_r+0x16>
   8bf34:	2200      	movs	r2, #0
   8bf36:	238a      	movs	r3, #138	; 0x8a
   8bf38:	602a      	str	r2, [r5, #0]
   8bf3a:	6033      	str	r3, [r6, #0]
   8bf3c:	b004      	add	sp, #16
   8bf3e:	bd70      	pop	{r4, r5, r6, pc}
   8bf40:	200008a4 	.word	0x200008a4

0008bf44 <__ascii_wctomb>:
   8bf44:	4603      	mov	r3, r0
   8bf46:	b149      	cbz	r1, 8bf5c <__ascii_wctomb+0x18>
   8bf48:	2aff      	cmp	r2, #255	; 0xff
   8bf4a:	d802      	bhi.n	8bf52 <__ascii_wctomb+0xe>
   8bf4c:	2001      	movs	r0, #1
   8bf4e:	700a      	strb	r2, [r1, #0]
   8bf50:	4770      	bx	lr
   8bf52:	228a      	movs	r2, #138	; 0x8a
   8bf54:	f04f 30ff 	mov.w	r0, #4294967295
   8bf58:	601a      	str	r2, [r3, #0]
   8bf5a:	4770      	bx	lr
   8bf5c:	4608      	mov	r0, r1
   8bf5e:	4770      	bx	lr

0008bf60 <_write_r>:
   8bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bf62:	460f      	mov	r7, r1
   8bf64:	2600      	movs	r6, #0
   8bf66:	4d08      	ldr	r5, [pc, #32]	; (8bf88 <_write_r+0x28>)
   8bf68:	4611      	mov	r1, r2
   8bf6a:	4604      	mov	r4, r0
   8bf6c:	461a      	mov	r2, r3
   8bf6e:	4638      	mov	r0, r7
   8bf70:	602e      	str	r6, [r5, #0]
   8bf72:	f7fa f959 	bl	86228 <_write>
   8bf76:	1c43      	adds	r3, r0, #1
   8bf78:	d000      	beq.n	8bf7c <_write_r+0x1c>
   8bf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bf7c:	682b      	ldr	r3, [r5, #0]
   8bf7e:	2b00      	cmp	r3, #0
   8bf80:	d0fb      	beq.n	8bf7a <_write_r+0x1a>
   8bf82:	6023      	str	r3, [r4, #0]
   8bf84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bf86:	bf00      	nop
   8bf88:	200014ac 	.word	0x200014ac

0008bf8c <__register_exitproc>:
   8bf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8bf90:	f8df a080 	ldr.w	sl, [pc, #128]	; 8c014 <__register_exitproc+0x88>
   8bf94:	4606      	mov	r6, r0
   8bf96:	f8da 0000 	ldr.w	r0, [sl]
   8bf9a:	4698      	mov	r8, r3
   8bf9c:	460f      	mov	r7, r1
   8bf9e:	4691      	mov	r9, r2
   8bfa0:	f7fe fcec 	bl	8a97c <__retarget_lock_acquire_recursive>
   8bfa4:	4b1a      	ldr	r3, [pc, #104]	; (8c010 <__register_exitproc+0x84>)
   8bfa6:	681b      	ldr	r3, [r3, #0]
   8bfa8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8bfac:	b324      	cbz	r4, 8bff8 <__register_exitproc+0x6c>
   8bfae:	6865      	ldr	r5, [r4, #4]
   8bfb0:	2d1f      	cmp	r5, #31
   8bfb2:	dc26      	bgt.n	8c002 <__register_exitproc+0x76>
   8bfb4:	b95e      	cbnz	r6, 8bfce <__register_exitproc+0x42>
   8bfb6:	1c6b      	adds	r3, r5, #1
   8bfb8:	3502      	adds	r5, #2
   8bfba:	f8da 0000 	ldr.w	r0, [sl]
   8bfbe:	6063      	str	r3, [r4, #4]
   8bfc0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8bfc4:	f7fe fcdc 	bl	8a980 <__retarget_lock_release_recursive>
   8bfc8:	2000      	movs	r0, #0
   8bfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bfce:	2301      	movs	r3, #1
   8bfd0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8bfd4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8bfd8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8bfdc:	40ab      	lsls	r3, r5
   8bfde:	431a      	orrs	r2, r3
   8bfe0:	2e02      	cmp	r6, #2
   8bfe2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8bfe6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8bfea:	d1e4      	bne.n	8bfb6 <__register_exitproc+0x2a>
   8bfec:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8bff0:	4313      	orrs	r3, r2
   8bff2:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8bff6:	e7de      	b.n	8bfb6 <__register_exitproc+0x2a>
   8bff8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8bffc:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8c000:	e7d5      	b.n	8bfae <__register_exitproc+0x22>
   8c002:	f8da 0000 	ldr.w	r0, [sl]
   8c006:	f7fe fcbb 	bl	8a980 <__retarget_lock_release_recursive>
   8c00a:	f04f 30ff 	mov.w	r0, #4294967295
   8c00e:	e7dc      	b.n	8bfca <__register_exitproc+0x3e>
   8c010:	0008cfc0 	.word	0x0008cfc0
   8c014:	200008a0 	.word	0x200008a0

0008c018 <__assert_func>:
   8c018:	4614      	mov	r4, r2
   8c01a:	b500      	push	{lr}
   8c01c:	4d09      	ldr	r5, [pc, #36]	; (8c044 <__assert_func+0x2c>)
   8c01e:	461a      	mov	r2, r3
   8c020:	4603      	mov	r3, r0
   8c022:	6828      	ldr	r0, [r5, #0]
   8c024:	b085      	sub	sp, #20
   8c026:	68c0      	ldr	r0, [r0, #12]
   8c028:	b144      	cbz	r4, 8c03c <__assert_func+0x24>
   8c02a:	4d07      	ldr	r5, [pc, #28]	; (8c048 <__assert_func+0x30>)
   8c02c:	9100      	str	r1, [sp, #0]
   8c02e:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8c032:	4906      	ldr	r1, [pc, #24]	; (8c04c <__assert_func+0x34>)
   8c034:	f000 f8b6 	bl	8c1a4 <fiprintf>
   8c038:	f000 f91c 	bl	8c274 <abort>
   8c03c:	4d04      	ldr	r5, [pc, #16]	; (8c050 <__assert_func+0x38>)
   8c03e:	462c      	mov	r4, r5
   8c040:	e7f4      	b.n	8c02c <__assert_func+0x14>
   8c042:	bf00      	nop
   8c044:	20000470 	.word	0x20000470
   8c048:	0008d274 	.word	0x0008d274
   8c04c:	0008d284 	.word	0x0008d284
   8c050:	0008d280 	.word	0x0008d280

0008c054 <_calloc_r>:
   8c054:	b510      	push	{r4, lr}
   8c056:	fb02 f101 	mul.w	r1, r2, r1
   8c05a:	f7fe fd0b 	bl	8aa74 <_malloc_r>
   8c05e:	4604      	mov	r4, r0
   8c060:	b168      	cbz	r0, 8c07e <_calloc_r+0x2a>
   8c062:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c066:	f022 0203 	bic.w	r2, r2, #3
   8c06a:	3a04      	subs	r2, #4
   8c06c:	2a24      	cmp	r2, #36	; 0x24
   8c06e:	d818      	bhi.n	8c0a2 <_calloc_r+0x4e>
   8c070:	2a13      	cmp	r2, #19
   8c072:	d806      	bhi.n	8c082 <_calloc_r+0x2e>
   8c074:	4602      	mov	r2, r0
   8c076:	2300      	movs	r3, #0
   8c078:	e9c2 3300 	strd	r3, r3, [r2]
   8c07c:	6093      	str	r3, [r2, #8]
   8c07e:	4620      	mov	r0, r4
   8c080:	bd10      	pop	{r4, pc}
   8c082:	2300      	movs	r3, #0
   8c084:	2a1b      	cmp	r2, #27
   8c086:	e9c0 3300 	strd	r3, r3, [r0]
   8c08a:	d90f      	bls.n	8c0ac <_calloc_r+0x58>
   8c08c:	2a24      	cmp	r2, #36	; 0x24
   8c08e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8c092:	bf0a      	itet	eq
   8c094:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8c098:	f100 0210 	addne.w	r2, r0, #16
   8c09c:	f100 0218 	addeq.w	r2, r0, #24
   8c0a0:	e7e9      	b.n	8c076 <_calloc_r+0x22>
   8c0a2:	2100      	movs	r1, #0
   8c0a4:	f7fa f9a4 	bl	863f0 <memset>
   8c0a8:	4620      	mov	r0, r4
   8c0aa:	bd10      	pop	{r4, pc}
   8c0ac:	f100 0208 	add.w	r2, r0, #8
   8c0b0:	e7e1      	b.n	8c076 <_calloc_r+0x22>
   8c0b2:	bf00      	nop

0008c0b4 <_close_r>:
   8c0b4:	2200      	movs	r2, #0
   8c0b6:	b538      	push	{r3, r4, r5, lr}
   8c0b8:	4d06      	ldr	r5, [pc, #24]	; (8c0d4 <_close_r+0x20>)
   8c0ba:	4604      	mov	r4, r0
   8c0bc:	4608      	mov	r0, r1
   8c0be:	602a      	str	r2, [r5, #0]
   8c0c0:	f7f7 fd4e 	bl	83b60 <_close>
   8c0c4:	1c43      	adds	r3, r0, #1
   8c0c6:	d000      	beq.n	8c0ca <_close_r+0x16>
   8c0c8:	bd38      	pop	{r3, r4, r5, pc}
   8c0ca:	682b      	ldr	r3, [r5, #0]
   8c0cc:	2b00      	cmp	r3, #0
   8c0ce:	d0fb      	beq.n	8c0c8 <_close_r+0x14>
   8c0d0:	6023      	str	r3, [r4, #0]
   8c0d2:	bd38      	pop	{r3, r4, r5, pc}
   8c0d4:	200014ac 	.word	0x200014ac

0008c0d8 <_fclose_r>:
   8c0d8:	b570      	push	{r4, r5, r6, lr}
   8c0da:	2900      	cmp	r1, #0
   8c0dc:	d04b      	beq.n	8c176 <_fclose_r+0x9e>
   8c0de:	460c      	mov	r4, r1
   8c0e0:	4605      	mov	r5, r0
   8c0e2:	b110      	cbz	r0, 8c0ea <_fclose_r+0x12>
   8c0e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c0e6:	2b00      	cmp	r3, #0
   8c0e8:	d048      	beq.n	8c17c <_fclose_r+0xa4>
   8c0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c0ec:	07d8      	lsls	r0, r3, #31
   8c0ee:	d534      	bpl.n	8c15a <_fclose_r+0x82>
   8c0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c0f4:	2b00      	cmp	r3, #0
   8c0f6:	d03e      	beq.n	8c176 <_fclose_r+0x9e>
   8c0f8:	4621      	mov	r1, r4
   8c0fa:	4628      	mov	r0, r5
   8c0fc:	f7fd ff78 	bl	89ff0 <__sflush_r>
   8c100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8c102:	4606      	mov	r6, r0
   8c104:	b133      	cbz	r3, 8c114 <_fclose_r+0x3c>
   8c106:	4628      	mov	r0, r5
   8c108:	69e1      	ldr	r1, [r4, #28]
   8c10a:	4798      	blx	r3
   8c10c:	2800      	cmp	r0, #0
   8c10e:	bfb8      	it	lt
   8c110:	f04f 36ff 	movlt.w	r6, #4294967295
   8c114:	89a3      	ldrh	r3, [r4, #12]
   8c116:	061a      	lsls	r2, r3, #24
   8c118:	d43b      	bmi.n	8c192 <_fclose_r+0xba>
   8c11a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c11c:	b141      	cbz	r1, 8c130 <_fclose_r+0x58>
   8c11e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c122:	4299      	cmp	r1, r3
   8c124:	d002      	beq.n	8c12c <_fclose_r+0x54>
   8c126:	4628      	mov	r0, r5
   8c128:	f7fe f97a 	bl	8a420 <_free_r>
   8c12c:	2300      	movs	r3, #0
   8c12e:	6323      	str	r3, [r4, #48]	; 0x30
   8c130:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8c132:	b121      	cbz	r1, 8c13e <_fclose_r+0x66>
   8c134:	4628      	mov	r0, r5
   8c136:	f7fe f973 	bl	8a420 <_free_r>
   8c13a:	2300      	movs	r3, #0
   8c13c:	6463      	str	r3, [r4, #68]	; 0x44
   8c13e:	f7fe f879 	bl	8a234 <__sfp_lock_acquire>
   8c142:	2200      	movs	r2, #0
   8c144:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c146:	81a2      	strh	r2, [r4, #12]
   8c148:	07db      	lsls	r3, r3, #31
   8c14a:	d527      	bpl.n	8c19c <_fclose_r+0xc4>
   8c14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c14e:	f7fe fc13 	bl	8a978 <__retarget_lock_close_recursive>
   8c152:	f7fe f875 	bl	8a240 <__sfp_lock_release>
   8c156:	4630      	mov	r0, r6
   8c158:	bd70      	pop	{r4, r5, r6, pc}
   8c15a:	89a3      	ldrh	r3, [r4, #12]
   8c15c:	0599      	lsls	r1, r3, #22
   8c15e:	d4cb      	bmi.n	8c0f8 <_fclose_r+0x20>
   8c160:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c162:	f7fe fc0b 	bl	8a97c <__retarget_lock_acquire_recursive>
   8c166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c16a:	2b00      	cmp	r3, #0
   8c16c:	d1c4      	bne.n	8c0f8 <_fclose_r+0x20>
   8c16e:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8c170:	f016 0601 	ands.w	r6, r6, #1
   8c174:	d008      	beq.n	8c188 <_fclose_r+0xb0>
   8c176:	2600      	movs	r6, #0
   8c178:	4630      	mov	r0, r6
   8c17a:	bd70      	pop	{r4, r5, r6, pc}
   8c17c:	f7fe f82c 	bl	8a1d8 <__sinit>
   8c180:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c182:	07d8      	lsls	r0, r3, #31
   8c184:	d4b4      	bmi.n	8c0f0 <_fclose_r+0x18>
   8c186:	e7e8      	b.n	8c15a <_fclose_r+0x82>
   8c188:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c18a:	f7fe fbf9 	bl	8a980 <__retarget_lock_release_recursive>
   8c18e:	4630      	mov	r0, r6
   8c190:	bd70      	pop	{r4, r5, r6, pc}
   8c192:	4628      	mov	r0, r5
   8c194:	6921      	ldr	r1, [r4, #16]
   8c196:	f7fe f943 	bl	8a420 <_free_r>
   8c19a:	e7be      	b.n	8c11a <_fclose_r+0x42>
   8c19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c19e:	f7fe fbef 	bl	8a980 <__retarget_lock_release_recursive>
   8c1a2:	e7d3      	b.n	8c14c <_fclose_r+0x74>

0008c1a4 <fiprintf>:
   8c1a4:	b40e      	push	{r1, r2, r3}
   8c1a6:	b510      	push	{r4, lr}
   8c1a8:	b083      	sub	sp, #12
   8c1aa:	ab05      	add	r3, sp, #20
   8c1ac:	4c06      	ldr	r4, [pc, #24]	; (8c1c8 <fiprintf+0x24>)
   8c1ae:	f853 2b04 	ldr.w	r2, [r3], #4
   8c1b2:	4601      	mov	r1, r0
   8c1b4:	6820      	ldr	r0, [r4, #0]
   8c1b6:	9301      	str	r3, [sp, #4]
   8c1b8:	f7fb ffd2 	bl	88160 <_vfiprintf_r>
   8c1bc:	b003      	add	sp, #12
   8c1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8c1c2:	b003      	add	sp, #12
   8c1c4:	4770      	bx	lr
   8c1c6:	bf00      	nop
   8c1c8:	20000470 	.word	0x20000470

0008c1cc <_fstat_r>:
   8c1cc:	b570      	push	{r4, r5, r6, lr}
   8c1ce:	460c      	mov	r4, r1
   8c1d0:	4603      	mov	r3, r0
   8c1d2:	2600      	movs	r6, #0
   8c1d4:	4d07      	ldr	r5, [pc, #28]	; (8c1f4 <_fstat_r+0x28>)
   8c1d6:	4620      	mov	r0, r4
   8c1d8:	4611      	mov	r1, r2
   8c1da:	461c      	mov	r4, r3
   8c1dc:	602e      	str	r6, [r5, #0]
   8c1de:	f7f7 fcca 	bl	83b76 <_fstat>
   8c1e2:	1c43      	adds	r3, r0, #1
   8c1e4:	d000      	beq.n	8c1e8 <_fstat_r+0x1c>
   8c1e6:	bd70      	pop	{r4, r5, r6, pc}
   8c1e8:	682b      	ldr	r3, [r5, #0]
   8c1ea:	2b00      	cmp	r3, #0
   8c1ec:	d0fb      	beq.n	8c1e6 <_fstat_r+0x1a>
   8c1ee:	6023      	str	r3, [r4, #0]
   8c1f0:	bd70      	pop	{r4, r5, r6, pc}
   8c1f2:	bf00      	nop
   8c1f4:	200014ac 	.word	0x200014ac

0008c1f8 <_isatty_r>:
   8c1f8:	2200      	movs	r2, #0
   8c1fa:	b538      	push	{r3, r4, r5, lr}
   8c1fc:	4d06      	ldr	r5, [pc, #24]	; (8c218 <_isatty_r+0x20>)
   8c1fe:	4604      	mov	r4, r0
   8c200:	4608      	mov	r0, r1
   8c202:	602a      	str	r2, [r5, #0]
   8c204:	f7f7 fcc6 	bl	83b94 <_isatty>
   8c208:	1c43      	adds	r3, r0, #1
   8c20a:	d000      	beq.n	8c20e <_isatty_r+0x16>
   8c20c:	bd38      	pop	{r3, r4, r5, pc}
   8c20e:	682b      	ldr	r3, [r5, #0]
   8c210:	2b00      	cmp	r3, #0
   8c212:	d0fb      	beq.n	8c20c <_isatty_r+0x14>
   8c214:	6023      	str	r3, [r4, #0]
   8c216:	bd38      	pop	{r3, r4, r5, pc}
   8c218:	200014ac 	.word	0x200014ac

0008c21c <_lseek_r>:
   8c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c21e:	460f      	mov	r7, r1
   8c220:	2600      	movs	r6, #0
   8c222:	4d08      	ldr	r5, [pc, #32]	; (8c244 <_lseek_r+0x28>)
   8c224:	4611      	mov	r1, r2
   8c226:	4604      	mov	r4, r0
   8c228:	461a      	mov	r2, r3
   8c22a:	4638      	mov	r0, r7
   8c22c:	602e      	str	r6, [r5, #0]
   8c22e:	f7f7 fcbb 	bl	83ba8 <_lseek>
   8c232:	1c43      	adds	r3, r0, #1
   8c234:	d000      	beq.n	8c238 <_lseek_r+0x1c>
   8c236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c238:	682b      	ldr	r3, [r5, #0]
   8c23a:	2b00      	cmp	r3, #0
   8c23c:	d0fb      	beq.n	8c236 <_lseek_r+0x1a>
   8c23e:	6023      	str	r3, [r4, #0]
   8c240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c242:	bf00      	nop
   8c244:	200014ac 	.word	0x200014ac

0008c248 <_read_r>:
   8c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c24a:	460f      	mov	r7, r1
   8c24c:	2600      	movs	r6, #0
   8c24e:	4d08      	ldr	r5, [pc, #32]	; (8c270 <_read_r+0x28>)
   8c250:	4611      	mov	r1, r2
   8c252:	4604      	mov	r4, r0
   8c254:	461a      	mov	r2, r3
   8c256:	4638      	mov	r0, r7
   8c258:	602e      	str	r6, [r5, #0]
   8c25a:	f7f7 f957 	bl	8350c <_read>
   8c25e:	1c43      	adds	r3, r0, #1
   8c260:	d000      	beq.n	8c264 <_read_r+0x1c>
   8c262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c264:	682b      	ldr	r3, [r5, #0]
   8c266:	2b00      	cmp	r3, #0
   8c268:	d0fb      	beq.n	8c262 <_read_r+0x1a>
   8c26a:	6023      	str	r3, [r4, #0]
   8c26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c26e:	bf00      	nop
   8c270:	200014ac 	.word	0x200014ac

0008c274 <abort>:
   8c274:	2006      	movs	r0, #6
   8c276:	b508      	push	{r3, lr}
   8c278:	f000 f830 	bl	8c2dc <raise>
   8c27c:	2001      	movs	r0, #1
   8c27e:	f7f7 fc9f 	bl	83bc0 <_exit>
   8c282:	bf00      	nop

0008c284 <_raise_r>:
   8c284:	291f      	cmp	r1, #31
   8c286:	b538      	push	{r3, r4, r5, lr}
   8c288:	4605      	mov	r5, r0
   8c28a:	d821      	bhi.n	8c2d0 <_raise_r+0x4c>
   8c28c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8c290:	460c      	mov	r4, r1
   8c292:	b16a      	cbz	r2, 8c2b0 <_raise_r+0x2c>
   8c294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8c298:	b153      	cbz	r3, 8c2b0 <_raise_r+0x2c>
   8c29a:	2b01      	cmp	r3, #1
   8c29c:	d016      	beq.n	8c2cc <_raise_r+0x48>
   8c29e:	1c59      	adds	r1, r3, #1
   8c2a0:	d010      	beq.n	8c2c4 <_raise_r+0x40>
   8c2a2:	2500      	movs	r5, #0
   8c2a4:	4620      	mov	r0, r4
   8c2a6:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8c2aa:	4798      	blx	r3
   8c2ac:	4628      	mov	r0, r5
   8c2ae:	bd38      	pop	{r3, r4, r5, pc}
   8c2b0:	4628      	mov	r0, r5
   8c2b2:	f000 f831 	bl	8c318 <_getpid_r>
   8c2b6:	4622      	mov	r2, r4
   8c2b8:	4601      	mov	r1, r0
   8c2ba:	4628      	mov	r0, r5
   8c2bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c2c0:	f000 b814 	b.w	8c2ec <_kill_r>
   8c2c4:	2316      	movs	r3, #22
   8c2c6:	2001      	movs	r0, #1
   8c2c8:	602b      	str	r3, [r5, #0]
   8c2ca:	bd38      	pop	{r3, r4, r5, pc}
   8c2cc:	2000      	movs	r0, #0
   8c2ce:	bd38      	pop	{r3, r4, r5, pc}
   8c2d0:	2316      	movs	r3, #22
   8c2d2:	f04f 30ff 	mov.w	r0, #4294967295
   8c2d6:	602b      	str	r3, [r5, #0]
   8c2d8:	bd38      	pop	{r3, r4, r5, pc}
   8c2da:	bf00      	nop

0008c2dc <raise>:
   8c2dc:	4b02      	ldr	r3, [pc, #8]	; (8c2e8 <raise+0xc>)
   8c2de:	4601      	mov	r1, r0
   8c2e0:	6818      	ldr	r0, [r3, #0]
   8c2e2:	f7ff bfcf 	b.w	8c284 <_raise_r>
   8c2e6:	bf00      	nop
   8c2e8:	20000470 	.word	0x20000470

0008c2ec <_kill_r>:
   8c2ec:	b570      	push	{r4, r5, r6, lr}
   8c2ee:	460c      	mov	r4, r1
   8c2f0:	4603      	mov	r3, r0
   8c2f2:	2600      	movs	r6, #0
   8c2f4:	4d07      	ldr	r5, [pc, #28]	; (8c314 <_kill_r+0x28>)
   8c2f6:	4620      	mov	r0, r4
   8c2f8:	4611      	mov	r1, r2
   8c2fa:	461c      	mov	r4, r3
   8c2fc:	602e      	str	r6, [r5, #0]
   8c2fe:	f7f7 fc6d 	bl	83bdc <_kill>
   8c302:	1c43      	adds	r3, r0, #1
   8c304:	d000      	beq.n	8c308 <_kill_r+0x1c>
   8c306:	bd70      	pop	{r4, r5, r6, pc}
   8c308:	682b      	ldr	r3, [r5, #0]
   8c30a:	2b00      	cmp	r3, #0
   8c30c:	d0fb      	beq.n	8c306 <_kill_r+0x1a>
   8c30e:	6023      	str	r3, [r4, #0]
   8c310:	bd70      	pop	{r4, r5, r6, pc}
   8c312:	bf00      	nop
   8c314:	200014ac 	.word	0x200014ac

0008c318 <_getpid_r>:
   8c318:	f7f7 bc6a 	b.w	83bf0 <_getpid>

0008c31c <__aeabi_drsub>:
   8c31c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c320:	e002      	b.n	8c328 <__adddf3>
   8c322:	bf00      	nop

0008c324 <__aeabi_dsub>:
   8c324:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c328 <__adddf3>:
   8c328:	b530      	push	{r4, r5, lr}
   8c32a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c32e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c332:	ea94 0f05 	teq	r4, r5
   8c336:	bf08      	it	eq
   8c338:	ea90 0f02 	teqeq	r0, r2
   8c33c:	bf1f      	itttt	ne
   8c33e:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c342:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c346:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c34a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c34e:	f000 80e2 	beq.w	8c516 <__adddf3+0x1ee>
   8c352:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c356:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c35a:	bfb8      	it	lt
   8c35c:	426d      	neglt	r5, r5
   8c35e:	dd0c      	ble.n	8c37a <__adddf3+0x52>
   8c360:	442c      	add	r4, r5
   8c362:	ea80 0202 	eor.w	r2, r0, r2
   8c366:	ea81 0303 	eor.w	r3, r1, r3
   8c36a:	ea82 0000 	eor.w	r0, r2, r0
   8c36e:	ea83 0101 	eor.w	r1, r3, r1
   8c372:	ea80 0202 	eor.w	r2, r0, r2
   8c376:	ea81 0303 	eor.w	r3, r1, r3
   8c37a:	2d36      	cmp	r5, #54	; 0x36
   8c37c:	bf88      	it	hi
   8c37e:	bd30      	pophi	{r4, r5, pc}
   8c380:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c384:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c388:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c38c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c390:	d002      	beq.n	8c398 <__adddf3+0x70>
   8c392:	4240      	negs	r0, r0
   8c394:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c398:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c39c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c3a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c3a4:	d002      	beq.n	8c3ac <__adddf3+0x84>
   8c3a6:	4252      	negs	r2, r2
   8c3a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c3ac:	ea94 0f05 	teq	r4, r5
   8c3b0:	f000 80a7 	beq.w	8c502 <__adddf3+0x1da>
   8c3b4:	f1a4 0401 	sub.w	r4, r4, #1
   8c3b8:	f1d5 0e20 	rsbs	lr, r5, #32
   8c3bc:	db0d      	blt.n	8c3da <__adddf3+0xb2>
   8c3be:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c3c2:	fa22 f205 	lsr.w	r2, r2, r5
   8c3c6:	1880      	adds	r0, r0, r2
   8c3c8:	f141 0100 	adc.w	r1, r1, #0
   8c3cc:	fa03 f20e 	lsl.w	r2, r3, lr
   8c3d0:	1880      	adds	r0, r0, r2
   8c3d2:	fa43 f305 	asr.w	r3, r3, r5
   8c3d6:	4159      	adcs	r1, r3
   8c3d8:	e00e      	b.n	8c3f8 <__adddf3+0xd0>
   8c3da:	f1a5 0520 	sub.w	r5, r5, #32
   8c3de:	f10e 0e20 	add.w	lr, lr, #32
   8c3e2:	2a01      	cmp	r2, #1
   8c3e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c3e8:	bf28      	it	cs
   8c3ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c3ee:	fa43 f305 	asr.w	r3, r3, r5
   8c3f2:	18c0      	adds	r0, r0, r3
   8c3f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c3f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c3fc:	d507      	bpl.n	8c40e <__adddf3+0xe6>
   8c3fe:	f04f 0e00 	mov.w	lr, #0
   8c402:	f1dc 0c00 	rsbs	ip, ip, #0
   8c406:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c40a:	eb6e 0101 	sbc.w	r1, lr, r1
   8c40e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c412:	d31b      	bcc.n	8c44c <__adddf3+0x124>
   8c414:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c418:	d30c      	bcc.n	8c434 <__adddf3+0x10c>
   8c41a:	0849      	lsrs	r1, r1, #1
   8c41c:	ea5f 0030 	movs.w	r0, r0, rrx
   8c420:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c424:	f104 0401 	add.w	r4, r4, #1
   8c428:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c42c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c430:	f080 809a 	bcs.w	8c568 <__adddf3+0x240>
   8c434:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c438:	bf08      	it	eq
   8c43a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c43e:	f150 0000 	adcs.w	r0, r0, #0
   8c442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c446:	ea41 0105 	orr.w	r1, r1, r5
   8c44a:	bd30      	pop	{r4, r5, pc}
   8c44c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c450:	4140      	adcs	r0, r0
   8c452:	eb41 0101 	adc.w	r1, r1, r1
   8c456:	3c01      	subs	r4, #1
   8c458:	bf28      	it	cs
   8c45a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8c45e:	d2e9      	bcs.n	8c434 <__adddf3+0x10c>
   8c460:	f091 0f00 	teq	r1, #0
   8c464:	bf04      	itt	eq
   8c466:	4601      	moveq	r1, r0
   8c468:	2000      	moveq	r0, #0
   8c46a:	fab1 f381 	clz	r3, r1
   8c46e:	bf08      	it	eq
   8c470:	3320      	addeq	r3, #32
   8c472:	f1a3 030b 	sub.w	r3, r3, #11
   8c476:	f1b3 0220 	subs.w	r2, r3, #32
   8c47a:	da0c      	bge.n	8c496 <__adddf3+0x16e>
   8c47c:	320c      	adds	r2, #12
   8c47e:	dd08      	ble.n	8c492 <__adddf3+0x16a>
   8c480:	f102 0c14 	add.w	ip, r2, #20
   8c484:	f1c2 020c 	rsb	r2, r2, #12
   8c488:	fa01 f00c 	lsl.w	r0, r1, ip
   8c48c:	fa21 f102 	lsr.w	r1, r1, r2
   8c490:	e00c      	b.n	8c4ac <__adddf3+0x184>
   8c492:	f102 0214 	add.w	r2, r2, #20
   8c496:	bfd8      	it	le
   8c498:	f1c2 0c20 	rsble	ip, r2, #32
   8c49c:	fa01 f102 	lsl.w	r1, r1, r2
   8c4a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c4a4:	bfdc      	itt	le
   8c4a6:	ea41 010c 	orrle.w	r1, r1, ip
   8c4aa:	4090      	lslle	r0, r2
   8c4ac:	1ae4      	subs	r4, r4, r3
   8c4ae:	bfa2      	ittt	ge
   8c4b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c4b4:	4329      	orrge	r1, r5
   8c4b6:	bd30      	popge	{r4, r5, pc}
   8c4b8:	ea6f 0404 	mvn.w	r4, r4
   8c4bc:	3c1f      	subs	r4, #31
   8c4be:	da1c      	bge.n	8c4fa <__adddf3+0x1d2>
   8c4c0:	340c      	adds	r4, #12
   8c4c2:	dc0e      	bgt.n	8c4e2 <__adddf3+0x1ba>
   8c4c4:	f104 0414 	add.w	r4, r4, #20
   8c4c8:	f1c4 0220 	rsb	r2, r4, #32
   8c4cc:	fa20 f004 	lsr.w	r0, r0, r4
   8c4d0:	fa01 f302 	lsl.w	r3, r1, r2
   8c4d4:	ea40 0003 	orr.w	r0, r0, r3
   8c4d8:	fa21 f304 	lsr.w	r3, r1, r4
   8c4dc:	ea45 0103 	orr.w	r1, r5, r3
   8c4e0:	bd30      	pop	{r4, r5, pc}
   8c4e2:	f1c4 040c 	rsb	r4, r4, #12
   8c4e6:	f1c4 0220 	rsb	r2, r4, #32
   8c4ea:	fa20 f002 	lsr.w	r0, r0, r2
   8c4ee:	fa01 f304 	lsl.w	r3, r1, r4
   8c4f2:	ea40 0003 	orr.w	r0, r0, r3
   8c4f6:	4629      	mov	r1, r5
   8c4f8:	bd30      	pop	{r4, r5, pc}
   8c4fa:	fa21 f004 	lsr.w	r0, r1, r4
   8c4fe:	4629      	mov	r1, r5
   8c500:	bd30      	pop	{r4, r5, pc}
   8c502:	f094 0f00 	teq	r4, #0
   8c506:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c50a:	bf06      	itte	eq
   8c50c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c510:	3401      	addeq	r4, #1
   8c512:	3d01      	subne	r5, #1
   8c514:	e74e      	b.n	8c3b4 <__adddf3+0x8c>
   8c516:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c51a:	bf18      	it	ne
   8c51c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c520:	d029      	beq.n	8c576 <__adddf3+0x24e>
   8c522:	ea94 0f05 	teq	r4, r5
   8c526:	bf08      	it	eq
   8c528:	ea90 0f02 	teqeq	r0, r2
   8c52c:	d005      	beq.n	8c53a <__adddf3+0x212>
   8c52e:	ea54 0c00 	orrs.w	ip, r4, r0
   8c532:	bf04      	itt	eq
   8c534:	4619      	moveq	r1, r3
   8c536:	4610      	moveq	r0, r2
   8c538:	bd30      	pop	{r4, r5, pc}
   8c53a:	ea91 0f03 	teq	r1, r3
   8c53e:	bf1e      	ittt	ne
   8c540:	2100      	movne	r1, #0
   8c542:	2000      	movne	r0, #0
   8c544:	bd30      	popne	{r4, r5, pc}
   8c546:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c54a:	d105      	bne.n	8c558 <__adddf3+0x230>
   8c54c:	0040      	lsls	r0, r0, #1
   8c54e:	4149      	adcs	r1, r1
   8c550:	bf28      	it	cs
   8c552:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c556:	bd30      	pop	{r4, r5, pc}
   8c558:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c55c:	bf3c      	itt	cc
   8c55e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c562:	bd30      	popcc	{r4, r5, pc}
   8c564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c568:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c56c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c570:	f04f 0000 	mov.w	r0, #0
   8c574:	bd30      	pop	{r4, r5, pc}
   8c576:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c57a:	bf1a      	itte	ne
   8c57c:	4619      	movne	r1, r3
   8c57e:	4610      	movne	r0, r2
   8c580:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c584:	bf1c      	itt	ne
   8c586:	460b      	movne	r3, r1
   8c588:	4602      	movne	r2, r0
   8c58a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c58e:	bf06      	itte	eq
   8c590:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c594:	ea91 0f03 	teqeq	r1, r3
   8c598:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c59c:	bd30      	pop	{r4, r5, pc}
   8c59e:	bf00      	nop

0008c5a0 <__aeabi_ui2d>:
   8c5a0:	f090 0f00 	teq	r0, #0
   8c5a4:	bf04      	itt	eq
   8c5a6:	2100      	moveq	r1, #0
   8c5a8:	4770      	bxeq	lr
   8c5aa:	b530      	push	{r4, r5, lr}
   8c5ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c5b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c5b4:	f04f 0500 	mov.w	r5, #0
   8c5b8:	f04f 0100 	mov.w	r1, #0
   8c5bc:	e750      	b.n	8c460 <__adddf3+0x138>
   8c5be:	bf00      	nop

0008c5c0 <__aeabi_i2d>:
   8c5c0:	f090 0f00 	teq	r0, #0
   8c5c4:	bf04      	itt	eq
   8c5c6:	2100      	moveq	r1, #0
   8c5c8:	4770      	bxeq	lr
   8c5ca:	b530      	push	{r4, r5, lr}
   8c5cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c5d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c5d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c5d8:	bf48      	it	mi
   8c5da:	4240      	negmi	r0, r0
   8c5dc:	f04f 0100 	mov.w	r1, #0
   8c5e0:	e73e      	b.n	8c460 <__adddf3+0x138>
   8c5e2:	bf00      	nop

0008c5e4 <__aeabi_f2d>:
   8c5e4:	0042      	lsls	r2, r0, #1
   8c5e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c5ea:	ea4f 0131 	mov.w	r1, r1, rrx
   8c5ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c5f2:	bf1f      	itttt	ne
   8c5f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c5f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c5fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c600:	4770      	bxne	lr
   8c602:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8c606:	bf08      	it	eq
   8c608:	4770      	bxeq	lr
   8c60a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8c60e:	bf04      	itt	eq
   8c610:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8c614:	4770      	bxeq	lr
   8c616:	b530      	push	{r4, r5, lr}
   8c618:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c61c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c624:	e71c      	b.n	8c460 <__adddf3+0x138>
   8c626:	bf00      	nop

0008c628 <__aeabi_ul2d>:
   8c628:	ea50 0201 	orrs.w	r2, r0, r1
   8c62c:	bf08      	it	eq
   8c62e:	4770      	bxeq	lr
   8c630:	b530      	push	{r4, r5, lr}
   8c632:	f04f 0500 	mov.w	r5, #0
   8c636:	e00a      	b.n	8c64e <__aeabi_l2d+0x16>

0008c638 <__aeabi_l2d>:
   8c638:	ea50 0201 	orrs.w	r2, r0, r1
   8c63c:	bf08      	it	eq
   8c63e:	4770      	bxeq	lr
   8c640:	b530      	push	{r4, r5, lr}
   8c642:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c646:	d502      	bpl.n	8c64e <__aeabi_l2d+0x16>
   8c648:	4240      	negs	r0, r0
   8c64a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c64e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c652:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c656:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c65a:	f43f aed8 	beq.w	8c40e <__adddf3+0xe6>
   8c65e:	f04f 0203 	mov.w	r2, #3
   8c662:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c666:	bf18      	it	ne
   8c668:	3203      	addne	r2, #3
   8c66a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c66e:	bf18      	it	ne
   8c670:	3203      	addne	r2, #3
   8c672:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c676:	f1c2 0320 	rsb	r3, r2, #32
   8c67a:	fa00 fc03 	lsl.w	ip, r0, r3
   8c67e:	fa20 f002 	lsr.w	r0, r0, r2
   8c682:	fa01 fe03 	lsl.w	lr, r1, r3
   8c686:	ea40 000e 	orr.w	r0, r0, lr
   8c68a:	fa21 f102 	lsr.w	r1, r1, r2
   8c68e:	4414      	add	r4, r2
   8c690:	e6bd      	b.n	8c40e <__adddf3+0xe6>
   8c692:	bf00      	nop

0008c694 <__aeabi_dmul>:
   8c694:	b570      	push	{r4, r5, r6, lr}
   8c696:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c69a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c69e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c6a2:	bf1d      	ittte	ne
   8c6a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c6a8:	ea94 0f0c 	teqne	r4, ip
   8c6ac:	ea95 0f0c 	teqne	r5, ip
   8c6b0:	f000 f8de 	bleq	8c870 <__aeabi_dmul+0x1dc>
   8c6b4:	442c      	add	r4, r5
   8c6b6:	ea81 0603 	eor.w	r6, r1, r3
   8c6ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c6be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c6c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c6c6:	bf18      	it	ne
   8c6c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c6cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c6d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c6d4:	d038      	beq.n	8c748 <__aeabi_dmul+0xb4>
   8c6d6:	fba0 ce02 	umull	ip, lr, r0, r2
   8c6da:	f04f 0500 	mov.w	r5, #0
   8c6de:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c6e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c6e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c6ea:	f04f 0600 	mov.w	r6, #0
   8c6ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c6f2:	f09c 0f00 	teq	ip, #0
   8c6f6:	bf18      	it	ne
   8c6f8:	f04e 0e01 	orrne.w	lr, lr, #1
   8c6fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c700:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c704:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c708:	d204      	bcs.n	8c714 <__aeabi_dmul+0x80>
   8c70a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c70e:	416d      	adcs	r5, r5
   8c710:	eb46 0606 	adc.w	r6, r6, r6
   8c714:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c718:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c71c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c720:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c724:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c728:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c72c:	bf88      	it	hi
   8c72e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c732:	d81e      	bhi.n	8c772 <__aeabi_dmul+0xde>
   8c734:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c738:	bf08      	it	eq
   8c73a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c73e:	f150 0000 	adcs.w	r0, r0, #0
   8c742:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c746:	bd70      	pop	{r4, r5, r6, pc}
   8c748:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c74c:	ea46 0101 	orr.w	r1, r6, r1
   8c750:	ea40 0002 	orr.w	r0, r0, r2
   8c754:	ea81 0103 	eor.w	r1, r1, r3
   8c758:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c75c:	bfc2      	ittt	gt
   8c75e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c766:	bd70      	popgt	{r4, r5, r6, pc}
   8c768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c76c:	f04f 0e00 	mov.w	lr, #0
   8c770:	3c01      	subs	r4, #1
   8c772:	f300 80ab 	bgt.w	8c8cc <__aeabi_dmul+0x238>
   8c776:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c77a:	bfde      	ittt	le
   8c77c:	2000      	movle	r0, #0
   8c77e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c782:	bd70      	pople	{r4, r5, r6, pc}
   8c784:	f1c4 0400 	rsb	r4, r4, #0
   8c788:	3c20      	subs	r4, #32
   8c78a:	da35      	bge.n	8c7f8 <__aeabi_dmul+0x164>
   8c78c:	340c      	adds	r4, #12
   8c78e:	dc1b      	bgt.n	8c7c8 <__aeabi_dmul+0x134>
   8c790:	f104 0414 	add.w	r4, r4, #20
   8c794:	f1c4 0520 	rsb	r5, r4, #32
   8c798:	fa00 f305 	lsl.w	r3, r0, r5
   8c79c:	fa20 f004 	lsr.w	r0, r0, r4
   8c7a0:	fa01 f205 	lsl.w	r2, r1, r5
   8c7a4:	ea40 0002 	orr.w	r0, r0, r2
   8c7a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c7ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c7b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c7b4:	fa21 f604 	lsr.w	r6, r1, r4
   8c7b8:	eb42 0106 	adc.w	r1, r2, r6
   8c7bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c7c0:	bf08      	it	eq
   8c7c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c7c6:	bd70      	pop	{r4, r5, r6, pc}
   8c7c8:	f1c4 040c 	rsb	r4, r4, #12
   8c7cc:	f1c4 0520 	rsb	r5, r4, #32
   8c7d0:	fa00 f304 	lsl.w	r3, r0, r4
   8c7d4:	fa20 f005 	lsr.w	r0, r0, r5
   8c7d8:	fa01 f204 	lsl.w	r2, r1, r4
   8c7dc:	ea40 0002 	orr.w	r0, r0, r2
   8c7e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c7e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c7e8:	f141 0100 	adc.w	r1, r1, #0
   8c7ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c7f0:	bf08      	it	eq
   8c7f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c7f6:	bd70      	pop	{r4, r5, r6, pc}
   8c7f8:	f1c4 0520 	rsb	r5, r4, #32
   8c7fc:	fa00 f205 	lsl.w	r2, r0, r5
   8c800:	ea4e 0e02 	orr.w	lr, lr, r2
   8c804:	fa20 f304 	lsr.w	r3, r0, r4
   8c808:	fa01 f205 	lsl.w	r2, r1, r5
   8c80c:	ea43 0302 	orr.w	r3, r3, r2
   8c810:	fa21 f004 	lsr.w	r0, r1, r4
   8c814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c818:	fa21 f204 	lsr.w	r2, r1, r4
   8c81c:	ea20 0002 	bic.w	r0, r0, r2
   8c820:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c824:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c828:	bf08      	it	eq
   8c82a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c82e:	bd70      	pop	{r4, r5, r6, pc}
   8c830:	f094 0f00 	teq	r4, #0
   8c834:	d10f      	bne.n	8c856 <__aeabi_dmul+0x1c2>
   8c836:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c83a:	0040      	lsls	r0, r0, #1
   8c83c:	eb41 0101 	adc.w	r1, r1, r1
   8c840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c844:	bf08      	it	eq
   8c846:	3c01      	subeq	r4, #1
   8c848:	d0f7      	beq.n	8c83a <__aeabi_dmul+0x1a6>
   8c84a:	ea41 0106 	orr.w	r1, r1, r6
   8c84e:	f095 0f00 	teq	r5, #0
   8c852:	bf18      	it	ne
   8c854:	4770      	bxne	lr
   8c856:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c85a:	0052      	lsls	r2, r2, #1
   8c85c:	eb43 0303 	adc.w	r3, r3, r3
   8c860:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c864:	bf08      	it	eq
   8c866:	3d01      	subeq	r5, #1
   8c868:	d0f7      	beq.n	8c85a <__aeabi_dmul+0x1c6>
   8c86a:	ea43 0306 	orr.w	r3, r3, r6
   8c86e:	4770      	bx	lr
   8c870:	ea94 0f0c 	teq	r4, ip
   8c874:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c878:	bf18      	it	ne
   8c87a:	ea95 0f0c 	teqne	r5, ip
   8c87e:	d00c      	beq.n	8c89a <__aeabi_dmul+0x206>
   8c880:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c884:	bf18      	it	ne
   8c886:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c88a:	d1d1      	bne.n	8c830 <__aeabi_dmul+0x19c>
   8c88c:	ea81 0103 	eor.w	r1, r1, r3
   8c890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c894:	f04f 0000 	mov.w	r0, #0
   8c898:	bd70      	pop	{r4, r5, r6, pc}
   8c89a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c89e:	bf06      	itte	eq
   8c8a0:	4610      	moveq	r0, r2
   8c8a2:	4619      	moveq	r1, r3
   8c8a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c8a8:	d019      	beq.n	8c8de <__aeabi_dmul+0x24a>
   8c8aa:	ea94 0f0c 	teq	r4, ip
   8c8ae:	d102      	bne.n	8c8b6 <__aeabi_dmul+0x222>
   8c8b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c8b4:	d113      	bne.n	8c8de <__aeabi_dmul+0x24a>
   8c8b6:	ea95 0f0c 	teq	r5, ip
   8c8ba:	d105      	bne.n	8c8c8 <__aeabi_dmul+0x234>
   8c8bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c8c0:	bf1c      	itt	ne
   8c8c2:	4610      	movne	r0, r2
   8c8c4:	4619      	movne	r1, r3
   8c8c6:	d10a      	bne.n	8c8de <__aeabi_dmul+0x24a>
   8c8c8:	ea81 0103 	eor.w	r1, r1, r3
   8c8cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c8d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c8d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c8d8:	f04f 0000 	mov.w	r0, #0
   8c8dc:	bd70      	pop	{r4, r5, r6, pc}
   8c8de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c8e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c8e6:	bd70      	pop	{r4, r5, r6, pc}

0008c8e8 <__aeabi_ddiv>:
   8c8e8:	b570      	push	{r4, r5, r6, lr}
   8c8ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c8ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c8f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c8f6:	bf1d      	ittte	ne
   8c8f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c8fc:	ea94 0f0c 	teqne	r4, ip
   8c900:	ea95 0f0c 	teqne	r5, ip
   8c904:	f000 f8a7 	bleq	8ca56 <__aeabi_ddiv+0x16e>
   8c908:	eba4 0405 	sub.w	r4, r4, r5
   8c90c:	ea81 0e03 	eor.w	lr, r1, r3
   8c910:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c914:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c918:	f000 8088 	beq.w	8ca2c <__aeabi_ddiv+0x144>
   8c91c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c920:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c924:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c928:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c92c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c930:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c934:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c938:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c93c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c940:	429d      	cmp	r5, r3
   8c942:	bf08      	it	eq
   8c944:	4296      	cmpeq	r6, r2
   8c946:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c94a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c94e:	d202      	bcs.n	8c956 <__aeabi_ddiv+0x6e>
   8c950:	085b      	lsrs	r3, r3, #1
   8c952:	ea4f 0232 	mov.w	r2, r2, rrx
   8c956:	1ab6      	subs	r6, r6, r2
   8c958:	eb65 0503 	sbc.w	r5, r5, r3
   8c95c:	085b      	lsrs	r3, r3, #1
   8c95e:	ea4f 0232 	mov.w	r2, r2, rrx
   8c962:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c966:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c96a:	ebb6 0e02 	subs.w	lr, r6, r2
   8c96e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c972:	bf22      	ittt	cs
   8c974:	1ab6      	subcs	r6, r6, r2
   8c976:	4675      	movcs	r5, lr
   8c978:	ea40 000c 	orrcs.w	r0, r0, ip
   8c97c:	085b      	lsrs	r3, r3, #1
   8c97e:	ea4f 0232 	mov.w	r2, r2, rrx
   8c982:	ebb6 0e02 	subs.w	lr, r6, r2
   8c986:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c98a:	bf22      	ittt	cs
   8c98c:	1ab6      	subcs	r6, r6, r2
   8c98e:	4675      	movcs	r5, lr
   8c990:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c994:	085b      	lsrs	r3, r3, #1
   8c996:	ea4f 0232 	mov.w	r2, r2, rrx
   8c99a:	ebb6 0e02 	subs.w	lr, r6, r2
   8c99e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c9a2:	bf22      	ittt	cs
   8c9a4:	1ab6      	subcs	r6, r6, r2
   8c9a6:	4675      	movcs	r5, lr
   8c9a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c9ac:	085b      	lsrs	r3, r3, #1
   8c9ae:	ea4f 0232 	mov.w	r2, r2, rrx
   8c9b2:	ebb6 0e02 	subs.w	lr, r6, r2
   8c9b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c9ba:	bf22      	ittt	cs
   8c9bc:	1ab6      	subcs	r6, r6, r2
   8c9be:	4675      	movcs	r5, lr
   8c9c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c9c4:	ea55 0e06 	orrs.w	lr, r5, r6
   8c9c8:	d018      	beq.n	8c9fc <__aeabi_ddiv+0x114>
   8c9ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c9ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c9d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c9d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c9da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c9de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c9e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c9e6:	d1c0      	bne.n	8c96a <__aeabi_ddiv+0x82>
   8c9e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c9ec:	d10b      	bne.n	8ca06 <__aeabi_ddiv+0x11e>
   8c9ee:	ea41 0100 	orr.w	r1, r1, r0
   8c9f2:	f04f 0000 	mov.w	r0, #0
   8c9f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c9fa:	e7b6      	b.n	8c96a <__aeabi_ddiv+0x82>
   8c9fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8ca00:	bf04      	itt	eq
   8ca02:	4301      	orreq	r1, r0
   8ca04:	2000      	moveq	r0, #0
   8ca06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8ca0a:	bf88      	it	hi
   8ca0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8ca10:	f63f aeaf 	bhi.w	8c772 <__aeabi_dmul+0xde>
   8ca14:	ebb5 0c03 	subs.w	ip, r5, r3
   8ca18:	bf04      	itt	eq
   8ca1a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8ca1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8ca22:	f150 0000 	adcs.w	r0, r0, #0
   8ca26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8ca2a:	bd70      	pop	{r4, r5, r6, pc}
   8ca2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8ca30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8ca34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8ca38:	bfc2      	ittt	gt
   8ca3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8ca3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8ca42:	bd70      	popgt	{r4, r5, r6, pc}
   8ca44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8ca48:	f04f 0e00 	mov.w	lr, #0
   8ca4c:	3c01      	subs	r4, #1
   8ca4e:	e690      	b.n	8c772 <__aeabi_dmul+0xde>
   8ca50:	ea45 0e06 	orr.w	lr, r5, r6
   8ca54:	e68d      	b.n	8c772 <__aeabi_dmul+0xde>
   8ca56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8ca5a:	ea94 0f0c 	teq	r4, ip
   8ca5e:	bf08      	it	eq
   8ca60:	ea95 0f0c 	teqeq	r5, ip
   8ca64:	f43f af3b 	beq.w	8c8de <__aeabi_dmul+0x24a>
   8ca68:	ea94 0f0c 	teq	r4, ip
   8ca6c:	d10a      	bne.n	8ca84 <__aeabi_ddiv+0x19c>
   8ca6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8ca72:	f47f af34 	bne.w	8c8de <__aeabi_dmul+0x24a>
   8ca76:	ea95 0f0c 	teq	r5, ip
   8ca7a:	f47f af25 	bne.w	8c8c8 <__aeabi_dmul+0x234>
   8ca7e:	4610      	mov	r0, r2
   8ca80:	4619      	mov	r1, r3
   8ca82:	e72c      	b.n	8c8de <__aeabi_dmul+0x24a>
   8ca84:	ea95 0f0c 	teq	r5, ip
   8ca88:	d106      	bne.n	8ca98 <__aeabi_ddiv+0x1b0>
   8ca8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8ca8e:	f43f aefd 	beq.w	8c88c <__aeabi_dmul+0x1f8>
   8ca92:	4610      	mov	r0, r2
   8ca94:	4619      	mov	r1, r3
   8ca96:	e722      	b.n	8c8de <__aeabi_dmul+0x24a>
   8ca98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8ca9c:	bf18      	it	ne
   8ca9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8caa2:	f47f aec5 	bne.w	8c830 <__aeabi_dmul+0x19c>
   8caa6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8caaa:	f47f af0d 	bne.w	8c8c8 <__aeabi_dmul+0x234>
   8caae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8cab2:	f47f aeeb 	bne.w	8c88c <__aeabi_dmul+0x1f8>
   8cab6:	e712      	b.n	8c8de <__aeabi_dmul+0x24a>

0008cab8 <__gedf2>:
   8cab8:	f04f 3cff 	mov.w	ip, #4294967295
   8cabc:	e006      	b.n	8cacc <__cmpdf2+0x4>
   8cabe:	bf00      	nop

0008cac0 <__ledf2>:
   8cac0:	f04f 0c01 	mov.w	ip, #1
   8cac4:	e002      	b.n	8cacc <__cmpdf2+0x4>
   8cac6:	bf00      	nop

0008cac8 <__cmpdf2>:
   8cac8:	f04f 0c01 	mov.w	ip, #1
   8cacc:	f84d cd04 	str.w	ip, [sp, #-4]!
   8cad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cadc:	bf18      	it	ne
   8cade:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8cae2:	d01b      	beq.n	8cb1c <__cmpdf2+0x54>
   8cae4:	b001      	add	sp, #4
   8cae6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8caea:	bf0c      	ite	eq
   8caec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8caf0:	ea91 0f03 	teqne	r1, r3
   8caf4:	bf02      	ittt	eq
   8caf6:	ea90 0f02 	teqeq	r0, r2
   8cafa:	2000      	moveq	r0, #0
   8cafc:	4770      	bxeq	lr
   8cafe:	f110 0f00 	cmn.w	r0, #0
   8cb02:	ea91 0f03 	teq	r1, r3
   8cb06:	bf58      	it	pl
   8cb08:	4299      	cmppl	r1, r3
   8cb0a:	bf08      	it	eq
   8cb0c:	4290      	cmpeq	r0, r2
   8cb0e:	bf2c      	ite	cs
   8cb10:	17d8      	asrcs	r0, r3, #31
   8cb12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8cb16:	f040 0001 	orr.w	r0, r0, #1
   8cb1a:	4770      	bx	lr
   8cb1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cb20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cb24:	d102      	bne.n	8cb2c <__cmpdf2+0x64>
   8cb26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8cb2a:	d107      	bne.n	8cb3c <__cmpdf2+0x74>
   8cb2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cb30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cb34:	d1d6      	bne.n	8cae4 <__cmpdf2+0x1c>
   8cb36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8cb3a:	d0d3      	beq.n	8cae4 <__cmpdf2+0x1c>
   8cb3c:	f85d 0b04 	ldr.w	r0, [sp], #4
   8cb40:	4770      	bx	lr
   8cb42:	bf00      	nop

0008cb44 <__aeabi_cdrcmple>:
   8cb44:	4684      	mov	ip, r0
   8cb46:	4610      	mov	r0, r2
   8cb48:	4662      	mov	r2, ip
   8cb4a:	468c      	mov	ip, r1
   8cb4c:	4619      	mov	r1, r3
   8cb4e:	4663      	mov	r3, ip
   8cb50:	e000      	b.n	8cb54 <__aeabi_cdcmpeq>
   8cb52:	bf00      	nop

0008cb54 <__aeabi_cdcmpeq>:
   8cb54:	b501      	push	{r0, lr}
   8cb56:	f7ff ffb7 	bl	8cac8 <__cmpdf2>
   8cb5a:	2800      	cmp	r0, #0
   8cb5c:	bf48      	it	mi
   8cb5e:	f110 0f00 	cmnmi.w	r0, #0
   8cb62:	bd01      	pop	{r0, pc}

0008cb64 <__aeabi_dcmpeq>:
   8cb64:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cb68:	f7ff fff4 	bl	8cb54 <__aeabi_cdcmpeq>
   8cb6c:	bf0c      	ite	eq
   8cb6e:	2001      	moveq	r0, #1
   8cb70:	2000      	movne	r0, #0
   8cb72:	f85d fb08 	ldr.w	pc, [sp], #8
   8cb76:	bf00      	nop

0008cb78 <__aeabi_dcmplt>:
   8cb78:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cb7c:	f7ff ffea 	bl	8cb54 <__aeabi_cdcmpeq>
   8cb80:	bf34      	ite	cc
   8cb82:	2001      	movcc	r0, #1
   8cb84:	2000      	movcs	r0, #0
   8cb86:	f85d fb08 	ldr.w	pc, [sp], #8
   8cb8a:	bf00      	nop

0008cb8c <__aeabi_dcmple>:
   8cb8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cb90:	f7ff ffe0 	bl	8cb54 <__aeabi_cdcmpeq>
   8cb94:	bf94      	ite	ls
   8cb96:	2001      	movls	r0, #1
   8cb98:	2000      	movhi	r0, #0
   8cb9a:	f85d fb08 	ldr.w	pc, [sp], #8
   8cb9e:	bf00      	nop

0008cba0 <__aeabi_dcmpge>:
   8cba0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cba4:	f7ff ffce 	bl	8cb44 <__aeabi_cdrcmple>
   8cba8:	bf94      	ite	ls
   8cbaa:	2001      	movls	r0, #1
   8cbac:	2000      	movhi	r0, #0
   8cbae:	f85d fb08 	ldr.w	pc, [sp], #8
   8cbb2:	bf00      	nop

0008cbb4 <__aeabi_dcmpgt>:
   8cbb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cbb8:	f7ff ffc4 	bl	8cb44 <__aeabi_cdrcmple>
   8cbbc:	bf34      	ite	cc
   8cbbe:	2001      	movcc	r0, #1
   8cbc0:	2000      	movcs	r0, #0
   8cbc2:	f85d fb08 	ldr.w	pc, [sp], #8
   8cbc6:	bf00      	nop

0008cbc8 <__aeabi_dcmpun>:
   8cbc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cbcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cbd0:	d102      	bne.n	8cbd8 <__aeabi_dcmpun+0x10>
   8cbd2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8cbd6:	d10a      	bne.n	8cbee <__aeabi_dcmpun+0x26>
   8cbd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cbdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cbe0:	d102      	bne.n	8cbe8 <__aeabi_dcmpun+0x20>
   8cbe2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8cbe6:	d102      	bne.n	8cbee <__aeabi_dcmpun+0x26>
   8cbe8:	f04f 0000 	mov.w	r0, #0
   8cbec:	4770      	bx	lr
   8cbee:	f04f 0001 	mov.w	r0, #1
   8cbf2:	4770      	bx	lr

0008cbf4 <__aeabi_d2iz>:
   8cbf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8cbf8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8cbfc:	d215      	bcs.n	8cc2a <__aeabi_d2iz+0x36>
   8cbfe:	d511      	bpl.n	8cc24 <__aeabi_d2iz+0x30>
   8cc00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8cc04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8cc08:	d912      	bls.n	8cc30 <__aeabi_d2iz+0x3c>
   8cc0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8cc0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8cc12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8cc16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8cc1a:	fa23 f002 	lsr.w	r0, r3, r2
   8cc1e:	bf18      	it	ne
   8cc20:	4240      	negne	r0, r0
   8cc22:	4770      	bx	lr
   8cc24:	f04f 0000 	mov.w	r0, #0
   8cc28:	4770      	bx	lr
   8cc2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8cc2e:	d105      	bne.n	8cc3c <__aeabi_d2iz+0x48>
   8cc30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8cc34:	bf08      	it	eq
   8cc36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8cc3a:	4770      	bx	lr
   8cc3c:	f04f 0000 	mov.w	r0, #0
   8cc40:	4770      	bx	lr
   8cc42:	bf00      	nop

0008cc44 <__aeabi_uldivmod>:
   8cc44:	b953      	cbnz	r3, 8cc5c <__aeabi_uldivmod+0x18>
   8cc46:	b94a      	cbnz	r2, 8cc5c <__aeabi_uldivmod+0x18>
   8cc48:	2900      	cmp	r1, #0
   8cc4a:	bf08      	it	eq
   8cc4c:	2800      	cmpeq	r0, #0
   8cc4e:	bf1c      	itt	ne
   8cc50:	f04f 31ff 	movne.w	r1, #4294967295
   8cc54:	f04f 30ff 	movne.w	r0, #4294967295
   8cc58:	f000 b96e 	b.w	8cf38 <__aeabi_idiv0>
   8cc5c:	f1ad 0c08 	sub.w	ip, sp, #8
   8cc60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8cc64:	f000 f806 	bl	8cc74 <__udivmoddi4>
   8cc68:	f8dd e004 	ldr.w	lr, [sp, #4]
   8cc6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8cc70:	b004      	add	sp, #16
   8cc72:	4770      	bx	lr

0008cc74 <__udivmoddi4>:
   8cc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8cc78:	9e08      	ldr	r6, [sp, #32]
   8cc7a:	460d      	mov	r5, r1
   8cc7c:	4604      	mov	r4, r0
   8cc7e:	468e      	mov	lr, r1
   8cc80:	2b00      	cmp	r3, #0
   8cc82:	f040 8083 	bne.w	8cd8c <__udivmoddi4+0x118>
   8cc86:	428a      	cmp	r2, r1
   8cc88:	4617      	mov	r7, r2
   8cc8a:	d947      	bls.n	8cd1c <__udivmoddi4+0xa8>
   8cc8c:	fab2 f382 	clz	r3, r2
   8cc90:	b14b      	cbz	r3, 8cca6 <__udivmoddi4+0x32>
   8cc92:	f1c3 0120 	rsb	r1, r3, #32
   8cc96:	fa05 fe03 	lsl.w	lr, r5, r3
   8cc9a:	fa20 f101 	lsr.w	r1, r0, r1
   8cc9e:	409f      	lsls	r7, r3
   8cca0:	ea41 0e0e 	orr.w	lr, r1, lr
   8cca4:	409c      	lsls	r4, r3
   8cca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8ccaa:	fbbe fcf8 	udiv	ip, lr, r8
   8ccae:	fa1f f987 	uxth.w	r9, r7
   8ccb2:	fb08 e21c 	mls	r2, r8, ip, lr
   8ccb6:	fb0c f009 	mul.w	r0, ip, r9
   8ccba:	0c21      	lsrs	r1, r4, #16
   8ccbc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   8ccc0:	4290      	cmp	r0, r2
   8ccc2:	d90a      	bls.n	8ccda <__udivmoddi4+0x66>
   8ccc4:	18ba      	adds	r2, r7, r2
   8ccc6:	f10c 31ff 	add.w	r1, ip, #4294967295
   8ccca:	f080 8118 	bcs.w	8cefe <__udivmoddi4+0x28a>
   8ccce:	4290      	cmp	r0, r2
   8ccd0:	f240 8115 	bls.w	8cefe <__udivmoddi4+0x28a>
   8ccd4:	f1ac 0c02 	sub.w	ip, ip, #2
   8ccd8:	443a      	add	r2, r7
   8ccda:	1a12      	subs	r2, r2, r0
   8ccdc:	fbb2 f0f8 	udiv	r0, r2, r8
   8cce0:	fb08 2210 	mls	r2, r8, r0, r2
   8cce4:	fb00 f109 	mul.w	r1, r0, r9
   8cce8:	b2a4      	uxth	r4, r4
   8ccea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   8ccee:	42a1      	cmp	r1, r4
   8ccf0:	d909      	bls.n	8cd06 <__udivmoddi4+0x92>
   8ccf2:	193c      	adds	r4, r7, r4
   8ccf4:	f100 32ff 	add.w	r2, r0, #4294967295
   8ccf8:	f080 8103 	bcs.w	8cf02 <__udivmoddi4+0x28e>
   8ccfc:	42a1      	cmp	r1, r4
   8ccfe:	f240 8100 	bls.w	8cf02 <__udivmoddi4+0x28e>
   8cd02:	3802      	subs	r0, #2
   8cd04:	443c      	add	r4, r7
   8cd06:	1a64      	subs	r4, r4, r1
   8cd08:	2100      	movs	r1, #0
   8cd0a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8cd0e:	b11e      	cbz	r6, 8cd18 <__udivmoddi4+0xa4>
   8cd10:	2200      	movs	r2, #0
   8cd12:	40dc      	lsrs	r4, r3
   8cd14:	e9c6 4200 	strd	r4, r2, [r6]
   8cd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8cd1c:	b902      	cbnz	r2, 8cd20 <__udivmoddi4+0xac>
   8cd1e:	deff      	udf	#255	; 0xff
   8cd20:	fab2 f382 	clz	r3, r2
   8cd24:	2b00      	cmp	r3, #0
   8cd26:	d14f      	bne.n	8cdc8 <__udivmoddi4+0x154>
   8cd28:	1a8d      	subs	r5, r1, r2
   8cd2a:	2101      	movs	r1, #1
   8cd2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   8cd30:	fa1f f882 	uxth.w	r8, r2
   8cd34:	fbb5 fcfe 	udiv	ip, r5, lr
   8cd38:	fb0e 551c 	mls	r5, lr, ip, r5
   8cd3c:	fb08 f00c 	mul.w	r0, r8, ip
   8cd40:	0c22      	lsrs	r2, r4, #16
   8cd42:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8cd46:	42a8      	cmp	r0, r5
   8cd48:	d907      	bls.n	8cd5a <__udivmoddi4+0xe6>
   8cd4a:	197d      	adds	r5, r7, r5
   8cd4c:	f10c 32ff 	add.w	r2, ip, #4294967295
   8cd50:	d202      	bcs.n	8cd58 <__udivmoddi4+0xe4>
   8cd52:	42a8      	cmp	r0, r5
   8cd54:	f200 80e9 	bhi.w	8cf2a <__udivmoddi4+0x2b6>
   8cd58:	4694      	mov	ip, r2
   8cd5a:	1a2d      	subs	r5, r5, r0
   8cd5c:	fbb5 f0fe 	udiv	r0, r5, lr
   8cd60:	fb0e 5510 	mls	r5, lr, r0, r5
   8cd64:	fb08 f800 	mul.w	r8, r8, r0
   8cd68:	b2a4      	uxth	r4, r4
   8cd6a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8cd6e:	45a0      	cmp	r8, r4
   8cd70:	d907      	bls.n	8cd82 <__udivmoddi4+0x10e>
   8cd72:	193c      	adds	r4, r7, r4
   8cd74:	f100 32ff 	add.w	r2, r0, #4294967295
   8cd78:	d202      	bcs.n	8cd80 <__udivmoddi4+0x10c>
   8cd7a:	45a0      	cmp	r8, r4
   8cd7c:	f200 80d9 	bhi.w	8cf32 <__udivmoddi4+0x2be>
   8cd80:	4610      	mov	r0, r2
   8cd82:	eba4 0408 	sub.w	r4, r4, r8
   8cd86:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8cd8a:	e7c0      	b.n	8cd0e <__udivmoddi4+0x9a>
   8cd8c:	428b      	cmp	r3, r1
   8cd8e:	d908      	bls.n	8cda2 <__udivmoddi4+0x12e>
   8cd90:	2e00      	cmp	r6, #0
   8cd92:	f000 80b1 	beq.w	8cef8 <__udivmoddi4+0x284>
   8cd96:	2100      	movs	r1, #0
   8cd98:	e9c6 0500 	strd	r0, r5, [r6]
   8cd9c:	4608      	mov	r0, r1
   8cd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8cda2:	fab3 f183 	clz	r1, r3
   8cda6:	2900      	cmp	r1, #0
   8cda8:	d14b      	bne.n	8ce42 <__udivmoddi4+0x1ce>
   8cdaa:	42ab      	cmp	r3, r5
   8cdac:	d302      	bcc.n	8cdb4 <__udivmoddi4+0x140>
   8cdae:	4282      	cmp	r2, r0
   8cdb0:	f200 80b9 	bhi.w	8cf26 <__udivmoddi4+0x2b2>
   8cdb4:	1a84      	subs	r4, r0, r2
   8cdb6:	eb65 0303 	sbc.w	r3, r5, r3
   8cdba:	2001      	movs	r0, #1
   8cdbc:	469e      	mov	lr, r3
   8cdbe:	2e00      	cmp	r6, #0
   8cdc0:	d0aa      	beq.n	8cd18 <__udivmoddi4+0xa4>
   8cdc2:	e9c6 4e00 	strd	r4, lr, [r6]
   8cdc6:	e7a7      	b.n	8cd18 <__udivmoddi4+0xa4>
   8cdc8:	409f      	lsls	r7, r3
   8cdca:	f1c3 0220 	rsb	r2, r3, #32
   8cdce:	40d1      	lsrs	r1, r2
   8cdd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   8cdd4:	fbb1 f0fe 	udiv	r0, r1, lr
   8cdd8:	fa1f f887 	uxth.w	r8, r7
   8cddc:	fb0e 1110 	mls	r1, lr, r0, r1
   8cde0:	fa24 f202 	lsr.w	r2, r4, r2
   8cde4:	409d      	lsls	r5, r3
   8cde6:	fb00 fc08 	mul.w	ip, r0, r8
   8cdea:	432a      	orrs	r2, r5
   8cdec:	0c15      	lsrs	r5, r2, #16
   8cdee:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8cdf2:	45ac      	cmp	ip, r5
   8cdf4:	fa04 f403 	lsl.w	r4, r4, r3
   8cdf8:	d909      	bls.n	8ce0e <__udivmoddi4+0x19a>
   8cdfa:	197d      	adds	r5, r7, r5
   8cdfc:	f100 31ff 	add.w	r1, r0, #4294967295
   8ce00:	f080 808f 	bcs.w	8cf22 <__udivmoddi4+0x2ae>
   8ce04:	45ac      	cmp	ip, r5
   8ce06:	f240 808c 	bls.w	8cf22 <__udivmoddi4+0x2ae>
   8ce0a:	3802      	subs	r0, #2
   8ce0c:	443d      	add	r5, r7
   8ce0e:	eba5 050c 	sub.w	r5, r5, ip
   8ce12:	fbb5 f1fe 	udiv	r1, r5, lr
   8ce16:	fb0e 5c11 	mls	ip, lr, r1, r5
   8ce1a:	fb01 f908 	mul.w	r9, r1, r8
   8ce1e:	b295      	uxth	r5, r2
   8ce20:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   8ce24:	45a9      	cmp	r9, r5
   8ce26:	d907      	bls.n	8ce38 <__udivmoddi4+0x1c4>
   8ce28:	197d      	adds	r5, r7, r5
   8ce2a:	f101 32ff 	add.w	r2, r1, #4294967295
   8ce2e:	d274      	bcs.n	8cf1a <__udivmoddi4+0x2a6>
   8ce30:	45a9      	cmp	r9, r5
   8ce32:	d972      	bls.n	8cf1a <__udivmoddi4+0x2a6>
   8ce34:	3902      	subs	r1, #2
   8ce36:	443d      	add	r5, r7
   8ce38:	eba5 0509 	sub.w	r5, r5, r9
   8ce3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   8ce40:	e778      	b.n	8cd34 <__udivmoddi4+0xc0>
   8ce42:	f1c1 0720 	rsb	r7, r1, #32
   8ce46:	408b      	lsls	r3, r1
   8ce48:	fa22 fc07 	lsr.w	ip, r2, r7
   8ce4c:	ea4c 0c03 	orr.w	ip, ip, r3
   8ce50:	fa25 f407 	lsr.w	r4, r5, r7
   8ce54:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   8ce58:	fbb4 f9fe 	udiv	r9, r4, lr
   8ce5c:	fa1f f88c 	uxth.w	r8, ip
   8ce60:	fb0e 4419 	mls	r4, lr, r9, r4
   8ce64:	fa20 f307 	lsr.w	r3, r0, r7
   8ce68:	fb09 fa08 	mul.w	sl, r9, r8
   8ce6c:	408d      	lsls	r5, r1
   8ce6e:	431d      	orrs	r5, r3
   8ce70:	0c2b      	lsrs	r3, r5, #16
   8ce72:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   8ce76:	45a2      	cmp	sl, r4
   8ce78:	fa02 f201 	lsl.w	r2, r2, r1
   8ce7c:	fa00 f301 	lsl.w	r3, r0, r1
   8ce80:	d909      	bls.n	8ce96 <__udivmoddi4+0x222>
   8ce82:	eb1c 0404 	adds.w	r4, ip, r4
   8ce86:	f109 30ff 	add.w	r0, r9, #4294967295
   8ce8a:	d248      	bcs.n	8cf1e <__udivmoddi4+0x2aa>
   8ce8c:	45a2      	cmp	sl, r4
   8ce8e:	d946      	bls.n	8cf1e <__udivmoddi4+0x2aa>
   8ce90:	f1a9 0902 	sub.w	r9, r9, #2
   8ce94:	4464      	add	r4, ip
   8ce96:	eba4 040a 	sub.w	r4, r4, sl
   8ce9a:	fbb4 f0fe 	udiv	r0, r4, lr
   8ce9e:	fb0e 4410 	mls	r4, lr, r0, r4
   8cea2:	fb00 fa08 	mul.w	sl, r0, r8
   8cea6:	b2ad      	uxth	r5, r5
   8cea8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8ceac:	45a2      	cmp	sl, r4
   8ceae:	d908      	bls.n	8cec2 <__udivmoddi4+0x24e>
   8ceb0:	eb1c 0404 	adds.w	r4, ip, r4
   8ceb4:	f100 35ff 	add.w	r5, r0, #4294967295
   8ceb8:	d22d      	bcs.n	8cf16 <__udivmoddi4+0x2a2>
   8ceba:	45a2      	cmp	sl, r4
   8cebc:	d92b      	bls.n	8cf16 <__udivmoddi4+0x2a2>
   8cebe:	3802      	subs	r0, #2
   8cec0:	4464      	add	r4, ip
   8cec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8cec6:	fba0 8902 	umull	r8, r9, r0, r2
   8ceca:	eba4 040a 	sub.w	r4, r4, sl
   8cece:	454c      	cmp	r4, r9
   8ced0:	46c6      	mov	lr, r8
   8ced2:	464d      	mov	r5, r9
   8ced4:	d319      	bcc.n	8cf0a <__udivmoddi4+0x296>
   8ced6:	d016      	beq.n	8cf06 <__udivmoddi4+0x292>
   8ced8:	b15e      	cbz	r6, 8cef2 <__udivmoddi4+0x27e>
   8ceda:	ebb3 020e 	subs.w	r2, r3, lr
   8cede:	eb64 0405 	sbc.w	r4, r4, r5
   8cee2:	fa04 f707 	lsl.w	r7, r4, r7
   8cee6:	fa22 f301 	lsr.w	r3, r2, r1
   8ceea:	431f      	orrs	r7, r3
   8ceec:	40cc      	lsrs	r4, r1
   8ceee:	e9c6 7400 	strd	r7, r4, [r6]
   8cef2:	2100      	movs	r1, #0
   8cef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8cef8:	4631      	mov	r1, r6
   8cefa:	4630      	mov	r0, r6
   8cefc:	e70c      	b.n	8cd18 <__udivmoddi4+0xa4>
   8cefe:	468c      	mov	ip, r1
   8cf00:	e6eb      	b.n	8ccda <__udivmoddi4+0x66>
   8cf02:	4610      	mov	r0, r2
   8cf04:	e6ff      	b.n	8cd06 <__udivmoddi4+0x92>
   8cf06:	4543      	cmp	r3, r8
   8cf08:	d2e6      	bcs.n	8ced8 <__udivmoddi4+0x264>
   8cf0a:	ebb8 0e02 	subs.w	lr, r8, r2
   8cf0e:	eb69 050c 	sbc.w	r5, r9, ip
   8cf12:	3801      	subs	r0, #1
   8cf14:	e7e0      	b.n	8ced8 <__udivmoddi4+0x264>
   8cf16:	4628      	mov	r0, r5
   8cf18:	e7d3      	b.n	8cec2 <__udivmoddi4+0x24e>
   8cf1a:	4611      	mov	r1, r2
   8cf1c:	e78c      	b.n	8ce38 <__udivmoddi4+0x1c4>
   8cf1e:	4681      	mov	r9, r0
   8cf20:	e7b9      	b.n	8ce96 <__udivmoddi4+0x222>
   8cf22:	4608      	mov	r0, r1
   8cf24:	e773      	b.n	8ce0e <__udivmoddi4+0x19a>
   8cf26:	4608      	mov	r0, r1
   8cf28:	e749      	b.n	8cdbe <__udivmoddi4+0x14a>
   8cf2a:	f1ac 0c02 	sub.w	ip, ip, #2
   8cf2e:	443d      	add	r5, r7
   8cf30:	e713      	b.n	8cd5a <__udivmoddi4+0xe6>
   8cf32:	3802      	subs	r0, #2
   8cf34:	443c      	add	r4, r7
   8cf36:	e724      	b.n	8cd82 <__udivmoddi4+0x10e>

0008cf38 <__aeabi_idiv0>:
   8cf38:	4770      	bx	lr
   8cf3a:	bf00      	nop
   8cf3c:	78383025 	.word	0x78383025
   8cf40:	00000000 	.word	0x00000000

0008cf44 <BUILD_DATE>:
   8cf44:	20677541 32203332 00313230              Aug 23 2021.

0008cf50 <BUILD_TIME>:
   8cf50:	353a3132 34313a39 00000000              21:59:14....

0008cf5c <LED_DESCRIPTOR>:
   8cf5c:	0000001d 00000001 0000001f 00000001     ................
   8cf6c:	74697845 20676e69 68746977 61747320     Exiting with sta
   8cf7c:	20737574 0a2e6425 00000000 00000000     tus %d..........
   8cf8c:	00000000 aaaaaa00 aaaaaaaa eeeeeeaa     ................
   8cf9c:	eeeeeeee fffffeee ffffffff ffffffff     ................
   8cfac:	dfbf7fff fdfbf7ef dfbf7efc fdfbf7ef     .........~......
   8cfbc:	0000007e                                ~...

0008cfc0 <_global_impure_ptr>:
   8cfc0:	20000478 00464e49 00666e69 004e414e     x.. INF.inf.NAN.
   8cfd0:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8cfe0:	66656463 00000000 33323130 37363534     cdef....01234567
   8cff0:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8d000:	0000296c 00000030                       l)..0...

0008d008 <blanks.7335>:
   8d008:	20202020 20202020 20202020 20202020                     

0008d018 <zeroes.7336>:
   8d018:	30303030 30303030 30303030 30303030     0000000000000000

0008d028 <blanks.7328>:
   8d028:	20202020 20202020 20202020 20202020                     

0008d038 <zeroes.7329>:
   8d038:	30303030 30303030 30303030 30303030     0000000000000000
   8d048:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8d058:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8d068:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8d078:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8d088:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8d098:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8d0a8:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8d0b8:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8d0c8:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8d0d8:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8d0e8:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8d0f8:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8d108:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8d118:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8d128:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8d138:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8d148:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8d158:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8d168:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008d178 <__mprec_bigtens>:
   8d178:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8d188:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8d198:	7f73bf3c 75154fdd                       <.s..O.u

0008d1a0 <__mprec_tens>:
   8d1a0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8d1b0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8d1c0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8d1d0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8d1e0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8d1f0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8d200:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8d210:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8d220:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8d230:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8d240:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8d250:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8d260:	79d99db4 44ea7843                       ...yCx.D

0008d268 <p05.6122>:
   8d268:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8d278:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8d288:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8d298:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8d2a8:	2520656e 25732564 00000a73              ne %d%s%s...

0008d2b4 <_ctype_>:
   8d2b4:	20202000 20202020 28282020 20282828     .         ((((( 
   8d2c4:	20202020 20202020 20202020 20202020                     
   8d2d4:	10108820 10101010 10101010 10101010      ...............
   8d2e4:	04040410 04040404 10040404 10101010     ................
   8d2f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8d304:	01010101 01010101 01010101 10101010     ................
   8d314:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8d324:	02020202 02020202 02020202 10101010     ................
   8d334:	00000020 00000000 00000000 00000000      ...............
   8d344:	00000000 00000000 00000000 00000000     ................
   8d354:	00000000 00000000 00000000 00000000     ................
   8d364:	00000000 00000000 00000000 00000000     ................
   8d374:	00000000 00000000 00000000 00000000     ................
   8d384:	00000000 00000000 00000000 00000000     ................
   8d394:	00000000 00000000 00000000 00000000     ................
   8d3a4:	00000000 00000000 00000000 00000000     ................
   8d3b4:	00000000                                ....

0008d3b8 <_init>:
   8d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d3ba:	bf00      	nop
   8d3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d3be:	bc08      	pop	{r3}
   8d3c0:	469e      	mov	lr, r3
   8d3c2:	4770      	bx	lr

0008d3c4 <__init_array_start>:
   8d3c4:	00088fe5 	.word	0x00088fe5

0008d3c8 <__frame_dummy_init_array_entry>:
   8d3c8:	000800e1                                ....

0008d3cc <_fini>:
   8d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d3ce:	bf00      	nop
   8d3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d3d2:	bc08      	pop	{r3}
   8d3d4:	469e      	mov	lr, r3
   8d3d6:	4770      	bx	lr

0008d3d8 <__do_global_dtors_aux_fini_array_entry>:
   8d3d8:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	200003cc 	.word	0x200003cc
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d206      	bcs.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d208      	bcs.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e3600 	.word	0x016e3600
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	02625a00 	.word	0x02625a00
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	00000000                                ....

20000280 <pwr_list>:
20000280:	000808bd 000808dd 000808fd              ............

2000028c <xram>:
2000028c:	60000000                                ...`

20000290 <main_b_vendor_enable>:
20000290:	00000001                                ....

20000294 <MS_OS_DESC>:
20000294:	0000000a 06030000 0014009e 49570003     ..............WI
200002a4:	4253554e 00000000 00000000 00800000     NUSB............
200002b4:	00070004 00440028 00760065 00630069     ....(.D.e.v.i.c.
200002c4:	00490065 0074006e 00720065 00610066     e.I.n.t.e.r.f.a.
200002d4:	00650063 00550047 00440049 004e0000     c.e.G.U.I.D...N.
200002e4:	0030007b 00430041 00320045 00330042     {.0.A.C.E.2.B.3.
200002f4:	002d0045 00420032 00450033 0032002d     E.-.2.B.3.E.-.2.
20000304:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
20000314:	0034002d 00310036 00300030 00430041     -.4.6.1.0.0.A.C.
20000324:	00320045 00330042 007d0045 00000000     E.2.B.3.E.}.....

20000334 <MS_BOS_PACKET>:
20000334:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
20000344:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
20000354:	00000000                                ....

20000358 <udc_string_desc_languageid>:
20000358:	04090304                                ....

2000035c <udc_string_manufacturer_name>:
2000035c:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
2000036c:	636e4920 0000002e                        Inc....

20000374 <udc_string_product_name>:
20000374:	57796850 70736968 72657265 4253552d     PhyWhisperer-USB
20000384:	00000000                                ....

20000388 <udc_string_desc>:
20000388:	00000300 00000000 00000000 00000000     ................
20000398:	00000000 00000000 00000000 00000000     ................
200003a8:	00000000 00000000 00000000 00000000     ................
200003b8:	00000000 00000000 00000000 00000000     ................
200003c8:	                                         ..

200003ca <g_interrupt_enabled>:
200003ca:	                                         ..

200003cc <SystemCoreClock>:
200003cc:	003d0900                                ..=.

200003d0 <udi_api_vendor>:
200003d0:	00084159 00084199 000841b5 00084209     YA...A...A...B..
200003e0:	00000000                                ....

200003e4 <udc_device_desc>:
200003e4:	02000112 40000000 c6102b3e 02010100     .......@>+......
200003f4:	00000103                                ....

200003f8 <udc_device_qual>:
200003f8:	0200060a 40000000 00000001              .......@....

20000404 <udc_desc_fs>:
20000404:	00200209 80000101 000409fa ffff0200     .. .............
20000414:	050700ff 00400281 02050700 00004002     ......@......@..

20000424 <udc_desc_hs>:
20000424:	00200209 80000101 000409fa ffff0200     .. .............
20000434:	050700ff 02000281 02050700 00020002     ................

20000444 <udi_apis>:
20000444:	200003d0                                ... 

20000448 <udc_config_lsfs>:
20000448:	20000404 20000444                       ... D.. 

20000450 <udc_config_hs>:
20000450:	20000424 20000444                       $.. D.. 

20000458 <udc_config>:
20000458:	200003e4 20000448 200003e4 200003f8     ... H.. ... ... 
20000468:	20000450 00000000                       P.. ....

20000470 <_impure_ptr>:
20000470:	20000478 00000000                       x.. ....

20000478 <impure_data>:
20000478:	00000000 20000764 200007cc 20000834     ....d.. ... 4.. 
20000488:	00000000 00000000 00000000 00000000     ................
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000000 00000000     ................
200004f8:	00000000 00000000 00000000 00000000     ................
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000001 00000000     ................
20000528:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000 00000000 00000000     ................
20000808:	00000000 00000000 00000000 00000000     ................
20000818:	00000000 00000000 00000000 00000000     ................
20000828:	00000000 00000000 00000000 00000000     ................
20000838:	00000000 00000000 00000000 00000000     ................
20000848:	00000000 00000000 00000000 00000000     ................
20000858:	00000000 00000000 00000000 00000000     ................
20000868:	00000000 00000000 00000000 00000000     ................
20000878:	00000000 00000000 00000000 00000000     ................
20000888:	00000000 00000000 00000000 00000000     ................
20000898:	00000000 00000000                       ........

200008a0 <__atexit_recursive_mutex>:
200008a0:	20001488                                ... 

200008a4 <__global_locale>:
200008a4:	00000043 00000000 00000000 00000000     C...............
200008b4:	00000000 00000000 00000000 00000000     ................
200008c4:	00000043 00000000 00000000 00000000     C...............
200008d4:	00000000 00000000 00000000 00000000     ................
200008e4:	00000043 00000000 00000000 00000000     C...............
200008f4:	00000000 00000000 00000000 00000000     ................
20000904:	00000043 00000000 00000000 00000000     C...............
20000914:	00000000 00000000 00000000 00000000     ................
20000924:	00000043 00000000 00000000 00000000     C...............
20000934:	00000000 00000000 00000000 00000000     ................
20000944:	00000043 00000000 00000000 00000000     C...............
20000954:	00000000 00000000 00000000 00000000     ................
20000964:	00000043 00000000 00000000 00000000     C...............
20000974:	00000000 00000000 00000000 00000000     ................
20000984:	0008bf45 0008afd1 00000000 0008d2b4     E...............
20000994:	0008d0f4 0008d280 0008d280 0008d280     ................
200009a4:	0008d280 0008d280 0008d280 0008d280     ................
200009b4:	0008d280 0008d280 ffffffff ffffffff     ................
200009c4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
200009d4:	00000000 00000000 00000000 00000000     ................
200009e4:	00000000 00000000 53410000 00494943     ..........ASCII.
200009f4:	00000000 00000000 00000000 00000000     ................
20000a04:	00000000 00000000 00000000              ............

20000a10 <__malloc_av_>:
20000a10:	00000000 00000000 20000a10 20000a10     ........... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8 20000de0 20000de0     ... ... ... ... 
20000df0:	20000de8 20000de8 20000df0 20000df0     ... ... ... ... 
20000e00:	20000df8 20000df8 20000e00 20000e00     ... ... ... ... 
20000e10:	20000e08 20000e08                       ... ... 

20000e18 <__malloc_sbrk_base>:
20000e18:	ffffffff                                ....

20000e1c <__malloc_trim_threshold>:
20000e1c:	00020000                                ....
